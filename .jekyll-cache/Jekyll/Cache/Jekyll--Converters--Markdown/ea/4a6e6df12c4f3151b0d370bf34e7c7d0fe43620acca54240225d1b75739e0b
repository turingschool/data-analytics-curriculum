I"V<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>test model validations, including presence, uniqueness, format, length, and exclusion/inclusion</li>
  <li>create and test custom validators</li>
  <li>test associations using <a href="http://matchers.shoulda.io/docs/v2.8.0/">shoulda-matchers</a></li>
  <li>create and test scopes</li>
  <li>create and test class methods</li>
</ul>

<h2 id="warmup">Warmup</h2>

<p>Clone this app: <code class="highlighter-rouge">git clone -b model-testing git@github.com:turingschool-examples/belibery.git</code>. Let’s walk through the schema to see what we already have. Then…</p>

<ul>
  <li>Generate a migration and model for donations (use <code class="highlighter-rouge">rails g model</code> to get the model and the migration). The migration needs to have an amount and a reference to the fans table. Migrate and look at the schema.</li>
  <li>Now, generate a migration that adds a <code class="highlighter-rouge">status</code> column (string) to the donations table. Migrate and look at the schema.</li>
  <li>Open your schema, and rollback. Now try to rollback two steps. What do you see?</li>
  <li>Migrate again to apply your migrations to the database.</li>
</ul>

<h2 id="getting-started-with-model-testing">Getting Started with Model Testing</h2>

<p>From the RailsGuides: “In Rails, models tests are what you write to test your models.”</p>

<p>If you use <code class="highlighter-rouge">rails g model Thing</code>, you’ll have a model test file available to you within the <code class="highlighter-rouge">test/models</code> folder. This is how the repo was initially set up for Fan and Location, so you already have these two test files.</p>

<p>However, if you need to create a model test by hand: <code class="highlighter-rouge">$ touch test/models/thing_test.rb</code> and add this code inside of it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">ThingTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Remember that your generated fixtures will be loaded when you run your tests. So, unless you want that behavior, you probably want to remove the fixture files.</p>

<h2 id="testing-validations">Testing Validations</h2>

<p>You can find the Rails Guides validation documentation <a href="http://edgeguides.rubyonrails.org/active_record_validations.html#validation-helpers">here</a>.</p>

<h2 id="basic-validity">Basic Validity</h2>

<p>Let’s write a test to check that a fan with all attributes is valid. Inside of <code class="highlighter-rouge">test/models/fan_test.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">FanTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="k">def</span> <span class="nf">valid_attributes</span>
    <span class="p">{</span>
      <span class="ss">name:               </span><span class="s2">"Jorge"</span><span class="p">,</span>
      <span class="ss">email:              </span><span class="s2">"yosoybelieber@example.com"</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it creates a fan"</span> <span class="k">do</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">valid_attributes</span><span class="p">)</span>

    <span class="n">assert</span> <span class="n">result</span><span class="p">.</span><span class="nf">valid?</span>
    <span class="n">assert_equal</span> <span class="s2">"Jorge"</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="nf">name</span>
    <span class="n">assert_equal</span> <span class="s2">"yosoybelieber@example.com"</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="nf">email</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="presence-validations">Presence Validations</h2>

<p>What happens if a name isn’t entered? We shouldn’t have a valid fan. Let’s add a test. Inside of <code class="highlighter-rouge">test/models/fan_test.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it cannot create a fan without an name"</span> <span class="k">do</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s2">"yosoybelieber@example.com"</span><span class="p">)</span>

    <span class="n">assert</span> <span class="n">result</span><span class="p">.</span><span class="nf">invalid?</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This fails because we don’t have any validations for presence of a name. Inside of <code class="highlighter-rouge">fan.rb</code>, add:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
</code></pre></div></div>

<h2 id="uniqueness-validations">Uniqueness Validations</h2>

<p>Let’s assume that a fan logs into Belibery using their email address. Email addresses will need to be unique. Let’s add a test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it cannot create a fan with the same email"</span> <span class="k">do</span>
    <span class="mi">2</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">valid_attributes</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">result</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">email: </span><span class="s2">"yosoybelieber@example.com"</span><span class="p">)</span>
    <span class="n">assert_equal</span> <span class="mi">1</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="nf">count</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>It will fail because it’s creating two fans and we’re asserting that there should only be one. Inside of <code class="highlighter-rouge">fan.rb</code> we need to add a validation:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span>
</code></pre></div></div>

<h2 id="format-validations">Format Validations</h2>

<p>Names should only contain capital and lower case letters. Let’s write a test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it only accepts letters as a name"</span> <span class="k">do</span>
    <span class="n">fan</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
      <span class="ss">name:   </span><span class="s2">"Jorge1"</span><span class="p">,</span>
      <span class="ss">email:  </span><span class="s2">"yosoybelieber@example.com"</span>
      <span class="p">)</span>

    <span class="n">refute</span> <span class="n">fan</span><span class="p">.</span><span class="nf">valid?</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>We can use regex and a format validator to make this test pass:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">presence:   </span><span class="kp">true</span><span class="p">,</span> 
                    <span class="ss">format:     </span><span class="p">{</span> <span class="ss">with: </span><span class="sr">/\A[a-zA-Z]+\z/</span><span class="p">,</span> <span class="ss">message: </span><span class="s2">"only allows uppercase and lowercase letters"</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="length-validations">Length Validations</h2>

<p>Let’s limit our fans’ email addresses to between 5 and 50 characters. Our test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it only accepts an email between 5 to 50 characters"</span> <span class="k">do</span>
    <span class="n">fan</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
      <span class="ss">name:               </span><span class="s2">"Jorge"</span><span class="p">,</span>
      <span class="ss">email:              </span><span class="s2">"Jorj"</span>
      <span class="p">)</span>

    <span class="n">assert</span> <span class="n">fan</span><span class="p">.</span><span class="nf">invalid?</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>We’ll use the length validation to make this test pass:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence:   </span><span class="kp">true</span><span class="p">,</span> 
                    <span class="ss">uniqueness: </span><span class="kp">true</span><span class="p">,</span>
                    <span class="ss">length:     </span><span class="p">{</span> <span class="ss">in: </span><span class="mi">5</span><span class="o">..</span><span class="mi">50</span> <span class="p">}</span>
</code></pre></div></div>

<h2 id="custom-validations">Custom Validations</h2>

<p>What happens if we want to ban all users named Richard? We will need a custom validation method. First, let’s write a test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it cannot create a fan named Richard"</span> <span class="k">do</span>
    <span class="n">fan</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
      <span class="ss">name:               </span><span class="s2">"Richard"</span><span class="p">,</span>
      <span class="ss">email:              </span><span class="s2">"richard@example.com"</span>
      <span class="p">)</span>

    <span class="n">refute</span> <span class="n">fan</span><span class="p">.</span><span class="nf">valid?</span>
    <span class="n">assert_includes</span> <span class="n">fan</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span><span class="p">,</span> <span class="s2">"Name cannot be Richard"</span>

  <span class="k">end</span>
</code></pre></div></div>

<p>We can validate <code class="highlighter-rouge">:no_richards</code> with a custom validation:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="n">validate</span> <span class="ss">:no_richards</span>

  <span class="k">def</span> <span class="nf">no_richards</span>
    <span class="n">errors</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">"cannot be Richard"</span><span class="p">)</span> <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s2">"Richard"</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>You can also use <a href="http://guides.rubyonrails.org/active_record_validations.html#custom-validators">ActiveModel::Validator</a> for custom validations.</p>

<h2 id="inclusion-and-exclusion-validations">Inclusion and Exclusion Validations</h2>

<p>Examples from RailsGuides:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Coffee</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">inclusion: </span><span class="p">{</span> <span class="ss">in: </span><span class="sx">%w(small medium large)</span><span class="p">,</span>
                                <span class="ss">message:   </span><span class="s2">"%{value} is not a valid size"</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:subdomain</span><span class="p">,</span> <span class="ss">exclusion: </span><span class="p">{</span> <span class="ss">in: </span><span class="sx">%w(www us ca jp)</span><span class="p">,</span>
                                     <span class="ss">message: </span><span class="s2">"%{value} is reserved."</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="testing-custom-methods">Testing Custom Methods</h2>

<p>Every fan needs a belieber nickname. For example, Jorge’s belieber nickname is “Jorgelieber”. Let’s write a test for the nickname functionality:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it has a beliber nickname"</span> <span class="k">do</span>
    <span class="n">fan</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">valid_attributes</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="s2">"Jorgelieber"</span><span class="p">,</span> <span class="n">fan</span><span class="p">.</span><span class="nf">nickname</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>We’ll make this pass by creating a <code class="highlighter-rouge">nickname</code> method in <code class="highlighter-rouge">fan.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">nickname</span>
    <span class="s2">"</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">lieber"</span>
  <span class="k">end</span>
</code></pre></div></div>

<h2 id="testing-relationships">Testing Relationships</h2>

<p>Relationships can be tested in the model, but the functionality is probably better tested in a feature test. The only thing we’ll test at the model level is that an object can respond to an association method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">test</span> <span class="s2">"it belongs to a location"</span> <span class="k">do</span>
    <span class="n">fan</span> <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">valid_attributes</span><span class="p">)</span>

    <span class="n">assert</span> <span class="n">fan</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:location</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>However, this test will pass even if we just put <code class="highlighter-rouge">def location;end</code> in the model. We can use <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> to easily test out the association. In the Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'shoulda'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the model test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">should</span> <span class="n">belong_to</span><span class="p">(</span><span class="ss">:location</span><span class="p">)</span>
</code></pre></div></div>

<p>Get this test to pass by adding the association in the model.</p>

<h2 id="testing-scopes-and-class-methods">Testing Scopes and Class Methods</h2>

<p>You’ve probably seen things like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="err">  </span><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">published</span>
    <span class="n">where</span><span class="p">(</span><span class="ss">published: </span><span class="kp">true</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can accomplish the same thing with a scope:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="err">  </span><span class="n">scope</span> <span class="ss">:published</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">published: </span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Scopes are custom-made queries that are called on a model class or on an association object. You can use where, joins, and includes in scopes. Because they return a ActiveRecord::Relation, you can chain scopes together. They are “lazily loaded”, which means that the query won’t get executed until they are all invoked.</p>

<p>Scopes are defined by the word “scope”, then the name of the scope as a symbol and a lambda that specifies the query.
You can call scopes in the class or in the association:</p>

<pre><code class="language-`ruby">Post.published #=&gt; returns ActiveRecord association of the published posts
category = Category.first
category.posts.published #=&gt; returns ActiveRecord association of the published posts for that specific category
</code></pre>

<p>Scopes can accept arguments:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="err">  </span><span class="n">scope</span> <span class="ss">:created_before</span><span class="p">,</span> 
        <span class="o">-&gt;</span><span class="p">(</span><span class="n">time</span><span class="p">)</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">"created_at &lt; ?"</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="default-scope">Default Scope</h2>

<p>You can also modify the default scope. By default, Rails give you the records based by their created date; however, you can override this by using default_scope.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">default_scope</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">active: </span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="independent-practice">Independent Practice</h2>

<ul>
  <li><a href="https://github.com/turingschool/challenges/blob/master/model_testing_rails.markdown">Model Testing in Rails Challenges</a></li>
</ul>

<h4 id="other-things">Other Things</h4>

<p>Interested in seeing how these model tests are implemented in RSpec? Take a look at <a href="https://github.com/turingschool-examples/belibery/tree/controller_test/spec/models">this branch</a> of the Belibery app.</p>
:ET