I"Zz<h3 id="iterations">Iterations:</h3>

<ul>
  <li><a href="1_getting_started.markdown">1 Getting Started</a></li>
  <li><a href="2_implementing_artists.markdown">2 Implementing artists</a></li>
  <li><a href="3_implementing_songs.markdown">3 Implementing songs</a></li>
  <li><a href="3_optional_additional_song_features.markdown">3.1 Optional Additional Song Features</a></li>
  <li><a href="4_implementing_playlists.markdown">4 Implementing Playlists</a></li>
  <li><a href="5_refactoring.markdown">5 Refactoring</a></li>
  <li><a href="6_controller_tests.markdown">6 Controller Tests</a></li>
  <li><a href="7_implementing_users.markdown">7 Implementing users</a></li>
  <li><a href="wip-image-upload.markdown">7.1 Extensions</a></li>
</ul>

<p>Earlier, we wrote a few feature tests for “sad paths”; specifically if a song was missing a title, or an artist was missing a name, etc. When you start building large projects, you’ll find that having feature tests to cover failure paths tends slow down your test suite since those tests use a headless browser to mimick user interaction.</p>

<p>A controller test should check for things such as:</p>

<ul>
  <li>status (success, failure, redirect)</li>
  <li>instance variable assignment</li>
  <li>content of a flash message</li>
  <li>redirection to correct path</li>
  <li>rendering of correct template</li>
</ul>

<p>Check out the Rails Docs for <a href="http://guides.rubyonrails.org/testing.html#functional-tests-for-your-controllers">Controller Testing</a> (keep in mind these use MiniTest in the examples) or the RSpec <a href="https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs">Controller Specs</a> documentation.</p>

<p>Keep in mind: controllers (and their tests) should be relatively straightforward. Most of your logic (if you have logic) should live in models and be tested using model specs.</p>

<p>Let’s write a few controller tests. We’ll start with a simple controller test for the <code class="highlighter-rouge">index</code> action of the <code class="highlighter-rouge">ArtistsController</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -b 6_controller-tests
</code></pre></div></div>

<p>For this test, we’ll need at least one artist in the database in order to check that the instance variable contains an array of all saved artists:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir spec/controllers
$ touch spec/controllers/artists_controller_spec.rb
</code></pre></div></div>

<p>Then inside that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">ArtistsController</span><span class="p">,</span> <span class="ss">type: :controller</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">"GET #index"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"assigns all artists as @artists and renders the index template"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>

      <span class="n">get</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artists</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">([</span><span class="n">artist</span><span class="p">])</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">"index"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Conventionally, the string for the describe is the HTTP method and the controller action name (ie <code class="highlighter-rouge">GET #index</code>).</p>

<p>In this spec above, we create the artist, then use the built-in <code class="highlighter-rouge">get</code> method which accepts a symbol of the controller action (<code class="highlighter-rouge">:index</code> in this case), then check to make sure that the instance variable <code class="highlighter-rouge">@artists</code> equals <code class="highlighter-rouge">[artist]</code> (an array of the one artist we have in the database). <code class="highlighter-rouge">assigns(:artists)</code> is the syntax used in a controller test in order to access an instance variable that is created in the controller action. Then we check to make sure that the index template was rendered.</p>

<p>Since this spec looks for functionality that we’ve previously implemented, this test should automatically pass.</p>

<p>Let’s add a few more:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">ArtistsController</span><span class="p">,</span> <span class="ss">type: :controller</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">"GET #index"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"assigns all artists as @artists and renders index template"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>

      <span class="n">get</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artists</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">([</span><span class="n">artist</span><span class="p">])</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">"index"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"GET #show"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"assigns the requested artist as @artist and renders the show template"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
      <span class="n">get</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">"show"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This one is only slightly different. First, we create the artist using FactoryGirl. Next, we use the <code class="highlighter-rouge">get</code> method which accepts a parameter of the action name as a symbol (<code class="highlighter-rouge">:show</code>) and any parameters we want to pass to the controller. In this case, since we’re looking at the show view, we want to send a specific ID of an artist. We do that with this line: <code class="highlighter-rouge">{:id =&gt; artist.to_param}</code>. <code class="highlighter-rouge">artist.to_param</code> by default will pass back the artist’s ID.</p>

<p>Run the spec. This functionality is already implemented, so it should also pass.</p>

<h4 id="your-turn">Your Turn</h4>

<p>Write controller specs for <code class="highlighter-rouge">GET #new</code>, <code class="highlighter-rouge">GET #edit</code>.</p>

<p>Once you’re done, check the examples below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">describe</span> <span class="s2">"GET #new"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"assigns a new artist as @artist"</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Artist</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"GET #edit"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"assigns the requested artist as @artist"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
      <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">}</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Let’s write a spec for <code class="highlighter-rouge">POST #create</code> happy path. There are a few things we’ll want to check for in the <code class="highlighter-rouge">create</code> action:</p>

<ul>
  <li>was the artist created?</li>
  <li>did the instance variable get assigned?</li>
  <li>was it properly redirected to the artist show page?</li>
</ul>

<p>Here’s what that spec will look like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">describe</span> <span class="s2">"POST #create"</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s2">"with valid params"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">"creates a new artist"</span> <span class="k">do</span>
        <span class="n">expect</span> <span class="p">{</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="p">}.</span><span class="nf">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Artist</span><span class="p">,</span> <span class="ss">:count</span><span class="p">).</span><span class="nf">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"assigns a newly created artist as @artist"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Artist</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_persisted</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"redirects to the created artist"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="no">Artist</span><span class="p">.</span><span class="nf">last</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Let’s go over a few things:</p>

<ul>
  <li><code class="highlighter-rouge">attributes_for</code> is a FactoryGirl method that returns a hash of attributes for a given object. If you stick a <code class="highlighter-rouge">byebug</code> in one of your tests and call <code class="highlighter-rouge">attributes_for(:artist)</code>, you’ll get something like this:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">"9 Artist"</span><span class="p">,</span> <span class="ss">:image_path</span><span class="o">=&gt;</span><span class="s2">"http://cps-static.rovicorp.com/3/JPG_400/MI0003/146/MI0003146038.jpg"</span><span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="highlighter-rouge">expect {}.to change().by()</code> is RSpec syntax for checking the difference between before the block is executed and after. Here, we’re wrapping the <code class="highlighter-rouge">post :create</code> inside of the expect block so that we can check the difference in <code class="highlighter-rouge">Artist.count</code>.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">be_persisted</code> is an RSpec method that checks to make sure the object was persisted into the database (ie – assigned an ID number).</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">expect(response).to redirect_to(Artist.last)</code> checks that the redirect is going to the last artist. This is the same as saying <code class="highlighter-rouge">artist_path(Artist.last)</code>.</p>
  </li>
</ul>

<p>Run <code class="highlighter-rouge">rspec</code>. Everything should pass.</p>

<p>Now let’s get into where controller tests can become powerful in order to cut down on the time taken by sad path feature tests. Instead of testing invalid attributes in a feature test, we can do that through the controller. However, we will miss out on ensuring that a descriptive message to the user shows up on the view. There are a few ways to deal with this, and we’ll discuss them later. Let’s add a second context block to our previous <code class="highlighter-rouge">POST #create</code> spec to describe what happens when someone tries to create an artist with invalid parameters:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">describe</span> <span class="s2">"POST #create"</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s2">"with valid params"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">"creates a new artist"</span> <span class="k">do</span>
        <span class="n">expect</span> <span class="p">{</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="p">}.</span><span class="nf">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Artist</span><span class="p">,</span> <span class="ss">:count</span><span class="p">).</span><span class="nf">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"assigns a newly created artist as @artist"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Artist</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_persisted</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"redirects to the created artist"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="no">Artist</span><span class="p">.</span><span class="nf">last</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"with invalid params"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">"assigns a newly created but unsaved artist as @artist"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="kp">nil</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">be_a_new</span><span class="p">(</span><span class="no">Artist</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"re-renders the 'new' template"</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="p">{</span><span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="kp">nil</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">"new"</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This should look pretty straightforward. Take a few minutes to play around with this set of specs. Use <code class="highlighter-rouge">byebug</code> and change certain expectations to see what breaks.</p>

<h4 id="your-turn-1">Your Turn</h4>

<p>Write controller specs for <code class="highlighter-rouge">PUT #update</code> for both valid attributes and invalid attributes for an <code class="highlighter-rouge">artist</code>. When you finish, check your work with the example below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span> <span class="s2">"PUT #update"</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s2">"with valid params"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">"updates the requested artist"</span> <span class="k">do</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">,</span> <span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="s2">"New name"</span><span class="p">)}</span>
        <span class="n">artist</span><span class="p">.</span><span class="nf">reload</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">artist</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"New name"</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"assigns the requested artist as @artist"</span> <span class="k">do</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">,</span> <span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="s2">"New name"</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"redirects to the artist"</span> <span class="k">do</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">,</span> <span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="s2">"New name"</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"with invalid params"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">"assigns the artist as @artist"</span> <span class="k">do</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">,</span> <span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="kp">nil</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"re-renders the 'edit' template"</span> <span class="k">do</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">,</span> <span class="ss">:artist</span> <span class="o">=&gt;</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:artist</span><span class="p">,</span> <span class="ss">name: </span><span class="kp">nil</span><span class="p">)}</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">"edit"</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Finally, we’ll finish up with writing a controller spec for deleting an artist:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">describe</span> <span class="s2">"DELETE #destroy"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"destroys the requested artist"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
      <span class="n">expect</span> <span class="p">{</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">}</span>
      <span class="p">}.</span><span class="nf">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Artist</span><span class="p">,</span> <span class="ss">:count</span><span class="p">).</span><span class="nf">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">"redirects to the artists list"</span> <span class="k">do</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:artist</span><span class="p">)</span>
      <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="p">{</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">artist</span><span class="p">.</span><span class="nf">to_param</span><span class="p">}</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">artists_path</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<h4 id="your-turn-2">Your Turn</h4>

<p>Write controller specs for <code class="highlighter-rouge">PlaylistsController POST #create</code> and <code class="highlighter-rouge">PlaylistsController PUT #update</code>. Be sure to write a sad path to account for a playlist with a missing title. These tests won’t automatically pass (unless you implemented sad path functionality on your own), so you’ll need to use the error messages to drive out that behavior.</p>

<p>Make sure to commit your work! Use proper commit message manners. All tests should be passing.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
$ git commit
$ git checkout master
$ git merge 6_controller-tests
$ git push heroku master
</code></pre></div></div>

<h3 id="on-to-mix-master-part-7-implementing-users">On to <a href="7_implementing_users.markdown">Mix Master Part 7: Implementing Users</a></h3>
:ET