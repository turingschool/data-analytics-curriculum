I",<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand what the <code class="highlighter-rouge">resources</code> syntax in <code class="highlighter-rouge">routes.rb</code> generates for us.</li>
  <li>Understand what nesting <code class="highlighter-rouge">resoures</code> in <code class="highlighter-rouge">routes.rb</code> generates for us.</li>
  <li>Understand the 5 pieces of information <code class="highlighter-rouge">rake routes</code> gives us.</li>
  <li>Use route helpers</li>
</ul>

<h2 id="vocab">Vocab</h2>

<ul>
  <li>routes</li>
  <li>route helper</li>
</ul>

<h2 id="warmup">WarmUp</h2>

<p>In your notebook, without using your computer, fill in the following table for the 8 ReSTful routes for a generic “resource”</p>

<table>
  <tbody>
    <tr>
      <td><strong>Verb</strong></td>
      <td><strong>URI Pattern</strong></td>
      <td><strong>Controller#Action</strong></td>
    </tr>
    <tr>
      <td>GET</td>
      <td>/resources</td>
      <td>resources#index</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="rails-resources">Rails Resources</h2>

<p>Rails gives us a handy shortcut for generating the 8 ReSTful routes in our routes.rb file. Open up any Rails app, such as SetList, and add the following line anywhere in your routes file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake routes -c cats</code> from the command line. The <code class="highlighter-rouge">-c</code> stands for controller, so it will only show you routes for the cats.</p>

<p>With a partner, explore what this output gives you.</p>

<h2 id="onlyexcept">Only/Except</h2>

<p>You never want to create routes that you haven’t implemented in your code. If you have <code class="highlighter-rouge">resources :cats</code> in your routes file, but you haven’t implemented the <code class="highlighter-rouge">CatsController#destroy</code> action, you would be exposing an unused route. Instead, we give our resource an <code class="highlighter-rouge">only</code> option to explicitly say which ReSTful routes we want created. For example, if we only wanted the cats index, new, and create actions, we could put this in our routes file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">]</span>
</code></pre></div></div>

<p>You can also use <code class="highlighter-rouge">except</code>, which will generate the 8 ReSTful routes <em>except</em> the ones specified:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span><span class="p">,</span> <span class="ss">except: </span><span class="p">[</span><span class="ss">:destroy</span><span class="p">]</span>
</code></pre></div></div>

<p>This would be the same as:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">]</span>
</code></pre></div></div>

<p>With a partner, refactor some of the ReSTful routes in SetList to use the <code class="highlighter-rouge">resources</code> syntax.</p>

<h2 id="nested-resources">Nested Resources</h2>

<p>Some resources are logically dependent on other resources. In SetList, Songs can’t exist without an Artist.</p>

<p>If we look in our routes for SetList, we’ll see:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get "/artists/:artist_id/songs/new", to: "songs#new"
</code></pre></div></div>

<p>When we want to make a new song, we need to know which artist we are making the song for. We can also accomplish this with the <code class="highlighter-rouge">resources</code> syntax by nesting with a <code class="highlighter-rouge">do</code> block:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:artists</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:songs</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This will generate 8 ReSTful routes for artists <em>and</em> 8 ReSTful routes for songs that are nested under an artist. You can also use only/except for nested resources:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:show</span><span class="p">]</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:edit</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Just like before, we only want to create the routes we need.</p>

<p>With a partner, refactor the nested routes in SetList to use the <code class="highlighter-rouge">resources</code> sytnax.</p>

<h2 id="route-helpers">Route Helpers</h2>

<p>If you run <code class="highlighter-rouge">rake routes</code>, you’ll notice the first column is called “prefix”. Rails will use the “prefix” column to build route helpers.</p>

<p>Route helpers will generate a path for you (note: just the path, not the VERB). All you have to do is append <code class="highlighter-rouge">_path</code> to the end of the prefix name. For example, if you have this in your routes:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">]</span>
</code></pre></div></div>

<p>Then <code class="highlighter-rouge">rake routes -c cats</code> should give you:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix Verb URI Pattern     Controller#Action
  cats GET  /cats(.:format) cats#index
</code></pre></div></div>

<p>Using that prefix <code class="highlighter-rouge">cats</code>, we can use <code class="highlighter-rouge">cats_path</code> anywhere in our Rails app to generate the path <code class="highlighter-rouge">/cats</code>.</p>

<p>Generally, any row in your <code class="highlighter-rouge">rake routes</code> output that does not include a prefix uses the same prefix as the line above it.</p>

<h2 id="passing-parameters-to-route-helpers">Passing Parameters to Route Helpers</h2>

<p>Some paths include parameters. For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:cats</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:show</span><span class="p">]</span>
</code></pre></div></div>

<p>Gives you this <code class="highlighter-rouge">rake routes</code> output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix Verb URI Pattern         Controller#Action
   cat GET  /cats/:id(.:format) cats#show
</code></pre></div></div>

<p>You can’t generate the path using <code class="highlighter-rouge">cat_path</code> because it is expecting an <code class="highlighter-rouge">:id</code>. Any time a route helper needs a dynamic parameter, like <code class="highlighter-rouge">:id</code> we MUST pass a value to the route helper. For example <code class="highlighter-rouge">cat_path(29)</code> will generate <code class="highlighter-rouge">/cats/29</code>.</p>

<p>We can also pass an object rather than the actual value of the parameter and Rails is smart enough to extract that object’s id. This is considered best practice:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">journey</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Journey'</span><span class="p">)</span>
<span class="n">visit</span> <span class="n">artist_path</span><span class="p">(</span><span class="n">journey</span><span class="p">)</span>
</code></pre></div></div>

<p>Be careful. If you forget to pass a parameter to a route helper that needs it, the error message will start to look like a “missing route” error. Read the ENTIRE error, and it will actually tell you that the route helper is missing a parameter.</p>

<h2 id="partner-practice">Partner Practice</h2>

<p>Refactor some of the code in setlist to use Route Helpers rather than hardcoded routes.</p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What are the 8 ReSTful routes and their controller/actions?</li>
  <li>What routes would <code class="highlighter-rouge">resources :dogs, only: [:destroy, :index]</code> generate?</li>
  <li>What routes would the following generate?</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:owners</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">]</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:dogs</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:show</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Why should you use <code class="highlighter-rouge">only</code>/<code class="highlighter-rouge">except</code>?</li>
  <li>How can you use the prefix column from <code class="highlighter-rouge">rake routes</code>?</li>
</ul>
:ET