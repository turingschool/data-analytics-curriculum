I"?U<h2 id="learning-goals">Learning Goals</h2>

<p>By the end of this class, a student will be able to:</p>

<ul>
  <li>Set up and configure Faraday for use with a Rails application.</li>
  <li>Use Faraday to connect to and retrieve information from third party external
APIs.</li>
  <li>Parse the information retrieved from a third party API.</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>How does a developer interact with an API?</li>
  <li>What are the benefits of using an API?</li>
</ul>

<h2 id="summary">Summary</h2>

<p>What we are going to be working on today is creating an app that reaches out and consumes data from an external API, and then displays and formats that data on a web page. The API we will be using is the ProPublica API, and we will be using it to grab a list of Representatives from Congress.</p>

<p>We will accomplish that by starting with a user story.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
When I visit "/"
And I select "Colorado" from the dropdown
And I click on "Locate Members of the House"
Then my path should be "/search" with "state=CO" in the parameters
And I should see a message "7 Results"
And I should see a list of the 7 members of the house for Colorado
And I should see a name, role, party, and district for each member
</code></pre></div></div>

<p>As you can see, it lines out all that we will do. Let’s get started.</p>

<h2 id="setup">Setup</h2>

<p>We start by spinning up our rails app. We are going to call it House Salad.</p>

<p>Because we’re getting information about the House of Representatives and we’re gonna toss it around. Kind of.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/turingschool-examples/house-salad
<span class="nv">$ </span><span class="nb">cd </span>house-salad
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails db:create
<span class="nv">$ </span>rails db:migrate
</code></pre></div></div>

<p>Yes, we haven’t created any migrations, but running rails db:migrate will generate the <code class="highlighter-rouge">schema.rb</code> so we don’t get an error when we start running tests.</p>

<h2 id="testing-all-day-every-day">Testing, All Day, Every Day</h2>

<p>So we’ve got the basic setup.</p>

<p>Let’s create our first test files.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>spec/features/
<span class="nv">$ </span><span class="nb">touch </span>spec/features/user_can_search_by_state_spec.rb
</code></pre></div></div>

<p>Now let’s open up that file and translate our user story into a test.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>


<span class="n">feature</span> <span class="s2">"user can search for house members"</span> <span class="k">do</span>

  <span class="n">scenario</span> <span class="s2">"user submits valid state name"</span> <span class="k">do</span>
    <span class="c1"># As a user</span>
    <span class="c1"># When I visit "/"</span>
    <span class="n">visit</span> <span class="s1">'/'</span>

    <span class="nb">select</span> <span class="s2">"Colorado"</span><span class="p">,</span> <span class="ss">from: :state</span>
    <span class="c1"># And I select "Colorado" from the dropdown</span>
    <span class="n">click_on</span> <span class="s2">"Locate Members of the House"</span>
    <span class="c1"># And I click on "Locate Members from the House"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">search_path</span><span class="p">)</span>
    <span class="c1"># Then my path should be "/search" with "state=CO" in the parameters</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"7 Results"</span><span class="p">)</span>
    <span class="c1"># And I should see a message "7 Results"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">".member"</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">7</span><span class="p">)</span>
    <span class="c1"># And I should see a list of 7 the members of the house for Colorado</span>

    <span class="n">within</span><span class="p">(</span><span class="n">first</span><span class="p">(</span><span class="s2">".member"</span><span class="p">))</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">".name"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">".role"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">".party"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">".district"</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="c1"># And I should see a name, role, party, and district for each member</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And so we run our tests. We should get an error concerning a <code class="highlighter-rouge">search_path</code>.</p>

<p>Our form is sad about where we are trying to send information. So we are going to have to add a route.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/search"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"search#index"</span>
</code></pre></div></div>

<p>And of course, we need to create a controller with an index action and then create a corresponding view.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/search_controller.rb</span>
<span class="k">class</span> <span class="nc">SearchController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>app/views/search
<span class="nb">touch </span>app/views/search/index.html.erb
</code></pre></div></div>

<p>Now we get the error <code class="highlighter-rouge">expected to find text "7 Results"</code>.</p>

<h2 id="consuming-the-api">Consuming the API</h2>

<p>At this point, we are going to have to consume the Propublica API to get the data we need. Read through the <a href="https://projects.propublica.org/api-docs/congress-api/">Propublica API documentation</a> and try to pull out the relevant pieces of information. Yes, you actually have to read it.</p>

<h3 id="api-keys">API Keys</h3>

<p>One thing you’ll notice when reading the docs is that it requires us to sign up for an api key. An api key is a way for the api’s owners to authenticate users. Most apis will require that you sign up for a key. This allows the api owners to track who is using their api and how much. Most apis limit the rate at which you can use the api for free, and typically you have to pay to increase this usage. You’ll see an example of this in the Propublica docs: “Usage is limited to 5000 requests per day”. In this case, avoid running your code 5000 times and you should be good.</p>

<p>If you haven’t already, sign up for a Propublica API key.</p>

<h3 id="authentication">Authentication</h3>

<p>Another key piece to pull out of the Propublica documentation is the section on “Authentication”. Now that we have an API key, this tells us how to use it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The API key must be included in all API requests to the server, as a header:

X-API-Key: PROPUBLICA_API_KEY
</code></pre></div></div>

<h3 id="endpoints">Endpoints</h3>

<p>We also need to find the documentation for the endpoints we will need. Explore the docs and see if you can find the endpoint.</p>

<p>Remember, we are trying to get a list of house members from a particular state. There is a button at the top of the page for <code class="highlighter-rouge">Members</code>. On the <code class="highlighter-rouge">Members</code> page, there is a table of contents on the left with the option for <code class="highlighter-rouge">Get Current Members by State/District</code>. That looks promising.</p>

<p>By reading through the documentation for this endpoint, we can determine that we’ll need to send a request like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET https://api.propublica.org/congress/v1/members/house/co/current.json
</code></pre></div></div>

<p>along with our api key in a header as we determined before. Using this information, see if you can hit the API endpoint using Postman.</p>

<h3 id="make-the-request">Make the Request</h3>

<p>Let’s run our tests to remind us of where we left off. Oh right, we’re getting <code class="highlighter-rouge">expected to find text "7 Results"</code>.</p>

<p>Now that we know what request we want to send, we need to send it to get the data we want to display.</p>

<p>We will be using the <a href="https://github.com/lostisland/faraday">Faraday Gem</a> to make HTTP requests using Ruby.</p>

<p>First, we will need to add <code class="highlighter-rouge">gem 'faraday'</code> to our Gemfile. We don’t want to add to a <code class="highlighter-rouge">:development</code>/<code class="highlighter-rouge">:test</code> block since we will need to make these API calls in all environments. After you add it to your Gemfile, run <code class="highlighter-rouge">bundle install</code>.</p>

<p>Now that we have it installed, lets use Faraday to make the API call. Rather than memorizing the syntax we use in this tutorial, make sure you get used to referencing documentation.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SearchController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:state</span><span class="p">]</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="no">Faraday</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">url: </span><span class="s2">"https://api.propublica.org"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">faraday</span><span class="o">|</span>
      <span class="n">faraday</span><span class="p">.</span><span class="nf">headers</span><span class="p">[</span><span class="s2">"X-API-Key"</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'&lt;YOUR API KEY&gt;'</span>
    <span class="k">end</span>

    <span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">"/congress/v1/members/house/</span><span class="si">#{</span><span class="n">state</span><span class="si">}</span><span class="s2">/current.json"</span><span class="p">)</span>

    <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Make sure you replace <code class="highlighter-rouge">&lt;YOUR API KEY&gt;</code> with the Propublica API key you signed up for earlier.</p>

<p>When we assign <code class="highlighter-rouge">conn</code>, does this make an HTTP request? What are these lines of code doing? (review the docs if you aren’t sure)</p>

<p>In the code above, we set up a variable to hold the connection information, we tell it the name of the server, and our API Key, which is our password to be able to access the API. And then we use the <code class="highlighter-rouge">get</code> method on the connection and pass it the end point we want to access. We store that in the <code class="highlighter-rouge">response</code> local variable, and then we parse it.</p>

<p>When we run the code and hit the pry, we can visually inspect <code class="highlighter-rouge">response</code> and <code class="highlighter-rouge">response.body</code> to make sure it contains data and not an error message or something else unexpected.</p>

<p>Once we’ve verified our request was successful, we can parse the data and pass it to our view:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">,</span> <span class="ss">symbolize_names: </span><span class="kp">true</span><span class="p">)</span>
<span class="vi">@members</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="ss">:results</span><span class="p">]</span>
</code></pre></div></div>

<p>And then display it in the view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@members</span><span class="p">.</span><span class="nf">count</span> <span class="cp">%&gt;</span> Results<span class="nt">&lt;/h1&gt;</span>
<span class="cp">&lt;%</span> <span class="vi">@members</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"member"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"name"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">member</span><span class="p">[</span><span class="ss">:name</span><span class="p">]</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"role"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">member</span><span class="p">[</span><span class="ss">:role</span><span class="p">]</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"party"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">member</span><span class="p">[</span><span class="ss">:party</span><span class="p">]</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"district"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">member</span><span class="p">[</span><span class="ss">:district</span><span class="p">]</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>And now our test is passing. As always, run your server and check your work by hand in your development environment. It may not be pretty, but the data is there.</p>

<h3 id="environment-variables">Environment Variables</h3>

<p>There’s one more improvement we should make to our code. If you look in the controller, we have hard coded our API key. There’s a couple reasons we don’t want to do this:</p>

<ol>
  <li>It isn’t secure. If someone gets access to this code (you should always assume this is possible, even if your project is closed-source), someone could copy our API key and then would be able to masquerade as our application. They could, for example, spam the Propublica API with requests and force us over the rate limit we discussed earlier. If our API key has access to paid features, they could get this access for free.</li>
  <li>It isn’t flexible. If we need to change the API key, we’d need to go into the code base and manually configure it. If we use this API key in multiple places, we’d need to change it in each place.</li>
</ol>

<p>What we want to do is store this key in a variable, specifically an <a href="https://en.wikipedia.org/wiki/Environment_variable">Environment Variable</a>. Environment variables are slightly different from other variables in your code. They are part of the process running your program, rather than part of the program itself. We can define environment variables in our bash profile. Open it up with <code class="highlighter-rouge">atom ~/.bash_profile</code> and add an environment variable for the Propublica API key:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PROPUBLICA_API_KEY</span><span class="o">=</span><span class="s2">"&lt;YOUR API KEY&gt;"</span>
</code></pre></div></div>

<p>Replace <code class="highlighter-rouge">&lt;YOUR API KEY&gt;</code> with your Propublica API Key.</p>

<p>Whenever you edit your bash profile, you will need to restart your terminal for the changes to take affect. Now, in your controller, you can use this environment variable instead of hardcoding the key:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">faraday</span><span class="p">.</span><span class="nf">headers</span><span class="p">[</span><span class="s2">"X-API-Key"</span><span class="p">]</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"PROPUBLICA_API_KEY"</span><span class="p">]</span>
</code></pre></div></div>

<p>This is okay, but it feels weird to edit our bash profile, which affect <strong>all</strong> processes running on our computer, to solve a problem for this specific project. What we really want is to put our environment configuration somewhere that is specific to this project. Luckily there is a handy gem called <a href="https://github.com/laserlemon/figaro">Figaro</a> that allows us to do just that. Read through the docs to figure out how it works.</p>

<p>First we will need to add the Figaro gem to our Gemfile outside of the <code class="highlighter-rouge">:development</code>/<code class="highlighter-rouge">:test</code> blocks. Then, run <code class="highlighter-rouge">bundle exec figaro install</code> from the command line. This will create a file <code class="highlighter-rouge">config/application.yml</code>. This file will contain our keys. We don’t want to push this file to GitHub for the same reason we don’t want the keys hard coded in our program, so this file should be added to the <code class="highlighter-rouge">gitignore</code>. Luckily, Figaro automatically adds this file to the gitignore for us. If you are using Atom, files in the <code class="highlighter-rouge">gitignore</code> don’t show up in your file tree by default, so you may have to change your settings to make them visible.</p>

<p>Inside the <code class="highlighter-rouge">application.yml</code> file, add your API key:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">PROPUBLICA_API_KEY</span><span class="pi">:</span> <span class="s">&lt;YOUR API KEY&gt;</span>
</code></pre></div></div>

<p>and remove the line we added to the bash profile. Run the tests again to confirm everything is working.</p>

<h3 id="checks-for-understanding">Checks for Understanding</h3>

<ul>
  <li>What does Faraday do?</li>
  <li>What is an API Key?</li>
  <li>What is a connection?</li>
  <li>What are headers?</li>
  <li>What don’t you like about this code?</li>
  <li>Is our feature test enough?</li>
  <li>What are we missing?</li>
  <li>What do environment variables do? Why do we use them instead of hardcoding?</li>
  <li>Do you like the index action in the search controller?</li>
  <li>How would you start to refactor this?</li>
</ul>

<p>Our next step is to refactor this.</p>
:ET