I"…<p><strong>Current Status</strong>: Draft (Work in Progress)</p>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Test HTTP requests and responses using <code class="highlighter-rouge">Rack::Test</code></li>
  <li>Set environment variables to differentiate code paths in development and testing</li>
  <li>Pull out components of an application to facilitate testing</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - Warmup</li>
  <li>25 - Testing Routes using <code class="highlighter-rouge">Rack::Test::Methods</code> and Minitest</li>
  <li>5 - Wrapup</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://github.com/turingschool-examples/feel-good-bot">Feel Good Bot</a></li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>Start a gist and answer the following questions:</p>

<ul>
  <li>Give what you know from SalesEngine, how would you go about testing a web application built using Sinatra?</li>
  <li>What tools do you have at your disposal and what tools are you missing?</li>
</ul>

<h2 id="full-group-instruction-testing-routes">Full Group Instruction: Testing Routes</h2>

<p>In SalesEngine, we tested Ruby objects using Minitest and Rspec. But how do we test a route in Sinatra like the one in <code class="highlighter-rouge">01_app.rb</code>?</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s1">'/'</span> <span class="k">do</span>
  <span class="s2">"Today is going to be a wonderful day."</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Rack gives us some tools to make HTTP requests to our Sinatra application and inspect the response and make assertions based on the response.</p>

<p><code class="highlighter-rouge">01_test.rb</code> demonstrates how to send a GET request to a route and inspect the response.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'minitest/spec'</span>
<span class="nb">require</span> <span class="s1">'rack/test'</span>

<span class="nb">require_relative</span> <span class="s1">'../app/01_app'</span>

<span class="n">describe</span> <span class="no">FeelGoodBot</span> <span class="k">do</span>
  <span class="kp">include</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Methods</span>

  <span class="k">def</span> <span class="nf">app</span>
    <span class="no">FeelGoodBot</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"tells you how great today is going to be"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">'/'</span>
    <span class="n">assert_equal</span> <span class="mi">200</span><span class="p">,</span> <span class="n">last_response</span><span class="p">.</span><span class="nf">status</span>
    <span class="n">assert</span> <span class="n">last_response</span><span class="p">.</span><span class="nf">ok?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can use any of the HTTP methods: <code class="highlighter-rouge">get</code>, <code class="highlighter-rouge">post</code>, <code class="highlighter-rouge">put</code>, <code class="highlighter-rouge">delete</code>, <code class="highlighter-rouge">patch</code>.</p>

<p>Each method takes a route and an optional set of parameters.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s1">'/'</span><span class="p">,</span> <span class="p">{</span> <span class="ss">name: </span><span class="s2">"Alan Turing"</span> <span class="p">}</span>
<span class="n">get</span> <span class="s1">'/'</span><span class="p">,</span> <span class="ss">name: </span><span class="s2">"Alan Turing"</span>
</code></pre></div></div>

<p>After we make a request, <code class="highlighter-rouge">Rack::Test::Methods</code> gives us two variables to work with: <code class="highlighter-rouge">last_request</code> and <code class="highlighter-rouge">last_response</code>. These are the most recent request and response weâ€™ve sent or received. For the purposes of this tutorial, we care mostly about <code class="highlighter-rouge">last_response</code>.</p>

<p><code class="highlighter-rouge">last_response</code> has a number of properties. Weâ€™re going to concern ourselves with only a subset of those today.</p>
:ET