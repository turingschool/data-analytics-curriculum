I"øO<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>set up a model test in a Rails app</li>
  <li>test validations, attributes, relationships, and methods in a model</li>
  <li>set up a controller test in a Rails app</li>
  <li>test responses, redirects, variable assignment, flash messages, and template rendering in a controller</li>
</ul>

<h2 id="lecture">Lecture</h2>

<h3 id="testing-in-rails">Testing in Rails</h3>

<ul>
  <li>Rails likes testing ‚Äì that‚Äôs why it comes with an expanded version of Minitest</li>
  <li>Minitest: transparent, very similar to Ruby implementation code</li>
  <li>RSpec: widely-used DSL that follows natural language structure. DHH is <a href="http://www.rubyinside.com/dhh-offended-by-rspec-debate-4610.html">offended by RSpec</a></li>
  <li>You‚Äôve seen how to test with RSpec in <a href="http://tutorials.jumpstartlab.com/projects/contact_manager.html">Contact Manager</a>, so today we‚Äôll use Minitest. It‚Äôs beneficial to get exposure to both.</li>
</ul>

<h3 id="types-of-testing-in-rails">Types of Testing in Rails</h3>

<h5 id="testing-based-on-test-structure">Testing based on test structure</h5>

<ul>
  <li>Unit Test: test a particular unit and its possible outcomes</li>
  <li>Integration Test: test functionality that touches more than one unit</li>
  <li>Acceptance Test: test full feature that follows a user story</li>
</ul>

<h5 id="testing-based-on-what-is-tested">Testing based on what is tested</h5>

<ul>
  <li>Model Test: checks for assignment of attributes, validations, relationships, and additional behavior</li>
  <li>Controller Test: checks for the proper redirection, variable assignment, the display of flash messages, and <a href="http://api.rubyonrails.org/classes/ActionController/TemplateAssertions.html">template rendering</a></li>
  <li>Feature Test: checks for correct functionality of user behavior; follow user stories closely</li>
</ul>

<h3 id="model-testing">Model Testing</h3>

<ul>
  <li>most important tests in your application</li>
  <li>test the business logic contained in the models</li>
</ul>

<h4 id="what-should-you-test">What should you test?</h4>

<ul>
  <li>is the data is being created?</li>
  <li>does the data have the right attributes?</li>
  <li>do the validations work?</li>
  <li>do the relationships work?</li>
  <li>do any additional methods work?</li>
</ul>

<h4 id="examples">Examples</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">ArticleTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="k">def</span> <span class="nf">valid_attributes</span>
    <span class="p">{</span>
      <span class="ss">title:        </span><span class="s2">"I am Hungry"</span><span class="p">,</span>
      <span class="ss">body:      		</span><span class="s2">"I would really like to eat a vegetable sandwich right now."</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it creates an article"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">valid_attributes</span><span class="p">)</span>

    <span class="n">assert</span> <span class="n">article</span><span class="p">.</span><span class="nf">valid?</span>
    <span class="n">assert_equal</span> <span class="s2">"I am Hungry"</span><span class="p">,</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span>
    <span class="n">assert_equal</span> <span class="s2">"I would really like to eat a vegetable sandwich right now."</span><span class="p">,</span> <span class="n">article</span><span class="p">.</span><span class="nf">body</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it cannot create an article without a title"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">body: </span><span class="s2">"I would really like to eat a vegetable sandwich right now."</span><span class="p">)</span>

    <span class="n">assert</span> <span class="n">article</span><span class="p">.</span><span class="nf">invalid?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="model-test-practice">Model Test Practice</h4>

<p>We‚Äôll be using the <a href="https://github.com/turingschool-examples/belibery">Belibery app</a>. You can thank Jorge.</p>

<p><u>Whole Group: </u></p>

<ul>
  <li>‚Äúit creates a fan‚Äù</li>
  <li>‚Äúit cannot create a fan without an name‚Äù</li>
  <li>‚Äúit cannot create a fan without an email‚Äù</li>
  <li>‚Äúit cannot create a fan with the same email‚Äù</li>
  <li>‚Äúit can beliebe‚Äù</li>
  <li>‚Äúit belongs to a location‚Äù</li>
</ul>

<p><u>In Pairs: </u></p>

<ul>
  <li>Create a Location model that has a city, state and country</li>
  <li>Build the tests for that model. They should cover the following behavior:
    <ul>
      <li>Don‚Äôt save the Location unless it has a city, 
  state and country</li>
      <li>Don‚Äôt save the Location unless the city is unique</li>
      <li>Cover a method <code class="highlighter-rouge">beliebe</code> that returns the name of the city plus ‚Äòlieber‚Äô (i.e. ‚ÄúDenverlieber)</li>
    </ul>
  </li>
</ul>

<h4 id="testing-relationships">Testing Relationships</h4>

<ul>
  <li>test the relationships between the different types of models</li>
  <li>check that these things are assigned properly</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FanTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="nb">test</span> <span class="s2">"it belongs to a location"</span> <span class="k">do</span>
    <span class="n">location</span> <span class="o">=</span> <span class="no">Location</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
      <span class="ss">city:    </span><span class="s2">"Denver"</span><span class="p">,</span>
      <span class="ss">state:   </span><span class="s2">"Colorado"</span><span class="p">,</span>
      <span class="ss">country: </span><span class="s2">"United States"</span>
      <span class="p">)</span>

    <span class="n">result</span>     <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span><span class="ss">name: </span><span class="s2">"Justina Bieber"</span><span class="p">,</span> <span class="ss">email: </span><span class="s2">"beliebe.me@example.com"</span><span class="p">,</span> <span class="ss">location_id: </span><span class="n">location</span><span class="p">.</span><span class="nf">id</span><span class="p">})</span>

    <span class="n">assert_equal</span> <span class="n">location</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="nf">location</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">LocationTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="nb">test</span> <span class="s2">"locations have many fans"</span> <span class="k">do</span>
    <span class="n">location</span> <span class="o">=</span> <span class="no">Location</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
      <span class="ss">city:    </span><span class="s2">"Denver"</span><span class="p">,</span>
      <span class="ss">state:   </span><span class="s2">"Colorado"</span><span class="p">,</span>
      <span class="ss">country: </span><span class="s2">"United States"</span>
    <span class="p">})</span>
    <span class="n">fan</span>      <span class="o">=</span> <span class="no">Fan</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span><span class="ss">name: </span><span class="s2">"Justina Bieber"</span><span class="p">,</span> <span class="ss">email: </span><span class="s2">"beliebe.me@example.com"</span><span class="p">})</span>
    <span class="n">location</span><span class="p">.</span><span class="nf">fans</span> <span class="o">&lt;&lt;</span> <span class="n">fan</span>

    <span class="n">refute</span>          <span class="n">location</span><span class="p">.</span><span class="nf">fans</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="n">assert_equal</span>    <span class="mi">1</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="nf">fans</span><span class="p">.</span><span class="nf">count</span>
    <span class="n">assert_includes</span> <span class="n">location</span><span class="p">.</span><span class="nf">fans</span><span class="p">,</span> <span class="n">fan</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="controller-testing">Controller Testing</h3>

<ul>
  <li>Many developers don‚Äôt like/use these. They like to use capybara tests instead to cover the functionality of the model.</li>
  <li>Some argue that controller tests are useful since it tests the controller functionality without the view.</li>
  <li>They are faster than feature tests since we are sending http requests instead of mimicking the behavior of the browser.</li>
</ul>

<h4 id="what-should-you-test-1">What should you test?</h4>

<ul>
  <li>are we receiving the correct response? (success, redirect, etc.)</li>
  <li>if there was a redirect, does it work?</li>
  <li>are the instance variables get assigned correctly?</li>
  <li>is the flash message displayed correctly?</li>
  <li>is the controller rendering the correct view template?</li>
</ul>

<h4 id="examples-1">Examples</h4>

<ul>
  <li><code class="highlighter-rouge">assert_response :success</code> checks that the status code was 200 (more about <a href="http://apidock.com/rails/Test/Unit/Assertions/assert_response">assert_response</a>)</li>
  <li><code class="highlighter-rouge">assert_redirected_to  user_path(assigns(:user))</code> makes sure that the controller redirected to the show path</li>
  <li><code class="highlighter-rouge">assert_template :new</code> checks that the new.html.erb template was rendered</li>
  <li><code class="highlighter-rouge">assert_not_nil assigns(:article)</code> makes sure that a @article instance variable was set</li>
  <li><code class="highlighter-rouge">assert_equal "Article successfully coreated", flash[:notice]</code> makes sure that the flash notice contains the correct message</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">ArticlesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>
 <span class="nb">test</span> <span class="s2">"it gets index"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:index</span>

    <span class="n">assert_response</span> <span class="ss">:success</span>
    <span class="n">assert_not_nil</span>  <span class="n">assigns</span><span class="p">(</span><span class="ss">:articles</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it gets new"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:new</span>

    <span class="n">assert_response</span> <span class="ss">:success</span>
    <span class="n">assert_not_nil</span>  <span class="n">assigns</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it posts to create"</span> <span class="k">do</span>
    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">article: </span><span class="p">{</span> <span class="ss">title: </span><span class="s2">"Marshmallows"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span> <span class="p">}</span>

    <span class="n">assert_response</span>       <span class="ss">:redirect</span>
    <span class="n">assert_redirected_to</span>  <span class="n">article_path</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:article</span><span class="p">))</span>
    <span class="n">assert_equal</span>          <span class="s2">"You have created an article."</span><span class="p">,</span> <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it gets show"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Marshmallows"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span><span class="p">)</span>

    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="p">{</span> <span class="ss">id: </span><span class="n">article</span><span class="p">.</span><span class="nf">id</span> <span class="p">}</span>

    <span class="n">assert_response</span> <span class="ss">:success</span>
    <span class="n">assert_not_nil</span>  <span class="n">assigns</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it renders new when post is unsuccessful"</span> <span class="k">do</span>
    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">article: </span><span class="p">{</span> <span class="ss">title: </span><span class="s2">"I'm only a title!"</span> <span class="p">}</span>

    <span class="n">assert_response</span> <span class="ss">:success</span>
    <span class="n">assert_template</span> <span class="ss">:new</span>
    <span class="n">assert_equal</span>    <span class="s2">"The article was not created. Please try again."</span><span class="p">,</span> <span class="n">flash</span><span class="p">[</span><span class="ss">:alert</span><span class="p">]</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it gets edit"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Marshmallows"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span><span class="p">)</span>
    <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="p">{</span> <span class="ss">id: </span><span class="n">article</span><span class="p">.</span><span class="nf">id</span> <span class="p">}</span>

    <span class="n">assert_response</span> <span class="ss">:success</span>
    <span class="n">assert_not_nil</span>  <span class="n">assigns</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it updates an article"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Marshmallows"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span><span class="p">)</span>
    <span class="n">patch</span> <span class="ss">:update</span><span class="p">,</span> <span class="p">{</span> <span class="ss">id: </span><span class="n">article</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span> <span class="ss">article: </span><span class="p">{</span> <span class="ss">title: </span><span class="s2">"Chocolate Chips"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span> <span class="p">}</span> <span class="p">}</span>

    <span class="n">assert_response</span>      <span class="ss">:redirect</span>
    <span class="n">assert_redirected_to</span> <span class="n">article_path</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:article</span><span class="p">))</span>
    <span class="n">assert_equal</span>         <span class="s2">"You have updated an article."</span><span class="p">,</span> <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span>

    <span class="n">result</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">article</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
    <span class="n">assert_equal</span> <span class="s2">"Chocolate Chips"</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="nf">title</span>
  <span class="k">end</span>

  <span class="nb">test</span> <span class="s2">"it deletes to destroy"</span> <span class="k">do</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Marshmallows"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Blah blah blah..."</span><span class="p">)</span>

    <span class="n">assert_difference</span><span class="p">(</span><span class="s1">'Article.count'</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">id: </span><span class="n">article</span><span class="p">.</span><span class="nf">id</span>
    <span class="k">end</span>

    <span class="n">assert_response</span>      <span class="ss">:redirect</span>
    <span class="n">assert_redirected_to</span> <span class="n">articles_path</span>
    <span class="n">assert_equal</span>         <span class="s2">"The article was deleted."</span><span class="p">,</span> <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="controller-test-practice">Controller Test Practice</h4>

<ul>
  <li>Create a Fans controller</li>
  <li>Build the tests for that controller. They should cover the following actions:
    <ul>
      <li>index</li>
      <li>show</li>
      <li>new</li>
      <li>create</li>
      <li>delete
  (you can leave edit and update for later)</li>
    </ul>
  </li>
</ul>

<p>Remember that a good controller test checks for the type of response, the assignment of instance variable, the correct redirection and the display of flash messages if there are any.</p>

<h3 id="recap">Recap</h3>

<ul>
  <li>Testing in Rails</li>
  <li>Types of Tests</li>
  <li>Testing Models</li>
  <li>Testing Relationships</li>
  <li>Testing Controllers</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="http://guides.rubyonrails.org/testing.html">Testing in Rails</a></li>
</ul>
:ET