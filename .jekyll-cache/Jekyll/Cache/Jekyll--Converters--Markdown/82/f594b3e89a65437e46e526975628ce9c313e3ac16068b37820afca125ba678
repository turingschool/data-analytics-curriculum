I"∫<h1 id="goals">Goals</h1>

<p>By the end of this lesson, you will know/be able to:</p>

<ul>
  <li>Understand the pros and cons of using a regular expression</li>
  <li>Practice using a regex pattern matcher</li>
  <li>Practice testing and writing a regex matcher in Ruby</li>
</ul>

<h2 id="whatsa-regex">Whatsa Regex?</h2>

<p>A regular expression (usually referred to as a <code class="highlighter-rouge">regex</code> or <code class="highlighter-rouge">regexp</code>) is a sequence of characters that make up a search pattern.</p>

<p><img src="http://i.imgur.com/4W5EHwC.png" alt="regex" /></p>

<p>(Attribution: <a href="http://xkcd.com/">XKDC</a>)</p>

<p><code class="highlighter-rouge">Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.</code></p>

<h2 id="understanding-a-long-regular-expression">Understanding a Long Regular Expression</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/^(([a-zA-Z]|[0-9])|([-]|[_]|[.]))+[@](([a-zA-Z0-9])|([-])){2,63}[.](([a-zA-Z0-9]){2,63})+$/gi
</code></pre></div></div>

<p>Above is a pattern for a simple email matcher. If we copy and paste this regex into a site like <a href="https://regex101.com/">regex101</a> - we can start to try and figure out what‚Äôs going on.</p>

<h3 id="the-base-layer">The Base Layer</h3>

<p>Let‚Äôs looks specifically at the set up for this regex pattern.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/^/gi
</code></pre></div></div>

<p><code class="highlighter-rouge">/</code>: forward slashes (/) indicate the beginning and end of a Regex pattern</p>

<p><code class="highlighter-rouge">^</code>: This anchors the match to being at the beginning of the string.</p>

<p><code class="highlighter-rouge">g</code>: This is a flag outside of the regex meaning ‚Äòglobal‚Äô. That means it will test the pattern against all possible matches in a string. Without this flag, the regex will only test the first match it finds and then stop.</p>

<p><code class="highlighter-rouge">i</code>: This indicates that the match is case insensitive</p>

<h3 id="capturing-a-character">Capturing a Character</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ([a-zA-Z]|[0-9])
</code></pre></div></div>

<p><code class="highlighter-rouge">()</code>: Specifies a ‚Äòcapture group‚Äô. We‚Äôll see why we want this in a little bit</p>

<p><code class="highlighter-rouge">[]</code>: This creates a character class.</p>

<p><code class="highlighter-rouge">-</code>: Is a range - therefor‚Ä¶</p>

<p><code class="highlighter-rouge">a-z</code>: Is any character in the range between a through z</p>

<p><code class="highlighter-rouge">[a-zA-Z]</code>: So put together, this character class would match any letter <code class="highlighter-rouge">a</code> through <code class="highlighter-rouge">z</code>, case insensitive</p>

<p><code class="highlighter-rouge">|</code>: Within a capture group, this means ‚Äòor‚Äô</p>

<p><code class="highlighter-rouge">[0-9]</code>: This line would match any character 0 through 9</p>

<p>So all put together, <code class="highlighter-rouge">([a-zA-Z]|[0-9])</code> matches any letter of number.</p>

<h3 id="matching-multiple-times">Matching Multiple times</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  (([a-zA-Z]|[0-9])|([-]|[_]|[.]))+
</code></pre></div></div>

<p>We can now see that this regex pattern nests a capture group within another capture group to find <code class="highlighter-rouge">any letter or number</code> or <code class="highlighter-rouge">a -, _, or .</code></p>

<p><code class="highlighter-rouge">+</code>: Is a quantifier which targets the capture group and says ‚Äòrepeat previous token 1 to infinite times‚Äô in your definition of a match.</p>

<h3 id="additional-pieces">Additional Pieces</h3>

<p><code class="highlighter-rouge">{2,63}</code>: Quantifier which targets the capture groups and says ‚Äòrepeat previous token 2 to 63 times‚Äô‚Ä¶ <a href="http://stackoverflow.com/questions/9238640/how-long-can-a-tld-possibly-be/9239264#9239264">why 63?</a></p>

<p><code class="highlighter-rouge">$</code>: Anchors pattern to the end of a string</p>

<h3 id="discussion">Discussion</h3>

<ul>
  <li>The rest of the regex‚Äôs meaning</li>
  <li>How could we break this regular expression?</li>
  <li>Should we even use this?!
    <ul>
      <li><a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html">A previously compliant version</a></li>
      <li><a href="https://davidcel.is/posts/stop-validating-email-addresses-with-regex/">Relevant Post</a></li>
    </ul>
  </li>
</ul>

<h2 id="practice-in-ruby">Practice: In Ruby</h2>

<p>Most languages have their own implementations of regular expressions and convenience methods around matching them. Ruby has the <a href="http://ruby-doc.org/core-2.2.0/Regexp.html">Regexp class</a></p>

<p>When writing a regex to solve a problem in your code, it is <strong>critical</strong> that you test drive. As discussed above, a regular expression pattern has many, many, many places it can go wrong.</p>

<ul>
  <li>Clone down this <a href="https://github.com/turingschool-examples/regex-practice">regular expression repo</a></li>
  <li>Go through existing site</li>
  <li>Fill out test cases</li>
  <li>Add additional metrics</li>
</ul>

<p>The repo has Fabio in it. Which is important.</p>

<p><img src="https://a4-images.myspacecdn.com/images03/3/f5005af32db6461daac8df5dfe941289/300x300.jpg" alt="important" /></p>

<h2 id="practice-regexcrosswords">Practice: RegexCrosswords</h2>

<p>A regular expression, especially a gnarly one like the email validator above, can be intimidating. The best way to get better at writing regular expression patterns, however, is to practice.</p>

<ul>
  <li>Open the <a href="https://regexcrossword.com/">Regex Crossword</a> site</li>
  <li>Play through the first tutorial level</li>
  <li>If you get stuck, copy part of the pattern into <a href="https://regex101.com">Regex101</a></li>
  <li>How far can you get in 15 minutes?</li>
</ul>

<h2 id="practice-regex-golf">Practice: Regex Golf</h2>

<p>XKCD likes to write Regex jokes (and subsequently explain them in a format that is really excellent and informative). Check out this <a href="https://www.explainxkcd.com/wiki/index.php/1313:_Regex_Golf">comic</a> and explanation.</p>

<p><a href="http://regex.alf.nu/">Here is an implementation of Regex Golf</a></p>

<h1 id="resources-and-next-steps">Resources and Next Steps</h1>

<h2 id="in-javascript">In JavaScript</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">MDN Has an Excellent Guide for JavaScript</a></p>

<h2 id="beginner--intermediate-level">Beginner &amp; Intermediate Level</h2>

<ul>
  <li><a href="https://www.explainxkcd.com/wiki/index.php/1313:_Regex_Golf">No but seriously, read this XKCD comic explanation, it‚Äôs real good</a></li>
  <li><a href="https://regexcrossword.com/">Regex Crosswords</a></li>
  <li><a href="https://regex101.com/">Regex101</a></li>
  <li><a href="http://www.amazon.com/Introducing-Regular-Expressions-ebook/dp/B008K9OGDA/ref=sr_1_2?ie=UTF8&amp;qid=1374171971&amp;sr=8-2&amp;keywords=Regular+Expressions">Intro to Regular Expressions by Michael Fitzgeral</a></li>
</ul>

<h2 id="advanced">Advanced</h2>

<ul>
  <li>Nell Shamrell‚Äôs <a href="http://www.confreaks.com/videos/2678-gogaruco2013-beneath-the-surface-regular-expressions-in-ruby">conference talk</a> on how Regex works internally with Ruby</li>
  <li><a href="http://www.gamedev.net/page/resources/_/technical/general-programming/finite-state-machines-and-regular-expressions-r3176">‚ÄúFinite State Machines and Regular Expressions‚Äù by Eli Bendersky</a></li>
</ul>
:ET