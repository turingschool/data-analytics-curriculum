I"ˇM<h2 id="before-you-begin">Before You Begin</h2>

<p>This project is going to center on Markdown and HTML. If you don‚Äôt have
experience with those two technologies it‚Äôll be hard to really understand how
to construct/implement your code.</p>

<p>If you‚Äôd like to build just enough familiarity, try these resource:</p>

<ul>
  <li><a href="https://www.codecademy.com/tracks/web">Codecademy‚Äôs HTML and CSS Track</a> focusing on the ‚ÄúHTML Basics‚Äù all the way up to but not including ‚ÄúCSS: An Overview‚Äù</li>
  <li>This <a href="http://markdowntutorial.com/">Markdown Tutorial</a></li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>HTML is an amazing tool for marking up documents, but it‚Äôs not very fun for
writing content.</p>

<p>Several years ago, John Gruber proposed <a href="http://daringfireball.net/projects/markdown/syntax">the idea of Markdown</a>. It‚Äôs a style of
text formatting that‚Äôs less obtrusive than writing HTML, is easy to remember,
and is highly readable even when not converted to HTML. Here‚Äôs an example:</p>

<pre><code class="language-plain"># My Life in Desserts

## Chapter 1: The Beginning

"You just *have* to try the cheesecake," he said. "Ever since it appeared in
**Food &amp; Wine** this place has been packed every night."
</code></pre>

<p>Using a <em>markdown parser</em>, we could convert that example <em>markdown document</em> into the following
chunk of HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>My Life in Desserts<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;h2&gt;</span>Chapter 1: The Beginning<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;p&gt;</span>"You just <span class="nt">&lt;em&gt;</span>have<span class="nt">&lt;/em&gt;</span> to try the cheesecake," he said. "Ever since it appeared in <span class="nt">&lt;strong&gt;</span>Food <span class="err">&amp;</span> Wine<span class="nt">&lt;/strong&gt;</span> this place has been packed every night."<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<h3 id="experimenting-with-markdown">Experimenting with Markdown</h3>

<p>There are markdown parsers available for just about every language you can
imagine. In the Ruby world some of the best known are Redcarpet, Rdiscount, and
RedCloth.</p>

<p>Let‚Äôs experiment with RedCarpet. Start by installing the gem:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gem install redcarpet
</code></pre></div></div>

<p>Then let‚Äôs start IRB and load the gem:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ irb
&gt; require 'redcarpet'
</code></pre></div></div>

<p>Now we can use redcarpet from a pry session to render the snippet of markdown we looked at before:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">renderer</span> <span class="o">=</span> <span class="no">Redcarpet</span><span class="o">::</span><span class="no">Render</span><span class="o">::</span><span class="no">HTML</span><span class="p">.</span><span class="nf">new</span>
<span class="n">engine</span> <span class="o">=</span> <span class="no">Redcarpet</span><span class="o">::</span><span class="no">Markdown</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">renderer</span><span class="p">)</span>
<span class="n">markdown_source</span> <span class="o">=</span> <span class="s2">"# My Life in Desserts</span><span class="se">\n\n</span><span class="s2">## Chapter 1: The Beginning</span><span class="se">\n\n\"</span><span class="s2">You just *have* to try the cheesecake,</span><span class="se">\"</span><span class="s2"> he said. </span><span class="se">\"</span><span class="s2">Ever since it appeared in **Food &amp; Wine** this place has been packed every night.</span><span class="se">\"</span><span class="s2">"</span>
<span class="n">engine</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="n">markdown_source</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"&lt;h1&gt;My Life in Desserts&lt;/h1&gt;</span><span class="se">\n\n</span><span class="s2">&lt;h2&gt;Chapter 1: The Beginning&lt;/h2&gt;</span><span class="se">\n\n</span><span class="s2">&lt;p&gt;&amp;quot;You just &lt;em&gt;have&lt;/em&gt; to try the cheesecake,&amp;quot; he said. &amp;quot;Ever since it appeared in &lt;strong&gt;Food &amp;amp; Wine&lt;/strong&gt; this place has been packed every night.&amp;quot;&lt;/p&gt;</span><span class="se">\n</span><span class="s2">"</span>
</code></pre></div></div>

<p>During this project, we‚Äôll be building a simple markdown parser that performs some of the functions of Redcarpet!</p>

<p>As you work, it will sometimes be useful to use Redcarpet to check your work by validating that your code handles a chunk
of markdown the same way it does.</p>

<h2 id="learning-goals--areas-of-focus">Learning Goals / Areas of Focus</h2>

<ul>
  <li>Practice breaking a program into logical components</li>
  <li>Test components in isolation and in combination</li>
  <li>Apply Enumerable techniques in a real context</li>
  <li>Read text from and write text to files</li>
</ul>

<h2 id="base-expectations">Base Expectations</h2>

<h3 id="an-interaction-model">An Interaction Model</h3>

<p>We‚Äôre going to use Chisel from the command line, reading in Markdown
files and writing out HTML. It‚Äôll go like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby ./lib/chisel.rb my_input.markdown my_output.html
Converted my_input.markdown <span class="o">(</span>6 lines<span class="o">)</span> to my_output.html <span class="o">(</span>8 lines<span class="o">)</span>
</code></pre></div></div>

<p>Where <code class="highlighter-rouge">my_input.markdown</code> is a file like this:</p>

<pre><code class="language-plain"># My Life in Desserts

## Chapter 1: The Beginning

"You just *have* to try the cheesecake," he said. "Ever since it appeared in
**Food &amp; Wine** this place has been packed every night."
</code></pre>

<p>And the resulting <code class="highlighter-rouge">my_output.html</code> would contain the following:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>My Life in Desserts<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;h2&gt;</span>Chapter 1: The Beginning<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;p&gt;</span>
  "You just <span class="nt">&lt;em&gt;</span>have<span class="nt">&lt;/em&gt;</span> to try the cheesecake," he said. "Ever since it appeared in
  <span class="nt">&lt;strong&gt;</span>Food <span class="ni">&amp;amp;</span> Wine<span class="nt">&lt;/strong&gt;</span> this place has been packed every night."
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>Got it?</p>

<h3 id="restrictions">Restrictions</h3>

<ul>
  <li>Don‚Äôt use any regular expressions</li>
  <li>Only use existing parsers to generate sample output or to validate your output</li>
</ul>

<h3 id="expected-functionality">Expected Functionality</h3>

<p>Parsing Markdown is a good application of spiraling design. As such, your
expected functionality is broken down into levels. But <em>all</em> of these
levels should be completed in order to earn full marks.</p>

<h4 id="level-1---text-basics">Level 1 - Text Basics</h4>

<p>A chunk of text is defined as one or more lines of content which does not
contain any blank lines. For example, this is one chunk of text:</p>

<h5 id="paragraphs">Paragraphs</h5>

<p>By default, a free-standing line of text in a markdown document will go into a <code class="highlighter-rouge">&lt;p&gt;</code> tag.
For example, this text:</p>

<pre><code class="language-plain">This is the first line of the paragraph.
</code></pre>

<p>Would be rendered as:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>This is the first line of the paragraph.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>Additionally, lines separated by a <strong>single line break</strong> remain part of the same paragraph.
For example this markdown:</p>

<pre><code class="language-plain">This is the first line of the paragraph.
This is the second line of the same paragraph.
</code></pre>

<p>Becomes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>This is the first line of the paragraph. This is the second line of the same paragraph.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>If we want to create multiple paragraphs, we need to insert 2 line breaks to separate the lines:</p>

<pre><code class="language-plain">This is the first line of the first paragraph.

This is the first line of the second paragraph.
</code></pre>

<p>Becomes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>This is the first line of the first paragraph.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span>This is the first line of the second paragraph.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<h5 id="headers">Headers</h5>

<p>The other basic text entity we‚Äôll support is the <strong>header</strong>. Headers are used in documents to indicate
a headline in large text. HTML supports different levels of header tags: <code class="highlighter-rouge">&lt;h1&gt;</code>, <code class="highlighter-rouge">&lt;h2&gt;</code>, <code class="highlighter-rouge">&lt;h3&gt;</code>, etc.</p>

<p>In markdown, we create a header with some number of <code class="highlighter-rouge">#</code> signs (corresponding to the header level) followed
by the text for the header.</p>

<p>For example:</p>

<pre><code class="language-plain">## Here's an H2
</code></pre>

<p>Becomes</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Here's an H2<span class="nt">&lt;/h2&gt;</span>
</code></pre></div></div>

<p>Note that unlike paragraphs, markdown headers only contain one line. So this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Header
followed by text
</code></pre></div></div>

<p>Becomes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Header<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>followed by text<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>And:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Header 1
## Header 2
</code></pre></div></div>

<p>Becomes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Header 1<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;h2&gt;</span>Header 2<span class="nt">&lt;/h2&gt;</span>
</code></pre></div></div>

<h5 id="requirements">Requirements</h5>

<p>Build up your Chisel so it supports:</p>

<ul>
  <li>A chunk of text starting with <code class="highlighter-rouge">#</code>, <code class="highlighter-rouge">##</code>, <code class="highlighter-rouge">###</code>, <code class="highlighter-rouge">####</code>, or <code class="highlighter-rouge">#####</code> is turned
into an HTML header (<code class="highlighter-rouge">&lt;h1&gt;</code>, <code class="highlighter-rouge">&lt;h2&gt;</code>) with the header level corresponding to the
number of <code class="highlighter-rouge">#</code> symbols</li>
  <li>A chunk of text <em>not</em> starting with <code class="highlighter-rouge">#</code> is turned into a paragraph</li>
</ul>

<h4 id="level-2---formatting">Level 2 - Formatting</h4>

<p>With Level 1 completed, move on to Level 2:</p>

<ul>
  <li>Within either a header or a paragraph, any word or words wrapped in <code class="highlighter-rouge">*</code> should
be enclosed in <code class="highlighter-rouge">&lt;em&gt;</code> tags</li>
  <li>Within either a header or a paragraph, any word or words wrapped in <code class="highlighter-rouge">**</code> should
be enclosed in <code class="highlighter-rouge">&lt;strong&gt;</code> tags</li>
</ul>

<p>Make sure to consider scenarios like this: <code class="highlighter-rouge">My *emphasized and **stronged** text* is awesome.</code></p>

<h4 id="level-3---lists">Level 3 - Lists</h4>

<p>Often in writing we want to create unordered (bullet) or ordered (numbered) lists.
Build support for <strong>unordered lists</strong> like this:</p>

<pre><code class="language-plain">My favorite cuisines are:

* Sushi
* Barbeque
* Mexican
</code></pre>

<p>Which should output:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  My favorite cuisines are:
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>Sushi<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Barbeque<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Mexican<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>Then build support for <strong>ordered lists</strong> which use numbers for the markers.
Though, confusingly, the numbers themselves don‚Äôt matter. Some authors use <code class="highlighter-rouge">1.</code>
to mark every list element and let the HTML renderer (aka browser) figure things out:</p>

<pre><code class="language-plain">My favorite cuisines are:

1. Sushi
2. Barbeque
3. Mexican
</code></pre>

<p>Which is turned into:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  My favorite cuisines are:
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>Sushi<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Barbeque<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Mexican<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>
</code></pre></div></div>

<h2 id="extensions">Extensions</h2>

<p>If you finish all the base expectations, consider implementing two of these extensions:</p>

<h3 id="images">Images</h3>

<p>Add support for images, both with and without the optional title attribute. Don‚Äôt implement the Reference-Style Links. <a href="http://daringfireball.net/projects/markdown/syntax#img">See the specification</a></p>

<h3 id="blocks--blockquotes">Blocks &amp; Blockquotes</h3>

<p>Add support for both <a href="http://daringfireball.net/projects/markdown/syntax#blockquote">Blockquotes</a> and <a href="http://daringfireball.net/projects/markdown/syntax#precode">Code Blocks</a>.</p>

<h3 id="links">Links</h3>

<p>At this point you‚Äôre familiar with the basics of how Markdown works. Go
<a href="http://daringfireball.net/projects/markdown/syntax#link">straight to the source to see how HTML links should work</a>. You do not need to implement the ‚ÄúReference-Style Links‚Äù, just the normal inline ones.</p>

<h3 id="reference-style-links">Reference-Style Links</h3>

<p>Revisit the documentation about Links and build up support for the reference-style links it describes.</p>

<h3 id="reverse-chisel">Reverse Chisel</h3>

<p>Can you implement a reverser which takes in HTML and outputs Markdown?</p>

<p>This extension is quite hard, so it counts double.</p>

<h2 id="evaluation-rubric">Evaluation Rubric</h2>

<p>The project will be assessed with the following guidelines:</p>

<ul>
  <li>4: Above expectations</li>
  <li>3: Meets expectations</li>
  <li>2: Below expectations</li>
  <li>1: Well-below expectations</li>
</ul>

<p><strong>Expectations:</strong></p>

<h3 id="1-ruby-syntax--style">1. Ruby Syntax &amp; Style</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Applies appropriate attribute encapsulation</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer creates instance and local variables appropriately</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Naming follows convention (is idiomatic)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Ruby methods used are logical and readable</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements appropriate enumerable methods (#each is used sparingly)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is indented properly</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code does not exceed 80 characters per line</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Each class has correctly-named files and corresponding test files in the proper directories</li>
</ul>

<h3 id="2-breaking-logic-into-components">2. Breaking Logic into Components</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is effectively broken into methods &amp; classes</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer writes methods less than 8 lines</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />No more than 3 methods break the principle of SRP</li>
</ul>

<h3 id="3-test-driven-development">3. Test-Driven Development</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Each method is tested</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Functionality is accurately covered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Tests implement Ruby syntax &amp; style</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Balances unit and integration tests</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Evidence of edge cases testing</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A test RakeTask is implemented</li>
</ul>

<h3 id="4-functionality">4. Functionality</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Application meets all requirements (extension not req‚Äôd)</li>
</ul>

<h3 id="5-version-control">5. Version Control</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer commits at a pace of at least 1 commit per hour</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements branching and PRs</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />The final submitted version is merged into master</li>
</ul>
:ET