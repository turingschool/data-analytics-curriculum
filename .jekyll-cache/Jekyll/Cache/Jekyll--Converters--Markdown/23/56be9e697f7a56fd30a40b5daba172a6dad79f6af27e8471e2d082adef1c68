I"VR<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand why we use tests</li>
  <li>Define the stages of a test</li>
  <li>Define a rspec test</li>
  <li>Use a variety of assertion methods</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>Gem</li>
  <li>Test</li>
  <li>Assertion</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>Thinking back to your capstone work; how did you know if your program was working?</li>
  <li>What are some potential drawbacks to this approach?</li>
</ul>

<h2 id="test-etiquette">Test Etiquette</h2>

<h3 id="file-structure">File Structure</h3>

<ul>
  <li>Spec files live in their own <code class="highlighter-rouge">spec</code> directory</li>
  <li>Implementation code files live in a sibling <code class="highlighter-rouge">lib</code> directory</li>
  <li>Spec files should reflect the class they’re testing with <code class="highlighter-rouge">_spec</code> appended to the file name, e.g. <code class="highlighter-rouge">spec/name_of_class_spec.rb</code></li>
  <li>In your test, you’ll now <code class="highlighter-rouge">require "./lib/name_of_class.rb"</code></li>
  <li>Run your spec files from the root of the project directory, e.g. <code class="highlighter-rouge">rspec spec</code></li>
  <li>If you want to run a specfic spec file you can append the location of that file to the <code class="highlighter-rouge">rspec spec</code> command. So <code class="highlighter-rouge">rspec spec spec/name_of_file_spec.rb</code></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── lib
|   └── name_of_class.rb
└── spec
    └── name_of_class_spec.rb
</code></pre></div></div>

<h3 id="rspec-setup">rspec Setup</h3>

<p>Rspec is a framework used for automated testing. It is the testing framework used on many of the homework exercises you’ve been assigned.
<a href="https://rubydoc.info/gems/rspec-core">Rspec Core Documentation</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install rspec
</code></pre></div></div>

<ul>
  <li>Require <code class="highlighter-rouge">rspec</code> - the easy and explicit way to run all your tests</li>
</ul>

<h3 id="rspec-convention">rspec Convention</h3>

<ul>
  <li>At the top of every spec file: <code class="highlighter-rouge">describe NameOfClass</code></li>
  <li>describe ‘#name_of_method’
    <ul>
      <li>It is good practice to have another describe block for the name of method. That way we can group all assertions dealing with this method in this describe block.</li>
    </ul>
  </li>
  <li>We need to have an assertion at the end of every test
    <ul>
      <li>A lot of times we are going to compare if two values are equal to each other</li>
      <li>We do that by writing <code class="highlighter-rouge">expect(actual).to eq(expected)</code> where actual is the result of the method call or object querying, and expected is the value we expect it to be.</li>
    </ul>
  </li>
  <li><a href="https://rubydoc.info/gems/rspec-expectations">Rspec Expectations Documentation</a></li>
</ul>

<h2 id="code-along">Code-Along</h2>

<h3 id="scenario-specifications">Scenario Specifications</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/student'</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Student:0x007fa71e12c1f0 @cookies=[], @name="Penelope"&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span><span class="p">.</span><span class="nf">name</span>
<span class="o">=&gt;</span> <span class="s2">"Penelope"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span><span class="p">.</span><span class="nf">cookies</span>
<span class="o">=&gt;</span> <span class="p">[]</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span><span class="p">.</span><span class="nf">add_cookie</span><span class="p">(</span><span class="s1">'Chocolate Chunk'</span><span class="p">)</span>
<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span><span class="p">.</span><span class="nf">add_cookie</span><span class="p">(</span><span class="s1">'Snickerdoodle'</span><span class="p">)</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">student</span><span class="p">.</span><span class="nf">cookies</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"Chocolate Chunk"</span><span class="p">,</span> <span class="s2">"Snickerdoodle"</span><span class="p">]</span>
</code></pre></div></div>

<p>Now, let’s write tests based on the interaction pattern above.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rspec'</span>

<span class="n">describe</span> <span class="no">Student</span>
  <span class="c1"># test it exists</span>
  <span class="c1"># test it has a name</span>
  <span class="c1"># test it has cookies</span>
  <span class="c1"># test it can add cookies</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s build out our Student Test!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rspec'</span>

<span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'#initialize'</span> <span class="k">do</span>
    <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
    <span class="n">it</span> <span class="s1">'is an instance of student'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span> <span class="no">Student</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Write tests</li>
  <li>Run tests</li>
  <li>Thoroughly read errors &amp; failures</li>
  <li>Write implementation code</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span>

<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Do it all again</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rspec'</span>
<span class="nb">require</span> <span class="s1">'./lib/student'</span>

<span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'#initialize'</span> <span class="k">do</span>
    <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
    <span class="n">it</span> <span class="s1">'is an instance of student'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span> <span class="no">Student</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has a name'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'Penelope'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">name</span>
    <span class="vi">@name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="seat">S.E.A.T</h2>

<p>Each test that we create needs 4 components to be a properly built test.</p>

<ul>
  <li>Setup - The setup of a test is all of the lines of code that need to be executed in order to verify some behavior. Because each test is run individually, we often see the same setup being created multiple times.</li>
  <li>Execution - The execution is the actual running of the method we are testing.  This sometimes happens on the same line as the assertion, and sometimes happens prior to the assertion.</li>
  <li>Assertion - The verification of the behavior we are expecting.  This is really the main focus of the test; without the assertion, we have no test.</li>
  <li>Teardown - After we complete a test, we want to delete all of our setup, and clear the scope for our next test.  In minitest this is done automatically! So, you won’t need to worry about this in Mod1, but it is important to know for other testing frameworks.</li>
</ul>

<p>With a partner, see if you can identify each of the components in the following tests:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rspec'</span>
<span class="nb">require</span> <span class="s1">'./lib/student'</span>

<span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'#initialize'</span> <span class="k">do</span>
    <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
    <span class="n">it</span> <span class="s1">'is an instance of student'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span> <span class="no">Student</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has a name'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'Penelope'</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has cookies by default'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">cookies</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="p">[]</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s1">'#add_cookie'</span> <span class="k">do</span>
    <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
    <span class="n">it</span> <span class="s1">'can add chocolate chip'</span> <span class="k">do</span>
      <span class="n">student</span><span class="p">.</span><span class="nf">add_cookie</span><span class="p">(</span><span class="s1">'Chocolate Chip'</span><span class="p">)</span>
      <span class="n">student</span><span class="p">.</span><span class="nf">add_cookie</span><span class="p">(</span><span class="s1">'Snickerdoodle'</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">cookies</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="p">[</span><span class="s1">'Chocolate Chip'</span><span class="p">,</span> <span class="s1">'Snickerdoodle'</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h1 id="testing-cont-warmup">Testing Cont. Warmup</h1>
<p>What do you think the following <code class="highlighter-rouge">.to</code> methods do?</p>

<ul>
  <li><code class="highlighter-rouge">.to eq</code></li>
  <li><code class="highlighter-rouge">.to be_a</code></li>
  <li><code class="highlighter-rouge">.to be true </code></li>
  <li><code class="highlighter-rouge">.to be_nil</code></li>
  <li><code class="highlighter-rouge">.to include</code></li>
</ul>

<h2 id="additional-test-intricacies">Additional Test Intricacies</h2>
<ul>
  <li>Each test is independent of the next; <strong>don’t depend on tests to run in order</strong> of how they’re written
    <ul>
      <li>However, it clarifies your code to other humans to write in order of complexity; aim to start from most basic to most complex functionality and keep tests grouped by method</li>
    </ul>
  </li>
  <li>You can <code class="highlighter-rouge">before(:each)</code> method
    <ul>
      <li>This will provide shared test setup run before each individual test</li>
    </ul>
  </li>
  <li>Tests will generally return an <code class="highlighter-rouge">E</code> for error, <code class="highlighter-rouge">F</code> for failure &amp; <code class="highlighter-rouge">.</code> for passing</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="ensuring-dynamic-functionality">Ensuring Dynamic Functionality</h3>

<p>We should make sure that all of our methods can handle different cases, ensuring that our implementation code is dynamic, e.g.:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_test.rb</span>
<span class="nb">require</span> <span class="s1">'rspec'</span>

<span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">describe</span> <span class="s1">'#initialize'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'is an instance of student'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="vi">@student</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span> <span class="no">Student</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has a name'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="vi">@student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'Penelope'</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has a different name'</span> <span class="k">do</span>
      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'James'</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'James'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="testing-edge-cases">Testing Edge Cases</h3>

<ul>
  <li>Ensure that your implementation code can handle things we might not expect, e.g.:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># student_spec.rb</span>
<span class="n">describe</span> <span class="no">Student</span> <span class="k">do</span>
  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Penelope'</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">describe</span> <span class="s1">'#initialize'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'is an instance of student'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="vi">@student</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span> <span class="no">Student</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'has a name'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="vi">@student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'Penelope'</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'gives assigns a default name'</span> <span class="k">do</span>
      <span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">student</span><span class="p">.</span><span class="nf">name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="s1">'Default Name Assigned'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="recap">Recap</h2>

<ul>
  <li>What 2 directories should we have within our project directory?</li>
  <li><code class="highlighter-rouge">rspec</code> setup
    <ul>
      <li>What do you have to require in a spec file?</li>
      <li>What goes in the initial describe block?</li>
      <li>What is the syntax for a rspec spec?</li>
      <li>Name 3 <code class="highlighter-rouge">.to</code> methods you learned about today &amp; describe their syntax.</li>
    </ul>
  </li>
</ul>
:ET