I"Qô<h2 id="who-are-you">Who Are You?</h2>

<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>review migrations, model tests, feature tests</li>
  <li>review RESTful routing and non-RESTful routing</li>
  <li>explain the use of Authentication and why it‚Äôs important</li>
  <li>implement Authentication using BCrypt</li>
  <li>use a <code class="highlighter-rouge">flash</code> to send temporary content to the view</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>authentication</li>
  <li>hash</li>
  <li>helper_method</li>
  <li>‚Äúflash‚Äù message</li>
</ul>

<h2 id="overview">Overview</h2>

<ul>
  <li>Creating a user in our database</li>
  <li>Using <em>BCrypt</em> to hash passwords that we save</li>
</ul>

<hr />

<h2 id="what-is-authentication">What is Authentication?</h2>

<p>Authentication is the client proving to the application that they are who they say they are.</p>

<p>First, we need a user to register, which is a ‚Äúcreate‚Äù action on a ‚Äúuser‚Äù resource. We‚Äôll use a Rails form helper for the registration sequence.</p>

<p>From there, we want to make a ‚Äúlogin‚Äù route, which is NOT a RESTful route so we can verify who they are.</p>

<p>The common pattern we see today is the use of an email address to identify a user, but a ‚Äúusername‚Äù can also be used. We also need a password for them. We handle this interaction a little differently than we handle a traditional user creation because we‚Äôre setting the groundwork to remember our user in the sessions/cookie class coming up.</p>

<h2 id="registering-users">Registering Users</h2>

<p>We want to remember users who come to our application. This will require a way for a user to log in to our application, and for our application to ‚Äúremember‚Äù that user.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit '/'
and I can click a link that says "Sign Up to Be a User"
and I can enter registration details in a form
and submit that form
Then I should see a welcome message with my username
and my user details have been saved in the database.
</code></pre></div></div>

<p>Let‚Äôs start with a test.</p>

<p>If you want to add this to an existing application, you can, or you can set up a new Rails application to follow along in class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"User registration form"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"creates new user"</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="n">root_path</span>

    <span class="n">click_on</span> <span class="s2">"Register as a User"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">new_user_path</span><span class="p">)</span>

    <span class="n">username</span> <span class="o">=</span> <span class="s2">"funbucket13"</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s2">"test"</span>

    <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">username</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="n">password</span>

    <span class="n">click_on</span> <span class="s2">"Create User"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Running the test will give us errors to follow about routing and creating a controller.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#routes.rb</span>

  <span class="n">get</span> <span class="s2">"/"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"welcome#index"</span>
</code></pre></div></div>

<p>Or we can use the handy <code class="highlighter-rouge">root</code> method that Rails gives us to create a route for the root path (‚Äú/‚Äù):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#routes.rb</span>

  <span class="n">root</span> <span class="s2">"welcome#index"</span>
</code></pre></div></div>

<p>Next, let‚Äôs create the <code class="highlighter-rouge">WelcomeController</code> and a method for the <code class="highlighter-rouge">index</code> action as well. We are going to be rendering some basic content so we don‚Äôt need to fetch any data or build any instance variables in our controller.</p>

<p>Now when we run our test, we get a missing template error, so let‚Äôs create an empty view template. This will cause a new error in our test about a missing link.</p>

<p>Let‚Äôs add the link to sign up in the <code class="highlighter-rouge">app/views/welcome/index.html.erb</code> file</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%=</span> <span class="na">link_to</span> <span class="err">"</span><span class="na">Register</span> <span class="na">as</span> <span class="na">a</span> <span class="na">User</span><span class="err">"</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>But which URI path should we send a user to who clicks on this link?</p>

<p>Since this is a new ‚Äúuser‚Äù resource, we‚Äôll name this as we have in other Rails applications.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%=</span> <span class="na">link_to</span> <span class="err">"</span><span class="na">Register</span> <span class="na">as</span> <span class="na">a</span> <span class="na">User</span><span class="err">",</span> <span class="na">new_user_path</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li>Be sure to use path helpers everywhere you can!</li>
</ul>

<p>We can continue to follow our errors to create a new resources route for our users to point to a controller. We need a ‚Äúnew‚Äù path to display the form, and a ‚Äúcreate‚Äù path to save the form data.</p>

<p>For the ‚Äúnew‚Äù page, once we create the route, and the UsersController, and the correct action method, we‚Äôll need to create a form.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/users_controller.rb</span>

<span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/users/new.html.erb --&gt;</span>

<span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form_with</span> <span class="na">model:</span> <span class="err">@</span><span class="na">user</span> <span class="na">do</span> <span class="err">|</span><span class="na">form</span><span class="err">|</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form.label</span> <span class="na">:username</span><span class="err">,</span> <span class="err">'</span><span class="na">Username:</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form.text_field</span> <span class="na">:username</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form.label</span> <span class="na">:password</span><span class="err">,</span> <span class="err">'</span><span class="na">Password:</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form.password_field</span> <span class="na">:password</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form.submit</span> <span class="err">'</span><span class="na">Create</span> <span class="na">User</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Run the tests again and the error is</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
       No route matches [POST] "/users/new"
</code></pre></div></div>

<p>Our form doesn‚Äôt know where to send the information!</p>

<p>Let‚Äôs add this route to our <code class="highlighter-rouge">routes.rb</code></p>

<p>But now we‚Äôre getting an error that the POST route still doesn‚Äôt exist!</p>

<p>That‚Äôs because form_with is using a model of <code class="highlighter-rouge">@user</code> which hasn‚Äôt been set, we need to build a blank <code class="highlighter-rouge">User</code> object first.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Our tests will now complain about an <code class="highlighter-rouge">uninitialized constant UsersController::User</code>. Let‚Äôs create a User model, so we‚Äôll start with an ActiveRecord database migration.</p>

<p><code class="highlighter-rouge">rails g migration CreateUsers username:string password_digest:string</code></p>

<p>WAIT ‚Äì ‚Äúpassword_digest‚Äù ?? We were calling it ‚Äúpassword‚Äù a minute ago.</p>

<p>More on that in a moment‚Ä¶</p>

<p>Apply that migration (<code class="highlighter-rouge">rake db:migrate</code>).</p>

<p>We should also make sure that our User model requires that the username and password fields be populated by adding validations.</p>

<p>Let‚Äôs start with a test in <code class="highlighter-rouge">spec/models/user_spec.rb</code> that looks like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">"validations"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:username</span><span class="p">)}</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:username</span><span class="p">)}</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:password</span><span class="p">)}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let‚Äôs try to make these tests pass with this User model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># models/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
  <span class="n">validates_presence_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our model test is blowing up because we don‚Äôt have <code class="highlighter-rouge">shoulda-matchers</code> installed or set up, let‚Äôs go do that really quickly.</p>

<h2 id="shoulda-matchers">Shoulda-Matchers</h2>

<p>Add this to our development/test block:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'shoulda-matchers'</span>
</code></pre></div></div>

<p>Then run <code class="highlighter-rouge">bundle</code> to install that gem.</p>

<p>And add this at the bottom of our <code class="highlighter-rouge">rails_helper.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Shoulda</span><span class="o">::</span><span class="no">Matchers</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">integrate</span> <span class="k">do</span> <span class="o">|</span><span class="n">with</span><span class="o">|</span>
    <span class="n">with</span><span class="p">.</span><span class="nf">test_framework</span> <span class="ss">:rspec</span>
    <span class="n">with</span><span class="p">.</span><span class="nf">library</span> <span class="ss">:rails</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our model test is complaining that we don‚Äôt have an attribute called <code class="highlighter-rouge">password</code>, and it‚Äôs right! Look at the migration and the schema. We have a field called <code class="highlighter-rouge">password_digest</code>.</p>

<h2 id="why-password_digest">Why <code class="highlighter-rouge">password_digest</code>?</h2>

<h3 id="bcrypt">BCrypt</h3>

<ul>
  <li><a href="https://github.com/codahale/bcrypt-ruby">BCrypt Docs</a></li>
  <li><a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password">Rails built-in SecurePassword module</a></li>
  <li>Secure Password Requires that the object have a <code class="highlighter-rouge">password_digest</code> attribute that will recognize both <code class="highlighter-rouge">password</code> and <code class="highlighter-rouge">password_confirmation</code> as attributes even though the attribute is called <code class="highlighter-rouge">password_digest</code>.</li>
  <li>Built into Rails, comes out of the box in the gem file but it is commented out by default. Must uncomment to use it.</li>
  <li>Takes password and password_confirmation (if necessary) and encrypts it to a very long string which is hard to decrypt; this is referred to as <strong>hashing</strong>.</li>
  <li>Takes care of matching the <code class="highlighter-rouge">password</code> and <code class="highlighter-rouge">password_confirmation</code> fields (if used).</li>
</ul>

<p>Find the <code class="highlighter-rouge">gem 'bcrypt'</code> in the <code class="highlighter-rouge">Gemfile</code> and uncomment it. Run <code class="highlighter-rouge">bundle</code> again to complete the process.</p>

<p>We now need to tell our model that it will be expecting a field <code class="highlighter-rouge">password</code> (and <code class="highlighter-rouge">password_confirmation</code> if needed) with the <code class="highlighter-rouge">has_secure_password</code> entry below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># models/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
  <span class="n">validates_presence_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">true</span>

  <span class="n">has_secure_password</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the model tests again and they should be passing.</p>

<h2 id="we-now-return-you-to-your-regularly-scheduled-tdd">We now return you to your regularly-scheduled TDD</h2>

<p>Now that we‚Äôre past the error about our missing User model, our form is complaining about a missing ‚Äòusername‚Äô field.</p>

<p>If you add the <code class="highlighter-rouge">launchy</code> gem to your Gemfile (and run <code class="highlighter-rouge">bundle</code>) then you‚Äôll be able to add <code class="highlighter-rouge">save_and_open_page</code> as a command in your feature test, at some point before the failing line.</p>

<p>If we examine the HTML on the page in our browser, we see that the form fields aren‚Äôt called <code class="highlighter-rouge">username</code> and <code class="highlighter-rouge">password</code>, they‚Äôre called <code class="highlighter-rouge">user_username</code> and <code class="highlighter-rouge">user_password</code>.</p>

<p>This is because the ‚Äúform helper‚Äù called <code class="highlighter-rouge">form_with</code> that we‚Äôre using is taking a User model and prefixing the names of the fields, so we can adjust our test, and carry on.</p>

<p>(be sure to remove the <code class="highlighter-rouge">save_and_open_page</code> commend)</p>

<h2 id="whew-done">Whew, done.</h2>

<p>Now our test is telling us to make our <code class="highlighter-rouge">create</code> method in our <code class="highlighter-rouge">UsersController</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Whenever we ‚Äúcreate‚Äù something, we generally want to redirect the user if everything worked, or re-render the ‚Äúnew‚Äù form if something failed. We won‚Äôt worry about ‚Äúsad path‚Äù right now, and just redirect back to our welcome page when we‚Äôre finished.</p>

<ul>
  <li>Remember to use path helpers as much as possible!</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">redirect_to</span> <span class="n">root_path</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now our test can‚Äôt find the username on the resulting page, so let‚Äôs try to create the User and figure out how to report that to the browser.</p>

<p>We are ‚Äúdream driving‚Äù at this point: ‚ÄúI really wish I had a user object that I could use to create users‚Äù</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
  <span class="n">redirect_to</span> <span class="n">root_path</span>
<span class="k">end</span>

<span class="kp">private</span>
<span class="k">def</span> <span class="nf">user_params</span>
  <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:user</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:username</span><span class="p">,</span> <span class="ss">:password</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run our feature test again we get this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: expect<span class="o">(</span>page<span class="o">)</span>.to have_content<span class="o">(</span><span class="s2">"Welcome, #{username}!"</span><span class="o">)</span>
  expected to find text <span class="s2">"Welcome, funbucket13!"</span> <span class="k">in</span> <span class="s2">"Register as a User"</span>
</code></pre></div></div>

<p>Let‚Äôs look back at the UsersController. It looks like the new user is being created, so let‚Äôs add a flash message to show the welcome message:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">new_user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
  <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">new_user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
  <span class="n">redirect_to</span> <span class="n">root_path</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next, we probably need to add those flash messages to our site. Since this is the kind of mechanism we‚Äôll want on all of our pages, let‚Äôs add it to the main <code class="highlighter-rouge">application.html.erb</code> in our view layouts.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= stylesheet_link_tag    'application', media: 'all' =</span><span class="o">&gt;</span> <span class="kp">true</span> <span class="sx">%&gt;
  &lt;%= javascript_include_tag 'application' %&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;% flash.each do |name, msg| %&gt;
¬†¬†  &lt;%=</span> <span class="n">content_tag</span> <span class="ss">:div</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="ss">class: </span><span class="nb">name</span> <span class="sx">%&gt;
¬†¬†&lt;% end %&gt;</span>
<span class="o">&lt;</span><span class="sx">%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</span></code></pre></div></div>

<h2 id="improving-user-experience">Improving user experience</h2>

<p>If your username is an email address, you should always LOWERCASE your user‚Äôs input before trying to save it or look it up in the database. If you want case-sensitive usernames where ‚ÄúFrancine‚Äù is a different user than ‚Äúfrancine‚Äù and ‚ÄúfRaNcInE‚Äù then you don‚Äôt need to change anything.</p>

<p>If you‚Äôre using email addresses, though, this is a better approach:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">create</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">user_params</span>
        <span class="n">user</span><span class="p">[</span><span class="ss">:username</span><span class="p">]</span> <span class="o">=</span> <span class="n">user</span><span class="p">[</span><span class="ss">:username</span><span class="p">].</span><span class="nf">downcase</span>
        <span class="n">new_user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
        <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">new_user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
        <span class="n">redirect_to</span> <span class="n">root_path</span>
    <span class="k">end</span>
</code></pre></div></div>

<h2 id="logging-in">Logging In</h2>

<ul>
  <li>On our root page, we should also have the option to log in if our account already exists.</li>
  <li>Let‚Äôs add a new test for this functionality</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a registered user
When I visit '/'
and I click on a link that says "I already have an account"
Then I should see a login form
When I enter my username and password
and submit the form
I am redirected to the home page
and I see a welcome message with my username
and I should no longer see the link that says "I already have an account"
and I should no longer see the link that says "Register as a User"
and I should see a link that says "Log out"
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"Logging In"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"can log in with valid credentials"</span> <span class="k">do</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">username: </span><span class="s2">"funbucket13"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"test"</span><span class="p">)</span>

    <span class="n">visit</span> <span class="n">root_path</span>

    <span class="n">click_on</span> <span class="s2">"I already have an account"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">login_path</span><span class="p">)</span>

    <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">username</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">password</span>

    <span class="n">click_on</span> <span class="s2">"Log In"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run this test and we get a missing link error. Add the link to the welcome/index view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"I already have an account"</span><span class="p">,</span> <span class="n">login_path</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Next, we need to add the route. But where should we send the user to to log in? Lets send them to a non-RESTful controller action that will relate to our process. We‚Äôll correct this in the sessions/cookies class later.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is not RESTful, and that's OKAY</span>
<span class="n">get</span> <span class="s1">'/login'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'users#login_form'</span>
</code></pre></div></div>

<p>We‚Äôll need to create the ‚Äúlogin_form‚Äù method in our UsersController, and an associated view template.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">users</span><span class="o">/</span><span class="n">login_form</span><span class="p">.</span><span class="nf">html</span><span class="p">.</span><span class="nf">erb</span> <span class="o">--&gt;</span>

<span class="o">&lt;</span><span class="sx">%= form_with url: login_path, method: :post do |form| %&gt;
  &lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:username</span><span class="p">,</span> <span class="s2">"Username:"</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= form.text_field :username %&gt;
  &lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:password</span><span class="p">,</span> <span class="s2">"Password:"</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= form.text_field :password %&gt;
  &lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="s2">"Log In"</span> <span class="o">%&gt;</span>
<span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</code></pre></div></div>

<p>Now that we have our form, when we run RSpec, we get a new error complaining about not having a POST route, so we‚Äôll add that to our routes next.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">post</span> <span class="s1">'/login'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'users#login'</span>
</code></pre></div></div>

<p>And we‚Äôll need to create the associated controller action method. This will be similar to our <code class="highlighter-rouge">create</code> method, but we‚Äôll do a <code class="highlighter-rouge">User.find_by</code> instead of a <code class="highlighter-rouge">User.create</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">login</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
  <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
  <span class="n">redirect_to</span> <span class="n">root_path</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="passing-tests">Passing tests!</h2>

<p>Yay, we‚Äôre done, right?? Our tests are passing!</p>

<h2 id="checking-the-users-password">Checking the User‚Äôs Password</h2>

<p>If you look at the <code class="highlighter-rouge">UsersController#login</code> action, we aren‚Äôt actually checking the user‚Äôs password. We want to add more testing to ensure that users can‚Äôt log in with bad credentials:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s2">"cannot log in with bad credentials"</span> <span class="k">do</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">username: </span><span class="s2">"funbucket13"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"test"</span><span class="p">)</span>

  <span class="c1"># we don't have to go through root_path and click the "I have an account" link any more</span>
  <span class="n">visit</span> <span class="n">login_path</span>

  <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">username</span>
  <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="s2">"incorrect password"</span>

  <span class="n">click_on</span> <span class="s2">"Log In"</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">login_path</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Sorry, your credentials are bad."</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If we run the test now, it‚Äôs redirecting us back to the welcome page, but we want to remain on the login page and see a flash message.</p>

<p>In the <code class="highlighter-rouge">UsersController#login</code> action, we need to check the password and handle the case when it doesn‚Äôt match. <strong>Remember, we never store a user‚Äôs actual plaintext password in the database!</strong> So we can‚Äôt do something like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
<span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">passsword</span> <span class="o">==</span> <span class="n">params</span><span class="p">[</span><span class="ss">:password</span><span class="p">]</span>
  <span class="c1"># password matches</span>
<span class="k">else</span>
  <span class="c1">#password doesn't match</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What we‚Äôre actually storing in the database is a <strong>hash</strong> or <strong>digest</strong> of the user‚Äôs password, so we are going need to hash the given password and see if it matches what‚Äôs in our database. Luckily, that <code class="highlighter-rouge">has_secure_password</code> line we added to our User model gives us a handy method to do this for us called <code class="highlighter-rouge">authenticate</code>. This method is called on a User object and takes a password as an argument:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">login</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
  <span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:password</span><span class="p">])</span>
    <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
    <span class="n">redirect_to</span> <span class="n">root_path</span>
  <span class="k">else</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:error</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Sorry, your credentials are bad."</span>
    <span class="n">render</span> <span class="ss">:login_form</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our tests should now be passing.</p>

<h3 id="takeaways">Takeaways</h3>

<ul>
  <li>Encrypt passwords in your database when you store them, using bcrypt</li>
  <li>Always lowercase usernames (especially email addresses) before storing/checking them</li>
  <li>Don‚Äôt hesitate to use <em>non-RESTful routes</em> when appropriate</li>
</ul>

<h2 id="wrapup">WrapUp</h2>
<ul>
  <li>What does Authentication mean? Why do we use it and when?</li>
  <li>What are the steps to implementing Authentication in a Rails app?</li>
</ul>
:ET