I"+<p>Academic success in BEM1 means that students demonstrate proficiency and comfort with the concepts below. The expected mastery level can be understood with the following scale:</p>

<p><strong>Mastery</strong>: student is able to explain and implement the concept independently or with light reference</p>

<p><strong>Functional</strong>: student recognizes when to use the concept and can implement it with the support of documentation and/or a collaborator</p>

<p><strong>Familiarity</strong>: student can recognize and describe the concept when needed/appropriate</p>

<p>A student who promotes from this module will be able to do the following:</p>

<h2 id="mastery">Mastery</h2>

<p><strong>Ruby Mechanics:</strong></p>

<ul>
  <li>Students will be able to manipulate strings</li>
  <li>Students will be able to use Integers and Floats and explain the differences between them</li>
  <li>Students will be able to use Arrays and Hashes and explain the differences between them</li>
  <li>Students will be able to identify and utilize Symbols</li>
  <li>Students will be able to appropriately use enumerable methods to iterate over collections</li>
  <li>Students will be able to use the following Flow Control structures:
    <ul>
      <li>if</li>
      <li>elsif</li>
      <li>else</li>
      <li>while</li>
      <li>until</li>
      <li>loop</li>
    </ul>
  </li>
  <li>Students will be able to use boolean expressions to logically manage a programs flow</li>
  <li>Students will be able to use methods, arguments, and return values to break code into logical components</li>
  <li>Students will be able to create Classes that utilize instance variables, attribute accessors, and instance methods</li>
</ul>

<p><strong>Design:</strong></p>

<ul>
  <li>Students will be able to explain the difference between state and behavior and how these concepts are implemented in Ruby</li>
  <li>Students will be able to break down a large technical challenge in to manageable tasks using techniques such as whiteboarding and pseudocode</li>
  <li>Students will be able to utilize Test Driven Development to drive the design of the code.</li>
  <li>Students will be able to explain the Single Responsibility and DRY principles</li>
  <li>Students will be able to write readable code with the following characteristics:
    <ul>
      <li>Variable and method names are self explanatory</li>
      <li>Methods are under 7 lines</li>
      <li>Lines of code are under 80 characters</li>
      <li>Project directory structure adheres to convention</li>
    </ul>
  </li>
</ul>

<p><strong>Testing:</strong></p>

<ul>
  <li>Students will be able to identify what they should test for in order to verify the expected behavior of a program</li>
  <li>Students will be able to accurately test a piece of functionality by writing appropriate Minitest assertions</li>
  <li>Students will be able to translate technical specifications into tests</li>
  <li>Students will be able to write a test before writing code that implements the behavior to make that test pass</li>
</ul>

<p><strong>Debugging:</strong></p>

<ul>
  <li>Students will be able to diagnose and fix bugs</li>
  <li>Students will be able to explain the meaning of common Ruby error messages</li>
  <li>Students will be able to use Pry to create breakpoints in their code</li>
  <li>Students will be able to identify when variables are in and out of scope</li>
</ul>

<p><strong>Version Control:</strong></p>

<ul>
  <li>Students will be able to explain the difference between remote and local repositories</li>
  <li>Students will be able to push, pull, commit, and branch using the Git command line interface</li>
  <li>Students will be able to commit code in small chunks of functionality</li>
  <li>Students will be able to submit and merge Pull Requests using the GitHub interface</li>
  <li>Students will be able to use Git and GitHub to collaborate with a partner on a project</li>
</ul>

<p><strong>Desktop Environment:</strong></p>

<ul>
  <li>Students will be able to use the command line to navigate the machine to write and run Ruby programs</li>
  <li>Students will be able to explain how the command line interface and text editor interact</li>
</ul>

<h2 id="functional">Functional</h2>

<p><strong>Ruby Mechanics:</strong></p>

<ul>
  <li>Students will be able to create a class that inherits from a superclass</li>
  <li>Students will be able to create and mix in a module</li>
  <li>Students will be able to import/export data to files</li>
  <li>Students will be able to create class methods</li>
  <li>Students will be able to describe the difference between class and instance methods</li>
</ul>

<p><strong>Design:</strong></p>

<ul>
  <li>Students will be able to identify use cases for Modules and Inheritance</li>
  <li>Students will be able to limit use of Instance Variables so that they only convey the state of an object</li>
  <li>Students will be able to write code that adheres to the Single Responsibility and DRY principles</li>
</ul>

<p><strong>Testing:</strong></p>

<ul>
  <li>Students will be able to name and order tests so that a test file reads like documentation</li>
  <li>Students will be able to explain what edge case testing is and write tests for those edge cases</li>
  <li>Students will be able to explain the difference between unit and integration testing, and write both types of tests</li>
  <li>Students will be able to implement a stub in an integration test</li>
</ul>

<p><strong>Debugging:</strong></p>

<ul>
  <li>Students will be able to utilize the Ruby Docs and other online resources to aid in debugging</li>
</ul>

<p><strong>Version Control:</strong></p>

<ul>
  <li>Students will be able to provide comments on code on GitHub</li>
  <li>Students will be able to resolve merge conflicts</li>
</ul>

<p><strong>Desktop Environment:</strong></p>

<ul>
  <li>Students will be able to utilize keyboard shortcuts to improve workflow and minimize mouse use</li>
</ul>

<h2 id="familiarity">Familiarity</h2>

<p><strong>Ruby Mechanics:</strong></p>

<ul>
  <li>Students will be able to explain the difference between local and instance variable scope</li>
  <li>Students will be able to explain memory allocation in Ruby</li>
  <li>Students will be able to explain how the call stack works</li>
</ul>

<p><strong>Testing:</strong></p>

<ul>
  <li>Students will be able to explain the purpose of Mocks and Stubs</li>
</ul>

:ET