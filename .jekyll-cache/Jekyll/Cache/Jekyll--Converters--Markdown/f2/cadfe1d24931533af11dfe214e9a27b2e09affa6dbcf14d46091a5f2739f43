I"e<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand why workers are helpful and what kinds of jobs they can do</li>
  <li>Practice writing a job with Sidekiq</li>
  <li>Observe the performance implications of running workers</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - Warmup</li>
  <li>20 - Messages, Queues, and Workers</li>
  <li>Break</li>
  <li>55 - Small Background Jobs Tutorial</li>
  <li>5 - Wrapup</li>
</ul>

<h2 id="warmup">Warmup</h2>

<p>Answer the following questions:</p>

<ol>
  <li>What jobs have you used a worker for in the past?</li>
  <li>How does a worker know to do its work?</li>
  <li>What kind of jobs could your current project do in a worker?</li>
</ol>

<h2 id="messages-queues-and-workers">Messages, Queues, and Workers</h2>

<p>Let’s revisit the theory of workers, including:</p>

<ul>
  <li>Removing “work” from the MVC request/response cycle</li>
  <li>Creating a queue</li>
  <li>Posting messages</li>
  <li>Creating a worker and listening for messages</li>
  <li>Doing the work</li>
  <li>Parallelism</li>
  <li>Posting results and other jobs</li>
  <li>Things that go wrong</li>
</ul>

<h2 id="paired-work">Paired Work</h2>

<p>Now it’s time for you to put these ideas into practice. Get together with a
pair and work through the <a href="http://tutorials.jumpstartlab.com/topics/performance/small_background_jobs.html">Small Background Jobs tutorial</a>.</p>

<h2 id="wrapup">Wrapup</h2>

<p>Let’s spend our last five minutes checking-in on your progress and answering any questions.</p>

<h3 id="additional-resources-for-this-section">Additional resources for this section:</h3>
<ul>
  <li><a href="https://devcenter.heroku.com/articles/background-jobs-queueing">Background Jobs (Heroku)</a></li>
  <li><a href="http://edgeguides.rubyonrails.org/active_job_basics.html">Active Job (Rails Guides)</a></li>
</ul>
:ET