I"Ë?<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand the callbacks that ActiveRecord makes available to trigger an action at various points in an object‚Äôs lifecycle</li>
  <li>Understand some of the basic principles of when to use callbacks and when not to use callbacks in your code</li>
  <li>Understand how ActiveRecord transactions work and when to use them</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>10 - Warm Up and Discussion</li>
  <li>15 - Full Group Instruction: Callbacks</li>
  <li>5 - Break</li>
  <li>15 - Full Group Instruction: Callbacks (Continued)</li>
  <li>10 - Full Group Instruction: Transactions</li>
  <li>5 - Break</li>
  <li>50 - Pair Practice</li>
  <li>10 - Wrap Up</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>Start a gist (or you can use your notebook) and answer the following question:</p>

<ul>
  <li>What are some strategies you‚Äôve used in the past to normalize data your receive from users?</li>
  <li>What are some difficulties you‚Äôve had with these strategies?</li>
  <li>Have you used callbacks before? If so, what were your experiences?</li>
</ul>

<h2 id="lecture-callbacks">Lecture: Callbacks</h2>

<p>Callbacks are helper methods that get called at certain points in the life-cycle of your ActiveRecord object.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before_destroy</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="nf">update_attribute</span><span class="p">(</span><span class="ss">:deleted_at</span><span class="p">,</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">);</span> <span class="kp">false</span> <span class="p">}</span>
</code></pre></div></div>

<p>Callbacks can take one of three forms.</p>

<ul>
  <li>Method references using a symbol</li>
  <li>Callback objects using a block</li>
  <li>Inline methods using a proc</li>
</ul>

<p>If you‚Äôre not using a block syntax for defining a callback, then the access level for a callback should alway be <em>protected</em> or <em>private</em>.</p>

<p>If a callback returns <code class="highlighter-rouge">false</code> (actual <code class="highlighter-rouge">false</code>, not falsey), execution is halted. No further callbacks will be executed. <code class="highlighter-rouge">.save</code> will return false and <code class="highlighter-rouge">.save!</code> will raise an exception.</p>

<p>Ruby‚Äôs implicit returning can potentially bite you here. If your objects aren‚Äôt saving (in this example) for some reason. Make sure that you‚Äôre not accidentally returning <code class="highlighter-rouge">false</code>.</p>

<h3 id="advantages-of-callbacks">Advantages of Callbacks</h3>

<ul>
  <li>Everything is in one place, which helps readability</li>
</ul>

<h3 id="disadvantages-of-callbacks">Disadvantages of Callbacks</h3>

<ul>
  <li>Everything is in one place, which is a code smell that you may be violating the Single Responsibility Principle</li>
  <li>Excessive use of callbacks could make for some heavy classes</li>
</ul>

<h3 id="available-callbacks">Available Callbacks</h3>

<h4 id="save-create-and-update-callbacks">Save (<code class="highlighter-rouge">:create</code> and <code class="highlighter-rouge">:update</code>) callbacks</h4>

<ul>
  <li><code class="highlighter-rouge">before_validation</code></li>
  <li><code class="highlighter-rouge">after_validation</code></li>
  <li><code class="highlighter-rouge">before_save</code></li>
  <li><code class="highlighter-rouge">around_save</code></li>
  <li><code class="highlighter-rouge">before_create</code> (for new records) and <code class="highlighter-rouge">before_update</code> (for existing records)</li>
  <li><code class="highlighter-rouge">around_create</code> (for new records) and <code class="highlighter-rouge">around_update</code> (for existing records)</li>
  <li><code class="highlighter-rouge">after_create</code> (for new records) and <code class="highlighter-rouge">after_update</code> (for existing records)</li>
  <li><code class="highlighter-rouge">after_save</code></li>
</ul>

<p>Getting specific with <code class="highlighter-rouge">:on</code>:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before_validation</span> <span class="ss">:some_callback</span><span class="p">,</span> <span class="ss">on: :create</span>
<span class="n">after_save</span> <span class="ss">:some_callback</span><span class="p">,</span> <span class="ss">on: :update</span>
</code></pre></div></div>

<h3 id="destroy-callbacks">Destroy Callbacks</h3>

<ul>
  <li><code class="highlighter-rouge">before_destroy</code></li>
  <li><code class="highlighter-rouge">around_destroy</code> executes a <code class="highlighter-rouge">DELETE</code> database statement on <code class="highlighter-rouge">yield</code></li>
  <li><code class="highlighter-rouge">after_destroy</code> is called after record has been removed (read-only)</li>
</ul>

<h2 id="when-to-use-callbacks">When to Use Callbacks</h2>

<p>Short answer: <em>Sparingly</em></p>

<p><strong>The Golden Rule of Callbacks</strong>: You should only use a callback when it deals with the model instance you‚Äôre currently working with.</p>

<p>Your callbacks should not have additional responsibilities like saving files, sending emails, etc.</p>

<h4 id="example-normalizing-data">Example: Normalizing Data</h4>

<p>You can use callback to clean-up attribute formatting:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PhoneNumber</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="ss">on: :create</span> <span class="k">do</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">number</span> <span class="o">=</span> <span class="n">number</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/[^0-9]/</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><em>Scrabble-Web</em> had a good example of when to use this: downcasing a word as it came into the model and before it was saved to the database.</p>

<p>You can also call callbacks conditionally:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_save</span> <span class="ss">:normalize_card_number</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:paid_with_card?</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="example-creating-special-tokens">Example: Creating Special Tokens</h4>

<p>You can use callbacks to generate special tokens like invite codes:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span>
  <span class="n">before_create</span> <span class="ss">:create_invite_code</span><span class="p">,</span> <span class="ss">on: :create</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">create_invite_code</span>
    <span class="n">invite_code</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="p">.</span><span class="nf">base64</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>It‚Äôs important to keep SRP in mind when using callbacks. ActiveRecord callbacks shouldn‚Äôt give your models un-modelly responsibilities.</p>

<h4 id="example-paranoia">Example: Paranoia</h4>

<p>What if we never <em>really</em> wanted to delete a record, but just want to mark it as deleted?</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FacebookAccount</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_destroy</span> <span class="k">do</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">update_attribute</span><span class="p">(</span><span class="ss">:deleted_at</span><span class="p">,</span> <span class="no">Time</span><span class="p">.</span><span class="nf">current</span><span class="p">)</span>
    <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You can circumvent this with <code class="highlighter-rouge">delete_all</code>, which skips the whole ‚Äútalking to the model‚Äù bit and goes directly to wiping it out of the database.</p>

<p>You can also create scopes to then return only the active or only the ‚Äúdeleted‚Äù records from the database.</p>

<h4 id="example-cleaning-up">Example: Cleaning Up</h4>

<p>Stretching a bit‚Äîand really poking at the bounds of breaking SRP‚Äîyou can use callbacks to clean-up after your model after they leave this Earth.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">destroy_attached_files</span>
  <span class="no">Paperclip</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Deleting attachments."</span><span class="p">)</span>
  <span class="n">each_attachment</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">attachment</span><span class="o">|</span>
    <span class="n">attachment</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="ss">:flush_deletes</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="the-tldr-on-callbacks">The tl;dr on Callbacks</h3>

<ul>
  <li>Limit your use of ActiveRecord callbacks to commands that operate on the object itself.</li>
  <li>Avoid unexpected side effects in your callbacks.</li>
  <li>Consider the context of the command to determine whether to use a controller action or another Ruby object.</li>
</ul>

<h2 id="lecture-transactions">Lecture: Transactions</h2>

<p>Reference: <a href="http://tutorials.jumpstartlab.com/topics/models/transactions.html">Jumpstart Lab Tutorial on Transactions</a></p>

<p>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
  <span class="n">david</span><span class="p">.</span><span class="nf">withdrawal</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
  <span class="n">mary</span><span class="p">.</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You can call <code class="highlighter-rouge">#transaction</code> or <code class="highlighter-rouge">ActiveRecord::Base</code> or any ActiveRecord Model (e.g. <code class="highlighter-rouge">Account</code>).</p>

<h3 id="transaction-callbacks">Transaction Callbacks</h3>

<p>There are two types of callbacks associated with committing and rolling back transactions: after_commit and after_rollback.</p>

<ul>
  <li><code class="highlighter-rouge">after_commit</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction is committed.</li>
  <li><code class="highlighter-rouge">after_rollback</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction or save point is rolled back.</li>
</ul>

<p>If either of those fail, then neither will happen.</p>

<h2 id="pair-practice">Pair Practice</h2>

<p>Work through the steps below with your pair.</p>

<ol>
  <li>Create a repository and submit a pull request on <a href="https://github.com/turingschool/today">Today</a> with a link to your fresh new repository.</li>
  <li>Argue briefly about which testing framework and templating language to us.</li>
  <li>Start a new Rails project with your preferred testing framework (e.g. Rspec or Minitest) and templating language (e.g. ERB or HAML).</li>
  <li>Create an account model. This model should have an account holder‚Äôs name, an account number, a routing number, and starting balanace of $1000.</li>
  <li>Create a callback on the account model that removes all spaces and dashes from the routing number before validations.
    <ul>
      <li>Validations should probably make sure the routing number consists only of digits.</li>
      <li>Write a test first to make sure this actually works.</li>
    </ul>
  </li>
  <li>Create a callback on the account model that removes all spaces and dashes from the account number before validations. Same rules as before.</li>
  <li>Because we‚Äôre emulating a bank, we‚Äôre probably going to have to interact with some kind of legacy FORTRAN or COBOL system that demands that account holder‚Äôs names be all uppercase. Let‚Äôs set up a callback that upcases the name before saving it to the database.</li>
  <li>Set up a transaction to move money from one account to another.
    <ul>
      <li>The transaction should not go through unless both accounts exist.</li>
      <li>The transaction also shouldn‚Äôt go through if it would overdraw the account we‚Äôre transferring from.</li>
      <li>Write a test to make sure you‚Äôre not crazy.</li>
    </ul>
  </li>
  <li>Add a <code class="highlighter-rouge">deleted_at</code> column to your account model. This column should default to <code class="highlighter-rouge">nil</code>.</li>
  <li>Implement a <code class="highlighter-rouge">before_destroy</code> callback that sets <code class="highlighter-rouge">deleted_at</code> to <code class="highlighter-rouge">Time.now</code>. (Make sure you return <code class="highlighter-rouge">false</code> so that you don‚Äôt actually delete the account.)</li>
  <li>Update your transaction to make sure you cannot transfer funds to or from a ‚Äúdeleted‚Äù account.</li>
</ol>

<h3 id="extensions">Extensions</h3>

<ul>
  <li>Create a controller and view for a web interface to transfer funds between two accounts.
    <ul>
      <li>Two account numbers and the amount to transfer should be fine. Our legacy FORTRAN mainframe will take care of the rest.</li>
      <li>You can use a drop-down menu of all of the existing accounts or just a text input if you‚Äôre feeling fancy.</li>
    </ul>
  </li>
  <li>Create a scope that returns all of the active accounts and a scope that returns all of the closed accounts.</li>
  <li>Create a model for tracking transfers. It should have columns for the accounts transferred from and to as well as the amount.
    <ul>
      <li>Add it to the transaction. This model should not be created/save to the database unless the transaction was successful.</li>
      <li>Set up the relationships:
        <ul>
          <li>Accounts should have many transactions.</li>
          <li>Each transaction to belong to the two accounts involved.</li>
          <li>Accounts should be able related to all of the other accounts they‚Äôve done business with using a <code class="highlighter-rouge">:has_many</code> ‚Ä¶ <code class="highlighter-rouge">:through</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="wrap-up">Wrap-Up</h2>

<p>Take a look at one other group‚Äôs code. Did they take a different approach than you? If so, what do you like and/or dislike about their approach? If not, why do you think you both chose the same strategy?</p>
:ET