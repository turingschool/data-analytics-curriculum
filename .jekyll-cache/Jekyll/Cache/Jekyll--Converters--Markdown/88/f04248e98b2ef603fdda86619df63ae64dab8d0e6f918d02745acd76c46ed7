I"P<<h2 id="sass-selector-refresh">SASS Selector Refresh</h2>

<ol>
  <li>What are three advantages of SASS?</li>
  <li>How is a variable declared in SASS?</li>
  <li>How can we nest css properties in SASS?</li>
  <li>What does SASS stand for?</li>
</ol>

<h2 id="more-sass">More SASS</h2>

<h3 id="key-to-success-modularity">Key to success: Modularity</h3>

<p>HTML and CSS deserve to be as DRY as your Ruby is. This is difficult to achieve in raw HTML and CSS.</p>

<h3 id="scss-setup-in-rails---manual">SCSS Setup in Rails - Manual</h3>

<p><a href="https://github.com/rails/sass-rails"><code class="highlighter-rouge">sass-rails</code></a> ships with Rails 5 and &gt; projects. If you need to add it manually:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gemfile</span>
<span class="n">gem</span> <span class="s1">'sass-rails'</span>
</code></pre></div></div>
<p>This should provide for you an <code class="highlighter-rouge">application.scss</code> within <code class="highlighter-rouge">app/assets/stylesheets</code></p>

<h3 id="including-partials-in-your-scss-manifesto">Including Partials in your SCSS Manifesto</h3>

<p>We are going to extract some scss from our <code class="highlighter-rouge">custom.scss</code> file so we need to load them into our SCSS manifesto properly (<code class="highlighter-rouge">application.scss</code>).</p>

<p>A general rule of thumb is <strong>import in order of least specific to most specific</strong>. This way, if base styles need to be overridden, they can be within their individual section.</p>

<p>With our above examples, our <code class="highlighter-rouge">application.scss</code> would look something like:</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* assets/stylesheets/application.scss */</span>

<span class="k">@import</span> <span class="s1">'base'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'skeleton'</span><span class="p">;</span>

<span class="k">@import</span> <span class="s1">'components/buttons'</span><span class="p">;</span>

<span class="k">@import</span> <span class="s1">'sections/header'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'sections/movies-index'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="identifying-and-extracting-modularity">Identifying and Extracting Modularity</h3>

<h4 id="step-1-base-styles">Step 1: Base Styles</h4>

<p>Right off the bat, create a <code class="highlighter-rouge">base.scss</code> partial that can hold all base styles for your site. If you get more into SCSS functionalities, you can use this partial to store mixins and extensions as well.</p>

<p>I’d highly recommend saving theme colors to variables and importing fonts and saving them to variables within this partial to start.</p>

<p>Let’s put our font colors and type there. We want to use a new “fun” font!</p>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* assets/stylesheets/base.scss */
</span>
<span class="k">@import</span> <span class="s">url('https://fonts.googleapis.com/css?family=Joti+One');</span>

<span class="nv">$font-default</span><span class="p">:</span> <span class="s1">'Joti One'</span><span class="o">,</span> <span class="nb">cursive</span><span class="err">;</span>

<span class="nv">$light-purple</span><span class="p">:</span> <span class="mh">#6369D1</span><span class="err">;</span>
<span class="nv">$ice-blue</span><span class="p">:</span> <span class="mh">#60E1E0</span><span class="err">;</span>
<span class="nv">$grayish</span><span class="p">:</span> <span class="mh">#D8D2E1</span><span class="err">;</span>
<span class="nv">$light-brown</span><span class="p">:</span> <span class="mh">#B88E8D</span><span class="err">;</span>
<span class="nv">$dark-navy</span><span class="p">:</span> <span class="mh">#34435E</span><span class="err">;</span>

</code></pre></div></div>

<h4 id="step-2-skeletal-styles">Step 2: Skeletal styles</h4>

<p>If all of our sections of the site we’re building are sharing consistency among element names, consistency is assumed among styling for these elements.</p>

<p>We can gather all of this into an SCSS partial.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* assets/stylesheets/skeleton.scss */</span>
<span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="err">{</span>
    <span class="n">family</span><span class="p">:</span> <span class="err">$</span><span class="n">font-default</span><span class="p">;</span>
    <span class="nl">size</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">color</span><span class="o">:</span> <span class="err">$</span><span class="nt">ice-blue</span><span class="o">;</span>
<span class="err">}</span>

<span class="nt">h2</span> <span class="p">{</span>
  <span class="py">text</span><span class="p">:</span> <span class="err">{</span>
    <span class="n">align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="py">decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span>
  <span class="p">}</span>
<span class="err">}</span>


<span class="nt">p</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="err">{</span>
    <span class="n">family</span><span class="p">:</span> <span class="n">papyrus</span><span class="p">;</span>
    <span class="nl">size</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="err">}</span>

</code></pre></div></div>

<h4 id="step-3-sections">Step 3: Sections</h4>

<p>This would allow me to, at any moment, easily find and update the styles associated with a specific section.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* assets/stylesheets/sections/_header.scss */</span>

<span class="nt">header</span> <span class="p">{</span>
  <span class="err">h1</span> <span class="err">{</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* assets/stylesheets/sections/_movie-index.scss */
</span><span class="nv">$wow-border</span><span class="p">:</span> <span class="m">3px</span> <span class="nb">dotted</span> <span class="nv">$light-purple</span><span class="err">;</span>

<span class="nc">.movie-index</span> <span class="err">{</span>
  <span class="nt">h1</span> <span class="err">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$dark-navy</span><span class="err">;</span>
  <span class="err">}</span>

  <span class="nt">h2</span> <span class="err">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$light-brown</span><span class="err">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="nv">$wow-border</span><span class="err">;</span>
  <span class="err">}</span>
  <span class="nt">p</span> <span class="err">{</span>
    <span class="nl">border</span><span class="p">:</span> <span class="nv">$wow-border</span><span class="err">;</span>
  <span class="err">}</span>
<span class="err">}</span>

</code></pre></div></div>

<h4 id="step-4-global-components">Step 4: Global Components</h4>

<p>We’ve got our base skeleton’s styles extracted. We’ve got an organized space for each section of our site’s extracted styles. What about the styles that are still being shared among our site?</p>

<p>Remember, we want our SCSS to be as DRY as possible.</p>

<p>Consider the following possibly global components you’d have sprinkled across your site:</p>

<ul>
  <li>Contact buttons</li>
  <li>Favorite buttons</li>
  <li>Open/close buttons</li>
  <li>Buttons in general</li>
  <li>Navbars</li>
  <li>Hamburger menus</li>
  <li>Video player</li>
  <li>User handles</li>
</ul>

<p>Creating a separate SCSS partial for each of these makes our code immensely more modular. So modular, in fact, that you could reuse these partials among other sites you build with a simple drag/drop and aligning of element/class names.</p>

<pre><code class="language-HTML">&lt;div class="movie-index"&gt;
  &lt;h1&gt;All Movies&lt;/h1&gt;

  &lt;% @movies.each do |movie| %&gt;
    &lt;h2&gt;&lt;%= movie.title %&gt;&lt;/h2&gt;
    &lt;p&gt;&lt;%= movie.description %&gt;&lt;/p&gt;
    &lt;%= button_to "Add Movie", carts_path(movie_id: movie.id), class: 'button.cart' %&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</code></pre>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* assets/stylesheets/components/_buttons.scss */</span>

<span class="nc">.button</span> <span class="p">{</span>
  <span class="err">&amp;.cart</span> <span class="err">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="err">$</span><span class="n">dark-navy</span><span class="p">;</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<h4 id="see-what-feels-right-for-your-site">See What Feels Right for Your Site</h4>

<p>This cascade of partials may not be immediately implementable for your site. You may even think of another way of organizing your styles. However, with the above, you’ll have:</p>

<ul>
  <li>Skeletal styles extracted into one place</li>
  <li>Section partials with styles specific to that section</li>
  <li>Global components defined in one place</li>
</ul>

<h3 id="more-sass-syntax">More SASS syntax</h3>

<h4 id="using-extend">Using <code class="highlighter-rouge">@extend</code></h4>

<ul>
  <li>Let’s take a small example from <code class="highlighter-rouge">movie_mania</code> to demonstrate how to use <code class="highlighter-rouge">@extend</code>. We have a border on both our <code class="highlighter-rouge">h2</code> and our <code class="highlighter-rouge">p</code> tag. Our <code class="highlighter-rouge">p</code> tag only has the rule of <code class="highlighter-rouge">border: $wow-border</code>. Using <code class="highlighter-rouge">@extend</code> is similar in SASS as it is in Ruby classes. It allows the tag that holds the <code class="highlighter-rouge">@extend</code> rule to inherit the rules of the class/id/basic selectors.</li>
</ul>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">movie-index</span> <span class="err">{</span>
    <span class="nt">h1</span> <span class="err">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nv">$dark-navy</span><span class="err">;</span>
    <span class="err">}</span>
    <span class="nt">h2</span> <span class="err">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nv">$light-brown</span><span class="err">;</span>
      <span class="k">@extend</span> <span class="nt">p</span>
    <span class="err">}</span>
    <span class="nt">p</span> <span class="err">{</span>
      <span class="nl">border</span><span class="p">:</span> <span class="nv">$wow-border</span><span class="err">;</span>
    <span class="err">}</span>
  <span class="err">}</span>
</code></pre></div></div>

<ul>
  <li>Now our <code class="highlighter-rouge">h2</code> inherits the same <code class="highlighter-rouge">$wow-border</code> as the <code class="highlighter-rouge">p</code> tag and we don’t have to repeat ourselves. But what else did this do? What changes do we see?</li>
  <li>Since it inherits from <code class="highlighter-rouge">p</code> and <code class="highlighter-rouge">p</code> has rules that cascade down, we now have ALL the <code class="highlighter-rouge">p</code> rules applying to the <code class="highlighter-rouge">h2</code> tag!</li>
  <li>Fun Fact: A selector can use more than one extend!</li>
</ul>

<h4 id="mixins">Mixins</h4>

<ul>
  <li>Mixins allow you to define styles that can be re-used throughout the stylesheet.</li>
  <li>We want our <code class="highlighter-rouge">h2</code> and <code class="highlighter-rouge">p</code> to have the <code class="highlighter-rouge">$wow-border</code> but we also want them to have a background color of <code class="highlighter-rouge">$grayish</code>. How can we accomplish this?</li>
  <li>Let’s add a mixin to our <code class="highlighter-rouge">base.scss</code> file, where it will be accessible to the files below it (based on <code class="highlighter-rouge">@import</code> statements). Let’s also delete <code class="highlighter-rouge">@extend p</code> from our <code class="highlighter-rouge">h2</code> for this example.</li>
</ul>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// base.scss</span>

<span class="nv">$wow-border</span><span class="p">:</span> <span class="m">3px</span> <span class="nb">dotted</span> <span class="nv">$light-purple</span><span class="err">;</span>

<span class="k">@mixin</span> <span class="nf">movie-index-border</span> <span class="err">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nv">$wow-border</span><span class="err">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$grayish</span><span class="err">;</span>
<span class="err">}</span>
</code></pre></div></div>

<p>And to use it in our <code class="highlighter-rouge">movie-index.scss</code> file, we need to use <code class="highlighter-rouge">@include</code> in our rules:</p>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">.movie-index</span> <span class="err">{</span>
    <span class="nt">h1</span> <span class="err">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nv">$dark-navy</span><span class="err">;</span>
    <span class="err">}</span>
    <span class="nt">h2</span> <span class="err">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nv">$light-brown</span><span class="err">;</span>
      <span class="k">@include</span> <span class="nd">movie-index-border</span>
    <span class="err">}</span>
    <span class="nt">p</span> <span class="err">{</span>
      <span class="k">@include</span> <span class="nd">movie-index-border</span>
    <span class="err">}</span>
  <span class="err">}</span>
</code></pre></div></div>

<ul>
  <li>Fun Fact: Mixins can also take default arguments!</li>
</ul>

<h3 id="other-suggestions">Other Suggestions</h3>

<ul>
  <li>Create separate stylesheets for <strong>typography</strong> (all things related to fonts on your page), <strong>colors</strong>, etc.</li>
  <li>Save common settings like <code class="highlighter-rouge">border</code>, <code class="highlighter-rouge">margin</code>, and <code class="highlighter-rouge">line-height</code> to variables in base.scss</li>
  <li>Read the <a href="http://sass-lang.com/guide">Sass docs</a> :D</li>
</ul>
:ET