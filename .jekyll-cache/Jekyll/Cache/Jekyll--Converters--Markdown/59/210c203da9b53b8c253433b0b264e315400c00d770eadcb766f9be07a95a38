I"<p><em><a href="../index">Back to Futbol Home</a></em></p>

<h2 id="setup">Setup</h2>

<p>We have provided a starting repository for this project. That repository has the usual <code class="highlighter-rouge">lib</code> and <code class="highlighter-rouge">test</code> directories that you have seen in the past, but also includes a <code class="highlighter-rouge">data</code> directory that includes three <code class="highlighter-rouge">.csv</code> files. These files are text files that include tables represented as comma separated values (hence <code class="highlighter-rouge">.csv</code>). The first row includes headers, while every other row includes entries in the table.</p>

<p>Begin by picking one team member to fork the project repository <a href="https://github.com/turingschool-examples/futbol">here</a>.
Once one of you has forked the repository, each of the other team members should clone that repository.</p>

<p>In order to complete your setup:</p>

<ul>
  <li>One team member forks the repository <a href="https://github.com/turingschool-examples/futbol">here</a> and adds the other(s) as collaborators.</li>
  <li>Each of the other team members accepts the invitation to collaborate and then clones the repository.</li>
  <li>Setup <a href="https://github.com/colszowka/simplecov">SimpleCov</a> to monitor test coverage along the way.</li>
  <li>Create a <a href="https://github.com/ruby/rake">Rakefile</a> that will run each of your test files without having to run them individually. See <a href="http://backend.turing.io/module1/lessons/project_etiquette">this lesson plan</a> for more details.</li>
</ul>

<p>Note: we have linked the GitHub repositories for SimpleCov and Rake above, but you should not expect that those are the only resources you will use to set up these tools in your project. Use your research skills to find other resources to help you determine how to use these tools. You may want to consider using <a href="https://ruby-doc.org/stdlib-2.0.0/libdoc/csv/rdoc/CSV.html">Rubys CSV class</a>.</p>

<h2 id="file-io">File I/O</h2>

<p>In order to get data into the system we’re going to create, we’re going to read information from CSV files. At this point, we don’t expect that you have determined exactly what you will be doing with the information that you collect, so for now you may just want to print some information to the terminal about each record you read in.</p>

<p>At a high level, if you create a runner file including the code below, you should drop into a pry session with an instance of StatTracker held in the <code class="highlighter-rouge">stat_tracker</code> variable.</p>

<p>Note that <code class="highlighter-rouge">from_csv</code> is a method you have defined called directly on the StatTracker class, and not an instance of StatTracker.</p>

<p><code class="highlighter-rouge">::from_csv</code> returns an instance of StatTracker. That instance of StatTracker will hold all of the information you need for the methods included in the remainder of the project description.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./lib/stat_tracker'</span>

<span class="n">game_path</span> <span class="o">=</span> <span class="s1">'./data/games.csv'</span>
<span class="n">team_path</span> <span class="o">=</span> <span class="s1">'./data/teams.csv'</span>
<span class="n">game_teams_path</span> <span class="o">=</span> <span class="s1">'./data/game_teams.csv'</span>

<span class="n">locations</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">games: </span><span class="n">game_path</span><span class="p">,</span>
  <span class="ss">teams: </span><span class="n">team_path</span><span class="p">,</span>
  <span class="ss">game_teams: </span><span class="n">game_teams_path</span>
<span class="p">}</span>

<span class="n">stat_tracker</span> <span class="o">=</span> <span class="no">StatTracker</span><span class="p">.</span><span class="nf">from_csv</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>

<span class="nb">require</span> <span class="s1">'pry'</span><span class="p">;</span> <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>
:ET