I"Ö	<p>jQuery Deferreds are special objects for working with asynchronous JavaScript. They are similar to promises in theory, but they don‚Äôt exactly adhere to the Promises/A+ specification, so we don‚Äôt call them promises in the strictest sense, but I‚Äôm going to just call them promises from here on out‚Äîmostly because my spellcheck doesn‚Äôt think that ‚Äúdeferreds‚Äù is a real word‚Äîand it‚Äôs right.</p>

<p>If you create a AJAX request and do not give it a callback, it will return a jQuery.Deferred object instead.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/ideas</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Immediately, this returns an unresolved promise. The browser will fire off the request and when it receives a response, the promise will be either fulfilled or rejected (e.g. the server sends back a 500 error).</p>

<p>So, how do we hook into our promise? A promise object has a few methods. The first is <code class="highlighter-rouge">then</code>. Then takes three arguments: a function to call upon success, a function to call upon failure, and a function to call whenever the object gets notification about the progress of the request.</p>

<p>That‚Äôs cool. But, let‚Äôs start with some simpler methods:</p>

<ul>
  <li><code class="highlighter-rouge">.done(someFunction)</code></li>
  <li><code class="highlighter-rouge">.fail(someFunction)</code></li>
  <li><code class="highlighter-rouge">.always(someFunction)</code></li>
</ul>

<p>A function passed into the <code class="highlighter-rouge">done</code> method will fire upon success. <code class="highlighter-rouge">fail</code> will fire upon, err, failure. <code class="highlighter-rouge">always</code> will, um, always fire as soon as the promise is <em>either</em> fulfilled or rejected.</p>

<p>When would you use <code class="highlighter-rouge">always</code>? It‚Äôs good practice to put up a spinner or some progress meter when you fire off a request to let the user know that their action was acknowledge. Whether the request succeeds or fails, you‚Äôre going to need to clean up that spinner or progress bar.</p>
:ET