I"Ð<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Define and demonstrate a testing cycle</li>
  <li>Write a test using MiniTest</li>
  <li>Use error messages to drive development</li>
</ul>

<h3 id="write-tests-first">Write Tests First</h3>

<p>Why write the tests first?</p>
<ul>
  <li>Helps break problem into small pieces</li>
  <li>Removes fear of programming</li>
  <li>Communicates what your code <em>should</em> do</li>
  <li>Shapes design</li>
  <li>Tells you basically exactly what to do</li>
</ul>

<p>Letâ€™s say Iâ€™m building a model to represent a house. What testing assertions could I define that would prove to me, once theyâ€™re all true, that Iâ€™ve in fact built the house I expect?</p>

<ul>
  <li>Does it have a roof?</li>
  <li>Does it have a foundation?</li>
  <li>Does it have windows?</li>
  <li>Does it have walls?</li>
  <li>Do the walls create rooms?</li>
  <li>Does it have a kitchen? a bedroom? a bathroom? a living room?</li>
</ul>

<p>Where do our tests live?</p>
<ul>
  <li>Tests will all live in their own <code class="highlighter-rouge">test</code> directory</li>
  <li>Source code all lives in a sibling <code class="highlighter-rouge">lib</code> directory</li>
  <li>Test files should reflect the class itâ€™s testing with <code class="highlighter-rouge">_test</code> appended to the file name</li>
</ul>

<h4 id="practice">Practice</h4>

<p>Work with a partner. What testing questions could you ask to verify that the following models have been created appropriately?</p>

<ul>
  <li>An office</li>
  <li>A movie set</li>
  <li>A frozen banana stand</li>
  <li>A staircar</li>
</ul>

<h3 id="minitest">Minitest</h3>

<p><a href="http://docs.seattlerb.org/minitest/">Minitest</a> is a framework used for automated testing. It is the testing framework used on many of the homework exercises youâ€™ve been assigned.</p>

<h4 id="turn-and-talk">Turn and Talk</h4>

<p>Discuss with a partner. What are some things youâ€™ve noticed about the setup of tests? What effect do these statements have?</p>
<ul>
  <li><code class="highlighter-rouge">assert</code></li>
  <li><code class="highlighter-rouge">assert_equal</code></li>
  <li><code class="highlighter-rouge">refute</code></li>
  <li><code class="highlighter-rouge">refute_equal</code></li>
  <li><code class="highlighter-rouge">assert_nil</code></li>
  <li><code class="highlighter-rouge">assert_instance_of</code></li>
</ul>

<h4 id="test-etiquette">Test Etiquette</h4>

<ul>
  <li>Run your individual test file by running <code class="highlighter-rouge">ruby test/name_of_file_test.rb</code></li>
  <li>Two directories: <code class="highlighter-rouge">lib</code> and <code class="highlighter-rouge">test</code></li>
  <li>Filenames: <code class="highlighter-rouge">test/name_of_class_test.rb</code></li>
  <li><code class="highlighter-rouge">require 'minitest/autorun'</code></li>
  <li><code class="highlighter-rouge">require "./lib/name_of_class.rb"</code></li>
  <li>Test Class Name: <code class="highlighter-rouge">class NameOfClassTest &lt; Minitest::Test</code></li>
  <li><code class="highlighter-rouge">def test_something</code> for names of methods in test file â€“ <strong>MUST</strong> start with <code class="highlighter-rouge">test</code></li>
  <li>Donâ€™t depend on tests to run in the order they were written</li>
</ul>

<h4 id="practice-1">Practice</h4>

<p>Letâ€™s pick one of the models from the previous exercise (an office, a movie set, a staircar) and use Minitest to turn your assertions into real Ruby tests.</p>

<p>If we have extra time, letâ€™s explore how your code breaks when you donâ€™t follow the Test Etiquette rules from above.</p>

<h3 id="testing-cycle-red-green-refactor">Testing Cycle: Red, Green, Refactor</h3>

<p>Red-green-refactor is a process for writing code that involves three steps.</p>
<ul>
  <li>Write a failing test (red)</li>
  <li>Write implementation code to make the test pass (green)</li>
  <li>Clean up your code if necessary (refactor)</li>
</ul>

<h4 id="learn-to-love-the-error-learn-to-love-the-failure">Learn to Love the Error, Learn to Love the Failure</h4>

<p>Theyâ€™re your friends, seriously. Take time to understand each error and failure you encounter. Youâ€™ll be seeing those same error messages over and over again, so the sooner you connect what they mean to what you need to fix, they smoother youâ€™ll be sailing.</p>

<h4 id="practice-2">Practice</h4>

<p>Now that you have a failing test from the exercise above, finish the red-green-refactor loop by writing code to pass the test and refactoring.</p>

<h2 id="bring-it-all-together">Bring It All Together</h2>

<h3 id="exercise-tdd-calculator">Exercise: TDD Calculator</h3>

<ul>
  <li>Build a calculator class from scratch using TDD</li>
  <li>Start with whiteboarding and pseudocode</li>
  <li>Write pseudocode in the test file first for a few methods</li>
  <li>Your calculator should be able to handle the following methods:
    <ul>
      <li>.new</li>
      <li>#total</li>
      <li>#add</li>
      <li>#clear</li>
      <li>#subtract</li>
    </ul>
  </li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li>Blog post: <a href="http://derekbarber.ca/blog/2012/03/27/why-test-driven-development/">Why Test Driven Development?</a></li>
  <li>Want a written-out tutorial on TDD with Minitest? <a href="http://tutorials.jumpstartlab.com/topics/testing/intro-to-tdd.html">Check here</a>.</li>
  <li>If youâ€™d like additional practice with testing, take a look at this <a href="https://github.com/JoshCheek/how-to-test">calculator challenge</a></li>
</ul>
:ET