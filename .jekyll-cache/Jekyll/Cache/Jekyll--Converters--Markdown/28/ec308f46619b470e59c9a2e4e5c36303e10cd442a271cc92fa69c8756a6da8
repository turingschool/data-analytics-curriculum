I"ˆ<h2 id="key-topics">Key Topics</h2>

<p>During our session, we‚Äôll cover the following topics:</p>

<ul>
  <li>Types of testing</li>
  <li>What are user stories? Why are they beneficial?</li>
  <li>Capybara</li>
</ul>

<h2 id="lecture">Lecture</h2>

<p><a href="http://m2b-slides.herokuapp.com/m2b/feature_testing_with_capybara_in_sinatra.html#/">Slides</a></p>

<h2 id="nokogiri">Nokogiri</h2>

<p>We‚Äôre going to use Capybara to create feature tests for our sites, but behind the scenes it uses Nokogiri (because apparently <a href="https://blog.codinghorror.com/parsing-html-the-cthulhu-way/">it helps keep everyone sane</a>). Let‚Äôs take a look to see what Nokogir can do.</p>

<h3 id="installing-nokogiri">Installing Nokogiri</h3>

<p><code class="highlighter-rouge">gem install nokogiri</code></p>

<h3 id="quick-experiment">Quick Experiment</h3>

<p>Copy the following into a new ruby file.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'nokogiri'</span>
<span class="nb">require</span> <span class="s1">'net/http'</span>

<span class="c1"># get the HTML from the website</span>
<span class="n">uri</span>  <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s2">"http://www.denverpost.com/frontpage"</span><span class="p">)</span>
<span class="n">body</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>

<span class="c1"># parse it and use CSS selectors to find all links in list elements</span>
<span class="n">document</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
<span class="n">links</span>    <span class="o">=</span> <span class="n">document</span><span class="p">.</span><span class="nf">css</span><span class="p">(</span><span class="s1">'li a'</span><span class="p">)</span>

<span class="c1"># print each interesting looking link</span>
<span class="n">links</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">link</span><span class="o">|</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">link</span><span class="p">.</span><span class="nf">text</span><span class="p">.</span><span class="nf">empty?</span> <span class="o">||</span> <span class="n">link</span><span class="p">[</span><span class="s1">'href'</span><span class="p">].</span><span class="nf">empty?</span>
  <span class="nb">puts</span> <span class="n">link</span><span class="p">.</span><span class="nf">text</span><span class="p">,</span> <span class="s2">"  </span><span class="si">#{</span><span class="n">link</span><span class="p">[</span><span class="s1">'href'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>
<span class="k">end</span>

<span class="c1"># pry at the bottom so we can play with it</span>
<span class="nb">require</span> <span class="s2">"pry"</span>
<span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>

<h3 id="what-just-happened">What Just Happened?</h3>

<p>The program made a URI object to parse our uri (you can think a uri as being the same thing as a url). Then it made a GET request to that uri to get the page‚Äôs body. It gives the body to Nokogiri::HTML, which parses the HTML and gives us back a Nokogiri document, an object we can use to interact with the html. In this case, we use ‚Äúcss‚Äù to give it a css selector that will find all links inside of list elements.</p>

<p>We also stuck a pry at the bottom so that we can play with those objects if we like. Maybe we‚Äôd like to see what we can do with a link, we‚Äôll use Pry‚Äôs <code class="highlighter-rouge">ls -v</code> to list out all the interesting things on it. Enter the following lines into the Pry session that opened when you ran that file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pry(main)&gt; link = links.first
pry(main)&gt; ls -v link
</code></pre></div></div>

<p>We see the link has its own css method, so we could run another query from within this node. And we can see the href attribute, it looks like we get attributes by using bracket notation, like a hash. This is a great way to play around with a new library and learn about it,</p>

<p>You can check out the <a href="http://www.nokogiri.org/">documentation</a> to learn more about what you can do with Nokogiri.</p>

<h2 id="capybara">Capybara</h2>

<h3 id="important-setup-things">Important Setup Things</h3>

<p>Add the following lines to your <code class="highlighter-rouge">Gemfile</code> in the <code class="highlighter-rouge">:development, :test</code> group:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'capybara'</span>
<span class="n">gem</span> <span class="s1">'launchy'</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">bundle</code></p>

<p>Update your <code class="highlighter-rouge">spec/spec_helper.rb</code> file to include the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># with your other required items</span>
<span class="nb">require</span> <span class="s1">'capybara/dsl'</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">app</span> <span class="o">=</span> <span class="no">FilmFile</span>

<span class="c1"># within the RSpec configuration:</span>
  <span class="n">c</span><span class="p">.</span><span class="nf">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>
</code></pre></div></div>

<p>Since we‚Äôre going to be creating a new type of test, let‚Äôs add a new folder to separate them from our model tests.</p>

<p><code class="highlighter-rouge">mkdir spec/features/</code>
<code class="highlighter-rouge">touch spec/features/user_sees_welcome_spec.rb</code></p>

<p>In that new file add the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s1">'../spec_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"When a user visits '/'"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"they see a welcome message"</span> <span class="k">do</span>
    <span class="c1"># Your code here.</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://gist.github.com/zhengjia/428105">Capybara cheat sheet</a></li>
  <li><a href="http://cheatrags.com/capybara">Another cheat sheet</a></li>
  <li><a href="http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests">Simple Tricks for Capybara</a></li>
</ul>
:ET