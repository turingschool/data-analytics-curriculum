I"1<h2 id="instructor-setup">Instructor Setup</h2>

<ul>
  <li>Two sets of pairings for activities</li>
  <li>Base Storedom project cloned and bundled</li>
</ul>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Practice ripping apart complex controllers into smaller components</li>
  <li>Apply the Single Responsibility Principle to controllers</li>
  <li>Practice implementing namespaced controllers</li>
  <li>Practice using inheritance in Rails controllers</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - Warmup</li>
  <li>20 - Discussion: Controllers, SRP, and <code class="highlighter-rouge">respond_with</code></li>
  <li>5 - Break</li>
  <li>25 - Code: Implementing an API controller</li>
  <li>5 - Break</li>
  <li>25 - Group Work 1: Build an API controller</li>
  <li>5 - Break</li>
  <li>25 - Code: Admin Controllers</li>
  <li>5 - Break</li>
  <li>25 - Group Work 2: Implement an Admin controller</li>
  <li>5 - Break</li>
  <li>60 - Apply It</li>
</ul>

<h2 id="plan">Plan</h2>

<h3 id="warmup">Warmup</h3>

<p>Three quick questions to get you thinking:</p>

<ol>
  <li>What’s the job of a controller in Rails?</li>
  <li>Why do controllers tend to get complicated?</li>
  <li>What is the Single Reponsibility Principle about?</li>
</ol>

<h3 id="discussion-controllers-srp-and-respond_">Discussion: Controllers, SRP, and <code class="highlighter-rouge">respond_</code></h3>

<ul>
  <li>Controllers touch everything</li>
  <li><a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP on Wikipedia</a></li>
  <li><code class="highlighter-rouge">respond_to</code> and <code class="highlighter-rouge">respond_with</code> are cool and terrible</li>
  <li><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> is a concept, not a law</li>
  <li>APIs, especially, change and grow over time – they need versions</li>
  <li>Controllers are where security goes wrong</li>
  <li>The more context you need, the harder it is to reason about code</li>
  <li><code class="highlighter-rouge">if</code> statements are not OOP and they’re sometimes a code smell</li>
  <li>Build lots of small things, not a few big things</li>
</ul>

<h3 id="code-implementing-an-api-controller">Code: Implementing an API controller</h3>

<p>Let’s build an example API controller/action for <strong>Orders</strong>:</p>

<ul>
  <li>Start with the <a href="https://github.com/turingschool-examples/storedom">Storedom example code base</a></li>
  <li>Create the routes using <code class="highlighter-rouge">namespace</code> <a href="http://guides.rubyonrails.org/routing.html#controller-namespaces-and-routing">(docs)</a></li>
  <li>Generate a controller with <code class="highlighter-rouge">api/v1/orders</code></li>
  <li>Implement the controller using <code class="highlighter-rouge">respond_to</code> and <code class="highlighter-rouge">respond_with</code> <a href="http://apidock.com/rails/ActionController/MimeResponds/respond_with">(docs)</a></li>
  <li>Test it in the browser</li>
</ul>

<h3 id="group-work-1-build-an-api-controller">Group Work 1: Build an API Controller</h3>

<p>Now get together with your first pair and implement an API controller for
<code class="highlighter-rouge">items</code> using the same steps as above.</p>

<ul>
  <li>Basic:  Index  =&gt; GET  /api/v1/items.json</li>
  <li>Medium: Show   =&gt; GET  /api/v1/items/1.json</li>
  <li>Fancy:  Create =&gt; POST /api/v1/items.json</li>
</ul>

<h3 id="code-admin-controllers">Code: Admin Controllers</h3>

<p>Our sample application currently has a list of all orders exposed at OrdersController#index. Probably this isn’t info we want visible to everyone who visits the site, so let’s look at moving it into an admin namespace.</p>

<ul>
  <li>Continue with the example code base</li>
  <li>Create routes using <code class="highlighter-rouge">namespace</code></li>
  <li>Generate an Admin::OrdersController under <code class="highlighter-rouge">admin/orders</code></li>
  <li>Move admin-only actions to the new controller</li>
  <li>Duplicate shared actions</li>
</ul>

<h3 id="group-work-2-build-an-admin-controller">Group Work 2: Build an Admin Controller</h3>

<p>Follow the same steps above to create an admin controller for <code class="highlighter-rouge">items</code>.</p>

<h3 id="apply-it">Apply It</h3>

<p>Get together with your pair and implement these techniques in one of your
<em>real</em> projects.</p>

<ul>
  <li>If one of your independent projects has admin or API (as in serving an API)
functionality, then use that</li>
  <li>If not, then grab one of your The Pivot projects and add it there</li>
</ul>
:ET