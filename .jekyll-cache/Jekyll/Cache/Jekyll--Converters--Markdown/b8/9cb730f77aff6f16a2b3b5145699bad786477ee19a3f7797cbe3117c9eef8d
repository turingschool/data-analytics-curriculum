I"}<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand structure of an HTML page</li>
  <li>Understand how to use <code class="highlighter-rouge">application.html.erb</code></li>
  <li>Understand difference between semantic/non-semantic tags</li>
  <li>Understand difference between block and inline elements</li>
  <li>Understand difference between class and id selectors</li>
  <li>Understand how to add CSS to our apps</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>HTML</li>
  <li>Tag</li>
  <li>Element</li>
  <li>Semantic</li>
  <li>Block</li>
  <li>Inline</li>
</ul>

<h1 id="hyper-text-markup-language">Hyper Text Markup Language</h1>

<p>A Markup Language used for describing the structure/layout of web pages.</p>

<p>Some HTML tags are ‚Äúcontainers‚Äù for content, and some tags <strong>are</strong> the content.</p>

<h3 id="application-layout">Application Layout</h3>

<p>In SetList, open up the <code class="highlighter-rouge">app/views/layouts/application.html.erb</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>SetList<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">csrf_meta_tags</span> <span class="err">%</span><span class="nt">&gt;</span>

    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">stylesheet_link_tag</span>    <span class="err">'</span><span class="na">application</span><span class="err">',</span> <span class="na">media:</span> <span class="err">'</span><span class="na">all</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">javascript_include_tag</span> <span class="err">'</span><span class="na">application</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">yield</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge"><span class="cp">&lt;!DOCTYPE html&gt;</span></code> - The <a href="https://www.w3schools.com/tags/tag_doctype.asp">Type Declaration</a> tells our browsers that our application is using HTML5 (this is NOT an html tag, but rather just an instruction for the browser about our HTML version).</li>
  <li><code class="highlighter-rouge"><span class="nt">&lt;html&gt;</span></code> signals the beginning of our HTML.</li>
  <li><code class="highlighter-rouge">&lt;head&gt;</code> contains all the metadata (information <em>about</em> the document)
    <ul>
      <li><code class="highlighter-rouge">&lt;title&gt;</code> - The title that will show in the tab of your browser.</li>
      <li><code class="highlighter-rouge">&lt;%= stylesheet_link_tag %&gt;</code> - An <code class="highlighter-rouge">ActionView::Helpers</code>. How we link to external stylesheets, i.e. our CSS. We want this in the head so it loads first. We could also style right in our html document with a <code class="highlighter-rouge">style</code> tag but DON‚ÄôT DO THAT. We always want to use <code class="highlighter-rouge">ActionView::Helpers</code> when we can.</li>
      <li><code class="highlighter-rouge">&lt;%= javascript_include_tag %&gt;</code> - Another <code class="highlighter-rouge">ActionView::Helpers</code>. How we link to our client-side statements (JavaScript). We could use the <code class="highlighter-rouge">&lt;script&gt;</code> html tag, but we prefer the  <code class="highlighter-rouge">ActionView::Helpers</code>.</li>
    </ul>
  </li>
</ul>

<h4 id="body">Body</h4>

<p>Contains ALL the elements of the HTML document that we would like to display.</p>

<p><code class="highlighter-rouge">&lt;%= yield %&gt;</code> is where all of our view files get rendered. This is used in a ‚Äòlayout level template‚Äô to help us ‚ÄòDRY‚Äô up our HTML. Now instead of needing to repeat the above in every erb/html file we can simply write the html that we want our body to contain.</p>

<p>This means that if there is part of a view we want to render on <strong>every</strong> page (like a navbar or footer), we can put it in <code class="highlighter-rouge">application.html.erb</code>.</p>

<h2 id="semantic-vs-non-semantic-tags">Semantic vs Non-Semantic Tags</h2>

<ul>
  <li>How did you create HTML structure in your Task Manager app? Most everyone uses <code class="highlighter-rouge">&lt;div&gt;</code> tags at first.</li>
</ul>

<h3 id="non-semantic">Non-Semantic</h3>

<ul>
  <li><code class="highlighter-rouge">div</code>s - incredibly common but with the introduction of HTML5, there was a move towards semantic tags.</li>
  <li><code class="highlighter-rouge">div</code>s tell us NOTHING about the content of the element.</li>
  <li>A good use case for a <code class="highlighter-rouge">div</code> might be creating an element on a page like a solid box.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
  <span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;title&gt;</span>Our Zoo<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"nav"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Welcome to Our Zoo<span class="nt">&lt;/h1&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"animals"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"otters"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;h2&gt;</span>Cuddly Otters<span class="nt">&lt;/h2&gt;</span>
          <span class="nt">&lt;p&gt;</span>Come visit our friendly otters and watch them slip and slide.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"penguins"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;h2&gt;</span>Cute Penguins<span class="nt">&lt;/h2&gt;</span>
          <span class="nt">&lt;ul&gt;</span>
            <span class="nt">&lt;li&gt;</span>Emperor Penguins<span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span>King Penguins<span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span>African Penguins<span class="nt">&lt;/li&gt;</span>
          <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"exhibits"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"explore-the-shore"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.denverzoo.org/explore-shore"</span><span class="nt">&gt;</span>Explore the Shore<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"lorikeet-advuenture"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;p&gt;</span>Come play with out lorikeets.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"contact-me"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>email me at <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"mailto:dione@turing.io"</span><span class="nt">&gt;&lt;/a&gt;&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="semantic-tags">Semantic Tags</h3>

<ul>
  <li>Can act the same as a <code class="highlighter-rouge">div</code> but have implied meaning.</li>
  <li>Some examples of semantic tags:
    <ul>
      <li><code class="highlighter-rouge">&lt;article&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;aside&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;details&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;figcaption&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;figure&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;footer&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;header&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;main&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;mark&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;nav&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;section&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;summary&gt;</code></li>
      <li><code class="highlighter-rouge">&lt;time&gt;</code></li>
      <li>See more information about the specific tags <a href="https://www.w3schools.com/html/html5_semantic_elements.asp">here</a></li>
    </ul>
  </li>
</ul>

<p>Example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;!DOCTYPE html&gt;</span>
  <span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;title&gt;</span>Our Zoo<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
      <span class="nt">&lt;nav&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Welcome to Our Zoo<span class="nt">&lt;/h1&gt;</span>
      <span class="nt">&lt;/nav&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"animals"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;header&gt;</span>
          <span class="nt">&lt;p&gt;</span>I would like to tell you about our animals<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/header&gt;</span>
        <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"otters"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;h2&gt;</span>Otters<span class="nt">&lt;/h2&gt;</span>
          <span class="nt">&lt;p&gt;</span>Come visit our friendly otters and watch them slip and slide.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/article&gt;</span>
        <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"penguins"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;h2&gt;</span>Cute Penguins<span class="nt">&lt;/h2&gt;</span>
          <span class="nt">&lt;ul&gt;</span>
            <span class="nt">&lt;li&gt;</span>Emperor Penguins<span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span>King Penguins<span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span>African Penguins<span class="nt">&lt;/li&gt;</span>
          <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/article&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"exhibits"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;header&gt;</span>
          <span class="nt">&lt;p&gt;</span>Check out our exhibits!<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/header&gt;</span>
        <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"explore-the-shore"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.denverzoo.org/explore-shore"</span><span class="nt">&gt;</span>Explore the Shore<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/article&gt;</span>
        <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"lorikeet-adventure"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;p&gt;</span>Come play with our lorikeets.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/article&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
      <span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">"contact-me"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>email me at <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"mailto:dione@turing.io"</span><span class="nt">&gt;&lt;/a&gt;&lt;/p&gt;</span>
      <span class="nt">&lt;/footer&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
  <span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<ul>
  <li>A lot of the tags we use are already semantic such as form, link, etc.</li>
</ul>

<h2 id="class-vs-id">Class vs. ID</h2>

<p>We can give our HTML elements <strong>attributes</strong>. These attributes appear inside the tag itself (in between the angle brackets <code class="highlighter-rouge">&lt; &gt;</code>). For example, the following <code class="highlighter-rouge">img</code> tag:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">'https://cutedogs.com/1'</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Has an attribute of <code class="highlighter-rouge">src</code> with a value of <code class="highlighter-rouge">'https://cutedogs.com/1'</code>.</p>

<p>Two very important attributes we can give our HTML elements are <code class="highlighter-rouge">class</code> and <code class="highlighter-rouge">id</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"song"</span> <span class="na">id=</span><span class="s">"song-4"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"song"</span> <span class="na">id=</span><span class="s">"song-3"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"song"</span> <span class="na">id=</span><span class="s">"song-2"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li>We use the <code class="highlighter-rouge">class</code> attribute to identify several related elements.</li>
  <li>We use the <code class="highlighter-rouge">id</code> attribute to identify a single element.</li>
  <li><code class="highlighter-rouge">id</code> takes higher priority in CSS (more on this later).</li>
  <li>Only one element should have a certain <code class="highlighter-rouge">id</code>. If two elements have the same <code class="highlighter-rouge">id</code>, your page will still display, but it may not work the way you expect.</li>
  <li>We can use erb tags to interpolate an id in our views. The above example HTML could be rendered by the view with the following code:</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%</span> <span class="err">@</span><span class="na">songs.each</span> <span class="na">do</span> <span class="err">|</span><span class="na">song</span><span class="err">|</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"song"</span> <span class="na">id=</span><span class="s">"song-&lt;%= song.id %&gt;"</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h1 id="css">CSS</h1>

<p>CSS stands for ‚ÄúCascading Style Sheets‚Äù.</p>

<p>When we apply a <code class="highlighter-rouge">class</code> or an <code class="highlighter-rouge">id</code> to an HTML element, we can use CSS to <strong>select</strong> it and give it a ‚Äúrule‚Äù of how it should be styled.</p>

<p>When more than one rule applies to an HTML element (it might have an id and a class), CSS ‚Äúcascades‚Äù down from the more general rules to the more specific rules. The most specific rule is chosen. An <code class="highlighter-rouge">id</code> is the most specific rule.</p>

<p>A common misconception is that ‚Äúcascading‚Äù means that our browser will flow down the CSS file and the last rule will be applied.</p>

<p>There is a way to <a href="https://specificity.keegan.st/">calculate CSS Specificity</a>. Each rule in CSS (i.e a <code class="highlighter-rouge">class</code> or <code class="highlighter-rouge">id</code> rule) has a specific value assigned. <code class="highlighter-rouge">id</code>s have higher  values than <code class="highlighter-rouge">class</code>es. The highest number wins for most specific and will correspondingly take precedence in application of style. (nice to know, not a need to know)</p>

<h2 id="how-to-add-css-to-rails">How to add CSS to Rails</h2>

<p>Normally, you link a CSS stylesheet to an HTML files using a <code class="highlighter-rouge">&lt;link&gt;</code> inside the <code class="highlighter-rouge">&lt;head&gt;</code> like so:</p>

<pre><code class="language-HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;link rel="stylesheet" href="/css/master.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Rails gives us those handy <code class="highlighter-rouge">ActionView::Helpers</code> that we mentioned earlier. Your default <code class="highlighter-rouge">application.html.erb</code> file should have a link to <code class="highlighter-rouge">application.css</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>SetList<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">csrf_meta_tags</span> <span class="err">%</span><span class="nt">&gt;</span>

    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">stylesheet_link_tag</span>    <span class="err">'</span><span class="na">application</span><span class="err">',</span> <span class="na">media:</span> <span class="err">'</span><span class="na">all</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">javascript_include_tag</span> <span class="err">'</span><span class="na">application</span><span class="err">'</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">yield</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>This means that you can open up <code class="highlighter-rouge">application.css</code> and add CSS directly to that file, but <strong>don‚Äôt remove any of the comments in that file</strong>. This will cause issues with the Asset Pipeline.</p>

<p>Alternatively, if you want to create more files to organize your styles, you can create a new file in <code class="highlighter-rouge">app/assets/stylesheets</code> and give it the extension <code class="highlighter-rouge">.css</code>. Any css files in this directory will be applied to <strong>all</strong> of your views.</p>

<p>It is also helpful to organize the rules within your stylesheets from least specific to most specific (The element selectors, then class, then id.) This helps with not only visual organization but specificity organization.</p>

<p>Check out the <a href="./asset_pipeline">Intro to the Asset Pipeline</a> for more detail on how CSS is added to our projects.</p>

<h2 id="creating-css-rules">Creating CSS Rules</h2>

<p>In order to style elements, you will need to target them with <strong>CSS Selectors</strong>. There are many selectors, but the ones you need to know are:</p>

<ul>
  <li>The pound <code class="highlighter-rouge">#</code> symbol targets an element by its <code class="highlighter-rouge">id</code> attribute</li>
  <li>The dot <code class="highlighter-rouge">.</code> symbol targets elements by their <code class="highlighter-rouge">class</code> attribute</li>
  <li>You can target all <code class="highlighter-rouge">&lt;p&gt;</code> elements with <code class="highlighter-rouge">p</code>, all <code class="highlighter-rouge">&lt;div&gt;</code> elements with <code class="highlighter-rouge">div</code>, etc.</li>
  <li>You can combine selectors, for example the following would target only a <code class="highlighter-rouge">&lt;p&gt;</code> element with a class of <code class="highlighter-rouge">song</code> and an <code class="highlighter-rouge">id</code> of <code class="highlighter-rouge">song-4</code>: <code class="highlighter-rouge">p.song#song-4</code></li>
</ul>

<p>For a complete reference of CSS Selectors, <a href="https://www.w3schools.com/cssref/css_selectors.asp">see this W3Schools page</a></p>

<p>Once you have selected elements, you can specify styles for those elements in curly brackets <code class="highlighter-rouge">{}</code>. For example, you could place the following css directly into the <code class="highlighter-rouge">application.css</code> file:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* element */</span>
<span class="nt">p</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#FFFFFF</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* class */</span>
<span class="nc">.some-class</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">orange</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* id */</span>
<span class="nf">#some-id</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">purple</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Note:</strong> It is convention to write classes and ids in <code class="highlighter-rouge">kabob-case</code></p>

<p>Capybara ‚Äúwithin‚Äù statements use this same CSS Selector syntax for selecting elements in feature tests.</p>

<h2 id="display-properties-block-vs-inline">Display Properties: Block vs. Inline</h2>
<ul>
  <li>The default value for all HTML tags is <code class="highlighter-rouge">inline</code>. Most ‚ÄúUser Agent stylesheets‚Äù (the default styles the browser applies) reset many elements to <code class="highlighter-rouge">block</code></li>
  <li>The display value can be changed with the CSS property <code class="highlighter-rouge">display</code>.</li>
</ul>

<h3 id="block">Block</h3>
<ul>
  <li>An element with a display of block will take up the entire width of the page, no matter how small the content is within the tag.</li>
  <li>It will always start on a new line.</li>
  <li><code class="highlighter-rouge">p</code>, <code class="highlighter-rouge">form</code>, <code class="highlighter-rouge">h1 - h6</code>, <code class="highlighter-rouge">ul</code>, <code class="highlighter-rouge">section</code> and <code class="highlighter-rouge">div</code>s are all block elements</li>
</ul>

<h3 id="inline">Inline</h3>
<ul>
  <li><code class="highlighter-rouge">link</code>, <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">span</code> are all inline by default.</li>
  <li>They will only take up as much space as it needs.</li>
  <li>It will not start on a new line.</li>
  <li>You can set the margin and padding but it will only adjust horizontally. Will ignore any rules for width or height.</li>
</ul>

<h3 id="inline-block">Inline-Block</h3>
<ul>
  <li>Will situate itself inline, but can set a width and height.</li>
</ul>

<h2 id="devtools">DevTools</h2>
<p>Visit any web page, right click on any part of the page. A dropdown box will appear, with <code class="highlighter-rouge">inspect</code> towards the bottom. Click this will open your <code class="highlighter-rouge">Developer Tools</code></p>

<p><img src="https://raw.githubusercontent.com/turingschool/front-end-curriculum/gh-pages/assets/images/lessons/debugging-with-devtools/editing-css.png" alt="Editing CSS" /></p>

<p>On the left you will see what is currently being rendered (original html + anything else impacting the layout such as CSS and JavaScript).</p>

<p>To the right of the HTML pane, there‚Äôs a small sidebar that gives us styling information for the currently selected element. If you scroll down on the right, you will see a handy graphic of how our element is being rendered.</p>

<h3 id="editing-css">Editing CSS</h3>

<p>Similar to the HTML pane, we can add or remove styles and adjust CSS property values from this pane. You can click on any style property associated with the selected element and change its value. You can also use the blue checkbox to toggle the style on or off.</p>

<h2 id="the-box-model">The Box Model</h2>

<p><strong>All the Elements are Boxes</strong></p>

<p>Each element is a rectangular box. CSS leverages ‚Äúthe box model‚Äù to control layout and design. An HTML element is comprised of its content and the margins, borders, padding surrounding it. Boxes are ‚Äústacked‚Äù in the order they appear in your HTML. You can stack them horizontally, vertically, and in the z-plane.</p>

<p>Open up the DevTools and select any HTML element to see a diagram of its Box Model:</p>

<p><img src="https://raw.githubusercontent.com/turingschool/front-end-curriculum/gh-pages/assets/images/box-model.jpg" alt="Box Model" /></p>

<p>In HTML, you can visualize each element as its own rectangular box. There are a number of CSS properties that can affect the final width and height of each of these boxes. The CSS Box Model describes how the final height and width of an element is determined.</p>

<p>We have a <code class="highlighter-rouge">div</code> element that we gave a <code class="highlighter-rouge">width</code> of <code class="highlighter-rouge">400</code> and a <code class="highlighter-rouge">height</code> of <code class="highlighter-rouge">200</code>. However, we‚Äôve also applied several additional properties that are affecting its size and positioning. The <code class="highlighter-rouge">padding</code> and <code class="highlighter-rouge">border</code> properties are both adding <code class="highlighter-rouge">20px</code> to the element‚Äôs height and width. Now the actual <em>visible</em> dimensions of our element are <code class="highlighter-rouge">480x280</code>.</p>

<h1 id="css-frameworks">CSS Frameworks</h1>

<p>In modern web application development, we tend to rely on frameworks to style pages rather than plain HTML and CSS.</p>

<h2 id="bootstrap">Bootstrap</h2>

<p>Free front-end framework that includes HTML and CSS based design templates that have a mobile first approach. Bootstrap layouts are based on a grid design. It can be quickly and easily added to projects and does use jQuery to function.</p>

<p>To get started using the available templates, you must first include the necessary links and script tags in our html document. Then we simply look through documentation to find what we want to include in our own html add the necessary class or classes to our html elements and bootstrap will handle the rest.</p>

<p><a href="https://getbootstrap.com/">Bootstrap Docs</a></p>

<h3 id="flexbox">Flexbox</h3>

<p>Flexbox is used to have a more flexible layout that helps to align and distribute space of items in a container. The container is able to alter the width/height of the items within to fill the available space. This allows the content to control the way it is displayed.</p>

<p>Flexbox uses a horizontal axis and vertical axis to align items and create space around those items. It is better to use for small-scale layouts and one dimensional layouts.</p>

<p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">Flexbox Guide</a></p>

<h3 id="grid">Grid</h3>

<p>Grid is used for a two-dimensional layout where both columns and rows are used. This allows us to break up the container into cells to align objects, but unlike a table, grid allows us to layer items if necessary.</p>

<p><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">Grid Guide</a></p>

<h2 id="practice">Practice</h2>

<p>In SetList:</p>

<ul>
  <li>Add some HTML to <code class="highlighter-rouge">app/views/layouts/application.html.erb</code> to create element(s) that will be rendered on every page, for example a search bar, nav bar, an image, etc.</li>
  <li>Style your Song index:
    <ul>
      <li>Make sure you have a header at the top of the page. Give this header an <code class="highlighter-rouge">id</code></li>
      <li>Wrap each Song in a semantic container element</li>
      <li>Give each container a class of ‚Äúsong‚Äù</li>
      <li>Give each container an id of <code class="highlighter-rouge">song-&lt;id&gt;</code> where <code class="highlighter-rouge">&lt;id&gt;</code> is the id of the song. This id should be dynamically assigned in the view.</li>
      <li>In your <code class="highlighter-rouge">application.css</code> file, target all of the classes and ids you made in the song index and add at least one new style for each</li>
    </ul>
  </li>
</ul>

<p><strong>Extension</strong>: Incorporate one of the CSS frameworks into your app</p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What is HTML?</li>
  <li>What is <code class="highlighter-rouge">application.html.erb</code>?</li>
  <li>What are <code class="highlighter-rouge">ActionView::Helpers</code>?</li>
  <li>Why would we use semantic vs. non-semantic tags?</li>
  <li>What is the difference between a block and inline element?</li>
  <li>When should we use an <code class="highlighter-rouge">id</code> over a <code class="highlighter-rouge">class</code>?</li>
  <li>What is CSS?</li>
  <li>How can you add CSS to a Rails app?</li>
  <li>How do you select elements, classes, and ids in CSS?</li>
</ul>
:ET