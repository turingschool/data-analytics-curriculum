I"Ç2<p><img src="http://vignette4.wikia.nocookie.net/battleship/images/f/fd/Battleship-1.jpg/revision/latest?cb=20120303020432" alt="Classic fun for the whole patriarchy!" /></p>

<p>In this project you‚Äôll use Ruby to build an implementation of the classic game Battleship.</p>

<h2 id="introduction">Introduction</h2>

<h3 id="learning-goals--areas-of-focus">Learning Goals / Areas of Focus</h3>

<ul>
  <li>Proficiently use TDD to drive development</li>
  <li>Practice breaking a program into logical components</li>
  <li>Practice implementing a useable REPL interface</li>
  <li>Apply previously learned Enumerable techniques in a real context</li>
</ul>

<h2 id="base-expectations">Base Expectations</h2>

<p>You are to build a playable game of Battleship that runs in a REPL interface.
The game will allow a single human player to play against a (simplistic)
computer player.</p>

<p>The game will include several distinct phases:</p>

<ol>
  <li><a href="#start-game-sequence">Start Game Sequence</a></li>
  <li><a href="#computer-ship-placement">Computer Ship Placement</a></li>
  <li><a href="#player-ship-placement">Player Ship Placement</a></li>
  <li><a href="#player-shot-sequence">Player Shot Sequence</a></li>
  <li><a href="#computer-shot-sequence">Computer Shot Sequence</a></li>
  <li><a href="#ship-hit-sequence">Ship Hit Sequence</a></li>
  <li><a href="#end-game-sequence">End Game Sequence</a></li>
  <li>Setup <a href="https://github.com/colszowka/simplecov">SimpleCov</a> to monitor test coverage along the way</li>
</ol>

<h3 id="start-game-sequence">Start Game Sequence</h3>

<ul>
  <li>The player starts the game by running <code class="highlighter-rouge">ruby battleship.rb</code> from within your project directory</li>
  <li>Then they see:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Welcome to BATTLESHIP

Would you like to (p)lay, read the (i)nstructions, or (q)uit?
&gt;
</code></pre></div></div>

<ul>
  <li>If they enter <code class="highlighter-rouge">p</code> or <code class="highlighter-rouge">play</code> then they enter the <em>ship layout</em> described below.</li>
  <li>If they enter <code class="highlighter-rouge">i</code> or <code class="highlighter-rouge">instructions</code> they should be presented with a short explanation of how
the game is played.</li>
  <li>If they enter <code class="highlighter-rouge">q</code> or <code class="highlighter-rouge">quit</code> then the game should exit</li>
</ul>

<h3 id="computer-ship-placement">Computer Ship Placement</h3>

<p>When the player decides to start a game, the computer player should place
their ships. The baseline computer should simply use random placements,
but still obey these constraints:</p>

<h4 id="validating-ship-coordinates">Validating Ship Coordinates</h4>

<p>Note that there are certain restrictions on where a ship can be placed.
Specifically:</p>

<ul>
  <li>Ships cannot wrap around the board</li>
  <li>Ships cannot overlap</li>
  <li>Ships can be laid either horizontally or vertically</li>
  <li>Coordinates must correspond to the first and last units of the ship.
(IE: You can‚Äôt place a two unit ship at ‚ÄúA1 A3‚Äù)</li>
</ul>

<h3 id="player-ship-placement">Player Ship Placement</h3>

<p>After the computer has placed its ships, the player should see:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I have laid out my ships on the grid.
You now need to layout your two ships.
The first is two units long and the
second is three units long.
The grid has A1 at the top left and D4 at the bottom right.

Enter the squares for the two-unit ship:
</code></pre></div></div>

<h4 id="player-entering-ship-coordinates">Player Entering Ship Coordinates</h4>

<p>Then they enter coordinates like this:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A1 A2
</code></pre></div></div>

<p>Which places the two element ship on squares A1 and A2. Then it asks for the
coordinates for the three-unit ship.</p>

<p>Player ship positions should be validated according to the same rules
listed above. If a user enters an invalid ship coordinate, the game should display a
message explaining which of the rules their choice violated, then
ask them to re-enter all coordinates for that specific ship. (Any previous
ship placements should still be retained)</p>

<p>Once all ships have been placed, the user can enter the main game flow
phase.</p>

<h3 id="game-flow-main-phase">Game Flow (Main Phase)</h3>

<p>During the main game, players take turns firing
at one another by selecting positions on the grid to attack.</p>

<h4 id="rendering-the-game-grid">Rendering the Game Grid</h4>

<p>During this phase the game will frequently need to display
the current game view. We‚Äôll use a simple ASCII text grid
of letters (to indicate rows) and numbers (to indicate columns).</p>

<p>Your board will look something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===========
. 1 2 3 4
A
B
C
D
===========
</code></pre></div></div>

<h3 id="player-shot-sequence">Player Shot Sequence</h3>

<p>Once the ships are laid out the game starts with the Player Shot Sequence.</p>

<ol>
  <li>Display the map from the current player‚Äôs point of view</li>
  <li>Prompt the player for a position on which to fire</li>
  <li>Indicate whether that shot was a hit or a miss and display an updated map</li>
</ol>

<h4 id="1-displaying-the-map">1. Displaying the map</h4>

<p>Display a map using the format described above. On the map, include
information about the current player‚Äôs previous shots. For every
shot that landed a hit, mark that position with an <code class="highlighter-rouge">H</code>, and for every
shot that missed, mark that position with an <code class="highlighter-rouge">M</code>.</p>

<p>So, on the first turn, a player‚Äôs grid will look empty. But as the game
progresses, it will gradually fill up with misses and hits:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===========
. 1 2 3 4
A H M
B H   M
C   H M
D
===========
</code></pre></div></div>

<h4 id="2-prompting-player-for-a-shot">2. Prompting Player for a Shot</h4>

<p>At the bottom of the grid display, the board should include a message
prompting the player to enter a coordinate to fire on. This should follow
the same pattern as when placing ships ‚Äì  a letter/number combination to
indicate the row and column to hit.</p>

<p>You should validate that the player‚Äôs choice is a valid coordinate on the
board, and that they have not already fired on that position before. (If they
have, display a message explaining these constraints)</p>

<h4 id="3-displaying-shot-information">3. Displaying Shot Information</h4>

<p>After the player has entered their target, display a short message indicating
whether it was a hit or a miss. Additionally, re-render the board showing
the new shot.</p>

<p>Finally, prompt the player to end their turn by pressing <code class="highlighter-rouge">ENTER</code>.</p>

<h3 id="computer-shot-sequence">Computer Shot Sequence</h3>

<p>Once the player has ended their turn, the AI will fire. This follows
a similar process, except that instead of prompting for a target, the
computer will simply select one at random from the positions that it
has not yet fired at (again, not a very sophisticated AI, but good enough
for now).</p>

<p>Once the computer has selected, display a message to the human player
indicating which position the computer fired at and whether it was a
miss or a hit.</p>

<p>Finally, give the player an overview of the computer‚Äôs progress so far by
displaying the game grid of the player‚Äôs ships with <code class="highlighter-rouge">H</code>s over any positions
the computer has hit and <code class="highlighter-rouge">M</code>s over any positions the computer has fired at but
missed.</p>

<p>Then, return to the Player Shot Sequence.</p>

<h3 id="ship-hit-sequence">Ship Hit Sequence</h3>

<ul>
  <li>If the hit did not sink the ship, tell them that they hit an enemy ship</li>
  <li>If the hit sunk the ship, tell them they sunk it and the size of the ship.</li>
  <li>If the hit sunk the ship and it was the last enemy ship, then enter the End Game Sequence</li>
</ul>

<h3 id="end-game-sequence">End Game Sequence</h3>

<p>When either the player or computer win the game‚Ä¶</p>

<ul>
  <li>Output a sorry or congratulations message</li>
  <li>Output how many shots it took the winner to sink the opponent‚Äôs ships</li>
  <li>Output the total time that the game took to play</li>
</ul>

<h2 id="extension">Extension</h2>

<p>Make your game playable through a web browser. You may find <a href="/module1/projects/http_tutorial">This Tutorial</a> helpful.</p>

<h2 id="evaluation-rubric">Evaluation Rubric</h2>

<p>The project will be assessed with the following rubric:</p>

<h3 id="1-ruby-syntax--style">1. Ruby Syntax &amp; Style</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Applies appropriate attribute encapsulation</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer creates instance and local variables appropriately</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Naming follows convention (is idiomatic)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Ruby methods used are logical and readable</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements best-choice enumerable methods</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is indented properly</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code does not exceed 80 characters per line</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A directory/file structure provides basic organization via lib/ and/or /test</li>
</ul>

<h3 id="2-breaking-logic-into-components">2. Breaking Logic into Components</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is effectively broken into methods &amp; classes</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer writes methods less than 7 lines</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />No more than 3 methods break the principle of SRP</li>
</ul>

<h3 id="3-test-driven-development">3. Test-Driven Development</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Each method is tested</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Functionality is accurately covered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Tests implement Ruby syntax &amp; style</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Balances unit and integration tests</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Evidence of edge cases testing</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Test Coverage metrics are present (SimpleCov)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A test RakeTask is implemented</li>
</ul>

<h3 id="4-functionality">4. Functionality</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Application meets all requirements (extension not req‚Äôd)</li>
</ul>

<h3 id="5-version-control">5. Version Control</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer commits at a pace of at least 1 commit per hour</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements branching and PRs</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />The final submitted version is merged into master</li>
</ul>
:ET