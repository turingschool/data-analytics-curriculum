I";<h1 id="testing-with-fixtures">Testing with Fixtures</h1>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Implement a test helper</li>
  <li>Understand what test fixtures are and why they are useful</li>
  <li>Implement a test fixture</li>
</ul>

<p>Slides <a href="../slides/fixtures">here</a></p>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Test Fixture</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What makes testing easy?</li>
  <li>What makes testing hard?</li>
  <li>What challenges are you finding in testing Black Thursday?</li>
  <li>What might be some disadvantages to testing with a large dataset?</li>
  <li>What might be some alternatives?</li>
</ul>

<h2 id="fixtures">Fixtures</h2>

<p>You may not have fully noticed yet, but all that data processing we’re testing is really starting to affect our test suite’s performance. Let’s see if we can <em>fix</em> that up.</p>

<h3 id="basics">Basics</h3>

<ul>
  <li>Create smaller copies of files you’ll use in production</li>
  <li>Mimic a request to an external dependency within testing environment, making calls</li>
</ul>

<p>Let’s set up a quick <code class="highlighter-rouge">learning_fixtures</code> project folder in our <code class="highlighter-rouge">classwork</code> directory complete with <code class="highlighter-rouge">lib</code>, <code class="highlighter-rouge">data</code>, and <code class="highlighter-rouge">test</code> directories.</p>

<p>We’re going to test-drive iterating over an absurdly long CSV.</p>

<p>But first, you’ll need to download <a href="https://gist.github.com/laurenfazah/3390b8417274f11dee87eef02ea3c4db">this</a> and save it in <code class="highlighter-rouge">data</code>.</p>

<p>Let’s use our CSV knowledge to create a hash based on the values contained in the CSV. We’ll just create a new hash based on a few <em>key</em> headers and redefine those values with each new row in our CSV. We’ll assert that the last <code class="highlighter-rouge">"EPISODE"</code> key’s value is from the last row of the CSV.</p>

<p>Seem pointless? We really just want to create a task that will take significantly long to perform, but would be relatively quick with a customized fixture.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test/bob_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'./lib/bob'</span>

<span class="k">class</span> <span class="nc">BobTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_exists</span>
    <span class="n">assert_instance_of</span> <span class="no">Bob</span><span class="p">,</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'./data/bob_elements.csv'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_time_to_run_long_iteration</span>
    <span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'./data/bob_elements.csv'</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="s2">"S31E13"</span><span class="p">,</span> <span class="n">bob</span><span class="p">.</span><span class="nf">final_episode</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="test-helpers">Test Helpers</h2>

<p>Tired of writing all those <code class="highlighter-rouge">require</code> statements at the top of each file? Let’s start thinking of our test files in a more DRY fashion.</p>

<p>Creating a <code class="highlighter-rouge">test_helper.rb</code> that our test files require allows us to store the rest of our repetitive setup in one centralized location.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test/test_helper.rb</span>

<span class="nb">require</span> <span class="s1">'minitest'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
</code></pre></div></div>

<p>Now you can remove that from your test and simply</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'./test/test_helper'</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/bob.rb</span>

<span class="nb">require</span> <span class="s1">'csv'</span>
<span class="nb">require</span> <span class="s1">'pry'</span>

<span class="k">class</span> <span class="nc">Bob</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
    <span class="vi">@filepath</span> <span class="o">=</span> <span class="n">filepath</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">final_episode</span>
    <span class="n">current_episode</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="vi">@filepath</span><span class="p">,</span> <span class="ss">headers: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">header_converters: :symbol</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
      <span class="n">current_episode</span><span class="p">[</span><span class="s1">'episode_number'</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="ss">:episode</span><span class="p">]</span>
    <span class="k">end</span>
    
    <span class="n">current_episode</span><span class="p">[</span><span class="s1">'episode_number'</span><span class="p">]</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Want to see approximately how long your tests take to run? Use the `-v` flag when running your tests and Minitest will be more verbose.
</code></pre></div></div>

<p>Once this is running, let’s speed things up with a <code class="highlighter-rouge">bob_elements_truncated.csv</code> fixture.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── data
|   └── bob_elements.csv
├── lib
|   └── bob.rb
└── test
    ├── bob_test.rb
    ├── test_helper.rb
    └── fixtures
        └── bob_elements_truncated.csv
</code></pre></div></div>

<h2 id="wrap-up">Wrap-up</h2>

<ul>
  <li>Why would you want to use a test helper?</li>
  <li>How can test fixtures improve your testing suite?</li>
  <li>How many lines of data should you include in your fixture files?</li>
</ul>

:ET