I"'<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Modify controllers to conduct RESTful actions through JSON.</li>
  <li>Generate and customize Rails Serializers</li>
  <li>Build a basic API for reading data</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>25 - Lecture: Serving JSON from Rails</li>
  <li>5 - Break</li>
  <li>20 - Code Walkthrough: Creating Custom Serializers</li>
  <li>35 - Pair Practice</li>
  <li>5 - Wrap Up</li>
</ul>

<h2 id="lecture-serving-json-from-rails">Lecture: Serving JSON from Rails</h2>

<p><a href="http://tutorials.jumpstartlab.com/topics/web_services/api.html">Use this tutorial</a> for a basic rundown of <code class="highlighter-rouge">respond_with</code> and <code class="highlighter-rouge">respond_to</code></p>

<h3 id="customizing-json-output">Customizing JSON output</h3>

<p>When we call <code class="highlighter-rouge">respond_with</code>, Rails makes a call to <code class="highlighter-rouge">as_json</code> under the hood unless we have a view or serializer set up. Eventually, <code class="highlighter-rouge">as_json</code> calls <code class="highlighter-rouge">to_json</code> and our response is generated.</p>

<p>Let’s imagine that you don’t just want the raw guts of your model converted to JSON and sent out to the user – maybe you want to customize what you send back. There are a few approaches:</p>

<ol>
  <li>Try to use some clever combination of ERB and JSON in the view</li>
  <li>Massage your model into some presentable hash in the controller</li>
  <li>Override <code class="highlighter-rouge">as_json</code> on your model (<a href="https://github.com/JumpstartLab/blogger_advanced/commit/085a9f6681feb3c3623042a9897f037abc6d6bf7">Example</a>)</li>
  <li>Use an ActiveModel serializer</li>
  <li>Use Jbuilder (a DSL for creating JSON built into Rails 4) in the view layer</li>
</ol>

<p>Let’s take a look at the last two ways to customize the JSON that gets sent to the user.</p>

<h2 id="code-walkthrough-creating-custom-serializers">Code Walkthrough: Creating Custom Serializers</h2>

<p>We’ll be stepping through code on the <a href="https://github.com/JumpstartLab/blogger_advanced/tree/serialization">serialization branch</a> commit by commit.</p>

<ul>
  <li><code class="highlighter-rouge">cfb0cdf</code> - Serve JSON for Article#show</li>
  <li><code class="highlighter-rouge">0b0137a</code> - Add custom JSON reponse for Article#index</li>
  <li><code class="highlighter-rouge">174304f</code> - Add active_model_serializers to Gemfile</li>
  <li><code class="highlighter-rouge">60666a4</code> - Generate serializer for article</li>
  <li><code class="highlighter-rouge">c9d8bdd</code> - Add title and body to Article serializer</li>
  <li><code class="highlighter-rouge">9db729d</code> - Add comments relationship to serializer</li>
  <li><code class="highlighter-rouge">f1f0aab</code> - Serialize comments</li>
  <li><code class="highlighter-rouge">f68f0d6</code> - Add custom attributes for serializers</li>
</ul>

<p><code class="highlighter-rouge">ActiveModel::Serializer</code> depends on a gem.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'active_model_serializers'</span>
</code></pre></div></div>

<p><strong>Nota bene</strong>: At this exact moment in time, you’re better off using the version on the Github master branch. This should all be settled soon when Active Model Serializers hits 1.0.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"active_model_serializers"</span><span class="p">,</span> <span class="ss">github: </span><span class="s2">"rails-api/active_model_serializers"</span>
</code></pre></div></div>

<p>This will give us a new generator. Let’s add a serializer for our Article model.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bin/rails g serializer article
</code></pre></div></div>

<p>We now have a new file located at <code class="highlighter-rouge">app/serializers/article_serializer.rb</code>.</p>

<h3 id="jbuilder">Jbuilder</h3>

<p>Jbuilder gives is a simple DSL for declaring JSON structures. Let’s step through some code together to get a feel for how it works.</p>

<p>We’ll be stepping through code on the <a href="https://github.com/JumpstartLab/blogger_advanced/tree/jbuilder">jbuilder branch</a> commit by commit.</p>

<ul>
  <li><code class="highlighter-rouge">cfb0cdf</code> - Serve JSON for Article#show</li>
  <li><code class="highlighter-rouge">0b0137a</code> - Add custom JSON reponse for Article#index</li>
  <li><code class="highlighter-rouge">528cd50</code> - Add jbuilder to Gemfile</li>
  <li><code class="highlighter-rouge">0fdb9f0</code> - Show the title with Jbuilder</li>
  <li><code class="highlighter-rouge">9da8a51</code> - Define multiple properties at once</li>
  <li><code class="highlighter-rouge">c01c8d0</code> - Use a block to next attributes</li>
  <li><code class="highlighter-rouge">3d122d5</code> - Pull in related comments</li>
</ul>

<p>You can check out the <a href="https://github.com/rails/jbuilder">Jbuilder documentation here</a>.</p>

<h2 id="pair-practice">Pair Practice</h2>

<ol>
  <li>Modify <code class="highlighter-rouge">ArticlesController</code> so that the <code class="highlighter-rouge">show</code> and <code class="highlighter-rouge">create</code> actions use <code class="highlighter-rouge">respond_with</code> and can speak both JSON and HTML. Want to try the create action out? Use <a href="https://www.getpostman.com/">Postman</a>.</li>
  <li>Make similar changes to <code class="highlighter-rouge">CommentsController</code> so comments can be read and written via JSON.</li>
  <li>Add controller and serializer for authors that allows you to see an author as well as the titles and last updated date of their blog posts.</li>
</ol>

<h2 id="wrap-up">Wrap Up</h2>

<ul>
  <li>Of the strategies for customizing your JSON responses, which do you think you’d use when?</li>
  <li>Are there some you’d never use?</li>
</ul>
:ET