I"46<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>understand the role the Modules play in Ruby</li>
  <li>use a module to create a mixin to make our code DRYer (Don’t Repeat Yourself)</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Mixin</li>
  <li>Module</li>
  <li>Instantiate</li>
  <li>State</li>
  <li>Behavior</li>
</ul>

<h2 id="sides">Sides</h2>

<p>Available <a href="../slides/mixins">here</a></p>

<h2 id="warm-up">Warm Up</h2>

<p>Jot down your thoughts for the following questions. Be ready to share.</p>

<ul>
  <li>What do you know about modules already? If little, what would you guess modules are all about based on the name?</li>
  <li>Football players and soccer players both have unique attributes. What behaviors might they share?</li>
  <li>What behaviors/abilities might be shared between an instructor and a student?</li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>We’re going to learn about Modules, a simple tool that will do a few completely different things in Ruby. Today we are going to talk about using them as Mixins.</p>

<h3 id="mixins">Mixins</h3>

<ul>
  <li>Mixins allow us to share behavior between objects</li>
  <li>Ruby implements mixins with Modules</li>
</ul>

<h3 id="modules">Modules</h3>

<ul>
  <li>Modules may look like classes, but they only hold methods</li>
  <li>Modules only store behavior</li>
  <li>Modules <em>do not</em> store state</li>
  <li>Modules cannot be instantiated. This means that you cannot type somethinglike <code class="highlighter-rouge">MyModule.new</code></li>
</ul>

<p>Let’s look at two separate classes to start exploring the idea of modules. Clone down <a href="https://github.com/turingschool-examples/ruby-module-example">this repo</a>.</p>

<p>First, we’ll experiment with the <code class="highlighter-rouge">StatusUpdate</code> class.</p>

<p><code class="highlighter-rouge">pry</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./status_update.rb"</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="n">status</span> <span class="o">=</span> <span class="no">StatusUpdate</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"I'm learning about modules in Ruby #nbd"</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>

<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Oh cool!"</span><span class="p">)</span>
<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Just wait until you learn about inheritance."</span><span class="p">)</span>
<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"What is a module?"</span><span class="p">)</span>
<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"I'm so proud of you! Love, mom."</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>

<span class="n">status</span><span class="p">.</span><span class="nf">remove_comment</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>
</code></pre></div></div>

<p>Now, let’s experiment with the <code class="highlighter-rouge">Photo</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./photo.rb"</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="n">photo</span> <span class="o">=</span> <span class="no">Photo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"https://images.pexels.com/photos/2280545/pexels-photo-2280545.jpeg"</span><span class="p">,</span> <span class="s2">"This is what I ate for breakfast #yum #hashtag"</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"That looks delicious!"</span><span class="p">)</span>
<span class="n">photo</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Ooooh, will you cook for me?"</span><span class="p">)</span>
<span class="n">photo</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Brunch next Sunday?"</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">remove_comment</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>
</code></pre></div></div>

<p><strong>Turn &amp; Talk:</strong></p>

<ul>
  <li>What is similar/different between the two classes (StatusUpdate and Photo)?</li>
  <li>What design principle(s) are we breaking with these two classes? Explain.</li>
</ul>

<h3 id="modules-1">Modules</h3>

<p>We can extract this duplication into a <strong>module</strong> which we’ll include within each class. Oftentimes, you’ll see modules named with the convention “-able”, like <a href="https://docs.ruby-lang.org/en/2.5.0/Comparable.html">Comparable</a> or <a href="https://docs.ruby-lang.org/en/2.5.0/Enumerable.html">Enumerable</a>.</p>

<p><code class="highlighter-rouge">touch commentable.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Commentable</span>
  <span class="c1"># what extracted code goes here? </span>
<span class="k">end</span>
</code></pre></div></div>

<p>To get access to the methods defined in the module, you will include the module at the beginning of the class. Using include allows you to call the module methods on an instance of the class where it is included.</p>

<p>In <code class="highlighter-rouge">status_update.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./commentable"</span>

<span class="k">class</span> <span class="nc">StatusUpdate</span>
  <span class="kp">include</span> <span class="no">Commentable</span>

  <span class="c1"># ... other code</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In <code class="highlighter-rouge">photo.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./commentable"</span>

<span class="k">class</span> <span class="nc">Photo</span>
  <span class="kp">include</span> <span class="no">Commentable</span>

  <span class="c1"># ... other code</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Get back into Pry and try out the interaction pattern below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./status_update.rb"</span>
<span class="nb">require</span> <span class="s2">"./photo.rb"</span>

<span class="n">status</span> <span class="o">=</span> <span class="no">StatusUpdate</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"I'm learning about modules in Ruby #nbd"</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>

<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Oh cool!"</span><span class="p">)</span>
<span class="n">status</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Whoa..."</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>

<span class="n">status</span><span class="p">.</span><span class="nf">remove_comment</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">status</span><span class="p">.</span><span class="nf">display</span>


<span class="n">photo</span> <span class="o">=</span> <span class="no">Photo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"https://images.pexels.com/photos/2280545/pexels-photo-2280545.jpeg"</span><span class="p">,</span> <span class="s2">"This is what I ate for breakfast #yum #hashtag"</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"That looks delicious!"</span><span class="p">)</span>
<span class="n">photo</span><span class="p">.</span><span class="nf">add_comment</span><span class="p">(</span><span class="s2">"Pancakes!"</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">remove_comment</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">photo</span><span class="p">.</span><span class="nf">display</span>
</code></pre></div></div>

<p><strong>Turn &amp; Talk:</strong></p>

<ul>
  <li>What just happened there?</li>
  <li>What would be the benefit of a module?</li>
  <li>Where else might you be able to reuse <code class="highlighter-rouge">Commentable</code>?</li>
</ul>

<h3 id="key-points">Key Points</h3>

<ul>
  <li>Once a module is included in a class, any object created from that class can call the method in the module (we just treat it as if the <code class="highlighter-rouge">add_comment</code> and <code class="highlighter-rouge">remove_comment</code> methods were part of our other classes, where you call the methods on an instance of an class.)</li>
  <li>Many classes can include the same module</li>
  <li>Each class can include many modules</li>
</ul>

<h2 id="exercise-modules">Exercise: Modules</h2>

<p>Now it’s your turn.</p>

<p>Consider the following code:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Camry</span>
  <span class="k">def</span> <span class="nf">start</span>
    <span class="nb">puts</span> <span class="s2">"Engine on!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">stop</span>
    <span class="nb">puts</span> <span class="s2">"Engine off!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">drive</span>
    <span class="nb">puts</span> <span class="s2">"Back wheels go!"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Jeep</span>
  <span class="k">def</span> <span class="nf">start</span>
    <span class="nb">puts</span> <span class="s2">"Engine on!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">stop</span>
    <span class="nb">puts</span> <span class="s2">"Engine off!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">drive</span>
    <span class="nb">puts</span> <span class="s2">"All wheels go!"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Create an <code class="highlighter-rouge">Engine</code> module to extract the <code class="highlighter-rouge">start</code> and <code class="highlighter-rouge">stop</code> methods. (Yes, we know this isn’t following the “-able” naming conventions, but this is not a rule).</li>
  <li>Create an <code class="highlighter-rouge">Airconditionable</code> module that is mixed into both classes. Instances of either class should be able to turn the AC on (<code class="highlighter-rouge">Chilly air coming your way!</code>) or off (<code class="highlighter-rouge">Temp is fine in here.</code>). It’s up to you what you want to name these methods.</li>
  <li>Now that stop and start are extracted to the module, add back in a start or stop method in one of your class. Have it return the string “WAIIIIIIIT”. What happens when you run this method? Why?</li>
</ul>

<h2 id="summary">Summary</h2>
<ul>
  <li>In the exercise above, why didn’t we just tell you to have a ‘Vehicle’ module that could hold engine and AC? What might the benefit of those being separated be?</li>
  <li>What is a module? How is it different than a class?</li>
  <li>How do you allow a class to have access to module methods?</li>
</ul>

<h2 id="additional-reading">Additional Reading</h2>

<p>Module Resources:</p>
<ul>
  <li><a href="http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/">Include vs Extend in Ruby</a> from John Nunemaker</li>
  <li><a href="http://ruby-doc.com/docs/ProgrammingRuby/html/tut_modules.html">Modules</a> in Programming Ruby / RubyDoc</li>
  <li><a href="http://matt.aimonetti.net/posts/2012/07/30/ruby-class-module-mixins/">Ruby Class, Module, and Mixin</a> by Matt Aimonetti</li>
</ul>
:ET