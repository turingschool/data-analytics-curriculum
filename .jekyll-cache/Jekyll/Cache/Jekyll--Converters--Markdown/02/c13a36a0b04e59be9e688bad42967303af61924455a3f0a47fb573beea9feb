I"°}<h2 id="learning-goals">Learning Goals</h2>

<p>In this lesson we‚Äôll cover:</p>

<ul>
  <li>The basic JavaScript data types</li>
  <li>What a variable is and how to use it</li>
  <li>Operators and how to use them</li>
  <li>Conditionals and when to use them</li>
  <li>How to declare and call functions with or without parameters</li>
</ul>

<h2 id="history-of-javascript">History of JavaScript</h2>

<p>Way back in the early days of the web, Brendan Eich created JavaScript. Legend has it that he wrote it in 10 days in 1995 while was was working as an engineer at Netscape. The language was first released with Netscape 2 in 1996. The name ‚ÄòJavaScript‚Äô was a oh-so-clever marketing push to try to pick up on the momentum of Sun Microsystem‚Äôs popular language Java, but instead it lead to years of confusion about the names of these two mostly unrelated programming languages. If you‚Äôd like to learn more about where JS came from, take a look <a href="http://speakingjs.com/es5/ch04.html">here</a>.</p>

<h2 id="what-is-javascript-and-why">What is JavaScript and Why?</h2>

<p>JavaScript was created to make the web more dynamic. It is an object-oriented scripting language made to run inside a host environment like a web browser and provide programatic control over the objects of that environment. For example, when you click a button and you want something about the webpage to change, you will use JavaScript.</p>

<p>JavaScript can be <em>client-side</em> and <em>server-side</em>, meaning that it can be used to control user-facing interfaces as well as handle the server-side extensions that connect with a database.</p>

<p>It‚Äôs a highly versatile and flexible language, and has become the most commonly used language of the web.</p>

<p>Now that we know a little bit about JavaScript, let‚Äôs talk about how to actually use it!</p>

<h1 id="data-types">Data Types</h1>

<p>There are different data types in JavaScript. It‚Äôs important to understand what type of data you‚Äôre dealing with as you‚Äôre writing code, and knowing the types of data are available to you is the first step.</p>

<p>There are three basic data types: numeric, string, and boolean. Let‚Äôs go over what each of these is.</p>

<h2 id="numeric-data-type">Numeric Data Type</h2>

<p>This data type handles numbers. In JavaScript, numbers are written without commas so three thousand four hundred and seventy five would be written like this:</p>

<p><code class="highlighter-rouge">3475</code></p>

<p>Numbers can also be negative and decimals (also called ‚Äúfloats‚Äù), so we can write <code class="highlighter-rouge">-3475</code> and <code class="highlighter-rouge">0.5</code></p>

<p>Note that we <em>do not</em> enclose a number data type in quotes.</p>

<h2 id="string-data-type">String Data Type</h2>

<p>The string data type handles letters and other characters. It is always enclosed in quotes, and looks like this:</p>

<p><code class="highlighter-rouge">"I am a string!"</code></p>

<p>You can use either single or double quotes to wrap a string, but the opening and closing quotes need to match. A good rule of thumb is to pick a type of quote to use and then be consistent in it‚Äôs use throughout a project.</p>

<p>Strings can be used for any kind of text. We use them regularly to add text to a page.</p>

<h2 id="boolean-data-type">Boolean Data Type</h2>

<p>A boolean has one of two values: <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code>. Think of it like a light switch: it‚Äôs either on or off.</p>

<p>Booleans can be very useful to help determine which part of a script should be run (as in conditionals, which we will talk about later).</p>

<h1 id="es5-vs-es6">ES5 vs. ES6</h1>

<p>ES6 is the most current version of the ECMA Script Spec. We will be using the ES6 syntax.</p>

<h1 id="variables-in-javascript">Variables in JavaScript</h1>

<p>As we‚Äôre writing code, there are many times when we want to be able to store a value so we have ability to reuse it in multiple places. Writing the same thing over and over is a pain, and it‚Äôs common that we need to have access to the same information more than once. A variable lets us do just that!</p>

<h2 id="what-is-a-variable">What is a variable?</h2>

<p>A variable is a place to store values. When we write scripts (a set of instructions for a computer to follow), we need to temporarily store small pieces of data. We store that data in variables. ‚ÄúVariable‚Äù is a good name for this concept because it indicates the stored data can change (or <em>vary</em>) each time a script is run.</p>

<p>A variable is, at its most simple, a declaration. It‚Äôs made up of two parts: the variable keyword, <code class="highlighter-rouge">let</code>, and the variable name, which can be whatever you choose. Let‚Äôs see what that looks like in the console:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVariableName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This is my variable</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>We see that we have the variable keyword, and we‚Äôve set the variable name to <code class="highlighter-rouge">myVariableName</code>.</p>

<p>When we write a very simple variable like this, it‚Äôs called <em>declaring</em> the variable.</p>

<p>After our <code class="highlighter-rouge">let</code> keyword (a special word that the JavaScript interpreter knows is used to create a variable) and our variable name, we have an equals sign, <code class="highlighter-rouge">=</code>. That‚Äôs called the <em>assignment operator</em>, because we use it to <em>assign</em> a value to our variable declaration.</p>

<p>Until you‚Äôve added the assignment operator and the variable value, the variable is considered <em>undefined</em>.</p>

<h2 id="rules-for-naming-variables">Rules for Naming Variables</h2>
<ul>
  <li>Names must begin with a letter, dollar sign, or an underscore. They cannot begin with a number.</li>
  <li>Names can contain any of the above characters plus a number, but you cannot use a dash (-) or a period (.) within the name.</li>
  <li>You cannot use keywords or reserved words (such as <code class="highlighter-rouge">var</code> or <code class="highlighter-rouge">for</code>).</li>
  <li>All variables are case sensitive.</li>
  <li>Use names that describe the kind of information you plan to assign the variable.</li>
  <li>If your variable is made up of more than one word, then use camel case for every word AFTER the first word, which should be lower case (thisIsMyVariableName).</li>
</ul>

<h3 id="your-turn-in-the-console">Your Turn (in the console)</h3>

<ul>
  <li>
    <p>Declare 2 variables, one named ‚Äúquantity‚Äù and one named ‚ÄúmythicalCreature‚Äù</p>
  </li>
  <li>
    <p>Create three more variables, and give them each different data types (numbers, strings, booleans)</p>
  </li>
</ul>

<h2 id="using-variables-together">Using Variables Together</h2>

<p>Now that we know about different data types and have values assigned to both of our variables, let‚Äôs dive into using them together!</p>

<p>So far, we have:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">mythicalCreature</span> <span class="o">=</span> <span class="dl">"</span><span class="s2"> unicorns</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>Let‚Äôs make a new variable called ‚ÄúcreatureCount‚Äù and assign the value as our quantity and our mythicalCreature.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">mythicalCreature</span> <span class="o">=</span> <span class="dl">"</span><span class="s2"> unicorns</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">creatureCount</span> <span class="o">=</span> <span class="nx">quantity</span> <span class="o">+</span> <span class="nx">mythicalCreature</span><span class="p">;</span>
</code></pre></div></div>

<p>Open up the console in your browser, enter these in, and see what you get!
Now change the value of your quantity variable and ask the console for the creatureCount value again.</p>

<h2 id="concatenating-variable-values">Concatenating Variable Values</h2>

<p>In the example above, we used a <code class="highlighter-rouge">+</code> as a string operator to combine the values of two different variables. This is called <em>concatenation</em>, which is a series of values linked together.</p>

<p>We can concatenate html tags, text, numbers, and variable values. Let‚Äôs revisit our example above to concatenate a more readable phrase as the value of our creatureCount variable:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">mythicalCreature</span> <span class="o">=</span> <span class="dl">"</span><span class="s2"> unicorns</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">creatureCount</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;I have </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">quantity</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> very fancy</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">mythicalCreature</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span>
</code></pre></div></div>
<p>This is very useful when we want to append data to our webpage, because it means we can write out an entire HTML tag and concatenate the data from our variable.</p>

<h1 id="operators">Operators</h1>

<p>Expressions rely on operators to calculate their single value. There are 5 basic types of operators to get you started:</p>

<ol>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Assignment_operators">Assignment operators</a> assign a value to a variable. (hint: you‚Äôve got these down already) <code class="highlighter-rouge">var color = 'magenta';</code></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Arithmetic_operators">Arithmetic operators</a> perform basic math. <code class="highlighter-rouge">var addTwo = 2 + 2;</code></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#String_operators">String operators</a> combine strings. <code class="highlighter-rouge">var greeting = 'Hello! ' + 'Nice to meet you.';</code></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison_operators">Comparison operators</a> compare two values and return a <strong>true</strong> or <strong>false</strong>. <code class="highlighter-rouge">var buy = 3 &gt; 5; // Value of buy is false</code></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators">Logical operators</a> combines <strong>expressions</strong> and return a Boolean value of true or false. <code class="highlighter-rouge">var buy = (5 &gt; 3) &amp;&amp; (2 &lt; 4);</code></li>
</ol>

<h1 id="statements">Statements</h1>

<p>A script is a series of instructions that a computer can follow one by one. Each individual instruction is known as a statement. Each statement in JavaScript is followed by a semicolon.</p>

<p>Example statements:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">BOOM</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">POW</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="debugging-in-javascript">Debugging in Javascript</h3>

<p>Debugging client-side and server-side JavaScript is a different beast than debugging Ruby.</p>

<p>Because client-side JS is run entirely in the browser, the technique for troubleshooting broken code is more complicated than <code class="highlighter-rouge">binding.pry</code>. Luckily, modern browsers are aware of this and give us a collection of options for digging into your code.</p>

<h4 id="1-developer-tools">1. Developer Tools</h4>
<p>One of the first things you should familiarize yourself with when working with JavaScript (or HTML‚Ä¶or CSS‚Ä¶) are the dev tools. You can find a cool tutorial to dive deeper with  <a href="http://discover-devtools.codeschool.com/">Code School‚Äôs Discover-DevTools Tutorial.</a> (Chapters 3 &amp; 4 are particularly helpful)</p>

<p>To open developer tools in Chrome:</p>
<ul>
  <li>Mac: <code class="highlighter-rouge">Cmd</code> + <code class="highlighter-rouge">Opt</code> + <code class="highlighter-rouge">i</code> (or <code class="highlighter-rouge">Cmd</code> + <code class="highlighter-rouge">Opt</code> + <code class="highlighter-rouge">j</code>)</li>
  <li>(or) Right click on the browser window and select <code class="highlighter-rouge">inspect</code></li>
  <li>(or) Select <code class="highlighter-rouge">View</code> in the navbar, then <code class="highlighter-rouge">Developer</code>, then <code class="highlighter-rouge">Developer Tools</code></li>
</ul>

<p>When working with JavaScript, it is useful to keep your console open at all times to watch for errors and anything you‚Äôve told your code to print out. Bringing us to‚Ä¶</p>

<h4 id="2-consolelog">2. console.log()</h4>
<p><code class="highlighter-rouge">console.log()</code> is to JS what <code class="highlighter-rouge">puts</code> is to Ruby. This line of code will print whatever is provided as an argument to the console.</p>

<p>Given the following function called <code class="highlighter-rouge">printStuff()</code>, adding console.log() will print the value of <code class="highlighter-rouge">myVariable</code> to the console.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const printStuff = function(){
  var myVariable = 5 + 5
  console.log(myVariable);
}

printStuff()
=&gt; 10
</code></pre></div></div>

<p>If you‚Äôre confused about what a variable or function is returning, throw <code class="highlighter-rouge">console.log()</code> into your code or directly into the <code class="highlighter-rouge">console</code> in your browser to confirm/deny suspicions.</p>

<h4 id="3-debugging-in-the-console">3. Debugging In the Console</h4>

<p><code class="highlighter-rouge">debugger</code> is the <code class="highlighter-rouge">pry</code> of JS. Stick <code class="highlighter-rouge">debugger;</code> within a function to pause the browser from running the script when it hits a particular part of your code.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>
<span class="kd">let</span> <span class="nx">var1</span> <span class="o">=</span> <span class="mi">5</span>
<span class="kd">let</span> <span class="nx">var2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Ilana</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">myMath</span> <span class="o">=</span> <span class="p">(</span><span class="nx">var1</span><span class="p">,</span> <span class="nx">var2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">var1</span> <span class="o">*</span> <span class="nx">var2</span>
  <span class="k">debugger</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong><em>Warning</em></strong>: A <code class="highlighter-rouge">debugger</code> statement will not trigger unless your inspector tools in the browser are open. This is meant to not interrupt a users experience if a developer accidentally commits and deploys a <code class="highlighter-rouge">debugger</code> statement.</p>

<p>In the browser, if we open up the dev tools, navigate to the console and try to search for something.  The program will freeze on the line <code class="highlighter-rouge">debugger</code>. This lets us type stuff into our <code class="highlighter-rouge">console</code> to see what‚Äôs going on.</p>

<p>For a more in-depth lesson on working with DevTools - check out <a href="http://frontend.turing.io/lessons/debugging-with-devtools.html">advanced debugging</a> or the <a href="https://developer.chrome.com/devtools/docs/javascript-debugging">Chrome Documentation</a>.</p>

<hr />

<h1 id="functions">Functions</h1>
<p>Functions are a way to group statements together to perform a specific task. Functions are reusable blocks of code. To create a function, you must give it a name and then write the statements required for the function to achieve its task inside the function‚Äôs curly braces. Let‚Äôs work through the pieces and parts of a function.</p>

<h2 id="anatomy-of-a-function">Anatomy of a Function:</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myRadFunction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">myFirstStatement</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Assigning a string to a variable called 'myFirstStatement'</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">This is my second statement!</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFirstStatement</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// because definition of method will not change</span>
<span class="kd">const</span> <span class="nx">myFirstStatement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">myFirstStatement</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Assigning a string to a variable called 'myFirstStatement'</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">This is my second statement!</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFirstStatement</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>You declare a function using the keyword <code class="highlighter-rouge">function</code>.</li>
  <li>You can name the function anything you want, but it must include a set of parentheses after the name, which can be empty or accept parameters.</li>
  <li>You must follow the name of the function with a set of curly braces, which act as bookends to hold the set of statements you want the function to run when it is called.</li>
  <li>Calling the function is quite easy. Simply type the function name with it‚Äôs parenthesis and any associated parameters.</li>
</ul>

<h2 id="call-a-function">Call a Function:</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Calling a function w/out arguments</span>
<span class="nx">myRadFunction</span><span class="p">();</span>

<span class="c1">// Calling a function with arguments</span>
<span class="nx">myRadFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">);</span>
</code></pre></div></div>

<p>When this code is read, <code class="highlighter-rouge">myRadFunction()</code> is ‚Äúcalled‚Äù, all three statements within the function‚Äôs body (those curly braces) get run.</p>

<h3 id="your-turn">Your Turn</h3>
<p>Let‚Äôs go ahead and declare myRadFunction in the console together and then call it. What do you notice about the code as it is being run? What do you notice about the code being run if you swap the 2nd and 3rd statements?</p>

<p>Create your own functions in the console:</p>

<ul>
  <li>
    <p>Write a function that declares a <code class="highlighter-rouge">firstName</code> variable and a <code class="highlighter-rouge">lastName</code> variable, then alerts the user with a message that incorporates the full name, and then logs a random number to the console.</p>
  </li>
  <li>
    <p>Write a function that assigns three different math equations to three different variables, then log the sum of the values of all three variables</p>
  </li>
  <li>
    <p>Write a function that alerts the user with a message of ‚ÄúYO!‚Äù, and then logs to the console a sum of eight different integers.</p>
  </li>
</ul>

<h2 id="pass-information-to-a-function">Pass Information to a Function:</h2>
<p>Sometimes you need to give a function some information in order for it to do its job. You can give that function the information it needs by providing <em>parameters</em>. These are bits of information that you identify with appropriately named labels (you get to decide the notation) inside the parentheses of your named function. The words you use for your parameters act like variables INSIDE the function, which means they serve as means to pass values.</p>

<h3 id="parameters-vs-arguments">Parameters vs. Arguments</h3>
<p>Its a subtle difference. Basically, when you declare a function, and you stipulate the function will accept some bits of information, those are parameters. Then, when you pass the values of the parameters, those are called arguments. Like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// parameters named on declaration of function</span>
<span class="kd">function</span> <span class="nx">myDreamCar</span><span class="p">(</span><span class="nx">make</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Buy me </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">make</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">model</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">myDreamCar</span> <span class="o">=</span> <span class="p">(</span><span class="nx">make</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Buy me </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">make</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">model</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// arguments "Audi" and "R8" passed into a called function</span>
<span class="nx">myDreamCar</span><span class="p">(</span><span class="dl">"</span><span class="s2">Audi</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">R8</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="getting-a-value-from-functions">Getting A Value from Functions:</h2>
<p>Some functions return information to the code that called them. Wait - what? When a function performs a calculation, like 2 + 2, it will return the ‚Äúanswer‚Äù of 4, right? Yes, AND, you still have to tell it to do so. Let‚Äôs work with some return statements in functions with parameters in the console:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addTwoNumbers</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Boom</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">addTwoNumbers</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Boom</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The return statement ends function execution and specifies a value to be returned to the function caller. It looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">[[</span><span class="nx">expression</span><span class="p">]]</span>
<span class="c1">// The expression to return. If omitted, undefined is returned instead.</span>
</code></pre></div></div>

<p>When a <code class="highlighter-rouge">return</code> statement is called in a function, the execution of this function is stopped. If specified, a given value is returned to the function caller. If the expression is omitted, undefined is returned instead. The following return statements all break the function execution:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span><span class="p">;</span>
<span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
<span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="conditionals">Conditionals</h1>

<p>Sometimes we want to perform an action based on some kind of condition. In English, we can say ‚ÄúIf this thing is true, then do that.‚Äù To do this in JavaScript, we can write conditionals to take a certain path in our program.</p>

<p>To use conditionals, we first need to use expressions, operators, and statements.</p>

<h2 id="basic-conditional-structure">Basic Conditional Structure</h2>

<p>Let‚Äôs now look at the basic structure of a conditional:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">expression</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">statement</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">statement</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If the expression evaluates to <code class="highlighter-rouge">true</code>, then the statement(s) for that condition will run. Otherwise, if the expression is <code class="highlighter-rouge">false</code>, then the statement(s) will not run at all. The expression will usually contain an operator to make a comparison (that evaluates to true or false).</p>

<p>Some examples of expressions we could use for a conditional are:</p>

<ul>
  <li><code class="highlighter-rouge">myNum &lt; 5</code></li>
  <li><code class="highlighter-rouge">userCity === "Denver"</code></li>
  <li><code class="highlighter-rouge">isTired === true</code></li>
</ul>

<p>Now for some real conditional examples.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">chocolate chip</span><span class="dl">"</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">cookie</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">chocolate chip</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">This cookie is a chocolate chip cookie!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">cookie</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">oatmeal raisin</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">This is not a cookie :(</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">I bet you wish you had a chocolate chip cookie</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">hoursOfSleep</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">hoursOfSleep</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I am groggy.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I feel fantastic!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="your-turn-1">Your Turn</h3>

<p>Write a conditional that gives a different alert message based on your favorite kind of animal.</p>
:ET