I"ƒ<h1 id="1-set-up">1. Set Up</h1>

<ol>
  <li>
    <p>Create a Rails API project called <code class="highlighter-rouge">rails-engine</code> (make sure you do not set up a ‚Äútraditional‚Äù Rails project with a frontend, this is an API-only project)</p>
  </li>
  <li>
    <p>Set Up <a href="https://github.com/colszowka/simplecov">SimpleCov</a> to track test coverage in your rails-engine API project.</p>
  </li>
  <li>Set up your <code class="highlighter-rouge">db/seeds.rb</code> file with the following content:
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># before running "rake db:seed", do the following:</span>
<span class="c1"># - put the "rails-engine-development.pgdump" file in db/data/</span>
<span class="n">cmd</span> <span class="o">=</span> <span class="s2">"pg_restore --verbose --clean --no-acl --no-owner -h localhost -U $(whoami) -d rails-engine_development db/data/rails-engine-development.pgdump"</span>
<span class="nb">puts</span> <span class="s2">"Loading PostgreSQL Data dump into local database with command:"</span>
<span class="nb">puts</span> <span class="n">cmd</span>
<span class="nb">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>Download <a href="https://raw.githubusercontent.com/turingschool/backend-curriculum-site/gh-pages/module3/projects/rails_engine/rails-engine-development.pgdump">rails-engine-development.pgdump</a> and move it into the <code class="highlighter-rouge">/db/</code> folder in another folder called <code class="highlighter-rouge">/data/</code>, so your project files look like this:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/app
/bin
/config
/db
  /data                                     &lt;-- create this folder
 rails-engine-development.pgdump         &lt;-- put the file in the data folder
  seeds.rb
/lib
/log
etc
</code></pre></div>    </div>
    <ul>
      <li>this file is in a binary format and your browser may try to automatically download the file instead of viewing it</li>
    </ul>
  </li>
  <li>
    <p>Run <code class="highlighter-rouge">rake db:{drop,create,migrate,seed}</code> and you may see lots of output including some warnings/errors from <code class="highlighter-rouge">pg_restore</code> that you can ignore. If you‚Äôre unsure about the errors you‚Äôre seeing, ask an instructor.</p>
  </li>
  <li>Use a tool like Postico to examine the 6 tables that were created, and build migration files for those tables. Pay careful attention to the data types of each field:
    <ul>
      <li>items</li>
      <li>merchants</li>
      <li>orders</li>
      <li>order_items</li>
      <li>invoices</li>
      <li>transactions</li>
    </ul>
  </li>
</ol>

<p><strong>NOTE</strong> We updated this process to avoid confusion and taking a significant amount of time; the main learning goals of the project are the Rails API endpoints and business intelligence endpoints in ActiveRecord, not the process of importing CSV data. Avoid starting out with a Rake task to do the import and follow these instructions instead. If in doubt, ask your instructors first.</p>

<p><strong>NOTE</strong> If your <code class="highlighter-rouge">rails new ...</code> project name from above is NOT exactly called ‚Äúrails-engine‚Äù you will need to modify the <code class="highlighter-rouge">cmd</code> variable below to change the <code class="highlighter-rouge">-d</code> parameter from <code class="highlighter-rouge">rails-engine_development</code> to <code class="highlighter-rouge">&lt;YOUR PROJECT NAME&gt;_development</code> instead. If you have questions, ask your instructors.</p>

<hr />

<h1 id="3-api-endpoints">3. API Endpoints</h1>

<p>You will need to expose the data through a multitude of API endpoints. All of your endpoints should follow these technical expectations:</p>

<ul>
  <li>All endpoints should be fully tested for happy path AND sad path. The Rails Driver Spec Harness is not a substitute for writing your own tests.</li>
  <li>All endpoints will expect to return JSON data only</li>
  <li>All endpoints should be exposed under an <code class="highlighter-rouge">api</code> and version (<code class="highlighter-rouge">v1</code>) namespace (e.g. <code class="highlighter-rouge">/api/v1/items</code>)</li>
  <li>API will be compliant to the <a href="https://jsonapi.org/">JSON API spec</a> and match our requirements below precisely
    <ul>
      <li>if your tests pass but the Rails Driver spec harness does not, you have done something wrong.</li>
    </ul>
  </li>
  <li>Controller actions should be limited to only the standard Rails actions and follow good RESTful convention.</li>
  <li>Endpoints such as <code class="highlighter-rouge">GET /api/v1/merchants/find?parameters</code> will NOT follow RESTful convention, and that‚Äôs okay:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Api</span>
  <span class="k">module</span> <span class="nn">V1</span>
    <span class="k">class</span> <span class="nc">MerchantsController</span>
      <span class="c1"># code omitted</span>
      <span class="k">def</span> <span class="nf">find</span>
        <span class="c1"># code omitted</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This approach can lead to large controllers. For more info on the reasons why, check out this <a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/">blog post</a>.</p>

<p>Instead try something like this which adheres to the above approach of only using RESTful actions:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Api</span>
  <span class="k">module</span> <span class="nn">V1</span>
    <span class="k">module</span> <span class="nn">Merchants</span>
      <span class="k">class</span> <span class="nc">SearchController</span>
        <span class="k">def</span> <span class="nf">show</span>
        <span class="c1"># code omitted</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="error-responses">Error Responses</h4>

<p>If the user causes an error for which you are sending a 400-series error code, the JSON body of the response should follow a similar JSON Spec of a <code class="highlighter-rouge">data</code> element, with a <code class="highlighter-rouge">nil</code> ID, and empty attributes.</p>

<p>As an <strong>EXTENSION</strong>, customize the error message to use this format instead:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"your query could not be completed"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"errors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"string of error message one"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"string of error message two"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"etc"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>You can customize the value of the <code class="highlighter-rouge">message</code> element, but the <code class="highlighter-rouge">message</code> element must be present.</p>

<p>The <code class="highlighter-rouge">errors</code> element will always be an array and contain one or more strings of why the user‚Äôs request was unsuccessful. Examples will include a ‚ÄúID was invalid‚Äù in the case of a 404, or ‚Äúthe ‚Äòdescription‚Äô parameter was missing‚Äù</p>

<h2 id="restful-endpoints-minimum-requirements">RESTful Endpoints, Minimum Requirements:</h2>

<p>You will need to expose the following RESTful API endpoints for the following:</p>

<ul>
  <li>Merchants:
    <ul>
      <li>get all merchants, a maximum of 20 at a time</li>
      <li>get one merchant</li>
      <li>get all items for a given merchant ID</li>
    </ul>
  </li>
  <li>Items:
    <ul>
      <li>get all items, a maximum of 20 at a time</li>
      <li>get one item</li>
      <li>create an item</li>
      <li>edit an item</li>
      <li>delete an item</li>
      <li>get the merchant data for a given item ID</li>
    </ul>
  </li>
</ul>

<h2 id="non-restful-endpoints-minimum-requirements">Non-RESTful Endpoints, Minimum Requirements:</h2>

<p>You will get to choose from the following list:</p>

<ul>
  <li>ONE of following endpoint pairs:
    <ul>
      <li>find one MERCHANT based on search criteria AND find all ITEMS based on search criteria</li>
      <li>OR:</li>
      <li>find one ITEM based on search criteria AND find all MERCHANTS based on search criteria</li>
    </ul>
  </li>
  <li>FOUR of the following endpoints:
    <ul>
      <li>find a quantity of merchants sorted by descending revenue</li>
      <li>find a quantity of merchants sorted by descending item quantity sold</li>
      <li>total revenue generated in the whole system over a start/end date range</li>
      <li>total revenue for a given merchant</li>
      <li>find a quantity of items sorted by descending revenue</li>
      <li>total revenue of successful invoices which have not yet been shipped</li>
      <li>revenue report, broken down by month in ascending date order</li>
    </ul>
  </li>
</ul>

<p>In total, the MINIMUM requirement will be 15 endpoints.</p>

<p><strong>HINT</strong>: Invoices must have a successful transaction and shipped to the customer to be considered as revenue.</p>

<hr />

<h2 id="restful-fetch-all-itemsmerchants">RESTful: Fetch all Items/Merchants</h2>

<p>These ‚Äúindex‚Äù endpoints for items and merchants should:</p>

<ul>
  <li>render a JSON representation of all records of the requested resource, one ‚Äúpage‚Äù of data at a time</li>
  <li>always return an array of data, even if one or zero resources are found</li>
  <li>NOT include dependent data of the resource (eg, if you‚Äôre fetching merchants, do not send any data about merchant‚Äôs items or invoices)</li>
  <li>follow this pattern: <code class="highlighter-rouge">GET /api/v1/&lt;resource&gt;</code></li>
  <li>allow for the following OPTIONAL query parameters to be sent by the user:
    <ul>
      <li><code class="highlighter-rouge">per_page</code>, an integer value of how many resources should be in the output; defaults to 20 if not specified by the user</li>
      <li><code class="highlighter-rouge">page</code>, an integer value of a ‚Äúpage‚Äù of resources to skip before returning data; defaults to 1 if not specified by the user</li>
      <li>do not use any third-party gems for pagination</li>
    </ul>
  </li>
</ul>

<p>Example use of query parameters:</p>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/items?per_page=50&amp;page=2</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants?per_page=50&amp;page=2</code></li>
</ul>

<p>This should fetch items 51 through 100, since we‚Äôre returning <code class="highlighter-rouge">50</code> per ‚Äúpage‚Äù, and we want ‚Äúpage <code class="highlighter-rouge">2</code>‚Äù of data.</p>

<p>Example JSON response for the Merchant resource:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mike's Awesome Store"</span><span class="p">,</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Store of Fate"</span><span class="p">,</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"This is the limit of my creativity"</span><span class="p">,</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>If a user tries to fetch a page for which there is no data, then <code class="highlighter-rouge">data</code> should report an empty array.</p>

<h2 id="restful-fetch-a-single-record">RESTful: Fetch a single record</h2>

<p>This endpoint for Items and Merchants should:</p>

<ul>
  <li>render a JSON representation of the corresponding record, if found</li>
  <li>follow this pattern: <code class="highlighter-rouge">GET /api/v1/&lt;resource&gt;/:id</code></li>
</ul>

<p>Example JSON response for the Item resource:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"item"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Super Widget"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A most excellent widget of the finest crafting"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"unit_price"</span><span class="p">:</span><span class="w"> </span><span class="mf">109.99</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Note that the <code class="highlighter-rouge">unit_price</code> is sent as numeric data, and not string data.</p>

<h2 id="restful-create-an-item">RESTful: Create an Item</h2>

<p>This endpoint should:</p>

<ul>
  <li>create a record and render a JSON representation of the new Item record.</li>
  <li>follow this pattern: <code class="highlighter-rouge">POST /api/v1/items</code></li>
  <li>accept the following JSON body with only the following fields:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "name": "value1",
  "description": "value2",
  "unit_price": 100.99,
  "merchant_id": 14
}
</code></pre></div></div>
<p>(Note that the unit price is to be sent as a numeric value, not a string.)</p>

<ul>
  <li>return an error if any attribute is missing</li>
  <li>should ignore any attributes sent by the user which are not allowed</li>
</ul>

<p>Example JSON response for the Item resource:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"item"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Widget"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"High quality widget"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"unit_price"</span><span class="p">:</span><span class="w"> </span><span class="mf">100.99</span><span class="p">,</span><span class="w">
      </span><span class="nl">"merchant_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">14</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="restful-update-an-item">RESTful: Update an Item</h2>

<p>This endpoint should:</p>

<ul>
  <li>update the corresponding Item (if found) with whichever details are provided by the user</li>
  <li>render a JSON representation of the updated record.</li>
  <li>follow this pattern: <code class="highlighter-rouge">PATCH /api/v1/items/:id</code></li>
  <li>accept the following JSON body with one or more of the following fields:
The body should follow this pattern:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "name": "value1",
  "description": "value2",
  "unit_price": 100.99,
  "merchant_id": 7
}
</code></pre></div></div>
<p>(Note that the unit price is to be sent as a numeric value, not a string.)</p>

<p>Example JSON response for the Item resource:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"item"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New Widget Name"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"High quality widget, now with more widgety-ness"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"unit_price"</span><span class="p">:</span><span class="w"> </span><span class="mf">299.99</span><span class="p">,</span><span class="w">
      </span><span class="nl">"merchant_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="restful-destroy-an-item">RESTful: Destroy an Item</h2>

<p>This endpoint should:</p>
<ul>
  <li>destroy the corresponding record (if found) and any associated data</li>
  <li>destroy any invoice if this was the only item on an invoice</li>
  <li>NOT return any JSON body at all, and should return a 204 HTTP status code</li>
  <li>NOT utilize a Serializer (Rails will handle sending a 204 on its own if you just <code class="highlighter-rouge">.destroy</code> the object)</li>
</ul>

<h2 id="restful-relationship-endpoints">RESTful: Relationship Endpoints</h2>

<p>These endpoints should show related records for a given resource. The relationship endpoints you should expose are:</p>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/items</code> - return all items associated with a merchant.
    <ul>
      <li>return a 404 if merchant is not found</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">GET /api/v1/items/:id/merchant</code> - return the merchant associated with an item
    <ul>
      <li>return a 404 if the item is not found</li>
    </ul>
  </li>
</ul>

<h2 id="non-restful-search-endpoints">Non-RESTful Search Endpoints</h2>

<p>In addition to the standard RESTful endpoints described above, you will build the following endpoints which will NOT follow RESTful convention:</p>

<ul>
  <li><code class="highlighter-rouge">GET /api/vi/items/find_one</code>, find a single item which matches a search term</li>
  <li><code class="highlighter-rouge">GET /api/vi/items/find_all</code>, find all items which match a search term</li>
  <li><code class="highlighter-rouge">GET /api/vi/merchants/find_one</code>, find a single merchant which matches a search term</li>
  <li><code class="highlighter-rouge">GET /api/vi/merchants/find_all</code>, find all merchants which match a search term</li>
</ul>

<p>These endpoints will make use of query parameters as described below:</p>

<h4 id="find-one-endpoints">‚ÄúFind One‚Äù endpoints</h4>

<p>These endpoints should:</p>

<ul>
  <li>return a single object, if found</li>
  <li>return the first object in the database in case-sensitive alphabetical order if multiple matches are found
    <ul>
      <li>eg, if ‚ÄúRing World‚Äù and ‚ÄúTuring‚Äù exist as merchant names, ‚ÄúRing World‚Äù would be returned, even if ‚ÄúTuring‚Äù was created first</li>
    </ul>
  </li>
  <li>allow the user to specify a ‚Äòname‚Äô query parameter:
    <ul>
      <li>for merchants, the user can send <code class="highlighter-rouge">?name=ring</code> and it will search the <code class="highlighter-rouge">name</code> field in the database table</li>
      <li>for items, the user can send <code class="highlighter-rouge">?name=ring</code> and it will search the <code class="highlighter-rouge">name</code> field in the database table
        <ul>
          <li>this should find a name of ‚ÄòTitanium Ring‚Äô and anything with a description like ‚ÄòThis silver chime will bring you cheer!‚Äô</li>
        </ul>
      </li>
      <li>the search data in the <code class="highlighter-rouge">name</code> query parameter should require the database to do a case-insensitive search for text fields
        <ul>
          <li>eg, searching for ‚Äòring‚Äô should find ‚ÄòTuring‚Äô and ‚ÄòRing World‚Äô</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>allow the user to send one or more price-related query parameters, applicable to items only:
    <ul>
      <li><code class="highlighter-rouge">min_price=4.99</code> should look for anything with a price equal to or greater than $4.99</li>
      <li><code class="highlighter-rouge">max_price=99.99</code> should look for anything with a price less than or equal to $99.99</li>
      <li>both <code class="highlighter-rouge">min_price</code> and <code class="highlighter-rouge">max_price</code> can be sent</li>
    </ul>
  </li>
  <li>for items, the user will send EITHER the <code class="highlighter-rouge">name</code> parameter OR either/both of the <code class="highlighter-rouge">price</code> parameters
    <ul>
      <li>users should get an error if <code class="highlighter-rouge">name</code> and either/both of the <code class="highlighter-rouge">price</code> parameters are sent</li>
    </ul>
  </li>
</ul>

<p>Valid examples:</p>
<ul>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/find_one?name=Mart</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?name=ring</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?min_price=50</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?max_price=150</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?max_price=150&amp;min_price=50</code></li>
</ul>

<p>Invalid examples:</p>
<ul>
  <li><code class="highlighter-rouge">GET /api/v1/&lt;resource&gt;/find_one</code>
    <ul>
      <li>parameter cannot be missing</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">GET /api/v1/&lt;resource&gt;/find_one?name=</code>
    <ul>
      <li>parameter cannot be empty</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?name=ring&amp;min_price=50</code>
    <ul>
      <li>cannot send both <code class="highlighter-rouge">name</code> and <code class="highlighter-rouge">min_price</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?name=ring&amp;max_price=50</code>
    <ul>
      <li>cannot send both <code class="highlighter-rouge">name</code> and <code class="highlighter-rouge">max_price</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">GET /api/v1/items/find_one?name=ring&amp;min_price=50&amp;max_price=250</code>
    <ul>
      <li>cannot send both <code class="highlighter-rouge">name</code> and <code class="highlighter-rouge">min_price</code> and <code class="highlighter-rouge">max_price</code></li>
    </ul>
  </li>
</ul>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/merchants/find?name=ring</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ring World"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="find-all-endpoints">‚ÄúFind All‚Äù endpoints</h4>

<p>These endpoints will follow the same rules as the ‚Äúfind_one‚Äù endpoints.</p>

<p>The JSON response will always be an array of objects, even if zero matches or only one match is found.</p>

<p>It should not return a 404 if no matches are found.</p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/merchants/find_all?name=ring</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ring World"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Turing School"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<h2 id="non-restful-merchants-with-most-revenue">Non-RESTful: Merchants with Most Revenue</h2>

<p>This endpoint should return a variable number of merchants ranked by total revenue.</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/merchants/most_revenue?quantity=x</code></p>

<p>where <code class="highlighter-rouge">x</code> is the number of merchants to be returned. The quantity parameter is required, and should return an error if it is missing or if it is not an integer greater than 0.</p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/merchants/most_revenue?quantity=2</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant_name_revenue"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Turing School"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">512.256128</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant_name_revenue"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ring World"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">245.130001</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-merchants-with-most-items-sold">Non-RESTful: Merchants with Most Items Sold</h2>

<p>This endpoint should return a variable number of merchants ranked by total number of items sold:</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/merchants/most_items?quantity=x</code></p>

<p>where <code class="highlighter-rouge">x</code> is the number of merchants to be returned. The quantity should default to 5 if not provided, and return an error if it is not an integer greater than 0.</p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/merchants/most_items?quantity=2</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"items_sold"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Turing School"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"count"</span><span class="p">:</span><span class="w"> </span><span class="mi">512</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"items_sold"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ring World"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"count"</span><span class="p">:</span><span class="w"> </span><span class="mi">128</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-revenue-across-date-range">Non-RESTful: Revenue across Date Range</h2>

<p>This endpoint should return the total revenue across all merchants between the given dates, inclusive of the start and end date.</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/revenue?start_date=&lt;start_date&gt;&amp;end_date=&lt;end_date&gt;</code></p>

<p>Assume your users will only send dates in the format YYYY-MM-DD. Revenue must be counted for any invoices on the end_date as well.</p>

<p>An error should be returned if either/both the start date or end date are not provided.</p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/revenue?start=2012-03-09&amp;end=2012-03-24</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"revenue"</span><span class="w">  </span><span class="p">:</span><span class="w"> </span><span class="mf">43201227.8000003</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-total-revenue-for-a-given-merchant">Non-RESTful: Total Revenue for a Given Merchant</h2>

<p>This endpoint should return the total revenue for a single merchant.</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/revenue/merchants/:id</code></p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/revenue/merchants/1</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"42"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant_revenue"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"revenue"</span><span class="w">  </span><span class="p">:</span><span class="w"> </span><span class="mf">532613.9800000001</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-find-items-ranked-by-revenue">Non-RESTful: Find items ranked by Revenue</h2>

<p>The endpoint will return a quantity of items ranked by descending revenue.</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/items/revenue?quantity=x</code></p>

<p>where ‚Äòx‚Äô is the maximum count of results to return.</p>
<ul>
  <li>quantity should default to 10 if not provided</li>
  <li>endpoint should return an error if it is not an integer greater than 0.</li>
</ul>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/items/revenue?quantity=1</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"item_revenue"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Men's Titanium Ring"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Fine titanium ring"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"unit_price"</span><span class="p">:</span><span class="w"> </span><span class="mf">299.99</span><span class="p">,</span><span class="w">
        </span><span class="nl">"merchant_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">54</span><span class="p">,</span><span class="w">
        </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">19823.12985</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-potential-revenue-of-unshipped-orders-ranked-by-potential-revenue">Non-RESTful: Potential Revenue of Unshipped Orders, ranked by ‚Äúpotential‚Äù Revenue</h2>

<p>Imagine that we want to build a report of the orders which have not yet shipped. How much money is being left on the table for these merchants if they just called Federal Package Logistics to come pick up the boxes‚Ä¶</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/revenue/unshipped?quantity=x</code></p>

<p>where ‚Äòx‚Äô is the maximum count of results to return.</p>
<ul>
  <li>quantity should default to 10 if not provided</li>
  <li>should return an error if it is not an integer greater than 0.</li>
</ul>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/revenue/unshipped?quantity=2</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">834</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unshipped_order"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"potential_revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">5923.78</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">28</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unshipped_order"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"potential_revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">3298.63</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="non-restful-report-by-month-of-revenue-generated">Non-RESTful: Report by Month of Revenue Generated</h2>

<p>We would like a full report of all revenue, sorted by week (the database can do this for you!). The dates you get back from PostgreSQL will represent the first day of the week</p>

<p>The URI should follow this pattern: <code class="highlighter-rouge">GET /api/v1/revenue/weekly</code></p>

<p>Example JSON response for <code class="highlighter-rouge">GET /api/v1/revenue/weekly</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"weekly_revenue"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"week"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-03-05"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">14981117.170000013</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"weekly_revenue"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"week"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-03-12"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">18778641.380000062</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"weekly_revenue"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"week"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-03-19"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">19106531.87999994</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"weekly_revenue"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"week"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-03-26"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"revenue"</span><span class="p">:</span><span class="w"> </span><span class="mf">4627284.439999996</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
:ET