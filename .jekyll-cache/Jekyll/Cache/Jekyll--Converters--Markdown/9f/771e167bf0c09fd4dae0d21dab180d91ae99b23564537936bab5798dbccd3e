I"Ê…<h3 id="pre-reqs">Pre-reqs</h3>

<ul>
  <li>Download Postgresql with <code class="highlighter-rouge">brew install postgres</code></li>
  <li>Clone down the Monstertorium repo (this is a completed lesson from earlier)
    <ul>
      <li><code class="highlighter-rouge">git clone https://github.com/turingschool/mostertorium</code></li>
    </ul>
  </li>
</ul>

<h3 id="goals">Goals</h3>

<p>By the end of this lesson, you will:</p>

<ul>
  <li>Understand how to create database migrations and seed files using knex</li>
  <li>Understand how to create, retrieve, update and delete data within a database using knex</li>
</ul>

<h2 id="what-is-knex">What is Knex?</h2>

<p>Straight from the docs: Knex.js is a ‚Äúbatteries included‚Äù SQL query builder for Postgres, MSSQL, MySQL, MariaDB, SQLite3, and Oracle designed to be flexible, portable, and fun to use. It features both traditional node style callbacks as well as a promise interface for cleaner async flow control, a stream interface, full featured query and schema builders, transaction support (with savepoints), connection pooling and standardized responses between different query clients and dialects.</p>

<p>What Knex really is is Javascript instead of raw SQL.</p>

<h2 id="setting-up-the-database">Setting Up the Database</h2>

<p>Make sure Postgres is installed and running. We will prep our app by creating two databases in Postgres. Don‚Äôt forget the semicolons in the the CREATE DATABASE command!</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">psql</span>
<span class="nx">CREATE</span> <span class="nx">DATABASE</span> <span class="nx">monsters</span><span class="p">;</span>
<span class="nx">CREATE</span> <span class="nx">DATABASE</span> <span class="nx">monsters_test</span><span class="p">;</span>
</code></pre></div></div>

<p>Install knex and pg (postgres) from npm:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm install knex pg --save
</code></pre></div></div>

<p>And install knex globally so we can use it on the command line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm install knex -g
</code></pre></div></div>

<p>We will use a knexfile to configure our database for all of our environments. Create that file using the below command with some default values:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex init
Created ./knexfile.js
</code></pre></div></div>

<h3 id="database-configuration">Database Configuration</h3>

<p>This generated a really nice configuration file that we are going to tweak. First we will change our development environment to use Postgres instead of mySql. This allows us to use the same database across all environments which is good practice. We also want to set our migration and seed directory for each environment.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">development</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">connection</span><span class="p">:</span><span class="dl">'</span><span class="s1">postgres://localhost/monsters</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/dev</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>

  <span class="na">test</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">connection</span><span class="p">:</span><span class="dl">'</span><span class="s1">postgres://localhost/monsters_test</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/test</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>

  <span class="na">production</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">connection</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span><span class="p">,</span>
    <span class="na">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/production</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="migrations">Migrations</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex migrate:make initial
</code></pre></div></div>

<p>This created a <code class="highlighter-rouge">migrations</code> directory at the root of the project and added a time stamped file with the name of the migration at the end. The <code class="highlighter-rouge">initial</code> part is totally arbitrary, it could be anything, but it should be something descriptive. If you‚Äôre creating a migration that adds an ‚Äúname‚Äù column to the ‚Äúmonsters‚Äù table, you probably want to go with something along the lines of <code class="highlighter-rouge">add-name-to-monsters-table</code>.</p>

<p>The file should look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">up</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>

<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">down</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>

<span class="p">};</span>
</code></pre></div></div>

<p>Migrations are kind of like version control for databases. For every <code class="highlighter-rouge">up</code> there must be an equal and opposite <code class="highlighter-rouge">down</code> that will allow us to rollback those changes. <code class="highlighter-rouge">up</code> defines what should happen when we do the migration. <code class="highlighter-rouge">down</code> is the reverse. If we want to roll back to a previous version, then <code class="highlighter-rouge">down</code> undoes whatever <code class="highlighter-rouge">up</code> did. Rails gives you a <code class="highlighter-rouge">change</code> which implies a down from an up, but knex just makes you do the work.</p>

<p>I edited the migration to create a monsters table.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">up</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">increments</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">).</span><span class="nx">primary</span><span class="p">();</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">string</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">integer</span><span class="p">(</span><span class="dl">'</span><span class="s1">level</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">table</span><span class="p">.</span><span class="nx">timestamps</span><span class="p">();</span>
    <span class="p">})</span>
  <span class="p">])</span>
<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">down</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">dropTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">])</span>
<span class="p">};</span>
</code></pre></div></div>

<p>But, why is <code class="highlighter-rouge">Promise</code> passed in as a second argument? Knex is expecting that these methods return a promise of some sort. All Knex methods return a promise, so we fulfilled our end of the bargin in the example above. Our schema is simple, and we only have one table, but this is not usually the case. <code class="highlighter-rouge">Promise.all</code> allows you to do multiple things and return one promise. Knex passes us a reference to <code class="highlighter-rouge">Promise</code>, because it‚Äôs not natively supported in some previous versions of Node. We‚Äôre not using it at this moment, but we will in a second.</p>

<h3 id="seeds">Seeds</h3>

<p>Seeds are some default data. This will be useful when we first start developing our application. To create our seed files, type the following in your terminal</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex seed:make monsters
</code></pre></div></div>

<p>This will create a <code class="highlighter-rouge">monsters.js</code> in the <code class="highlighter-rouge">seeds/dev</code> folder. They‚Äôll contain the default seed template:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">seed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Deletes ALL existing entries</span>
  <span class="k">return</span> <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">table_name</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
        <span class="c1">// Inserts seed entries</span>
        <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">table_name</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">colName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">rowValue1</span><span class="dl">'</span><span class="p">}),</span>
        <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">table_name</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">colName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">rowValue2</span><span class="dl">'</span><span class="p">}),</span>
        <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">table_name</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">colName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">rowValue3</span><span class="dl">'</span><span class="p">})</span>
      <span class="p">]);</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We‚Äôre going to need to modify this a bit for our two files.</p>

<p>For monsters.js:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">seed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Alex Tideman</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">}),</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bob Barker</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">}),</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Martha Stewart</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">})</span>
    <span class="p">]);</span>
  <span class="p">});</span>
<span class="p">};</span>

</code></pre></div></div>
<p>You‚Äôll notice that I used <code class="highlighter-rouge">Promise.all</code> this time. It‚Äôs because I wanted to do three things (i.e. insert each of my monsters). <code class="highlighter-rouge">Promise.all</code> will resolve when all three of my inserts resolve.</p>

<h3 id="running-the-migrations-and-seeding-the-database">Running the Migrations and Seeding the Database</h3>

<p>We configured everything. Now, we just need to run our migration and seed the database.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex migrate:latest
$ knex migrate:latest --env test
$ knex seed:run
</code></pre></div></div>

<p>This will run all of the migrations up to and including the most recent one for both dev and test. Next, we will run all the seed files under the dev directory to insert our three monsters to development. We don‚Äôt want this data in our test table, however, since we‚Äôll be creating the data we need in our tests.</p>

<h2 id="fetching-from-the-database">Fetching From the Database</h2>

<p>Naturally, we‚Äôll need to rewrite our test before we can write an implementation. Add the following to the top of your test file:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>
</code></pre></div></div>

<p>Then, lets write our <code class="highlighter-rouge">beforeEach()</code> and <code class="highlighter-rouge">afterEach()</code> hooks inside our get test:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">monster</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span> <span class="na">level</span><span class="p">:</span> <span class="mi">2</span> <span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>

  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">monster</span><span class="p">)</span>
  <span class="p">});</span>

  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>Remember that knex methods always return a promise. Mocha has a couple ways to deal with asynchronous code, and one of them is to return a promise. So we throw a <code class="highlighter-rouge">return</code> in front of each to ensure that Mocha will wait for them to resolve.</p>

<p>In order to run the tests, set the <code class="highlighter-rouge">NODE_ENV</code> to <code class="highlighter-rouge">test</code> so that both the server and test file run in the correct environment.</p>

<p>Let‚Äôs make it work. In your server.js:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is very slightly different because knexfile is in a different relative location</span>
<span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>

<span class="p">...</span>
<span class="c1">// Modify your get request to use the database instead</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/monsters</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">select</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">monsters</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">monsters</span><span class="p">:</span> <span class="nx">monsters</span><span class="p">});</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">somethings wrong with db</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">});</span>
<span class="p">})</span>
</code></pre></div></div>

<p>There are a few things going on in the code above.</p>

<ol>
  <li>We want to know if we‚Äôre in a development, testing, or production environment. If we don‚Äôt know, we‚Äôll assume we‚Äôre in development.</li>
  <li>Based on that environment, we‚Äôll fetch the database configuration from <code class="highlighter-rouge">knexfile.js</code> for whatever environment we‚Äôre in.</li>
  <li>Finally, we‚Äôll ask the database for everything in the <code class="highlighter-rouge">monsters</code> table and serve it as JSON to our <code class="highlighter-rouge">api/v1/monsters</code> endpoint.</li>
</ol>

<p>If you run <code class="highlighter-rouge">npm start</code>, you should see our three monsters when you visit /api/v1/monsters.</p>

<p>Great! We can get data from the database, but how do we create and edit and delete?? First, our test:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST /api/v1/monsters</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should create a new monster</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">monster</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span> <span class="na">level</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>

    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/monsters</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="na">monster</span><span class="p">:</span> <span class="nx">monster</span> <span class="p">})</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">201</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">end</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">where</span><span class="p">(</span><span class="nx">monster</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">monsters</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">monsters</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
          <span class="nx">done</span><span class="p">();</span>
        <span class="p">})</span>
      <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>I really only had to change the <code class="highlighter-rouge">beforeEach</code> and find the new monster in the database after the request completes.</p>

<p>And the implementation:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/monsters</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">monster</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">monster</span><span class="p">;</span>

  <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">returning</span><span class="p">(</span><span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">monster</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">new_monster</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">new_monster</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="your-turn-10-minutes">Your turn (10 minutes)</h3>
<p>Implement a PUT and DELETE route for a monster</p>

<h3 id="pushing-to-heroku">Pushing to Heroku</h3>
<p>Now that we are all wired up with Knex in our local dev environment, it‚Äôs time to look towards big and better things‚Ä¶ the wonderful world of production. Because it doesn‚Äôt matter how awesome your endpoints are if you can‚Äôt show the world.</p>

<p>We‚Äôve already done a lot of prep without even knowing it, but there are a few catchyas left to conquer. Before we can config production fully, we need to create our production app with Heroku.</p>

<p>To create an app with Heroku:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ heroku create app-name
</code></pre></div></div>

<p>Then you can push your code to Heroku like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push heroku master
$ heroku open
</code></pre></div></div>

<p>Aaaaaaaand‚Ä¶‚Ä¶ error screen. Wah wah wah. So let‚Äôs look at the logs:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ heroku logs --tail
</code></pre></div></div>

<p>First step is to add a Procfile. This lets Heroku know to fire up your server.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch Procfile

# In the Procfile
web: node server.js
</code></pre></div></div>

<p>Next up is adding the Postgres add-on in Heroku. After you add this, you will also get an environment variable for the database URL.</p>

<p><img src="/assets/images/lessons/express-with-knex/heroku-postgres.png" alt="heroku postgres" />
<img src="/assets/images/lessons/express-with-knex/heroku-database-url.png" alt="heroku database url" /></p>

<p>Now we want to make sure our knexfile has this environment variable for production. You also need to add ?ssl=true at the end of the URL:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">production</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">connection</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span> <span class="o">+</span> <span class="s2">`?ssl=true`</span><span class="p">,</span>
    <span class="nx">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/production</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Now our production code knows where to look to grab production data. The last step is adding some seed data, which I‚Äôll just copy from seeds/dev to seeds/production. <strong>Commit all those changes and push it up to Heroku.</strong></p>

<p>Now, migrate with Heroku:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ heroku run knex migrate:latest
</code></pre></div></div>

<p>If you don‚Äôt yet have a production seed file, create one. Then, seed with Heroku:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ heroku run knex seed:run
</code></pre></div></div>

<p>It should give you some feedback that it worked. Now run <code class="highlighter-rouge">heroku open</code> and you have data!</p>

<h2 id="relationships">Relationships</h2>

<p>This is great for single table apps, but let‚Äôs add some complication to the schema, and see how that would work. Let‚Äôs say each Monster has a Trainer. Let‚Äôs walk through:</p>

<ol>
  <li>Creating a migration for the Trainer</li>
  <li>Adding some seed data for the trainer</li>
  <li>Writing a test for the <code class="highlighter-rouge">GET</code> route</li>
</ol>

<p>And then you can implement the route in <code class="highlighter-rouge">server.js</code></p>

<h3 id="0-diagram">0. Diagram</h3>

<p>Take a minute to draw out our tables, so we know what changes we need to make</p>

<h3 id="1-migration">1. Migration</h3>

<p>We need to create a <code class="highlighter-rouge">trainers</code> table, but we also need to modify the <code class="highlighter-rouge">monsters</code> table.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex migrate:make add_trainers
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">up</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">increments</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">).</span><span class="nx">primary</span><span class="p">();</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">string</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">string</span><span class="p">(</span><span class="dl">'</span><span class="s1">team</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">table</span><span class="p">.</span><span class="nx">timestamps</span><span class="p">();</span>
    <span class="p">}),</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">integer</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainer_id</span><span class="dl">'</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">references</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">inTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">]);</span>
<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">down</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">dropTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">),</span>
    <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">dropColumn</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainer_id</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">]);</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex migrate:latest
$ knex migrate:latest --env test
</code></pre></div></div>

<h3 id="2-seed">2. Seed</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex seed:make trainers
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">seed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nb">Promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ash Ketchum</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">team</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Yellow</span><span class="dl">'</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">}),</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Misty</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">team</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Blue</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">}),</span>
      <span class="nx">knex</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Brock</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">team</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Rocket</span><span class="dl">'</span>
        <span class="na">created_at</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span>
      <span class="p">})</span>
    <span class="p">]);</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ knex seed:run
</code></pre></div></div>

<p>And don‚Äôt forget to add <code class="highlighter-rouge">trainer_id</code>s to your <code class="highlighter-rouge">monsters</code> seed file.</p>

<h3 id="3-the-test">3. The Test</h3>

<p>We want to create a route where you can get all of the monsters for a given trainer. So the route will be <code class="highlighter-rouge">GET /api/v1/trainers/:id/monsters</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /api/v1/trainers/:id/monsters</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="kd">let</span> <span class="nx">trainer</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ash</span><span class="dl">'</span> <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">monster</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span> <span class="na">level</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">trainer_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>

  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">trainer</span><span class="p">),</span>
      <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">monster</span><span class="p">)</span>
    <span class="p">]);</span>
  <span class="p">});</span>

  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">monsters</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">(),</span>
      <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">trainers</span><span class="dl">'</span><span class="p">).</span><span class="nx">del</span><span class="p">()</span>
    <span class="p">]);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 200 status code</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/monsters</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a set monsters associated with the first trainer</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/trainers/1/monsters</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="na">monsters</span><span class="p">:</span> <span class="p">[</span><span class="nx">monster</span><span class="p">]},</span> <span class="nx">done</span><span class="p">);</span>
    <span class="p">})</span>

<span class="p">});</span>

</code></pre></div></div>

<h3 id="4-make-the-test-pass">4. Make the test pass</h3>

<p>Catch them all! The tests! And by catch, I mean pass!!</p>

<h3 id="5-deploy">5. Deploy</h3>

<p>Go through the steps to deploy your changes to production, and manually test the routes.</p>
:ET