I"z<h2 id="mindsets">Mindsets</h2>

<h3 id="growth-mindset-vs-fixed-mindset">Growth Mindset vs Fixed Mindset</h3>

<ul>
  <li>Carol Dweck: <a href="https://www.amazon.com/Mindset-Psychology-Success-Carol-Dweck/dp/0345472322?ie=UTF8&amp;redirect=true&amp;tag=braipick-20">Mindset: The New Psychology of Success</a></li>
  <li><strong>Fixed Mindset</strong>: Intelligence is innate (static)</li>
  <li><strong>Growth Mindset</strong>: Intelligence is developed</li>
  <li>“Passion for learning rather than hunger for approval”</li>
  <li><a href="https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/">Article</a></li>
  <li><a href="http://civichall.org/wp-content/uploads/2015/06/2658061277_7811563c8c_o.png">Mindset Graphic</a></li>
</ul>

<p>Mindsets control how we approach challenging experiences, especially:</p>

<ul>
  <li>Challenges</li>
  <li>Obstacles</li>
  <li>Effort</li>
  <li>Criticism</li>
  <li>Success (or struggles) of Others (Empathy)</li>
</ul>

<p><strong>Turing’s pedagogy and curriculum is heavily driven by this philosophy</strong></p>

<h2 id="action-plan--what-do-i-do">Action Plan – What do I do?</h2>

<ol>
  <li>Write everything on paper – Numerous <a href="http://www.scientificamerican.com/article/a-learning-secret-don-t-take-notes-with-a-laptop/">studies</a> show greater retention when writing by hand. We can learn a lot about computers without actually using computers. (Hands-on activities, arts and crafts, separating between <strong>Conceptual</strong> Learning Time and <strong>Application</strong> Learning Time)</li>
  <li>Write shitloads of code – <strong>ABC</strong> – “Always Be Coding” – Analogies to Writing or Painting – Do you expect to create a masterpiece on the first try? Many people’s misunderstanding: <strong>Code is the tool, not the End Goal</strong></li>
  <li>Bias toward action – In your situation, time spent designing (or fretting) is almost never more valuable than time spent writing code (see point 2).</li>
  <li>In programming there’s truth and there’s opinion. Mostly opinion. – Be prepared for multiple approaches. Work with mentors. Keep an open mind (growth mindset). Try to understand not just <strong>what someone is doing</strong> but the thought process or analysis behind it. <strong>Everything in software is tradeoffs</strong>.</li>
  <li>Get over yourself – See: <strong>Growth Mindset</strong>. You will struggle. The program is designed with this in mind. Grade-anti-inflation. Not looking for the “passive” / “warm bath” experience of moderate success.</li>
  <li>Handle your shit - Inside Turing and oustide Turing. Constant theme of students who struggle: Overcome by distractions outside of school. Turing is very time consuming (obvious) but also extremely <strong>Focus-Consuming</strong> (less obvious). Do whatever you need to do to clear the slate.</li>
  <li>People like you are successful at this – 15 Turing Cohorts + 2x Gschool + 1x Hungry Academy – ~ 250 Alumni, ~350 current students + alumni. Someone fitting your profile of self-identification (whatever that may be) has gone through the program and been successful.</li>
  <li>We need you all in – Contrary to common belief, can’t <strong>MAKE</strong> anyone do anything. Students: “Why do I have to do…(XYZ)” – Well, you don’t have to – you can always leave. You have to decide to do this.</li>
</ol>

<h2 id="structural-components">Structural Components</h2>

<h3 id="educational-approach">Educational Approach</h3>

<ul>
  <li>You learn by doing – Can’t learn programming via osmosis. Very applicative skill – Our primary objective is to get you coding <strong>as much and as soon as possible</strong></li>
  <li>Gradual release of responsibility - <strong>GRR</strong> (this is the sound you will make when the responsibility is released) – See Also: ARR (abrupt release of responsibility)</li>
  <li>Spiraling of expertise</li>
  <li>Community-driven education - Biggest strength of Turing – You will interact with ~150 other students during your time. Learning is exponential when passed around in this way.</li>
</ul>

<h3 id="modules">Modules</h3>

<ul>
  <li>6 weeks</li>
  <li>Each is pass/fail</li>
  <li>Built up a portfolio</li>
  <li>Present that portfolio to argue for promotion</li>
  <li>M1 and M2 highly structured, M3 more independence, M4 very independent</li>
</ul>

<h3 id="weeks">Weeks</h3>

<ul>
  <li>Monday &amp; Tuesday are more instructional</li>
  <li>Wednesday &amp; Thursday have more work and evaluation/feedback time</li>
  <li>Friday is community day</li>
</ul>

<h3 id="classes">Classes</h3>

<ul>
  <li>Typical class is 90-minutes with one instructor focused on one topic</li>
  <li>Classes are supposed to be “just in time” to apply the skill to your project</li>
  <li>Classes may be lecture, code-along, tutorial, small group work, etc</li>
</ul>

<h3 id="projects">Projects</h3>

<ul>
  <li>Projects are where you cement your learning</li>
  <li>Typically 1-2 weeks long</li>
  <li>Evaluated by an instructor</li>
  <li>Building blocks of your portfolio</li>
</ul>

<h3 id="echofoxtrot">Echo/Foxtrot</h3>

<ul>
  <li>Why? Harvey Mudd &amp; graduation rates</li>
  <li>Come in off the diving board or the zero-entry</li>
  <li>Everyone ends up in the same pool</li>
  <li>Some classes together, so separate</li>
  <li>Starting Week 4 the boundary starts getting erased</li>
  <li>Week 5/6 there is no Echo/Foxtrot</li>
</ul>
:ET