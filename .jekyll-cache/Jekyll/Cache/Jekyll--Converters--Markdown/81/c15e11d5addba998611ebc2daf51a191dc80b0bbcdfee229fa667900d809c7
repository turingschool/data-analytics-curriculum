I"C¯<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>Understand how a user specifies a particular resource for a show page</li>
  <li>Implement <code class="highlighter-rouge">form_with</code> to create a new resource</li>
  <li>Implement <code class="highlighter-rouge">form_with</code> to update a new resource</li>
  <li>Implement <code class="highlighter-rouge">link_to</code> to destroy a resource</li>
  <li>Define Query Parameters</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li><code class="highlighter-rouge">form_with</code></li>
  <li><code class="highlighter-rouge">link_to</code></li>
  <li>query parameters</li>
</ul>

<h2 id="warmup">WarmUp</h2>

<ul>
  <li>With a partner, complete the following User Story:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit â€˜/artistsâ€™
I see a list of all artist names
</code></pre></div></div>

<h2 id="setup">Setup</h2>

<p>This lesson builds off of the <a href="./model_testing">Model Testing Lesson</a>. You can find the completed code from this lesson on the <code class="highlighter-rouge">model_testing</code> branch of <a href="https://github.com/turingschool-examples/set_list/tree/model_testing">this repo</a></p>

<h2 id="getting-data-from-users">Getting Data from Users</h2>

<p>There are three ways that we get information from users in order to manipulate things in our application:</p>

<ol>
  <li>User input into a URL (like the id of a resource for a show page)</li>
  <li>Forms</li>
  <li>Query Params</li>
</ol>

<h2 id="song-show-page">Song Show Page</h2>

<p>One way that we allow users to send us information, is through URIs that request a specific resource.  To explore this, letâ€™s implement the following user story into our Set List app.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit /songs/1 (where 1 is the id of a song in my database)
Then I see that song's title, and artist
And I do not see any of the other songs in my database
</code></pre></div></div>

<p>First, a test!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/features/songs/show_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'As a visitor'</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'I visit a song show page'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"then I see only that song's title and artist"</span> <span class="k">do</span>
      <span class="n">talking_heads</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Talking Heads'</span><span class="p">)</span>
      <span class="n">she_was</span> <span class="o">=</span> <span class="n">talking_heads</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'And She Was'</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">234</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">2994</span> <span class="p">)</span>
      <span class="n">wild_life</span> <span class="o">=</span> <span class="n">talking_heads</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'Wild Wild Life'</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">456</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">384889</span> <span class="p">)</span>

      <span class="n">visit</span> <span class="s2">"/songs/</span><span class="si">#{</span><span class="n">she_was</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">she_was</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"By: </span><span class="si">#{</span><span class="n">talking_heads</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">wild_life</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run our tests, and, based on the error that we are getting and what we know about Rails so far, what is our next step?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) As a visitor I visit a song show page then I see only that song's title and artist
   Failure/Error: visit "/songs/#{she_was.id}"

   ActionController::RoutingError:
     No route matches [GET] "/songs/37"
   # ./spec/features/songs/show_spec.rb:10:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>This error is actually telling us what is going wrong - helpful!  So, letâ€™s go create a route that matches <code class="highlighter-rouge">GET /songs/37</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>

<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>

  <span class="n">get</span> <span class="s1">'/songs'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#index'</span>
  <span class="n">get</span> <span class="s1">'/songs/:id'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#show'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The route that we created above doesnâ€™t look <em>exactly</em> like the route that our error was looking for - why not?.  If we made a route <code class="highlighter-rouge">get '/songs/37', to 'songs#show'</code>, we are assuming that a user would only ever want to look at the song with the id of â€˜37â€™, which is not very useful; so, we use <code class="highlighter-rouge">:id</code> as a stand-in, indicating that we expect a user to fill in that information for whichever song they want to see.  More on that in a second; for now, letâ€™s run our test and continue clearing errors!</p>

<p>Our error right now, looks something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) As a visitor I visit a song show page then I see only that song's title and artist
   Failure/Error: visit "/songs/#{she_was.id}"

   AbstractController::ActionNotFound:
     The action 'show' could not be found for SongsController
   # ./spec/features/songs/show_spec.rb:10:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>So, letâ€™s go make that action in our <code class="highlighter-rouge">SongsController</code>, and put a pry in there for now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@songs</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Letâ€™s run our test to hit this pry and play around with what we have access to:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6: def show
=&gt; 7:   binding.pry
8: end

[1] pry(#&lt;SongsController&gt;)&gt; params
=&gt; &lt;ActionController::Parameters {"controller"=&gt;"songs", "action"=&gt;"show", "id"=&gt;"57"} permitted: false&gt;

[2] pry(#&lt;SongsController&gt;)&gt; params[:id]
=&gt; "57"
</code></pre></div></div>

<p>Rails gives us this nice <code class="highlighter-rouge">params</code> object that pulls in that <code class="highlighter-rouge">:id</code> from the URI, which we can use to target the song that a User is looking for, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@songs</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run our tests now, we see that we need to add a view for this controller#action:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@song</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;p&gt;</span>By: <span class="cp">&lt;%=</span> <span class="vi">@song</span><span class="p">.</span><span class="nf">artist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>And, now we have a passing test!</p>

<h2 id="new-artist-form">New Artist Form</h2>

<p>The second way users can send information to our application is through forms. To help illustrate this, letâ€™s add the ability for a visitor to add a new artist to our Set List app.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit the artists index
And click on 'New Artist'
Then my current path is '/artists/new'
and I fill in the artist's name
Then I click 'Create Artist'
I am redirected to this new artists show page
</code></pre></div></div>

<p>First, a test!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/features/artists/new_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'New Artist'</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'As a visitor'</span> <span class="k">do</span>
    <span class="n">describe</span> <span class="s1">'When I visit the new artist form by clicking a link on the index'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'I can create a new artist'</span> <span class="k">do</span>
        <span class="n">visit</span> <span class="s1">'/artists'</span>

        <span class="n">click_link</span> <span class="s1">'New Artist'</span>

        <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'/artists/new'</span><span class="p">)</span>

        <span class="n">fill_in</span> <span class="s1">'Name'</span><span class="p">,</span> <span class="ss">with: </span><span class="s1">'Megan'</span>
        <span class="n">click_on</span> <span class="s1">'Create Artist'</span>

        <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/artists"</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">'Megan'</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Use TDD and what we know about Rails so far to TDD until you reach the following error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: click_link 'New Artist'

Capybara::ElementNotFound:
  Unable to find link "New Artist"
# ./spec/features/artists/new_spec.rb:9:in `block (4 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>What is this error telling us?  We donâ€™t have a link on our index page!  Letâ€™s go ahead and include that link in our <code class="highlighter-rouge">views/artists/index.html.erb</code>:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'New Artist'</span><span class="p">,</span> <span class="s1">'/artists/new'</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p><strong>link_to</strong> is a method that Rails gives us, which we can use to create html links.  link_to takes 2 or more arguments; the first is the label the link should have (what a user sees), and the second is the path the link should request.  A link defaults to use the verb (or method) <code class="highlighter-rouge">GET</code>.</p>

<p>Run the tests again, and use TDD and what we know so far to implement code until you reach the following error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) New Artist As a visitor When I visit the new artist form I can create a new artist
   Failure/Error: fill_in 'Name', with: 'Megan'

   Capybara::ElementNotFound:
     Unable to find field "Name" that is not disabled
   # ./spec/features/artists/new_spec.rb:13:in `block (4 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>You should now have a route for <code class="highlighter-rouge">get '/artists/new', to: 'artists#new'</code>, an <code class="highlighter-rouge">ArtistsController</code>, a <code class="highlighter-rouge">new</code> action in that controller and a view for <code class="highlighter-rouge">view/artists/new.html.erb</code>.  Now its time to build out our form!</p>

<p>Looking back at your Task Manager from the intermission work, we see a form that looks like this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/tasks"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"authenticity_token"</span> <span class="na">value=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">form_authenticity_token</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>Enter a new task:<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">'text'</span> <span class="na">name=</span><span class="s">'task[title]'</span><span class="nt">/&gt;&lt;br/&gt;</span>
  <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">'task[description]'</span><span class="nt">&gt;&lt;/textarea&gt;&lt;br/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">'submit'</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>We could use this same form structure to build out our new artist form; but, wouldnâ€™t it be nice if rails gave us some help so we didnâ€™t have to build this form by hand?  The good news is, it does!  Rails gives us <code class="highlighter-rouge">form_with</code> to help us build forms:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">url: </span><span class="s2">"/artists"</span><span class="p">,</span> <span class="ss">method: :post</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="s1">'Create Artist'</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Much simpler, right? But do we still have all the information we need? Letâ€™s break it down, line by line.</p>

<p>The first line in our HTML form for tasks <code class="highlighter-rouge">&lt;form action="/tasks" method="post"&gt;</code> tells the form the verb and path it should request when the form is submitted.  In <code class="highlighter-rouge">form_with</code>, we use the <code class="highlighter-rouge">url:</code> and <code class="highlighter-rouge">method:</code> keyword arguments to tell the form what verb/path to use.</p>

<p>The next line, <code class="highlighter-rouge">&lt;input type="hidden" name="authenticity_token" value="&lt;%= form_authenticity_token %&gt;"&gt;</code>, is a security setting that Rails requires on all forms, and <code class="highlighter-rouge">form_with</code> gives us this out of the box.</p>

<p>The next three lines set up what a user sees in and around an input area, and the button to submit the form.  These three lines are replaced with:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="s1">'Create Artist'</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Now that we have a better understanding of <code class="highlighter-rouge">form_with</code>, letâ€™s run our test and we should be getting the following error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: click_on 'Create Artist'

ActionController::RoutingError:
  No route matches [POST] "/artists"
# ./spec/features/songs/index_spec.rb:26:in `block (4 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>What does this mean?  It means that we are trying to submit a form to a route that doesnâ€™t exist. So, letâ€™s go make that route:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>

  <span class="n">get</span> <span class="s1">'/songs'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#index'</span>
  <span class="n">get</span> <span class="s1">'/songs/:id'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#show'</span>
  <span class="n">get</span> <span class="s1">'/artists'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#index'</span>
  <span class="n">get</span> <span class="s1">'/artists/new'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#new'</span>
  <span class="n">post</span> <span class="s1">'/artists'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#create'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, letâ€™s add the <code class="highlighter-rouge">create</code> action to our controller, and put a pry in that method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run our tests and hit that pry - what do we now have access to in our <code class="highlighter-rouge">params</code>?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5: def create
=&gt; 6:   binding.pry
7: end

[1] pry(#&lt;ArtistsController&gt;)&gt; params
=&gt; &lt;ActionController::Parameters {"utf8"=&gt;"âœ“", "artist"=&gt;{"name"=&gt;"Megan"}, "commit"=&gt;"Create Artist", "controller"=&gt;"artists", "action"=&gt;"create"} permitted: false&gt;
</code></pre></div></div>

<p>Our new artist information!  Fantastic!  We can now use that information to create a new artist in our <code class="highlighter-rouge">ArtistsController</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="n">params</span><span class="p">[</span><span class="ss">:name</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Go ahead and run the test again, and letâ€™s see if weâ€™ve got a passing test. Not yet - we should get an error <code class="highlighter-rouge">Unable to find xpath "/html"</code>. This is capybara telling us that itâ€™s not seeing any HTML. This is because we need to tell our create action where to redirect to after creating the artist!  Based on our User Story, we want it to redirect to the artists index page, so letâ€™s add the following to make that happen:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="n">params</span><span class="p">[</span><span class="ss">:name</span><span class="p">])</span>
    <span class="n">redirect_to</span> <span class="s1">'/artists'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And now our test should be passing!</p>

<p>Letâ€™s do a little bit of refactoring before we call this feature complete. As an experiment try to replace the line in the controller <code class="highlighter-rouge">Artist.create(name: params[:name])</code> with <code class="highlighter-rouge">Artist.create(params)</code>. We should get a <code class="highlighter-rouge">ForbiddenAttributesError</code>. Take a closer look at that <code class="highlighter-rouge">params</code> object, using a <code class="highlighter-rouge">binding.pry</code> - at the very end, you will see <code class="highlighter-rouge">permitted: false</code>.  This means that we cannot use the params â€˜hashâ€™ directly to create or update records in our database. Rails is trying to protect us from malicious users by not allowing us to drop our all of our params directly into a new object that will be saved into our database, so we need to be explicit about which params we are accepting. The syntax <code class="highlighter-rouge">Artist.create(name: params[:name])</code> will do that, but as our objects get more complex this syntax will get very verbose. Imagine if an artist also had a hometown, years active, genre, etc. The syntax would look like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="n">params</span><span class="p">[</span><span class="ss">:name</span><span class="p">],</span> <span class="ss">hometown: </span><span class="n">params</span><span class="p">[</span><span class="ss">:hometown</span><span class="p">],</span> <span class="ss">years_active: </span><span class="n">params</span><span class="p">[</span><span class="ss">:years_active</span><span class="p">],</span> <span class="ss">genre: </span><span class="n">params</span><span class="p">[</span><span class="ss">:genre</span><span class="p">])</span>
</code></pre></div></div>

<p>Rather than this long syntax, rails gives us a much nicer way to do this called <strong>strong params</strong>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="s1">'/artists'</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">artist_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Using strong params, we create a new method that will pull out the parameters we need from our params hash. Put a <code class="highlighter-rouge">pry</code> into the <code class="highlighter-rouge">create</code> action and call this new <code class="highlighter-rouge">artist_params</code> method. What does this return? How does this compare with the <code class="highlighter-rouge">params</code> object?</p>

<p>We are getting so close!  Run our tests again, and you will see that capybara is unable to find that new artistâ€™s information on the index page.  Letâ€™s make sure we are displaying that information:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'New Artist'</span><span class="p">,</span> <span class="s1">'/artists/new'</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@artists</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h2&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>And since we are iterating over <code class="highlighter-rouge">@artists</code>, we will need to define that in our <code class="highlighter-rouge">artists#index</code> action as <code class="highlighter-rouge">@artists = Artist.all</code></p>

<p>Your test should now be passing - you have successfully created a new object with <code class="highlighter-rouge">form_with</code>!</p>

<h2 id="destroying-an-artist">Destroying an Artist</h2>

<p>Now that we have used a form to manipulate data in our database, letâ€™s take a look at how a link or button could be used to manipulate data.  To illustrate this, letâ€™s implement a button that will allow a user to destroy an artist from the database.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit the artists index page
And click a button 'Delete' next to an artist
Then I am redirected back to the artists index page
And I no longer see that artist
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'As a Visitor'</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'I can delete an artist'</span> <span class="k">do</span>
    <span class="n">talking_heads</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Talking Heads'</span><span class="p">)</span>

    <span class="n">visit</span> <span class="s1">'/artists'</span>

    <span class="n">click_button</span> <span class="s1">'Delete'</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'/artists'</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">talking_heads</span><span class="p">.</span><span class="nf">name</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_button</span><span class="p">(</span><span class="s1">'Delete'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What do you think your first error is going to be?</p>

<p>Run your tests, were you right?  Capybara canâ€™t find a button called â€˜Deleteâ€™.  Rails gives us a method for creating buttons - <strong>button_to</strong>.  button_to works just like link_to, with one big difference; the default verb (or method) for button_to, is <code class="highlighter-rouge">POST</code>.  So, in order to be more explicit with what we want our button to do, we will want to override the default method to <code class="highlighter-rouge">DELETE</code> (DELETE is the common verb used when we need to Destroy something from a database).</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'New Artist'</span><span class="p">,</span> <span class="s1">'/artists/new'</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@artists</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h2&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">button_to</span> <span class="s1">'Delete'</span><span class="p">,</span> <span class="s2">"/artists/</span><span class="si">#{</span><span class="n">artist</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Now, we have a button that indicates which artist we are going to delete by giving our path an artist id.</p>

<p>Can you guess what our next error is going to be?</p>

<p>Run your tests, and you should see something like this:</p>

<p>Failure/Error: click_button â€˜Deleteâ€™</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
  No route matches [DELETE] "/artists/34"
# ./spec/features/artists/delete_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>No problem - we have seen errors like this before; our application doesnâ€™t know how to handle this request, so letâ€™s update our routes.rb:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>

  <span class="n">get</span> <span class="s1">'/songs'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#index'</span>
  <span class="n">get</span> <span class="s1">'/songs/:id'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#show'</span>
  <span class="n">get</span> <span class="s1">'/artists'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#index'</span>
  <span class="n">get</span> <span class="s1">'/artists/new'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#new'</span>
  <span class="n">post</span> <span class="s1">'/artists'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#create'</span>
  <span class="n">delete</span> <span class="s1">'/artists/:id'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'artists#destroy'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, we have a route which will respond to a <code class="highlighter-rouge">DELETE</code> with the path of <code class="highlighter-rouge">'/artists/2' or 'artists/45'</code> where 2 and 45 are ids of existing artists.</p>

<p>Finally, our test will tell us to go create that <code class="highlighter-rouge">destroy</code> action on our artists controller:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/artists_controller.rb</span>

<span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="s1">'/artists'</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="no">Artist</span><span class="p">.</span><span class="nf">destroy</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
    <span class="n">redirect_to</span> <span class="s1">'/artists'</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">artist_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, we should have a passing test!</p>

<h2 id="edit-artist-form">Edit Artist Form</h2>

<p>Now that we have created an artist with <code class="highlighter-rouge">form_with</code>, and used a button to send a <code class="highlighter-rouge">DELETE</code> request (overriding its default method), we are ready to tackle updating an artist using <code class="highlighter-rouge">form_with</code>.  Thinking back to the explanation of form_with, we know will have to specify the HTTP verb, and when updating something in our database, the common verb that we use is <code class="highlighter-rouge">PATCH</code>.  Keep this in mind as you build out the following user story and test:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit the artists index
And click 'Edit' next to an artist
Then I am taken to an edit artist form
When I enter a new name for the artist
And click a button to 'Update Artist'
Then I am redirected back to the artists index
And I see the updated name
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/features/artists/edit_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'New Artist'</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'As a visitor'</span> <span class="k">do</span>
    <span class="n">describe</span> <span class="s1">'When I visit the artists index'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'I can update an artist'</span> <span class="k">do</span>
        <span class="n">beatles</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Beatles'</span><span class="p">)</span>

        <span class="n">visit</span> <span class="s1">'/artists'</span>

        <span class="n">click_link</span> <span class="s1">'Edit'</span>

        <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/artists/</span><span class="si">#{</span><span class="n">beatles</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">/edit"</span><span class="p">)</span>

        <span class="n">fill_in</span> <span class="s1">'Name'</span><span class="p">,</span> <span class="ss">with: </span><span class="s1">'The Beatles'</span>
        <span class="n">click_on</span> <span class="s1">'Update Artist'</span>

        <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/artists"</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">'The Beatles'</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>See if you can get this test passing without looking at the hint below.</p>

<p><br />
<br />
<br /></p>

<p>Hint: The first line of your form will likely include something like this <code class="highlighter-rouge">form_with url: "/artists/#{@artist.id}", method: :patch</code></p>

<p>If you havenâ€™t quite been able to make this update work, check in with your instructorâ€™s repo later today - we will post a solution for updating an artist.</p>

<h2 id="query-params">Query Params</h2>

<p>There is one other way that users can send information in that we can access through <code class="highlighter-rouge">params</code> and that is with <strong>query params</strong>.  In the following URL <code class="highlighter-rouge">http://www.setlist.com/artists?age=32</code>, <code class="highlighter-rouge">age=32</code> are the <strong>query params</strong>, and the key value pair contained there (<code class="highlighter-rouge">{age: 32}</code>) will be included in the <code class="highlighter-rouge">params</code> for that request.</p>

<p>To see this in action, put a pry in your <code class="highlighter-rouge">songs#index</code> action, spin up your SetList with <code class="highlighter-rouge">rails s</code> and navigate to <a href="http://localhost:3000/songs?artist=prince">http://localhost:3000/songs?artist=prince</a>. Open your terminal, and you should be in a pry session with access to the <code class="highlighter-rouge">params</code> object:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2: def index
=&gt; 3:   binding.pry
4:   @songs = Song.all
5: end

[1] pry(#&lt;SongsController&gt;)&gt; params
=&gt; &lt;ActionController::Parameters {"artist"=&gt;"prince", "controller"=&gt;"songs", "action"=&gt;"index"} permitted: false&gt;

[2] pry(#&lt;SongsController&gt;)&gt; params[:artist]
=&gt; "prince"
</code></pre></div></div>

<p>Now, our params include the key/value pair from the query params and we can use that information in our controllers to filter or change what a user sees!</p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ol>
  <li>What is the syntax for creating a route for a show page for a <code class="highlighter-rouge">zebra</code> resource?</li>
  <li>How does <code class="highlighter-rouge">form_with</code> know what method/path combination to use when submitted?</li>
  <li>What is a query parameter, and how do we identify one within a URL?</li>
</ol>
:ET