I"q<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>define routes and helpers <code class="highlighter-rouge">resources</code> provides</li>
  <li>understand when to use a singular resource</li>
  <li>understand static vs dynamic segments</li>
  <li>The advantages and drawbacks of using a namespace</li>
  <li>understand How a namespace compares to a scope</li>
</ul>

<h3 id="hook">Hook</h3>

<ul>
  <li>What exactly are routes?</li>
  <li>What does rails give us to help us build things quickly?</li>
  <li>Routes in rails lets us control the URLs that our users see.</li>
</ul>

<h3 id="background">Background</h3>
<p>This lesson is intended to build upon the concepts from
<a href="https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/rest_routing_and_controllers_in_rails.markdown">Rest, Routing, and Controllers in Rails</a>.</p>

<h3 id="the-rails-router">The Rails Router</h3>

<ul>
  <li>The Rails Router recognizes URLs and connects them to code, specifically
in our controllers.</li>
  <li>It can generate paths and URLs, so we don’t ever have to hard code strings
in our views.</li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li>Resource routing allows you to quickly declare all of the common routes for
a given resourceful controller. Instead of declaring separate routes for your
index, show, new, edit, create, update and destroy actions, a resourceful route
declares them in a single line of code.</li>
  <li>Together, in our worksheet, let’s fill out what we get when we have
<code class="highlighter-rouge">resources :photos</code> in our routes.rb.</li>
  <li>These are all of the resources. Of course, we can limit it to individual
items using only.</li>
  <li>We can “stack” resources like so, <code class="highlighter-rouge">resources :photos, :things, :more_things</code></li>
</ul>

<h3 id="singular-resources">Singular Resources</h3>

<ul>
  <li>We can use singular resources when we want to have a URL that doesn’t quite
match.</li>
</ul>

<p><code class="highlighter-rouge">get 'dashboard', to:'users#show'</code></p>

<ul>
  <li>This can be something used in a website where you don’t necessarily need
the user id in the URL.</li>
</ul>

<h3 id="check-for-understanding">Check for Understanding</h3>

<ul>
  <li>Write out the singular resource equivalents in our photos chart.</li>
</ul>

<h3 id="dynamic-versus-static-segments">Dynamic versus Static Segments</h3>

<ul>
  <li>What is a static segment?</li>
  <li>How does that compare to a dynamic segment?</li>
  <li>What is an example of a dynamic segment?</li>
</ul>

<p><code class="highlighter-rouge">get 'books/:id', to: 'books#show'</code></p>

<p><code class="highlighter-rouge">@book = Book.find(params[:id])</code></p>

<ul>
  <li>Here, :id is the dynamic segment.</li>
  <li>We are saying that we want to find whatever book it is that has the id
number given after books/</li>
  <li>However, that isn’t very pretty. Sometimes we don’t want to deal with id
numbers because they are weird.</li>
</ul>

<p><code class="highlighter-rouge">get 'books/:name', to: 'books#show'</code></p>

<p><code class="highlighter-rouge">@book = Book.find_by(name: params[:name])</code></p>

<ul>
  <li>We can define how this information is stored in params, and we can define
just how we can search for it in our controller.</li>
  <li>If we wanted to we can mix and match how we define it in our params and how
we search for it. But don’t. Be consistent. Remember the principle of
least surprise.</li>
</ul>

<p><code class="highlighter-rouge">get 'books/:thing', to: 'books#show'</code></p>

<p><code class="highlighter-rouge">@book = Book.find_by(name: params[:thing])</code></p>

<ul>
  <li>So, resources lets us take what would be potentially seven lines of code
and compresses it down to a single line.</li>
  <li>Can we override the default dynamic segments that resources gives us?</li>
</ul>

<p><code class="highlighter-rouge">resources :books, param: :title</code></p>

<p><code class="highlighter-rouge">@book = Book.find_by(title: params[:title])</code></p>

<h3 id="scope-and-module">Scope and Module</h3>

<ul>
  <li>We also have scope to contend with.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scope '/admin' do
  resources :photos
end
</code></pre></div></div>

<ul>
  <li>With scope, we don’t put the controllers into an admin folder and the
controllers do NOT inherit from Admin.</li>
  <li>So what’s the difference here?</li>
  <li>It’s all in where it routes.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scope "/admin" do
  resources :photos
end
</code></pre></div></div>

<ul>
  <li>This routes to app/controllers/photos_controller.rb</li>
  <li>What URL helpers do you think this generates?</li>
  <li>They look like photos_path.</li>
  <li>What we can do is we can use a scope and make it inherit from admin,
and we can sort them into an admin folder.</li>
  <li>We use module to do this.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scope "/admin", module: "admin" do
  resources :photos
end
</code></pre></div></div>

<ul>
  <li>This hits app/controllers/admin/photos_controller.rb</li>
  <li>The URL helper is still similar to photos_path.</li>
  <li>Namespace automatically adds module, and also gives us a more descriptive
URL helper, like we were using as:.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>namespace "admin" do
  resources :photos
end
</code></pre></div></div>

<ul>
  <li>This routes to app/controllers/admin/photos_controller</li>
  <li>The URL helpers are similar to admin_photos_path</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scope “/admin”, as: “admin”, module: “admin” do
  resources :photos
end
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>namespace “admin” do
  resources :photos
end
</code></pre></div></div>

<h3 id="namespace">Namespace</h3>

<ul>
  <li>Namespaces lets us organize controllers better.</li>
  <li>The most common example of this is putting things into an Admin:: namespace.</li>
  <li>Let’s take our photos example.</li>
  <li>You would put your photos controllers in app/controllers/admin</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>namespace :admin do
  resources :photos
end
</code></pre></div></div>

<h3 id="check-for-understanding-1">Check for Understanding</h3>

<ul>
  <li>Why do we namespace things?</li>
  <li>What is the difference between Namespacing and Scoping?</li>
  <li>When would we use one over the other?</li>
</ul>

<h3 id="nested-resources">Nested Resources</h3>

<ul>
  <li>Consider magazines and ads.</li>
  <li>Magazines have many ads. Ads belong to a magazine.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Magazine &lt; ActiveRecord::Base
  has_many :ads
end

class Ad &lt; ActiveRecord::Base
  belongs_to :magazine
end


# Routes file

resources :magazines do
  resources :ads
end
</code></pre></div></div>

<ul>
  <li>Let’s fill out our chart.</li>
</ul>

<h3 id="resources-as-in-additional-materials">Resources (As in additional materials)</h3>

<p><a href="https://www.dropbox.com/s/is9rijwt7tel25f/routing_in_rails.key?dl=0">Slides</a></p>
:ET