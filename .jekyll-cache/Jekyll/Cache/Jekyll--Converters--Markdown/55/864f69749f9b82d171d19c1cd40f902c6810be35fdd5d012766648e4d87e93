I"≥,<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand the basic idea of a collection type</li>
  <li>Develop a mental model to understand arrays</li>
  <li>Gain some familiarity with common array methods</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - WarmUp</li>
  <li>20 - Together - Data Structures, Collections, and Programming</li>
  <li>20 - Group Exercise</li>
  <li>5 - WrapUp</li>
  <li>5 - Independent Practice &amp; Homework</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Data Structure</li>
  <li>Array</li>
  <li>Index</li>
</ul>

<h2 id="setup">SetUp</h2>
<p>In the pry session you‚Äôll be using, build a Bead class. Use instances of these beads through the demonstration.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Bead</span> 
  <span class="nb">attr_reader</span> <span class="ss">:color</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
     <span class="vi">@color</span> <span class="o">=</span> <span class="n">color</span>
  <span class="k">end</span> 

<span class="k">end</span> 
</code></pre></div></div>

<h2 id="supplies">Supplies</h2>

<p>Before we begin, collect the following Arts &amp; Crafts supplies:</p>

<ul>
  <li>1 piece of paper</li>
  <li>5 paper cups</li>
  <li>6 wooden beads</li>
  <li>A pen or marker</li>
  <li>5 tags, one of each color (‚Äúblue‚Äù, ‚Äúred‚Äù, ‚Äúgreen‚Äù, ‚Äúpurple‚Äù, ‚Äúorange‚Äù)</li>
</ul>

<p>Then take your five paper cups and use a marker to number them ‚Äú0‚Äù through ‚Äú4‚Äù.<br />
Attach each tag to a bead.</p>

<h2 id="warm-up">Warm Up</h2>
<ul>
  <li>What is a ‚ÄúData Structure‚Äù?</li>
  <li>Why are Arrays so ubiquitous?</li>
  <li>What does an Array model conceptually?</li>
  <li>What are some of the properties of an array? How do they behave?</li>
</ul>

<h2 id="data-structures-collections-and-programming">Data Structures, Collections, and Programming</h2>
<p>In pairs, post answers to Slack thread:</p>
<ul>
  <li>What is a ‚ÄúData Structure‚Äù?<br />
A data structure is a particular way of organizing information so that it can be used efficiently</li>
  <li>Why are Arrays so ubiquitous?
Arrays are the most fundamental collection type in programming ‚Äî just about every language has them. They are the most efficient data structure for <strong>storing &amp; accessing a sequence of objects</strong> and can be easily sorted and searched.</li>
  <li>What does an Array model conceptually?</li>
  <li>What are some of the properties of an array?<br />
 Arrays are collections of data; each element in an array is addressed by a number called the index or position, starting with 0 (zero-indexed). All arrays have a size (length/count). Array elements are stored in subsequent memory locations. Ruby arrays can hold elements that have different data types.</li>
</ul>

<h3 id="arrays---group-exercise">Arrays - Group Exercise</h3>

<p>Let‚Äôs model some of the core concepts. In this section, we‚Äôll step through using some of the fundamental Array methods, including:</p>

<ul>
  <li><code class="highlighter-rouge">[]</code></li>
  <li><code class="highlighter-rouge">count</code></li>
  <li><code class="highlighter-rouge">&lt;&lt;</code> / <code class="highlighter-rouge">push</code></li>
  <li><code class="highlighter-rouge">pop</code></li>
  <li><code class="highlighter-rouge">shift</code></li>
  <li><code class="highlighter-rouge">unshift</code></li>
  <li><code class="highlighter-rouge">insert</code></li>
  <li><code class="highlighter-rouge">shuffle</code></li>
</ul>

<p>As we go, we‚Äôll work side-by-side with our physical Array model and with an IRB/Pry session.<br />
<!-- Have a student help by demonstrating interaction with manipulatives or on the board.  --></p>

<ol>
  <li>Lay down your large piece of paper and write <code class="highlighter-rouge">colors</code> in large letters. This is the name of your variable holding your collection. How many elements are in your collection so far?</li>
  <li>Put the empty <code class="highlighter-rouge">0</code> cup on the paper. If you now access the value inside <code class="highlighter-rouge">colors[0]</code>, what would you get back?</li>
  <li>Store a ‚Äúblue‚Äù bead into the zero cup, the equivalent of maybe <code class="highlighter-rouge">colors[0] = "blue"</code>. What would you expect the answer of <code class="highlighter-rouge">colors.count</code> to be? What does <code class="highlighter-rouge">colors.first</code> return? What about <code class="highlighter-rouge">colors.last</code>?</li>
  <li>We can explicitly assign the value of another cup. Add <code class="highlighter-rouge">colors[1] = "red"</code>. That does not change the answer to <code class="highlighter-rouge">colors.first</code>, but does change <code class="highlighter-rouge">colors.last</code>. Why?</li>
  <li>The ‚Äúshovel‚Äù operator (<code class="highlighter-rouge">&lt;&lt;</code>) adds an element to the end of an existing array. Pretend you ran <code class="highlighter-rouge">colors &lt;&lt; "green"</code>. How many beads are in the array in total?</li>
  <li>It turns out that ‚Äúshovel‚Äù is just syntactic sugar for the method named <code class="highlighter-rouge">push</code>. Pretend you ran <code class="highlighter-rouge">colors.push(nil)</code>. How does that affect your array? What is the value of <code class="highlighter-rouge">colors.count</code> now?</li>
  <li>You can remove the last element of an array by running <code class="highlighter-rouge">colors.pop</code>. Do that now.</li>
  <li>You can remove the first element of an array by running <code class="highlighter-rouge">colors.shift</code>. Do that now.</li>
  <li>Sometimes you want to add an element to the <em>beginning</em> of an array. You do that with <code class="highlighter-rouge">colors.unshift("purple")</code>. But wait a minute. You can‚Äôt add the cup with marker <code class="highlighter-rouge">4</code> to the beginning of <code class="highlighter-rouge">colors</code>. What do you do?</li>
  <li>You can also insert data into a specific location. Say you ran <code class="highlighter-rouge">colors.insert(3, "orange")</code>. How does that change things?</li>
  <li>If you run <code class="highlighter-rouge">.shuffle</code> on an array it creates a copy of the array with the values shuffled in random order. But you only have enough cups for one array. How about you run <code class="highlighter-rouge">colors = colors.shuffle</code>?</li>
  <li>There‚Äôs a ton you can do with <em>enumerable</em> methods. But the fundamental enumerator is the method <code class="highlighter-rouge">each</code>. On the side of your paper, write the output for this code: <code class="highlighter-rouge">colors.each {|b| puts b }</code>.</li>
</ol>

<p>Got it? Here are the important concepts you‚Äôve seen:</p>

<ul>
  <li>You can directly assign a value to a location in an array using <code class="highlighter-rouge">[]</code></li>
  <li>You can access the value stored at a position by using <code class="highlighter-rouge">[]</code></li>
  <li>You can add an element to the end of an array with <code class="highlighter-rouge">&lt;&lt;</code> or <code class="highlighter-rouge">.push</code></li>
  <li>You can remove an element from the end of an array with <code class="highlighter-rouge">.pop</code></li>
  <li>You can add an element to the front of an array with <code class="highlighter-rouge">.unshift</code>.</li>
  <li>The <code class="highlighter-rouge">insert</code> method takes two arguments: first is the position where you want to insert the data, the second is the data to be inserted</li>
  <li><code class="highlighter-rouge">shuffle</code> returns a copy of your array with the elements randomly jumbled up</li>
  <li><code class="highlighter-rouge">each</code> is an <em>enumerable</em> method which takes a block parameter and runs that block once for <em>each</em> element in the collection.</li>
</ul>

<h2 id="group-exercise">Group Exercise</h2>

<p>For this exercise you‚Äôll work in threes.</p>

<ul>
  <li>Person <code class="highlighter-rouge">A</code> is in charge of reading the instructions</li>
  <li>Person <code class="highlighter-rouge">B</code> is in charge of the physical model</li>
  <li>Person <code class="highlighter-rouge">C</code> is in charge of working in IRB (in such a way that the others can see!)</li>
</ul>

<p>Start with an empty <code class="highlighter-rouge">colors</code> array in both the physical space and IRB.</p>

<h4 id="steps">Steps</h4>

<ol>
  <li>Insert a ‚Äúblue‚Äù bead to index 1 <code class="highlighter-rouge">colors[1] = "blue"</code></li>
  <li>Check the value of index 0 <code class="highlighter-rouge">colors[0]</code></li>
  <li>Check the value of index 1 <code class="highlighter-rouge">colors[1]</code></li>
  <li>Check the count of the array <code class="highlighter-rouge">colors.count</code></li>
  <li>Push a green and a red bead onto the array <code class="highlighter-rouge">colors.push("green")</code> then <code class="highlighter-rouge">colors.push("red")</code></li>
  <li>Pop the last bead off of the array <code class="highlighter-rouge">colors.pop</code></li>
  <li>Remove the first element from the array <code class="highlighter-rouge">colors.shift</code> ‚Äì what value will this return to you?</li>
  <li>Check the count of the array <code class="highlighter-rouge">colors.count</code></li>
  <li>Insert a red bead at index 1 <code class="highlighter-rouge">colors.insert(1, "red")</code></li>
  <li>Insert an orange bead at index 1 <code class="highlighter-rouge">colors.insert(1, "orange")</code></li>
  <li>Prepend a purple bead to the front of the array <code class="highlighter-rouge">colors.unshift("purple")</code></li>
  <li>Overwrite the value at index 1 by assigning a yellow bead there <code class="highlighter-rouge">colors[1] = "yellow"</code></li>
</ol>

<h2 id="independent-work">Independent Work</h2>

<h3 id="from-the-top">From the Top</h3>

<p>Start over with the <a href="http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html#7.-arrays">arrays section of Ruby in 100 Minutes</a>. Make sure to run the code snippets.</p>

<h2 id="wrapup">WrapUp</h2>

<ul>
  <li>We say that arrays are ‚Äúzero-indexed‚Äù. Why does that make counting and positions somewhat confusing?</li>
  <li>Why would <code class="highlighter-rouge">array &lt;&lt; 7</code> be useful as opposed to setting a specific index (ie <code class="highlighter-rouge">numbers[12] = 7</code>) ?</li>
  <li>It‚Äôs easy to mix up <code class="highlighter-rouge">push</code> and <code class="highlighter-rouge">pop</code> or <code class="highlighter-rouge">shift</code> and <code class="highlighter-rouge">unshift</code>. Can you come up with a way to keep them straight?</li>
  <li>Which methods that you‚Äôve seen here can grow the size of the array? Which
shrink it?</li>
  <li>What happens if you try to access a position outside the length of the array
(like <code class="highlighter-rouge">numbers[100000]</code>)?</li>
  <li>What happens when you call <code class="highlighter-rouge">pop</code> on an empty array?</li>
</ul>

<h2 id="homework">Homework</h2>

<p><a href="https://github.com/turingschool/ruby-exercises/tree/master/core-types">Core-Types</a>: Arrays</p>

:ET