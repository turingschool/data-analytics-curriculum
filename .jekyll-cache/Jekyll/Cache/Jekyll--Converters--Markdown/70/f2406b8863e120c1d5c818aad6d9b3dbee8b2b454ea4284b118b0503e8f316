I"“A<h1 id="building-your-own-repl">Building your own REPL</h1>

<h2 id="material">Material</h2>

<ul>
  <li>These material are at https://github.com/JoshCheek/building-your-own-repl</li>
  <li>Cheatsheet: https://github.com/JoshCheek/building-your-own-repl/blob/master/cheatsheet.pdf?raw=true</li>
  <li>Quiz: http://quiz-building-your-own-repl.herokuapp.com/</li>
</ul>

<h2 id="repl">REPL</h2>

<ul>
  <li>REPL stands for Read, Eval, Print, Loop</li>
  <li>Think through what these mean</li>
  <li>Can we think of any REPLs? pry, irb, the shell(bash)</li>
</ul>

<p><strong>Exercise: Write our own</strong></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">loop</span> <span class="k">do</span>
  <span class="nb">print</span> <span class="s2">"&gt; "</span>
  <span class="n">input</span>  <span class="o">=</span> <span class="nb">gets</span><span class="p">()</span>
  <span class="n">result</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
  <span class="nb">puts</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">inspect</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When might you want to use this?</p>

<h2 id="standard-input-and-output">Standard input and output</h2>

<ul>
  <li>How do we interact with a program?
    <ul>
      <li>Text goes in (e.g. from the keyboard)</li>
      <li>Text comes out (e.g. to the monitor)</li>
    </ul>
  </li>
  <li>How do we access these in our program?
    <ul>
      <li><code class="highlighter-rouge">$stdin</code>, and <code class="highlighter-rouge">$stdout</code></li>
      <li><code class="highlighter-rouge">$stdin.gets()</code></li>
      <li><code class="highlighter-rouge">$stdout.puts("hello, world")</code></li>
      <li>These are just streams of text, just like a file</li>
    </ul>
  </li>
  <li>Wait, what happened to <code class="highlighter-rouge">gets</code> and <code class="highlighter-rouge">puts</code>?
    <ul>
      <li>These are convenience methods for quick/dirty programs</li>
      <li>Notice that <code class="highlighter-rouge">gets</code> is either a local variable or a method.
And it‚Äôs not a local variable, so it must be a method</li>
      <li>What object is this being called on? It must be <code class="highlighter-rouge">self</code>
Which means we must inherit them.
<code class="highlighter-rouge">self.method(:gets).owner</code></li>
      <li>How are they defined, then?
https://github.com/rubinius/rubinius/blob/21267107492a160fbafbc1351dcce7d517976645/kernel/common/kernel.rb#L675-678</li>
    </ul>
  </li>
</ul>

<p><strong>Exercise: <code class="highlighter-rouge">gets</code> is <code class="highlighter-rouge">$stdin.gets</code></strong></p>

<p>Define a method that gets from stdin and tells us what it got.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_next_line</span>
  <span class="n">line1</span> <span class="o">=</span> <span class="nb">gets</span>
  <span class="n">line2</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="p">.</span><span class="nf">gets</span>
  <span class="nb">puts</span> <span class="s2">"FIRST  LINE IS: </span><span class="si">#{</span><span class="n">line1</span><span class="si">}</span><span class="s2">"</span>
  <span class="nb">puts</span> <span class="s2">"SECOND LINE IS: </span><span class="si">#{</span><span class="n">line2</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="nb">require</span> <span class="s1">'pry'</span>
<span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>

<p>Run the code and see that both do the same thing.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby example1.rb
pry<span class="o">(</span>main<span class="o">)&gt;</span> get_next_line
<span class="c"># type "hello" and then "world"</span>
<span class="o">=&gt;</span> <span class="s2">"NEXT LINE IS: </span><span class="se">\"</span><span class="s2">Hello, world</span><span class="se">\\</span><span class="s2">n</span><span class="se">\"</span><span class="s2">"</span>
</code></pre></div></div>

<p>What if we wanted to pull input from some other place?
We can‚Äôt if we use <code class="highlighter-rouge">gets</code>, because that becomes <code class="highlighter-rouge">$stdin.gets</code>,
it‚Äôs reading from the keyboard.
We would want to call it on the input stream directly,
and we would want the ability to switch out what the input stream is</p>

<p><strong>Exercise: Passing the input stream lets us choose where to get input from</strong></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_next_line_from</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
  <span class="n">line</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">gets</span>
  <span class="nb">puts</span> <span class="s2">"LINE IS: </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="nb">require</span> <span class="s1">'pry'</span>
<span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>

<p>Make an input file</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello from the file
world from the file
</code></pre></div></div>

<p>Run this example and see that our method can get input
from the standard input or a file.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby example2.rb
pry<span class="o">(</span>main<span class="o">)&gt;</span> get_next_line_from<span class="o">(</span><span class="nv">$stdin</span><span class="o">)</span>
<span class="c"># enter "hello from the keyboard"</span>

pry<span class="o">(</span>main<span class="o">)&gt;</span> file <span class="o">=</span> File.open<span class="o">(</span><span class="s1">'input'</span><span class="o">)</span>
<span class="o">=&gt;</span> <span class="c">#&lt;File:input_file&gt;</span>

pry<span class="o">(</span>main<span class="o">)&gt;</span> get_next_line_from file
LINE IS: hello from the file
<span class="o">=&gt;</span> nil

pry<span class="o">(</span>main<span class="o">)&gt;</span> get_next_line_from file
LINE IS: world from the file
<span class="o">=&gt;</span> nil

pry<span class="o">(</span>main<span class="o">)&gt;</span> get_next_line_from file
LINE IS:
<span class="o">=&gt;</span> nil
</code></pre></div></div>

<h2 id="applying-this-knowledge-to-our-repl">Applying this knowledge to our REPL</h2>

<p>Now that we understand what those <code class="highlighter-rouge">gets</code> and <code class="highlighter-rouge">puts</code> are doing,
and their limitations, lets refactor our earlier work:</p>

<ul>
  <li>Pull it into a method</li>
  <li>Invoke gets and puts on the global streams directly</li>
  <li>Extract each global stream to a local variable at the top of the method</li>
  <li>Move the variable to a parameter and pass the value in from the caller</li>
</ul>

<p><strong>Exercise: Refactor the repl to use streams</strong></p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">repl</span><span class="p">(</span><span class="n">input_stream</span><span class="p">,</span> <span class="n">output_stream</span><span class="p">)</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="n">output_stream</span><span class="p">.</span><span class="nf">print</span> <span class="s2">"&gt; "</span>
    <span class="n">input</span>  <span class="o">=</span> <span class="n">input_stream</span><span class="p">.</span><span class="nf">gets</span><span class="p">()</span>
    <span class="n">result</span> <span class="o">=</span> <span class="nb">binding</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="n">output_stream</span><span class="p">.</span><span class="nf">puts</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">repl</span><span class="p">(</span><span class="vg">$stdin</span><span class="p">,</span> <span class="vg">$stdout</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="the-load_path">The <code class="highlighter-rouge">$LOAD_PATH</code></h2>

<p>When working with a project like as mastermind,
you‚Äôll have multiple files. This means code
will need to be able to require the ones it
depends on (you can think of ‚Äúdepends on‚Äù as meaning
‚Äúdoesn‚Äôt work without this‚Äù).</p>

<p>When you say <code class="highlighter-rouge">require "some_file"</code>, how does Ruby find that?
It looks for the file inside of a list of directories.
That list is stored in the array <code class="highlighter-rouge">$LOAD_PATH</code>
To be able to require your files without specifying the direct path to them,
you need to add the directory to the <code class="highlighter-rouge">$LOAD_PATH</code></p>

<p><strong>Exercise: Look at the load path</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pry
pry(main)&gt; $LOAD_PATH
=&gt; ["/Users/josh/.gem/ruby/2.1.1/gems/coderay-1.1.0/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/method_source-0.8.2/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/pry-0.10.1/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/slop-3.6.0/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/yard-0.8.7.4/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/pry-doc-0.6.0/lib",
 "/Users/josh/.gem/ruby/2.1.1/gems/pry-rails-0.3.2/lib",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/site_ruby/2.1.0",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/site_ruby/2.1.0/x86_64-darwin13.0",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/site_ruby",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/vendor_ruby/2.1.0",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/vendor_ruby/2.1.0/x86_64-darwin13.0",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/vendor_ruby",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/2.1.0",
 "/Users/josh/.rubies/ruby-2.1.1/lib/ruby/2.1.0/x86_64-darwin13.0"]
pry(main)&gt;
</code></pre></div></div>

<ul>
  <li>Finding the file and directory
    <ul>
      <li>In the latest versions of Ruby, we can use <code class="highlighter-rouge">__dir__</code> to refer to the current file‚Äôs directory</li>
      <li>In older versions, we had <code class="highlighter-rouge">__FILE__</code>, the path to the current file</li>
    </ul>
  </li>
  <li>We use <code class="highlighter-rouge">File.expand_path(path_to_file, directory_path_is_starting_at)</code> to get an absolute directory
    <ul>
      <li>This means it gives the path from the root of the file system</li>
      <li>If we don‚Äôt do this, it assumes the path is from wherever we‚Äôre sitting in the file system (known as the current working directory).
Which means that if we ran the same file, while we were in different directories, we would see different results</li>
      <li>Usually manifesting in it being unable to find the file</li>
    </ul>
  </li>
</ul>

<p><strong>Exercise: See <code class="highlighter-rouge">__FILE__</code>, <code class="highlighter-rouge">__dir__</code>, and <code class="highlighter-rouge">File.expand_path</code></strong></p>

<p>Make this file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"The dir:                   </span><span class="si">#{</span><span class="n">__dir__</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"The file:                  </span><span class="si">#{</span><span class="kp">__FILE__</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"The c relative to /a/b:    </span><span class="si">#{</span><span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s2">"c"</span><span class="p">,</span> <span class="s2">"/a/b"</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"The c relative to the dir: </span><span class="si">#{</span><span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s2">"c"</span><span class="p">,</span> <span class="n">__dir__</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<p>Now run it and analyze the output.</p>

<p><strong>Exercise: We can require files when the dir is in the load path</strong></p>

<p>Make these files:</p>

<p>f1.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"loaded f1!"</span>

<span class="nb">require</span> <span class="s1">'pp'</span>
<span class="n">pp</span> <span class="vg">$LOAD_PATH</span>

<span class="nb">require</span> <span class="s1">'f2'</span>
</code></pre></div></div>

<p>f2.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'loaded f2!'</span>
</code></pre></div></div>

<p>Run it, what do you see? Why did it break?</p>

<p>Now change f1.rb to be this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"loaded f1!"</span>

<span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">unshift</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'.'</span><span class="p">,</span> <span class="n">__dir__</span><span class="p">))</span>

<span class="nb">require</span> <span class="s1">'pp'</span>
<span class="n">pp</span> <span class="vg">$LOAD_PATH</span>

<span class="nb">require</span> <span class="s1">'f2'</span>
</code></pre></div></div>

<p>Run it, why did it work?</p>

<h2 id="numbermind">Numbermind</h2>

<p>Lets look at a bigger example, one that looks more like yours.
Clone https://github.com/turingschool-examples/numbermind</p>

<ul>
  <li>numbermind.rb
    <ul>
      <li>We enter the program at numbermind.rb</li>
      <li>This is the binary</li>
      <li>Its job is to wire up the world and kick things off</li>
      <li>It fixes the load path</li>
      <li>Requires the Cli</li>
      <li>Why does this work?</li>
      <li>What is a CLI? It is a Command Line Interface,
the code that presents us, calling it from the command-line,
with an interface to the game.</li>
      <li>What might an alternative interface be?</li>
      <li>It initializes the CLI with the standard inputs and outputs
(meaning ‚Äúread from the keyboard, write to the monitor)</li>
      <li>It invokes the CLI</li>
    </ul>
  </li>
  <li>cli.rb
    <ul>
      <li>Why doesn‚Äôt this file fix the load path?</li>
      <li>Why does it take the input stream and output stream?</li>
      <li>Why does it name the variable <code class="highlighter-rouge">instream</code> instead of <code class="highlighter-rouge">stdin</code>?</li>
      <li>What is <code class="highlighter-rouge">messages</code> for?</li>
      <li>Why does it print the message instead of having <code class="highlighter-rouge">messages</code> print it?</li>
      <li>Where is the ‚ÄúRead‚Äù portion of the REPL?</li>
      <li>Where is the ‚ÄúEval‚Äù portion of the REPL?</li>
      <li>Where is the ‚ÄúPrint‚Äù portion of the REPL?</li>
      <li>Where is the ‚ÄúLoop‚Äù portion of the REPL?</li>
      <li>Why does it have a <code class="highlighter-rouge">private</code> keyword there?</li>
      <li>Notice we can entirely see where game is used, and it has no knowledge of CLI.</li>
      <li>Game is a silo.</li>
      <li>Thinking back to the types of interfaces we might have, what‚Äôs one problem with Game?
We aren‚Äôt even inside it, and we can see this.</li>
      <li>How might we refactor that?</li>
    </ul>
  </li>
</ul>

<h2 id="wrapup">Wrapup</h2>

<p>Recap. Take the Quiz.</p>
:ET