I"ˆ!<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Be able to open and read the contents of a text file on the file system</li>
  <li>Understand the difference between a file and a file handle</li>
  <li>Understand how the cursor works in a file</li>
  <li>Be able to use the <code class="highlighter-rouge">File</code> class to open a handle and read/write contents</li>
  <li>Be able to use the <code class="highlighter-rouge">CSV</code> class to open a handle and read/write contents</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - Warmup</li>
  <li>15 - Understanding Terms</li>
  <li>20 - Exercising Raw Files</li>
  <li>5 - Progress Checks &amp; Questions</li>
  <li>10 - CSV in the Raw</li>
  <li>10 - CSV How-To</li>
  <li>20 - Creating CSVs</li>
</ul>

<h2 id="lesson">Lesson</h2>

<h3 id="warmup">Warmup</h3>

<p>Spend 5 minutes answering the following questions:</p>

<ol>
  <li>Why would you want to read files, especially text files, from Ruby?</li>
  <li>What‚Äôs the difference between a (regular, real-world) door and a door handle?
How are their jobs related but different?</li>
  <li>What are CSVs and why are they particularly common for moving data around?</li>
</ol>

<h3 id="understanding-terms--concepts">Understanding Terms &amp; Concepts</h3>

<p>Let‚Äôs spend 15 minutes discussing a few key concepts together:</p>

<ul>
  <li>Opening a file handle</li>
  <li>Read/Write mode</li>
  <li>Moving the cursor</li>
  <li>Reading the entire contents ‚Äì which might be a terrible idea</li>
  <li>Reading line by line</li>
  <li>Writing a line</li>
  <li>Closing a handle</li>
</ul>

<h3 id="exercising-raw-files">Exercising Raw Files</h3>

<p>Write a program which, when executed, creates a file named ‚Äúfib.txt‚Äù. In that
file output the first 30 numbers of the Fibonacci sequence, three numbers per line.
It‚Äôd start like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0, 1, 1,
2, 3, 5,
8, 13, 21,
34, 55, 89,
</code></pre></div></div>

<p>Then, write a second program which reads the <code class="highlighter-rouge">fib.txt</code> and outputs the lines
in the same top-to-bottom order but reversed left-to-right like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1, 1, 0,
5, 3, 2,
21, 13, 8,
89, 55, 34,
</code></pre></div></div>

<h4 id="raw-file-io-notes">Raw File I/O Notes</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Opening a Read Handle
handle = File.open("filename.txt", "r")

# Reading a whole file
handle.read

# Rewind back to the beginning
handle.rewind

# Read a single line
handle.readline

# Read a collection (array) of lines
handle.readlines

# Read one line at a time with a block
handle.each_line do |line|
  puts "A line: #{line}"
end

# Opening a Write Handle
writer = File.open("output.txt", "w")

# Write a line
writer.write("My text.\n")

# Flush output but keep the handle open
writer.flush

# Close the handle and flush
writer.close
</code></pre></div></div>

<h3 id="working-with-csvs">Working with CSVs</h3>

<h4 id="in-the-raw">In the Raw</h4>

<p>Let‚Äôs start CSVs by <em>not</em> using the CSV library. Work on this for 10 minutes:</p>

<ul>
  <li>Get <a href="https://raw.githubusercontent.com/turingschool-examples/sales_engine/master/data/customers.csv">customers.csv</a></li>
  <li>Write a program that‚Äôs able to open this file and prints all rows where the
customer last name starts with an <code class="highlighter-rouge">N</code></li>
</ul>

<h4 id="csv-how-to">CSV How-To</h4>

<ul>
  <li>CSVs are specialized text files</li>
  <li>You don‚Äôt have to use the CSV library at all, but you should</li>
  <li>CSVs typically have <em>headers</em></li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'customers.csv'</span><span class="p">)</span>
<span class="n">csv</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'customers.csv'</span><span class="p">,</span> <span class="ss">headers: </span><span class="kp">true</span><span class="p">)</span>
<span class="n">csv</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">row</span><span class="p">[</span><span class="s2">"last_name"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="s1">'customers.csv'</span><span class="p">,</span> <span class="ss">headers: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">header_converters: :symbol</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">row</span><span class="p">[</span><span class="ss">:last_name</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">CSV</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'newfile.csv'</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
  <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="s2">"a string"</span><span class="p">,</span> <span class="s2">"another string"</span><span class="p">]</span>  
<span class="k">end</span>  
</code></pre></div></div>

<h4 id="creating-csvs">Creating CSVs</h4>

<p>Finally, write a program which can load the <code class="highlighter-rouge">customers.csv</code> and outputs
26 new files: each containing the customers with a shared first letter of their last name. So you‚Äôll output <code class="highlighter-rouge">customers_a.csv</code>, <code class="highlighter-rouge">customers_b.csv</code>, etc.</p>

<h4 id="sample-output-from-csv-varieties">Sample Output From CSV Varieties</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Raw file I/O:

  "id,first_name,last_name,created_at,updated_at\n"
  "1,Joey,Ondricka,2012-03-27 14:54:09 UTC,2012-03-27 14:54:09 UTC\n"
  "2,Cecelia,Osinski,2012-03-27 14:54:10 UTC,2012-03-27 14:54:10 UTC\n"
  "3,Mariah,Toy,2012-03-27 14:54:10 UTC,2012-03-27 14:54:10 UTC\n"

CSV file I/O:

  ["1", "Joey", "Ondricka", "2012-03-27 14:54:09 UTC", "2012-03-27 14:54:09 UTC"]
  ["2", "Cecelia", "Osinski", "2012-03-27 14:54:10 UTC", "2012-03-27 14:54:10 UTC"]
  ["3", "Mariah", "Toy", "2012-03-27 14:54:10 UTC", "2012-03-27 14:54:10 UTC"]

CSV file with Headers:

  #&lt;CSV::Row "id":"1" "first_name":"Joey" "last_name":"Ondricka" "created_at":"2012-03-27 14:54:09 UTC" "updated_at":"2012-03-27 14:54:09 UTC"&gt;
  #&lt;CSV::Row "id":"2" "first_name":"Cecelia" "last_name":"Osinski" "created_at":"2012-03-27 14:54:10 UTC" "updated_at":"2012-03-27 14:54:10 UTC"&gt;
  #&lt;CSV::Row "id":"3" "first_name":"Mariah" "last_name":"Toy" "created_at":"2012-03-27 14:54:10 UTC" "updated_at":"2012-03-27 14:54:10 UTC"&gt;

CSV file with headers and symbol keys:

  #&lt;CSV::Row id:"1" first_name:"Joey" last_name:"Ondricka" created_at:"2012-03-27 14:54:09 UTC" updated_at:"2012-03-27 14:54:09 UTC"&gt;
  #&lt;CSV::Row id:"2" first_name:"Cecelia" last_name:"Osinski" created_at:"2012-03-27 14:54:10 UTC" updated_at:"2012-03-27 14:54:10 UTC"&gt;
  #&lt;CSV::Row id:"3" first_name:"Mariah" last_name:"Toy" created_at:"2012-03-27 14:54:10 UTC" updated_at:"2012-03-27 14:54:10 UTC"&gt;
</code></pre></div></div>
:ET