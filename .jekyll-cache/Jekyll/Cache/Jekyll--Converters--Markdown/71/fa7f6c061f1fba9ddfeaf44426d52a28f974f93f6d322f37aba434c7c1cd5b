I"ïU<h3 id="goals">Goals</h3>

<p>By the end of this lesson, you will know/be able to:</p>

<ul>
  <li>configure Sinatra using the <code class="highlighter-rouge">set</code> method</li>
  <li>explain the purpose of a model test</li>
  <li>test model functionality in a Sinatra app using RSpec</li>
  <li>explain the differences between a development environment and test environment</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>Code-along</li>
</ul>

<h3 id="video">Video</h3>

<p>None yet.</p>

<h3 id="repository">Repository</h3>

<ul>
  <li><a href="https://github.com/s-espinosa/task_manager_redux/tree/crud-lesson-complete">Task Manager: CRUD Lesson Complete</a>: This branch is the result of completing the Task Manager Tutorial included in the readme of that repo and the <a href="https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/outlines/crud_sinatra.markdown">CRUD lesson</a>. At this point, following the sequence of lesson plans, students should have their own copy of Task Manager, and should not have to clone this down.</li>
</ul>

<p>To clone and checkout the remote <code class="highlighter-rouge">crud-lesson-complete</code> branch:</p>

<p><code class="highlighter-rouge">git clone -b crud-lesson-complete git@github.com:s-espinosa/task_manager_redux.git model_testing</code></p>

<h2 id="code-along">Code-Along</h2>

<h3 id="restructuring-our-files">Restructuring our Files</h3>

<p>Weâ€™re going to restructure our files in order to require all of the necessary pieces in one place â€“ a environment file. It is not necessary to memorize any of this section, but itâ€™s important to know what itâ€™s doing.</p>

<p>Make a <code class="highlighter-rouge">config/environment.rb</code> and add the following code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'bundler'</span>
<span class="no">Bundler</span><span class="p">.</span><span class="nf">require</span>

<span class="c1"># get the path of the root of the app</span>
<span class="no">APP_ROOT</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s2">".."</span><span class="p">,</span> <span class="n">__dir__</span><span class="p">)</span>

<span class="c1"># require the controller(s)</span>
<span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">APP_ROOT</span><span class="p">,</span> <span class="s1">'app'</span><span class="p">,</span> <span class="s1">'controllers'</span><span class="p">,</span> <span class="s1">'*.rb'</span><span class="p">)).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="nb">require</span> <span class="n">file</span> <span class="p">}</span>

<span class="c1"># require the model(s)</span>
<span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">APP_ROOT</span><span class="p">,</span> <span class="s1">'app'</span><span class="p">,</span> <span class="s1">'models'</span><span class="p">,</span> <span class="s1">'*.rb'</span><span class="p">)).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="nb">require</span> <span class="n">file</span> <span class="p">}</span>

<span class="c1"># configure TaskManagerApp settings</span>
<span class="k">class</span> <span class="nc">TaskManagerApp</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">set</span> <span class="ss">:method_override</span><span class="p">,</span> <span class="kp">true</span>
  <span class="n">set</span> <span class="ss">:root</span><span class="p">,</span> <span class="no">APP_ROOT</span>
  <span class="n">set</span> <span class="ss">:views</span><span class="p">,</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">APP_ROOT</span><span class="p">,</span> <span class="s1">'app'</span><span class="p">,</span> <span class="s1">'views'</span><span class="p">)</span>
  <span class="n">set</span> <span class="ss">:public_folder</span><span class="p">,</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">APP_ROOT</span><span class="p">,</span> <span class="s1">'app'</span><span class="p">,</span> <span class="s1">'public'</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>(Curious about <a href="http://www.sinatrarb.com/intro.html#Available%20Settings">other things you can set</a> in Sinatra?)</p>

<p>In <code class="highlighter-rouge">config.ru</code>, we can now just require our environment:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../config/environment'</span><span class="p">,</span>  <span class="kp">__FILE__</span><span class="p">)</span>

<span class="n">run</span> <span class="no">TaskManagerApp</span>
</code></pre></div></div>

<p>Remove any old configuration settings inside of your controller.</p>

<p>Remove any <code class="highlighter-rouge">require</code> or <code class="highlighter-rouge">require_relative</code> statements in your controller and/or models except for <code class="highlighter-rouge">require 'sqlite3'</code> in Task. Our <code class="highlighter-rouge">environment.rb</code> file now requires all of our controllers, models, and views for us.</p>

<h3 id="setting-up-model-tests">Setting up Model Tests</h3>

<p>Add the following lines to your <code class="highlighter-rouge">Gemfile</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'rspec'</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">bundle</code>.</p>

<h3 id="file-structure">File structure</h3>

<p>Weâ€™ll create a spec folder. Within that folder, weâ€™ll create another folder called models. This way we can separate our model tests from our integration tests (more on this later).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir spec
$ touch spec/spec_helper.rb
$ mkdir spec/models
$ touch spec/models/task_spec.rb
</code></pre></div></div>

<p>In <code class="highlighter-rouge">spec/spec_helper.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rspec'</span>
<span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../../config/environment.rb'</span><span class="p">,</span> <span class="kp">__FILE__</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="testing-the-new-method">Testing the â€˜newâ€™ Method</h3>

<p>Letâ€™s write our first model test. In <code class="highlighter-rouge">spec/models/task_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s1">'../spec_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"Test"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'assigns attributes correctly'</span> <span class="k">do</span>
    <span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span><span class="s2">"title"</span>       <span class="o">=&gt;</span> <span class="s2">"a title"</span><span class="p">,</span>
                     <span class="s2">"description"</span> <span class="o">=&gt;</span> <span class="s2">"a description"</span>
                    <span class="p">})</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">.</span><span class="nf">title</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"a title"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">.</span><span class="nf">description</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"a description"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>At this point you should be able to run your tests from the command line using the command <code class="highlighter-rouge">rspec</code>. <code class="highlighter-rouge">rspec</code> will also take some flags to change the output. For a full list run <code class="highlighter-rouge">rspec --help | less</code>. For example, run <code class="highlighter-rouge">rspec -c -f d</code> to see how the output differs. If you find yourself consistently using flags you can save them to a <code class="highlighter-rouge">.rspec</code> file in your home directory. See <a href="http://stackoverflow.com/questions/1819614/how-do-i-globally-configure-rspec-to-keep-the-color-and-format-specdoc-o">this</a> Stack Overflow answer for additional details.</p>

<h3 id="testing-the-database-connection">Testing the Database Connection</h3>

<p>You may have noticed that when we tested the <code class="highlighter-rouge">new</code> method we were not checking to see if the task we were creating was saved to our database. In order to run that test, we would need to also test our <code class="highlighter-rouge">save</code> method. Letâ€™s add that now.</p>

<p>In our <code class="highlighter-rouge">/spec/models/task_spec.rb</code> file, add the following within the RSpec <code class="highlighter-rouge">describe</code> block:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">describe</span> <span class="s1">'#save'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'saves a task to the database'</span> <span class="k">do</span>
      <span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span><span class="s2">"title"</span>       <span class="o">=&gt;</span> <span class="s2">"a title"</span><span class="p">,</span>
                       <span class="s2">"description"</span> <span class="o">=&gt;</span> <span class="s2">"a description"</span>
                      <span class="p">})</span>
      <span class="n">task</span><span class="p">.</span><span class="nf">save</span>

      <span class="n">task_from_db</span> <span class="o">=</span> <span class="no">Task</span><span class="p">.</span><span class="nf">all</span><span class="p">.</span><span class="nf">last</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">task_from_db</span><span class="p">.</span><span class="nf">title</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"a title"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">task_from_db</span><span class="p">.</span><span class="nf">description</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"a descripiton"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rspec</code> again and you should now have two passing tests. Great!</p>

<p>Run <code class="highlighter-rouge">shotgun</code> and letâ€™s check to see how our application is looking. In particular, navigate to <code class="highlighter-rouge">/tasks</code>. Do you see the new task thatâ€™s there? Where did that come from? What happens if we run our test suite again and then refresh the page?</p>

<p>This is not the behaviour we want. Weâ€™re saving new data to our database every time we run our test suite and thatâ€™s polluting the database that weâ€™re using when we browse the site locally as a user. Wouldnâ€™t it be better if we could run our test suite without making these changes?</p>

<p>Weâ€™re going to set an environment variable in our spec helper file and then use that variable to determine which database to use. In <code class="highlighter-rouge">spec_helper.rb</code> add the following after all the <code class="highlighter-rouge">require</code> lines:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'test'</span>
</code></pre></div></div>

<p>Now, in order to make sure that we are using a different database depending on whether or not this variable has been set, letâ€™s edit the lines in our Task class where we actually access the database. In the <code class="highlighter-rouge">initialize</code> method, replace the single <code class="highlighter-rouge">@database</code> assignment line with the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'test'</span>
    <span class="vi">@database</span> <span class="o">=</span> <span class="no">SQLite3</span><span class="o">::</span><span class="no">Database</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'db/task_manager_test.rb'</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="vi">@database</span> <span class="o">=</span> <span class="no">SQLite3</span><span class="o">::</span><span class="no">Database</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'db/task_manager_development.rb'</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>And in the <code class="highlighter-rouge">database</code> class method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'test'</span>
    <span class="n">database</span> <span class="o">=</span> <span class="no">SQLite3</span><span class="o">::</span><span class="no">Database</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'db/task_manager_test.db'</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">database</span> <span class="o">=</span> <span class="no">SQLite3</span><span class="o">::</span><span class="no">Database</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'db/task_manager_development.db'</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>If we run <code class="highlighter-rouge">rspec</code> at this point, weâ€™ve gone back to an error. Specifically, the error says <code class="highlighter-rouge">no such table: tasks</code>. Whatâ€™s happening here? If we check our <code class="highlighter-rouge">db</code> folder, we do now have a <code class="highlighter-rouge">task_manager_test</code> database file, but our test is telling us that the proper table hasnâ€™t been created in it. If we want to create this table weâ€™ll have to create a migration to add it to our test database.</p>

<p>Run <code class="highlighter-rouge">cp db/migrations/001/create_tasks.rb db/migrations/002_create_tasks_test.rb</code> and edit the newly created file to reference your test database. When youâ€™re done it should look something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'sqlite3'</span>

<span class="n">database</span> <span class="o">=</span> <span class="no">SQLite3</span><span class="o">::</span><span class="no">Database</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"db/task_manager_test.db"</span><span class="p">)</span>
<span class="n">database</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="s2">"CREATE TABLE tasks (id INTEGER PRIMARY KEY AUTOINCREMENT,
                                      title VARCHAR(64),
                                      description VARCHAR (64)
                                     );"</span>
                <span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"creating tasks table for test"</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">ruby db/migrations/002_create_tasks_test.rb</code>, and then try to run <code class="highlighter-rouge">rspec</code> again. At this point, you should again have two passing tests.</p>

<p>Run <code class="highlighter-rouge">shotgun</code> and you should be able to load <code class="highlighter-rouge">/tasks</code> to see that running our test suite now isnâ€™t adding any tasks to our development database.</p>

<h3 id="meanwhile-in-our-test-database">Meanwhile, In Our Test Database</h3>

<p>Weâ€™ve taken the tasks that our test suite generates out of our development database, but they certainly didnâ€™t just vanish into the ether. Iâ€™d love to tell you that we can just sweep our test database under the rug and pretend itâ€™s not growing into a nasty mess, but thatâ€™s not the case.</p>

<p>Put a <code class="highlighter-rouge">require 'pry'; binding.pry</code> into either of the <code class="highlighter-rouge">it</code> blocks in your test suite, and you should be able to run <code class="highlighter-rouge">Task.all</code> to see the trail of tasks weâ€™re leaving in our wake. Letâ€™s try to tidy this up a bit.</p>

<p>In our <code class="highlighter-rouge">spec_helper.rb</code> file, add the following RSpec configuration:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
  <span class="n">c</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Task</span><span class="p">.</span><span class="nf">destroy_all</span>
  <span class="k">end</span>
  <span class="n">c</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Task</span><span class="p">.</span><span class="nf">destroy_all</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This wonâ€™t do us any good until we add that <code class="highlighter-rouge">destroy_all</code> method that weâ€™re planning on using to our <code class="highlighter-rouge">Task</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">destroy_all</span>
    <span class="n">database</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="s2">"DELETE FROM tasks;"</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rspec</code> to check to see that your tests are still passing. If youâ€™d like, you can add <code class="highlighter-rouge">pry</code> back into one of your test files to see if your database is actually getting cleared out. If so, youâ€™re in good shape.</p>

<h3 id="worktime">Worktime</h3>

<ul>
  <li>In pairs, add tests for <code class="highlighter-rouge">all</code>, <code class="highlighter-rouge">find</code>, <code class="highlighter-rouge">update</code>, and <code class="highlighter-rouge">delete</code> in the Task class. If you get stuck, checkout the <code class="highlighter-rouge">model_testing_complete</code> branch for the answers. This is intended to help you if youâ€™ve exhausted all your other resources!</li>
  <li>Add model tests for RobotWorld (this is homework)</li>
</ul>

<h3 id="extensions">Extensions</h3>

<ul>
  <li>None yet.</li>
</ul>

<h3 id="other-resources">Other Resources:</h3>

<ul>
  <li><a href="http://rspec.info/documentation/">RSpec Documentation</a>: For now youâ€™ll likely be most interested in the <code class="highlighter-rouge">rspec-core</code>, and <code class="highlighter-rouge">rspec-expectations</code> links.</li>
</ul>
:ET