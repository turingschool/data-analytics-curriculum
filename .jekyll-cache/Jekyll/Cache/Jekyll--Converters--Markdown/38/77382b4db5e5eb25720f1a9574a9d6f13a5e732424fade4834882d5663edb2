I"€F<h1 id="i3-item-sales">I3: Item Sales</h1>

<p>Weâ€™ve got a good foundation, now itâ€™s time to actually track the sale of items. There are three new data files to mix into the system, so for this iteration weâ€™ll focus primarily on DAL with just a bit of Business Intelligence.</p>

<h2 id="data-access-layer">Data Access Layer</h2>

<h3 id="invoiceitemrepository"><code class="highlighter-rouge">InvoiceItemRepository</code></h3>

<p>Invoice items are how invoices are connected to items. A single invoice item connects a single item with a single invoice.</p>

<p>The <code class="highlighter-rouge">InvoiceItemRepository</code> is responsible for holding and searching our <code class="highlighter-rouge">InvoiceItem</code>
instances. It offers the following methods:</p>

<ul>
  <li><code class="highlighter-rouge">all</code> - returns an array of all known <code class="highlighter-rouge">InvoiceItem</code> instances</li>
  <li><code class="highlighter-rouge">find_by_id</code> - returns either <code class="highlighter-rouge">nil</code> or an instance of <code class="highlighter-rouge">InvoiceItem</code> with a matching ID</li>
  <li><code class="highlighter-rouge">find_all_by_item_id</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a matching item ID</li>
  <li><code class="highlighter-rouge">find_all_by_invoice_id</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a matching invoice ID</li>
  <li><code class="highlighter-rouge">create(attributes)</code> - create a new <code class="highlighter-rouge">InvoiceItem</code> instance with the provided <code class="highlighter-rouge">attributes</code>. The new <code class="highlighter-rouge">InvoiceItem</code>â€™s id should be the current highest <code class="highlighter-rouge">InvoiceItem</code> id plus 1.</li>
  <li><code class="highlighter-rouge">update(id, attribute)</code> - update the <code class="highlighter-rouge">InvoiceItem</code> instance with the corresponding <code class="highlighter-rouge">id</code> with the provided <code class="highlighter-rouge">attributes</code>. Only the invoice_itemâ€™s <code class="highlighter-rouge">quantity</code> and <code class="highlighter-rouge">unit_price</code> can be updated. This method will also change the invoice_itemâ€™s <code class="highlighter-rouge">updated_at</code> attribute to the current time.</li>
  <li><code class="highlighter-rouge">delete(id)</code> - delete the <code class="highlighter-rouge">InvoiceItem</code> instance with the corresponding <code class="highlighter-rouge">id</code></li>
</ul>

<p>The data can be found in <code class="highlighter-rouge">data/invoice_items.csv</code> so the instance is created and used like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_engine</span> <span class="o">=</span> <span class="no">SalesEngine</span><span class="p">.</span><span class="nf">from_csv</span><span class="p">(</span><span class="ss">:invoice_items</span> <span class="o">=&gt;</span> <span class="s2">"./data/invoice_items.csv"</span><span class="p">)</span>
<span class="n">invoice_item</span> <span class="o">=</span> <span class="n">sales_engine</span><span class="p">.</span><span class="nf">invoice_items</span><span class="p">.</span><span class="nf">find_by_id</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="c1"># =&gt; &lt;InvoiceItem&gt;</span>
</code></pre></div></div>

<h3 id="invoiceitem"><code class="highlighter-rouge">InvoiceItem</code></h3>

<p>The invoice item has the following data accessible:</p>

<ul>
  <li><code class="highlighter-rouge">id</code> - returns the integer id</li>
  <li><code class="highlighter-rouge">item_id</code> - returns the item id</li>
  <li><code class="highlighter-rouge">invoice_id</code> - returns the invoice id</li>
  <li><code class="highlighter-rouge">quantity</code> - returns the quantity</li>
  <li><code class="highlighter-rouge">unit_price</code> - returns the unit_price</li>
  <li><code class="highlighter-rouge">created_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the invoice item was first created</li>
  <li><code class="highlighter-rouge">updated_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the invoice item was last modified</li>
</ul>

<p>It also offers the following method:</p>

<ul>
  <li><code class="highlighter-rouge">unit_price_to_dollars</code> - returns the price of the invoice item in dollars formatted as a <code class="highlighter-rouge">Float</code></li>
</ul>

<p>We create an instance like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ii</span> <span class="o">=</span> <span class="no">InvoiceItem</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span>
  <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span>
  <span class="ss">:item_id</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span>
  <span class="ss">:invoice_id</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span>
  <span class="ss">:quantity</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">:unit_price</span> <span class="o">=&gt;</span> <span class="no">BigDecimal</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mf">10.99</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
  <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span>
  <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="transactionrepository"><code class="highlighter-rouge">TransactionRepository</code></h3>

<p>Transactions are billing records for an invoice. An invoice can have multiple transactions, but should have at most one that is successful.</p>

<p>The <code class="highlighter-rouge">TransactionRepository</code> is responsible for holding and searching our <code class="highlighter-rouge">Transaction</code>
instances. It offers the following methods:</p>

<ul>
  <li><code class="highlighter-rouge">all</code> - returns an array of all known <code class="highlighter-rouge">Transaction</code> instances</li>
  <li><code class="highlighter-rouge">find_by_id</code> - returns either <code class="highlighter-rouge">nil</code> or an instance of <code class="highlighter-rouge">Transaction</code> with a matching ID</li>
  <li><code class="highlighter-rouge">find_all_by_invoice_id</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a matching invoice ID</li>
  <li><code class="highlighter-rouge">find_all_by_credit_card_number</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a matching credit card number</li>
  <li><code class="highlighter-rouge">find_all_by_result</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a matching status</li>
  <li><code class="highlighter-rouge">create(attributes)</code> - create a new <code class="highlighter-rouge">Transaction</code> instance with the provided <code class="highlighter-rouge">attributes</code>. The new <code class="highlighter-rouge">Transaction</code>â€™s id should be the current highest <code class="highlighter-rouge">Transaction</code> id plus 1.</li>
  <li><code class="highlighter-rouge">update(id, attribute)</code> - update the <code class="highlighter-rouge">Transaction</code> instance with the corresponding <code class="highlighter-rouge">id</code> with the provided <code class="highlighter-rouge">attributes</code>. Only the transactionâ€™s <code class="highlighter-rouge">credit_card_number</code>, <code class="highlighter-rouge">credit_card_expiration_date</code>, and <code class="highlighter-rouge">result</code> can be updated. This method will also change the transactionâ€™s <code class="highlighter-rouge">updated_at</code> attribute to the current time.</li>
  <li><code class="highlighter-rouge">delete(id)</code> - delete the <code class="highlighter-rouge">Transaction</code> instance with the corresponding <code class="highlighter-rouge">id</code></li>
</ul>

<p>The data can be found in <code class="highlighter-rouge">data/transactions.csv</code> so the instance is created and used like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_engine</span> <span class="o">=</span> <span class="no">SalesEngine</span><span class="p">.</span><span class="nf">from_csv</span><span class="p">(</span><span class="ss">:transactions</span> <span class="o">=&gt;</span> <span class="s2">"./data/transactions.csv"</span><span class="p">)</span>
<span class="n">transaction</span> <span class="o">=</span> <span class="n">sales_engine</span><span class="p">.</span><span class="nf">transactions</span><span class="p">.</span><span class="nf">find_by_id</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="c1"># =&gt; &lt;Transaction&gt;</span>
</code></pre></div></div>

<h3 id="transaction"><code class="highlighter-rouge">Transaction</code></h3>

<p>The transaction has the following data accessible:</p>

<ul>
  <li><code class="highlighter-rouge">id</code> - returns the integer id</li>
  <li><code class="highlighter-rouge">invoice_id</code> - returns the invoice id</li>
  <li><code class="highlighter-rouge">credit_card_number</code> - returns the credit card number</li>
  <li><code class="highlighter-rouge">credit_card_expiration_date</code> - returns the credit card expiration date</li>
  <li><code class="highlighter-rouge">result</code> - the transaction result</li>
  <li><code class="highlighter-rouge">created_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the transaction was first created</li>
  <li><code class="highlighter-rouge">updated_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the transaction was last modified</li>
</ul>

<p>We create an instance like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="no">Transaction</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span>
  <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span>
  <span class="ss">:invoice_id</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span>
  <span class="ss">:credit_card_number</span> <span class="o">=&gt;</span> <span class="s2">"4242424242424242"</span><span class="p">,</span>
  <span class="ss">:credit_card_expiration_date</span> <span class="o">=&gt;</span> <span class="s2">"0220"</span><span class="p">,</span>
  <span class="ss">:result</span> <span class="o">=&gt;</span> <span class="s2">"success"</span><span class="p">,</span>
  <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span>
  <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="customerrepository"><code class="highlighter-rouge">CustomerRepository</code></h3>

<p>Customers represent a person whoâ€™s made one or more purchases in our system.</p>

<p>The <code class="highlighter-rouge">CustomerRepository</code> is responsible for holding and searching our <code class="highlighter-rouge">Customers</code>
instances. It offers the following methods:</p>

<ul>
  <li><code class="highlighter-rouge">all</code> - returns an array of all known <code class="highlighter-rouge">Customers</code> instances</li>
  <li><code class="highlighter-rouge">find_by_id</code> - returns either <code class="highlighter-rouge">nil</code> or an instance of <code class="highlighter-rouge">Customer</code> with a matching ID</li>
  <li><code class="highlighter-rouge">find_all_by_first_name</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a first name matching the substring fragment supplied</li>
  <li><code class="highlighter-rouge">find_all_by_last_name</code> - returns either <code class="highlighter-rouge">[]</code> or one or more matches which have a last name matching the substring fragment supplied</li>
  <li><code class="highlighter-rouge">create(attributes)</code> - create a new <code class="highlighter-rouge">Customer</code> instance with the provided <code class="highlighter-rouge">attributes</code>. The new <code class="highlighter-rouge">Customer</code>â€™s id should be the current highest <code class="highlighter-rouge">Customer</code> id plus 1.</li>
  <li><code class="highlighter-rouge">update(id, attribute)</code> - update the <code class="highlighter-rouge">Customer</code> instance with the corresponding <code class="highlighter-rouge">id</code> with the provided <code class="highlighter-rouge">attributes</code>. Only the customerâ€™s <code class="highlighter-rouge">first_name</code> and <code class="highlighter-rouge">last_name</code> can be updated. This method will also change the customerâ€™s <code class="highlighter-rouge">updated_at</code> attribute to the current time.</li>
  <li><code class="highlighter-rouge">delete(id)</code> - delete the <code class="highlighter-rouge">Customer</code> instance with the corresponding <code class="highlighter-rouge">id</code></li>
</ul>

<p>The data can be found in <code class="highlighter-rouge">data/customers.csv</code> so the instance is created and used like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_engine</span> <span class="o">=</span> <span class="no">SalesEngine</span><span class="p">.</span><span class="nf">from_csv</span><span class="p">(</span><span class="ss">:customers</span> <span class="o">=&gt;</span> <span class="s2">"./data/customers.csv"</span><span class="p">)</span>
<span class="n">customer</span> <span class="o">=</span> <span class="n">sales_engine</span><span class="p">.</span><span class="nf">customers</span><span class="p">.</span><span class="nf">find_by_id</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="c1"># =&gt; &lt;Customer&gt;</span>
</code></pre></div></div>

<h3 id="customer"><code class="highlighter-rouge">Customer</code></h3>

<p>The customer has the following data accessible:</p>

<ul>
  <li><code class="highlighter-rouge">id</code> - returns the integer id</li>
  <li><code class="highlighter-rouge">first_name</code> - returns the first name</li>
  <li><code class="highlighter-rouge">last_name</code> - returns the last name</li>
  <li><code class="highlighter-rouge">created_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the customer was first created</li>
  <li><code class="highlighter-rouge">updated_at</code> - returns a <code class="highlighter-rouge">Time</code> instance for the date the customer was last modified</li>
</ul>

<p>We create an instance like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="no">Customer</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span>
  <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span>
  <span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="s2">"Joan"</span><span class="p">,</span>
  <span class="ss">:last_name</span> <span class="o">=&gt;</span> <span class="s2">"Clarke"</span><span class="p">,</span>
  <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span>
  <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="business-intelligence">Business Intelligence</h2>

<p>Assuming we have a <code class="highlighter-rouge">sales_engine</code> thatâ€™s an instance of <code class="highlighter-rouge">SalesEngine</code> letâ€™s initialize a <code class="highlighter-rouge">SalesAnalyst</code> like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_analyst</span> <span class="o">=</span> <span class="n">sales_engine</span><span class="p">.</span><span class="nf">analyst</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">sales_analyst.invoice_paid_in_full?(invoice_id)</code> returns true if the <code class="highlighter-rouge">Invoice</code> with the corresponding id is paid in full</li>
  <li><code class="highlighter-rouge">sales_analyst.invoice_total(invoice_id)</code> returns the total $ amount of the <code class="highlighter-rouge">Invoice</code> with the corresponding id.</li>
</ul>

<p><strong>Notes:</strong></p>

<ul>
  <li>Failed charges should never be counted in revenue totals or statistics.</li>
  <li>An invoice is considered paid in full if it has a successful transaction</li>
</ul>
:ET