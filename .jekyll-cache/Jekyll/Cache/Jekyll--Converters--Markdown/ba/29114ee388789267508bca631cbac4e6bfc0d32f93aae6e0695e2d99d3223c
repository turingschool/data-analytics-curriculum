I"–!<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Write model tests for relationships</li>
  <li>Become familiar with the ShouldaMatchers gem</li>
  <li>Write model tests for class and instance methods</li>
</ul>

<h2 id="setup">Setup</h2>

<p>This lesson builds off of the <a href="./feature_testing">Feature Testing Lesson</a>. You can find the completed code from this lesson on the <code class="highlighter-rouge">feature_testing</code> branch of <a href="https://github.com/turingschool-examples/set_list/tree/feature_testing">this repo</a></p>

<h2 id="why-model-test">Why Model Test?</h2>

<p>As Backend developers, our job is to handle data. We need to add data, retrieve data, manipulate data, validate data, analyze data, etc. and we cannot afford to have any errors when handling data. Since our Models are the thing in our Rails apps that interact with the data, we write tests specifically for the models to ensure that we are handling data properly. These tests should fully cover all of the data logic in our application.</p>

<h2 id="shouldamatchers">Shouldamatchers</h2>

<p>Weâ€™re going to use the handy dandy gem <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> to give us some streamlined syntax to use in testing our validations and relationships.</p>

<ul>
  <li>Add <code class="highlighter-rouge">gem 'shoulda-matchers', '~&gt; 3.1'</code> to <code class="highlighter-rouge">group :development, :test</code> in your <code class="highlighter-rouge">Gemfile</code></li>
  <li>run <code class="highlighter-rouge">bundle install</code></li>
  <li>Put the following in <code class="highlighter-rouge">rails_helper.rb</code>:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Shoulda</span><span class="o">::</span><span class="no">Matchers</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
 <span class="n">config</span><span class="p">.</span><span class="nf">integrate</span> <span class="k">do</span> <span class="o">|</span><span class="n">with</span><span class="o">|</span>
   <span class="n">with</span><span class="p">.</span><span class="nf">test_framework</span> <span class="ss">:rspec</span>
   <span class="n">with</span><span class="p">.</span><span class="nf">library</span> <span class="ss">:rails</span>
 <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="testing-relationships">Testing Relationships</h2>

<p>The first thing we are going to test is our Model Relationships. Letâ€™s start by creating a test file for the Song class:</p>

<p><code class="highlighter-rouge">mkdir spec/models</code><br />
<code class="highlighter-rouge">touch spec/models/artist_spec.rb</code></p>

<p>It is important that these folders are named <code class="highlighter-rouge">spec</code> and <code class="highlighter-rouge">models</code>, respectively.</p>

<p>In our new test file, add the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="no">Artist</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>

<span class="k">end</span>
</code></pre></div></div>

<p>This is the basic set up for any model test. <code class="highlighter-rouge">describe Artist</code> tells our test that we are testing the Artist class. <code class="highlighter-rouge">type: :model</code> tells our test that it is a model test. You can optionally leave this out since our test will recognize that it is a model test because it is defined inside <code class="highlighter-rouge">spec/models</code>. Yes, the name of the folders and files will affect how your tests run.</p>

<p>Inside our model test, letâ€™s add a section for relationship tests, as well as a test for the Song relationship:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="no">Artist</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'relationships'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span> <span class="ss">:songs</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This test is taking advantage of the Shouldamatchers syntax for testing relationships.</p>

<h2 id="testing-methods">Testing Methods</h2>

<p>We also need to test any methods that we create on our models. Letâ€™s add a test for our <code class="highlighter-rouge">average_song_length</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="no">Artist</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'relationships'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span> <span class="ss">:songs</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s1">'instance methods'</span> <span class="k">do</span>
    <span class="n">describe</span> <span class="s1">'#average_song_length'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'returns the average song length'</span> <span class="k">do</span>
        <span class="n">talking_heads</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Talking Heads'</span><span class="p">)</span>
        <span class="n">she_was</span> <span class="o">=</span> <span class="n">talking_heads</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'And She Was'</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">234</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">34</span><span class="p">)</span>
        <span class="n">wild_life</span> <span class="o">=</span> <span class="n">talking_heads</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'Wild Wild Life'</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">456</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">45</span><span class="p">)</span>

        <span class="n">expect</span><span class="p">(</span><span class="n">talking_heads</span><span class="p">.</span><span class="nf">average_song_length</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">345</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Additionally, we said early that our model tests should <strong>fully</strong> cover our models. This means that it would be a good idea to also test for some edge cases.</p>

<h2 id="practice">Practice</h2>

<ul>
  <li>Add a test for the <code class="highlighter-rouge">average_song_length</code> method that ensures that this method works when the result is not a whole number</li>
  <li>Add a test for the <code class="highlighter-rouge">average_song_length</code> method that checks what value should be returned when an artist has no songs</li>
  <li>Create a Song model test that includes a test for the relationship to an Artist</li>
  <li>Create a test for a method on the Song model that finds the number of songs above a given threshold for play_count</li>
  <li>Write a test that finds the two shortest songs by length</li>
</ul>
:ET