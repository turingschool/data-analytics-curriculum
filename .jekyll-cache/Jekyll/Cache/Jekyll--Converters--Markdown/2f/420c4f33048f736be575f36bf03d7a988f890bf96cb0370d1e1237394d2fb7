I"ßÁ<p>In this tutorial, we‚Äôll be building a little, real-time application using WebSockets. The application is called ‚ÄúAsk the Audience‚Äù. Basically, an instructor or someone else can pose a question to the class and the class can vote from one of four options.</p>

<h2 id="getting-your-new-project-off-the-ground">Getting Your New Project Off the Ground</h2>

<p>First things first, let‚Äôs make a new directory for our project and <code class="highlighter-rouge">cd</code> into it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>ask-the-audience <span class="o">&amp;&amp;</span> <span class="nb">cd </span>ask-the-audience
</code></pre></div></div>

<p>Let‚Äôs make a new file for our server and a directory and empty files for our for our static assets.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>server.js
<span class="nb">mkdir </span>public
<span class="nb">touch </span>public/index.html public/client.js public/style.css
</code></pre></div></div>

<p>Next, we‚Äôll run <code class="highlighter-rouge">npm init</code> to bootstrap a <code class="highlighter-rouge">package.json</code> and <code class="highlighter-rouge">git init</code> to get a git repository rocking and rolling. Set <code class="highlighter-rouge">server.js</code> as the ‚Äúmain‚Äù file when it asks you.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
npm init
</code></pre></div></div>

<p>Let‚Äôs also install some dependencies.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save</span> express socket.io lodash
</code></pre></div></div>

<p>You‚Äôre ready to get started.</p>

<h2 id="setting-up-your-server">Setting Up Your Server</h2>

<p>We‚Äôll be using Express to create a simple web server.
It will have three main jobs:</p>

<ol>
  <li>Serve static assets</li>
  <li>Host our incoming Socket.io <code class="highlighter-rouge">ws://</code> connections</li>
  <li>Route any request for <code class="highlighter-rouge">/</code> to <code class="highlighter-rouge">/index.html</code></li>
</ol>

<p>Recall that Express is a Node library for running basic
HTTP servers.</p>

<p>Node actually provides an even more basic module out of the box:
<code class="highlighter-rouge">http</code>. Express takes this library and adds some helpful features
and convenience wrappers around it, similar to how Sinatra
adds an additional layer on top of Ruby‚Äôs Rack library.</p>

<p>Let‚Äôs require our libraries.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Next, we‚Äôll instantiate Express:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</code></pre></div></div>

<p>So far, so good. Let‚Äôs have Express serve our <code class="highlighter-rouge">public</code> directory.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p>Okay, there is a little bit of a problem here:
Express will happily serve <code class="highlighter-rouge">/index.html</code>, but it will send a 404 if
we just visit the root URL (<code class="highlighter-rouge">/</code>).</p>

<p>Let‚Äôs set it up so that Express will also serve <code class="highlighter-rouge">index.html</code>
if a user visits <code class="highlighter-rouge">/</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">));</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/public/index.html</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>This will be enough to cover our server‚Äôs basic behavior,
but we still need a little work to get the server actually
running.</p>

<p>Specifically, the <code class="highlighter-rouge">app</code> object we created using express
needs to be passed to Node‚Äôs <code class="highlighter-rouge">http</code> module, which
will actually produce a running server from it:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</code></pre></div></div>

<p>Then we need to tell the server what port to listen on.
If there is an environment variable set, then we‚Äôll use
that‚Äîotherwise, we‚Äôll default to 3000.</p>

<p>Having some configuration like this in place can be useful
if we need to run the app in a different environment, such
as Heroku.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Listening on port </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We can also use chaining to shorten this up a bit.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
                 <span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Listening on port </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
                  <span class="p">});</span>
</code></pre></div></div>

<p>Finally, we‚Äôll export our server so we can access it later on.</p>

<p>Recall that within npm‚Äôs module system, each module can
export a single value which will form its ‚Äúpublic‚Äù interface.</p>

<p>Other modules which require this module will then be able to
access this object and use the functionality provided by
the module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">server</span><span class="p">;</span>
</code></pre></div></div>

<p>When all is said and done, your server should look something
like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kd">static</span><span class="p">(</span><span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">));</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/public/index.html</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
                 <span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Listening on port </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
                  <span class="p">});</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">server</span><span class="p">;</span>
</code></pre></div></div>

<p>Now that our code is all set, start the server using
<code class="highlighter-rouge">npm start</code>.</p>

<p>Check it out by visiting <code class="highlighter-rouge">http://localhost:3000/</code>.
You may want to add something to your <code class="highlighter-rouge">index.html</code> file
so you can see the changes taking effect.</p>

<h2 id="setting-up-socketio">Setting Up Socket.io</h2>

<p>Socket.io is a popular Node library for working with websockets,
and we‚Äôll be using it for this purpose in our application.</p>

<p>Socket.io takes an existing http server (like the one
we created using <code class="highlighter-rouge">http.createServer</code>) and uses it to host
websocket connections.</p>

<p>We can set it up like this, below where we define the variable server:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="c1">// var server = ...</span>
<span class="kd">const</span> <span class="nx">socketIo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">socket.io</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">socketIo</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</code></pre></div></div>

<p>Our server now supports WebSockets! Woohoo!</p>

<p>So far nothing much will have visibly changed, but go ahead
and reload your page just to make sure nothing is broken.</p>

<h3 id="set-up-the-client">Set Up the Client</h3>

<p>Socket.io is a somewhat interesting library in that it provides
solutions for clients (i.e. browsers) as well as servers.</p>

<p>We‚Äôve added the appropriate code to get the server-side portion
working, so now let‚Äôs head over and configure the portion
for the browser.</p>

<p>Socket.io adds a route to our server with its client-side
library. Restart your server.  If you visit
<code class="highlighter-rouge">http://localhost:3000/socket.io/socket.io.js</code>
you can see the source for the client-side library and
verify that everything is wired up correctly.</p>

<p>Let‚Äôs pop some markup in our <code class="highlighter-rouge">index.html</code> to take advantage
of our new found functionality.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ask the Audience<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- Make sure your JS is at the bottom of the body! --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/socket.io/socket.io.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/client.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Here we‚Äôre including a basic HTML document, sourcing
the provided <code class="highlighter-rouge">socket.io</code> client-side Javascript,
and sourcing a <code class="highlighter-rouge">client.js</code> file where we‚Äôll keep all of our
own client side code.</p>

<h2 id="communication-between-the-client-and-server">Communication Between the Client and Server</h2>

<p>We have to initiate a WebSocket connection from the client. Let‚Äôs establish a connection from <code class="highlighter-rouge">client.js</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// public/client.js</span>
<span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span>
</code></pre></div></div>

<p>That‚Äôs it. We have created a WebSocket connection between the browser and Node. Right now, this is a pretty pointless server.</p>

<p>Node uses an event driven model, which behaves much like mouse clicks and other user actions in the browser. When you initiated your WebSocket connection between the client and the server, a <code class="highlighter-rouge">connection</code> event was fired from the <code class="highlighter-rouge">io</code> object on the server.</p>

<p>But, if an event is fired and no one is listening, did it ever really happen?</p>

<p>Let‚Äôs set up an event listener for the <code class="highlighter-rouge">connection</code> event on the server.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">connection</code> event passes the individual socket of the user that connected to the callback function. Once we have our hands on the individual socket connection, we can add further event listeners to a particular socket.</p>

<p>Keep in mind that WebSockets work around the model of ‚Äúone socket,
one user‚Äù. So whenever we‚Äôre working with a <code class="highlighter-rouge">socket</code> object,
we can think of that as a connection to a specific user‚Äôs browser.</p>

<p>The <code class="highlighter-rouge">io</code> object that socket.io gave us provides several other
useful functions as well.</p>

<p>For example, we can get a count of all of the clients currently connected with <code class="highlighter-rouge">io.engine.clientsCount</code>. Let‚Äôs update our little logger to display this count:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Restart the server and open up a few tabs. You should see the client count increment on upon each connection.</p>

<p>We will also want to make note of when a user disconnects as well. That‚Äôs something that happens on the individual socket level. So, we‚Äôll have to next it in our <code class="highlighter-rouge">connection</code> listener.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has disconnected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="sending-messages-to-every-client">Sending Messages to Every Client</h3>

<p>We can now keep track of connections on the server, but what about the client? Let‚Äôs add the following HTML to <code class="highlighter-rouge">index.html</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"connection-count"</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div></div>

<p>Instead of logging the count to the console. We‚Äôll emit an event to all of the connected clients alerting them to the new count of connections. We can emit an event to all connected users using the following method:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
</code></pre></div></div>

<p>Your code should look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has disconnected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
    <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We‚Äôre now sending a custom <code class="highlighter-rouge">usersConnected</code> event to each connected browser. But, we have a similar problem as we had before. If we emit an event to the client and no one is listening on the client, it doesn‚Äôt really make much of a difference. So, let‚Äôs listen for an event:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// public/client.js</span>
<span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">connectionCount</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection-count</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">connectionCount</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Connected Users: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Check it out in the browser. Open a few tabs and watch the count go up in each of them. Super cool: we‚Äôre now sending messages to every connected client.</p>

<h3 id="sending-messages-to-a-particular-client">Sending Messages to a Particular Client</h3>

<p>So, we now know that <code class="highlighter-rouge">io.sockets.emit</code> will send a message every client. But, what about just one client? The process is roughly the same, but instead of emitting from <code class="highlighter-rouge">io.sockets</code>, we‚Äôll emit from just a single socket.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">statusMessage</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">You have connected.</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>This is what the Socket.io portion of your server should look like at this point:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">statusMessage</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">You have connected.</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has disconnected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
    <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">userConnection</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>To review:</p>

<ul>
  <li><code class="highlighter-rouge">socket.emit</code> emits to a single client</li>
  <li><code class="highlighter-rouge">io.sockets.emit</code> emits to all connected clients</li>
</ul>

<p>Alright, so now we need to receive that message on the client-side. Let‚Äôs make another simple DOM node to store our status message.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"status-message"</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div></div>

<p>We‚Äôll also add the a listener on the client-side to deal with the new status message when it comes over the socket.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// public/client.js</span>
<span class="kd">var</span> <span class="nx">statusMessage</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">status-message</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">statusMessage</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">statusMessage</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="sending-messages-from-the-client-to-the-server">Sending Messages from the Client to the Server</h3>

<p>You could send messages back to the server using regular old AJAX (in the form of a <code class="highlighter-rouge">POST</code> request). But, a WebSocket is a two-way connection. This means that we can send messages back to the server over the WebSocket as well.</p>

<p>Let‚Äôs send a message from the client to the server, shall we? (This is where you awkwardly say ‚ÄúYes, totally!‚Äù in an otherwise quiet room.)</p>

<p>Right now, we have nothing to send. Let‚Äôs add those four buttons to the HTML.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"choices"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button&gt;</span>A<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button&gt;</span>B<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button&gt;</span>C<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button&gt;</span>D<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Let‚Äôs start by simply adding some event listeners to the buttons.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>
<span class="kd">var</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">#choices button</span><span class="dl">'</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buttons</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Click some buttons and look at the console to make sure everything works.</p>

<p>Now, let‚Äôs swap out that <code class="highlighter-rouge">console.log</code> and send some information back to the server.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>
<span class="kd">var</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">#choices button</span><span class="dl">'</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buttons</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">voteCast</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Just like when we sent messages from the server to the client, we also need a listener on the other side deal with the messages sent from the client. Every call to <code class="highlighter-rouge">socket.send</code> on the client, triggers a <code class="highlighter-rouge">message</code> event on the server.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Cast a few votes and verify that it works on the server.</p>

<p>Now, we need a way to keep track of the votes that have been cast. Node can keep local variables in memory between requests. So, let‚Äôs skip the database and just store everything in memory. If the server crashes, we‚Äôll lose all the data, but YOLO.</p>

<p>Let‚Äôs declare our empty object in the top of the scope.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">votes</span> <span class="o">=</span> <span class="p">{};</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">votes</code> will be a little key/value storage. We‚Äôll use the <code class="highlighter-rouge">socket.id</code> as the key and the vote as the value.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">channel</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">voteCast</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">votes</span><span class="p">[</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">votes</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let‚Äôs also remove a user‚Äôs vote when they disconnect.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has disconnected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
  <span class="k">delete</span> <span class="nx">votes</span><span class="p">[</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">votes</span><span class="p">);</span>
  <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersConnected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Open some tabs and cast some votes. Then head over to Terminal to see the object populated with the current votes cast.</p>

<p>Additionally, verify that the votes are removed for closed tabs.</p>

<h3 id="counting-votes">Counting Votes</h3>

<p>The key/value object is useful for keeping track of votes. Let‚Äôs write a super simple function for counting votes. We‚Äôll start out with a default counter where everything is 0 and then iterate through the <code class="highlighter-rouge">votes</code> object and increment the <code class="highlighter-rouge">voteCount</code> for each vote.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">function</span> <span class="nx">countVotes</span><span class="p">(</span><span class="nx">votes</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">var</span> <span class="nx">voteCount</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">A</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">B</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">C</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">D</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">vote</span> <span class="k">in</span> <span class="nx">votes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">voteCount</span><span class="p">[</span><span class="nx">votes</span><span class="p">[</span><span class="nx">vote</span><span class="p">]]</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">voteCount</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Challenge</strong>: You installed <code class="highlighter-rouge">lodash</code> at the beginning of this tutorial. Can you write a better version of this function using <code class="highlighter-rouge">lodash</code>?</p>

<p>Now, that we can count up the votes, let‚Äôs emit an event from the server with a tally of all of the votes each time one is cast.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has connected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">userConnection</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">statusMessage</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">You have connected.</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">channel</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">voteCast</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">votes</span><span class="p">[</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">voteCount</span><span class="dl">'</span><span class="p">,</span> <span class="nx">countVotes</span><span class="p">(</span><span class="nx">votes</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">A user has disconnected.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
    <span class="k">delete</span> <span class="nx">votes</span><span class="p">[</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">voteCount</span><span class="dl">'</span><span class="p">,</span> <span class="nx">countVotes</span><span class="p">(</span><span class="nx">votes</span><span class="p">));</span>
    <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">userConnection</span><span class="dl">'</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">engine</span><span class="p">.</span><span class="nx">clientsCount</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>On the client, we‚Äôll log this to the console for now:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">voteCount</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">votes</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">votes</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<p>Open up a few tabs and cast some votes. Verify that the updated tally is correctly logging to the console.</p>

<h2 id="your-turn">Your Turn</h2>

<p>This is where I leave you, padawan.</p>

<p>Right now, we‚Äôre logging to the console. But we‚Äôre not updating our interface. Implement the following:</p>

<h3 id="basic-functionality">Basic Functionality</h3>

<ul>
  <li>Render the current tally of votes in the DOM.</li>
  <li>Emit a event to the user‚Äôs individual socket that lets them know when their vote has been cast (and what vote they cast).</li>
  <li>Update the DOM to show the user what vote they have currently cast (based on the previous step).</li>
</ul>

<h3 id="user-experience">User Experience</h3>

<ul>
  <li>Can you create an interface that is pleasant to use?</li>
  <li>Can you visualize the votes that have been cast?</li>
</ul>

<h3 id="deployment">Deployment</h3>

<p>With the following Procfile, can you deploy you application to Heroku?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: node server.js
</code></pre></div></div>

<h3 id="testing">Testing</h3>

<p>Can you get mocha tests up and running?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir test
touch test/test.js
</code></pre></div></div>

<p>Now let‚Äôs install our dependencies.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm install mocha chai --save-dev
</code></pre></div></div>

<p>Now, open the <code class="highlighter-rouge">package.json</code> file in the route directory and make sure within <code class="highlighter-rouge">scripts</code> and <code class="highlighter-rouge">test</code> that you point <code class="highlighter-rouge">npm</code> to use mocha:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//package.json
"scripts": {
  "test": "mocha",
  "start": "node server.js"
},
</code></pre></div></div>

<h5 id="extensions-supertest-for-request-testing">Extensions: Supertest for Request Testing</h5>

<p><a href="https://github.com/visionmedia/supertest">Supertest</a> is a library for testing node.js HTTP servers.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm install supertest --save-dev
</code></pre></div></div>

<p>You can then write request tests like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">expect</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">responds with success</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">undefined routes</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">respond with a 404</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/not-real</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>
<h5 id="extensions-mocking-and-testing-websockets">Extensions: Mocking and Testing WebSockets</h5>

<p><a href="https://github.com/socketio/socket.io-client">Socket.IO Client</a></p>

<p>Some blogs/resources:</p>
<ul>
  <li><a href="http://liamkaufman.com/blog/2012/01/28/testing-socketio-with-mocha-should-and-socketio-client/">Testing SocketIO</a></li>
  <li><a href="https://dzone.com/articles/testing-socketio-apps">Testing Socketio Apps</a></li>
  <li><a href="https://github.com/liamks/Testing-Socket.IO">An Example on Github</a></li>
</ul>
:ET