I";à<h2 id="project-overview">Project Overview</h2>

<p>In this project we‚Äôll begin to introduce HTTP, the protocol that runs the web, and build a functioning web server to put that understanding into action.</p>

<h3 id="learning-goals">Learning Goals</h3>

<ul>
  <li>Practice breaking a workflow into a system of coordinating components</li>
  <li>Practice using TDD at the unit, integration, and acceptance levels</li>
  <li>Understand how the HTTP request/response cycle works</li>
  <li>Practice implementing basic HTTP requests and responses</li>
</ul>

<h3 id="background">Background</h3>

<p>The internet, which for most people is the web‚Ä¶how does that work?</p>

<p>HTTP (HyperText Transfer Protocol) is the protocol used for sending data from your browser to a web server then getting data back from the server. As protocols go, it‚Äôs actually a very simple one.</p>

<h4 id="http-with-penpals">HTTP with Penpals</h4>

<p>Imagine that you‚Äôre requesting information from a penpal (old school with paper, envelopes, etc). The protocol would go something like this:</p>

<ul>
  <li>You write a letter requesting information</li>
  <li>You wrap that letter in an envelope</li>
  <li>You add an address that uniquely identifies the destination of the letter</li>
  <li>You hand the sealed enveloper to your mail person</li>
  <li>It travels through a network of people, machines, trucks, planes, etc</li>
  <li>Assuming the address is correct, it arrives at your penpal‚Äôs mailbox</li>
  <li>Your penpal opens the envelope and reads the letter</li>
  <li>Assuming they understand your question, your penpal writes a letter of their own back to you</li>
  <li>They wrap it in an envelope and add an address that uniquely identifies you (which they got from the return address on <em>your</em> envelope)</li>
  <li>They hand their letter to their mail person, it travels through a series of machines and people, and eventually arrives back at your mailbox</li>
  <li>You open the envelope and do what you see fit with the information contained in there.</li>
</ul>

<h4 id="http-in-actuality">HTTP in Actuality</h4>

<p>Metaphor aside, let‚Äôs run through the protocol as executed by computers:</p>

<ul>
  <li>You open your browser and type in a web address like <code class="highlighter-rouge">http://turing.io</code> and hit enter. The URL (or ‚Äúaddress‚Äù) that you entered is the core of the letter.</li>
  <li>The browser takes this address and builds a <em>request</em>, the envelope. It uniquely identifies the machine (or <em>server</em>) out there on the internet that the message is intended for. It includes a return address and other information about the requestor.</li>
  <li>The request is handed off to your Internet Service Provider (ISP) (like CenturyLink or Comcast) and they send it through a series of wires and fiber optic cables towards the server</li>
  <li>The request arrives at the server. The server reads the precisely formatted request to figure out (a) who made the request and (b) what they requested</li>
  <li>The server fetches or calculates the requested information and prepares a <em>response</em>. The response wraps the requested information in an envelope that has the destination address on it (your machine).</li>
  <li>The server hands the response off to their ISP and it goes through the internet to arrive at your computer</li>
  <li>Your browser receives that response, unwraps it, and displays the data on your machine.</li>
</ul>

<p>That‚Äôs HTTP. You can read more on <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">wikipedia article</a>
or the <a href="https://tools.ietf.org/html/rfc2616">IETF specification</a>.</p>

<h3 id="the-request">The Request</h3>

<p>Here is what an actual request looks like. Note that it‚Äôs just a single highly-formatted string:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / HTTP/1.1
Host: 127.0.0.1:9292
Connection: keep-alive
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8
</code></pre></div></div>

<p>The parts we‚Äôre most interested in are:</p>

<ul>
  <li>The first line, <code class="highlighter-rouge">GET / HTTP/1.1</code>, which specifies the <em>verb</em>, <em>path</em>, and <em>protocol</em> which we‚Äôll pick apart later</li>
  <li><code class="highlighter-rouge">Host</code> which is where the request is sent to</li>
  <li><code class="highlighter-rouge">Accept</code> which specifies what format of data the client wants back in the response</li>
</ul>

<p>With those pieces of information a typical server can generate a response.</p>

<h3 id="the-response">The Response</h3>

<p>The Server generates and transmits a response that looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http/1.1 200 ok
date: Sun,  1 Nov 2015 17:25:48 -0700
server: ruby
content-type: text/html; charset=iso-8859-1
content-length: 27

The response body goes here
</code></pre></div></div>

<p>The parts we‚Äôre most interested in are:</p>

<ul>
  <li>The first line, <code class="highlighter-rouge">HTTP/1.1 200 ok</code>, which has the <em>protocol</em> and the <em>response code</em></li>
  <li>The unmarked lines at the end which make up the <em>body</em> of the response</li>
  <li><code class="highlighter-rouge">content-length</code> which tells the client when to stop listening</li>
</ul>

<h3 id="tooling">Tooling</h3>

<p>While working on this project you‚Äôre going to need to make a lot of HTTP requests. There are many
tools that can help you with that, but we recommend you use the following:</p>

<ol>
  <li><strong>Web Browser</strong> ‚Äì if you need to make HTTP GET requests you can use the browser, but it‚Äôs the weakest of these three tools.</li>
  <li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en"><strong>Postman</strong></a> ‚Äì a Chrome extension which gives you amazing control and the ability to make any kind of request. Use this for your manual testing and experimentation.</li>
  <li><a href="https://github.com/lostisland/faraday"><strong>Faraday</strong></a> ‚Äì a Ruby library for making requests and parsing responses. Use this for your automated testing, basically like a scripted version of request/reponse cycles you could do with Postman.</li>
</ol>

<h2 id="experiment">Experiment</h2>

<p>Ruby has handy built-in libraries for dealing with most of the low-level networking details about running a server. Let‚Äôs write a short program that can start up, listen for a request, print that request out to the screen, then shut down.</p>

<p>First, we need to ‚Äúopen a port‚Äù which basically means ‚Äútell the computer that network requests identified addressed for a specific port should belong to this program‚Äù.</p>

<p>On your computer there are dozens of programs that are using the network connection at any given time. If the messages in and out of those programs were all happening through the same channel then it‚Äôd be confusing which message belongs to which program. Think of the <em>port</em> like a mailbox in an apartment building: all the residents (aka programs) share the same street address (your computer) but each have their own mailbox (or port).</p>

<p>Let‚Äôs start our server instance and have it listen on port <code class="highlighter-rouge">9292</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'socket'</span>
<span class="n">tcp_server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">9292</span><span class="p">)</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">tcp_server</span><span class="p">.</span><span class="nf">accept</span>
</code></pre></div></div>

<p>We can read the request from the <code class="highlighter-rouge">client</code> object which is what we call an IO stream. Here‚Äôs a snippet to keep reading from that stream until the input is a blank line and store all the request lines in an array <code class="highlighter-rouge">request_lines</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Ready for a request"</span>
<span class="n">request_lines</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">gets</span> <span class="n">and</span> <span class="o">!</span><span class="n">line</span><span class="p">.</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">empty?</span>
  <span class="n">request_lines</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="p">.</span><span class="nf">chomp</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Note that when the program runs it‚Äôll hang on that <code class="highlighter-rouge">gets</code> method call waiting for a request to come in. When it arrives it‚Äôll get read and stored into <code class="highlighter-rouge">request_lines</code>, then lets print it to the console for debugging:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Got this request:"</span>
<span class="nb">puts</span> <span class="n">request_lines</span><span class="p">.</span><span class="nf">inspect</span>
</code></pre></div></div>

<p>Then it‚Äôs time to build a response. For this example let‚Äôs just print out the request data as the response:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Sending response."</span>
<span class="n">response</span> <span class="o">=</span> <span class="s2">"&lt;pre&gt;"</span> <span class="o">+</span> <span class="n">request_lines</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"&lt;/pre&gt;"</span>
<span class="n">output</span> <span class="o">=</span> <span class="s2">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span><span class="si">#{</span><span class="n">response</span><span class="si">}</span><span class="s2">&lt;/body&gt;&lt;/html&gt;"</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"http/1.1 200 ok"</span><span class="p">,</span>
          <span class="s2">"date: </span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%a, %e %b %Y %H:%M:%S %z'</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
          <span class="s2">"server: ruby"</span><span class="p">,</span>
          <span class="s2">"content-type: text/html; charset=iso-8859-1"</span><span class="p">,</span>
          <span class="s2">"content-length: </span><span class="si">#{</span><span class="n">output</span><span class="p">.</span><span class="nf">length</span><span class="si">}</span><span class="se">\r\n\r\n</span><span class="s2">"</span><span class="p">].</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\r\n</span><span class="s2">"</span><span class="p">)</span>
<span class="n">client</span><span class="p">.</span><span class="nf">puts</span> <span class="n">headers</span>
<span class="n">client</span><span class="p">.</span><span class="nf">puts</span> <span class="n">output</span>
</code></pre></div></div>

<p>And close up the server:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="p">[</span><span class="s2">"Wrote this response:"</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">output</span><span class="p">].</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="n">client</span><span class="p">.</span><span class="nf">close</span>
<span class="nb">puts</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">Response complete, exiting."</span>
</code></pre></div></div>

<p>Save that file and run it. Open your web browser and enter the address <code class="highlighter-rouge">http://127.0.0.1:9292</code>. If everything worked then your browser should show all the details of your request. Flip over to the terminal where your ruby program was running and you should see the request outputted to the terminal.</p>

<p>You just built a web server.</p>

<p>Having trouble? Check out the <a href="https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.rb">whole file here</a>.</p>

<h2 id="the-project">The Project</h2>

<p>You‚Äôre going to build a web application capable of:</p>

<ul>
  <li>Receiving a request from a user</li>
  <li>Comprehending the request‚Äôs intent and source</li>
  <li>Generating a response</li>
  <li>Sending the response to the user</li>
</ul>

<h3 id="iteration-0---hello-world">Iteration 0 - Hello, World</h3>

<p>Build a web application/server that:</p>

<ul>
  <li>listens on port 9292</li>
  <li>responds to HTTP requests</li>
  <li>responds with a valid HTML response that displays the words <code class="highlighter-rouge">Hello, World! (0)</code> where the <code class="highlighter-rouge">0</code> increments each request until the server is restarted</li>
</ul>

<h3 id="iteration-1---outputting-diagnostics">Iteration 1 - Outputting Diagnostics</h3>

<p>Let‚Äôs start to rip apart that request and output it in your response. In the body of your response, include a block of HTML like this including the actual information from the request:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;pre&gt;</span>
Verb: POST
Path: /
Protocol: HTTP/1.1
Host: 127.0.0.1
Port: 9292
Origin: 127.0.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div></div>

<p>Keep the code that outputs this block at the bottom of all your future outputs to help with your debugging.</p>

<h3 id="iteration-2---supporting-paths">Iteration 2 - Supporting Paths</h3>

<p>Now let‚Äôs react to the <code class="highlighter-rouge">path</code> that the user specifies:</p>

<ul>
  <li>If they request the root, aka <code class="highlighter-rouge">/</code>, respond with just the debug info from Iteration 1.</li>
  <li>If they request <code class="highlighter-rouge">/hello</code>, respond with ‚ÄúHello, World! (0)‚Äù where the <code class="highlighter-rouge">0</code> increments each time the path is requested, but not when any other path is requested.</li>
  <li>If they request <code class="highlighter-rouge">/datetime</code>, respond with today‚Äôs date and time in this format: <code class="highlighter-rouge">11:07AM on Sunday, November 1, 2015</code>.</li>
  <li>If they request <code class="highlighter-rouge">/shutdown</code>, respond with ‚ÄúTotal Requests: 12‚Äù where <code class="highlighter-rouge">12</code> is the aggregate of all requests. It also causes the server to exit / stop serving requests.</li>
</ul>

<h3 id="iteration-3---supporting-parameters">Iteration 3 - Supporting Parameters</h3>

<p>Often we want to supply some data with a request. For instance, if you were submitting a search, that‚Äôd typically be a <code class="highlighter-rouge">GET</code> request that has a parameter. When we use parameters in <code class="highlighter-rouge">GET</code> requests they are embedded in the URL like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://host:port/path?param=value&amp;param2=value2
</code></pre></div></div>

<p>You know your computer has a dictionary built in, right? It‚Äôs stored in a special file on your
machine located at <code class="highlighter-rouge">/usr/share/dict/words</code>. Let‚Äôs use this information to write an ‚Äúendpoint‚Äù that works like this:</p>

<ul>
  <li>The path is <code class="highlighter-rouge">/word_search</code></li>
  <li>The verb will always be a <code class="highlighter-rouge">GET</code></li>
  <li>The parameter will be named <code class="highlighter-rouge">word</code></li>
  <li>The value will be a possible word fragment</li>
</ul>

<p>In your HTML response page, output one of these:</p>

<ul>
  <li><code class="highlighter-rouge">WORD is a known word</code></li>
  <li><code class="highlighter-rouge">WORD is not a known word</code></li>
</ul>

<p>Where <code class="highlighter-rouge">WORD</code> is the parameter from the URL.</p>

<h3 id="iteration-4---verbs--parameters">Iteration 4 - Verbs &amp; Parameters</h3>

<p>The <em>path</em> is the main way that the user specifies what they‚Äôre requesting, but the secondary tool is the <em>verb</em>. There are several official verbs, but the only two typical servers use are <code class="highlighter-rouge">GET</code> and <code class="highlighter-rouge">POST</code>.</p>

<p>We use <code class="highlighter-rouge">GET</code> to fetch information. We typically use <code class="highlighter-rouge">POST</code> to send information to the server. When we submit parameters in a <code class="highlighter-rouge">POST</code> they‚Äôre in the body of the request rather than in the URL.</p>

<p>Changing the verb and submitting parameters in the body instead of the parameters for a <code class="highlighter-rouge">POST</code> request can both be done in Postman.</p>

<p>Let‚Äôs practice applying these techniques by building a simple guessing game that can be played via our HTTP server.</p>

<p>The game will work like this:</p>

<ol>
  <li>When a player starts a new game, the server picks a random number between 0 and 100.</li>
  <li>The player can make a new guess by sending a POST request containing the number they want to guess.</li>
  <li>When the player requests the game path, the server should show some information about the game including how many guesses have been made, what the most recent guess was, and whether it was too high, too low, or correct.</li>
</ol>

<p>The HTTP endpoints to support this game will look like this:</p>

<h4 id="post-to-start_game"><code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/start_game</code></h4>

<p>This request begins a game. The response says <code class="highlighter-rouge">Good luck!</code> and starts a game.</p>

<h4 id="get-to-game"><code class="highlighter-rouge">GET</code> to <code class="highlighter-rouge">/game</code></h4>

<p>A request to this verb/path combo tells us:</p>

<ul>
  <li>a) how many guesses have been taken.</li>
  <li>b) if a guess has been made, it tells what the guess was and whether it was too high, too low, or correct</li>
</ul>

<h4 id="post-to-game"><code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/game</code></h4>

<p>This is how we make a guess. The request includes a parameter named <code class="highlighter-rouge">guess</code>. The server stores the guess and sends the user a redirect response, causing the client to make a <code class="highlighter-rouge">GET</code> to <code class="highlighter-rouge">/game</code>.</p>

<h4 id="handling-post-requests">Handling POST Requests</h4>

<p>So far all of the requests we‚Äôve dealt with have been using HTTP‚Äôs GET verb. A GET request signifies <em>fetching</em> rather than <em>sending</em> information. POST requests, on the other hand, signify <em>sending</em> information. In this section we‚Äôll be using post requests to allow users to send us data to interact with the simple HTTP game.</p>

<p>So what do we need to do differently when handling POST requests vs. GETs? Fortunately, most of the other parsing we‚Äôve done will remain the same ‚Äì headers, paths, parameters, etc. When reading a POST request, however, we also need to give attention to the request body.</p>

<p>Remember that in an HTTP request the body is separated from the headers with a blank line ‚Äì in our basic parsing so far, encountering this blank line is how we know when we‚Äôre done reading headers. Everything after the blank line, then, is the body. To read the body from the request, we need to look at a specific header, called <code class="highlighter-rouge">Content-Length</code> which is included with the request. The Content-Length header tells us the number of bytes (roughly equivalent with the number of characters) that are included in the request body.</p>

<p>Once we find this number, we can use a special socket method <code class="highlighter-rouge">read</code>, to read that specific number of bytes.</p>

<p>In short, then our process for reading the body of a post request looks like this:</p>

<ol>
  <li>Read the request headers by reading lines until we encounter a blank one (same as before)</li>
  <li>Find the Content-Length header and see how many bytes it says are included in the request.</li>
  <li>User <code class="highlighter-rouge">Socket#read</code> to read that number of bytes from the socket, thus reading the request body.</li>
</ol>

<p>For this iteration you‚Äôll need to update your request handling to use this process to read the request body for any POST requests your server receives.</p>

<h3 id="sending-a-redirect">Sending a Redirect</h3>

<p>A <a href="https://en.wikipedia.org/wiki/URL_redirection">Redirect</a> is a special kind of HTTP response. It indicates to an HTTP client that the resource they requested should be fetched from a different location. A redirect is HTTP‚Äôs mechanism of telling a client (often a web browser) to ‚Äúgo over there.‚Äù You‚Äôve seen this on the web whenever you submit a web form and your browser automatically loads a new page. Redirects are often used in response to POST requests.</p>

<p>To respond with a redirect, you need to send 2 things:</p>

<ol>
  <li>A <code class="highlighter-rouge">3xx</code> status code ‚Äì in our case <code class="highlighter-rouge">302</code> will be the standard status code for redirecting</li>
  <li>A special header called <code class="highlighter-rouge">Location</code> ‚Äì the <code class="highlighter-rouge">Location</code> header indicates the new URL the browser should visit. For example the header <code class="highlighter-rouge">Location: http://google.com</code> would tell a web browser to navigate to google‚Äôs homepage.</li>
</ol>

<p>Here‚Äôs what the headers for an example redirect response would look like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -I google.com
HTTP/1.1 301 Moved Permanently
Location: http://www.google.com/
Content-Type: text/html; charset=UTF-8
Date: Fri, 26 Feb 2016 01:55:24 GMT
Expires: Sun, 27 Mar 2016 01:55:24 GMT
Cache-Control: public, max-age=2592000
Server: gws
Content-Length: 219
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
</code></pre></div></div>

<h3 id="iteration-5---response-codes">Iteration 5 - Response Codes</h3>

<p>We use the HTTP response code as a short hand way to explain the result of the request. Here are the most common HTTP status codes:</p>

<ul>
  <li><code class="highlighter-rouge">200 OK</code></li>
  <li><code class="highlighter-rouge">301 Moved Permanently</code></li>
  <li><code class="highlighter-rouge">401 Unauthorized</code></li>
  <li><code class="highlighter-rouge">403 Forbidden</code></li>
  <li><code class="highlighter-rouge">404 Not Found</code></li>
  <li><code class="highlighter-rouge">500 Internal Server Error</code></li>
</ul>

<p>Let‚Äôs modify your game from Iteration 4 to use status codes:</p>

<ul>
  <li>Most requests, unless listed below, should respond with a <code class="highlighter-rouge">200</code>.</li>
  <li>When you submit the <code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/start_game</code> and there is no game in progress, it should start one and respond with a <code class="highlighter-rouge">301</code> redirect.</li>
  <li>When you submit the <code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/start_game</code> but there is already a game in progress, it should respond with <code class="highlighter-rouge">403</code>.</li>
  <li>If an unknown path is requested, like <code class="highlighter-rouge">/fofamalou</code>, the server responds with a <code class="highlighter-rouge">404</code>.</li>
  <li>If the server generates an error, then it responds with a <code class="highlighter-rouge">500</code>. Within the response let‚Äôs present the whole stack trace. Since you don‚Äôt write bugs, create an <code class="highlighter-rouge">/force_error</code> endpoint which just raises a <code class="highlighter-rouge">SystemError</code> exception.</li>
</ul>

<h2 id="extensions">Extensions</h2>

<h3 id="1-http-accept">1. HTTP-Accept</h3>

<p>The <code class="highlighter-rouge">HTTP-Accept</code> parameter is used to specify what kind of data the client wants in response. Modify your <code class="highlighter-rouge">/word_search</code> path so that if the <code class="highlighter-rouge">HTTP-Accept</code> starts with <code class="highlighter-rouge">application/json</code> then they are sent a JSON body like the following.</p>

<p>A search for <code class="highlighter-rouge">pizza</code> returns this JSON:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"word":"pizza","is_word":true}
</code></pre></div></div>

<p>A search for <code class="highlighter-rouge">pizz</code> returns JSON with possible matches like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"word":"pizza","is_word":true,"possible_matches":["pizza","pizzeria","pizzicato"]}
</code></pre></div></div>

<h3 id="2-threading">2. Threading</h3>

<p>A <a href="http://ruby-doc.org/core-2.2.0/Thread.html">Thread</a> represents an independent flow (thread) of execution. Threads allow us to model concurrent processes that need to occur at the same time, independent of one another.</p>

<p>You can read more about threads in the ruby docs, but the basic usage looks like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"hi from the other thread"</span>
<span class="k">end</span>
<span class="n">hi</span> <span class="n">from</span> <span class="n">other</span> <span class="n">thread</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Thread:0x007f81d3bddd08@(pry):65 sleep&gt;</span>
</code></pre></div></div>

<p>If a thread returns a value, we can capture it by calling <code class="highlighter-rouge">#value</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Thread:0x007f81d4398070@(pry):66 dead&gt;</span>
<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">.</span><span class="nf">value</span>
<span class="o">=&gt;</span> <span class="mi">2</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="nb">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Thread:0x007f81d42ec770@(pry):68 sleep&gt;</span>
<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">.</span><span class="nf">value</span> <span class="c1">#hangs</span>
<span class="o">=&gt;</span> <span class="mi">2</span>
</code></pre></div></div>

<p>Note that if the thread is busy doing some work, calling <code class="highlighter-rouge">#value</code> will hang until that
thread is finished.</p>

<p>With these tools at your disposal, enhance your server handler so that each request/response gets handled in its own thread. If done correctly, this will allow you to handle multiple requests at a time.</p>

<p>To demonstrate this functionality, additionally add a new GET endpoint <code class="highlighter-rouge">/sleepy</code> which sleeps for 3 seconds and then returns a 200 OK response with the body <code class="highlighter-rouge">"yawn..."</code>. You should be able to handle multiple <code class="highlighter-rouge">/sleepy</code> requests in a row without the second one waiting for the first one to complete.</p>

<h2 id="evaluation-rubric">Evaluation Rubric</h2>

<p>The project will be assessed with the following guidelines:</p>

<ul>
  <li>4: Above expectations</li>
  <li>3: Meets expectations</li>
  <li>2: Below expectations</li>
  <li>1: Well-below expectations</li>
</ul>

<h3 id="1-ruby-syntax--style">1. Ruby Syntax &amp; Style</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Applies appropriate attribute encapsulation</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer creates instance and local variables appropriately</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Naming follows convention (is idiomatic)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Ruby methods used are logical and readable</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements best-choice enumerable methods</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is indented properly</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code does not exceed 80 characters per line</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A directory/file structure provides basic organization via lib/ and/or /test</li>
</ul>

<h3 id="2-breaking-logic-into-components">2. Breaking Logic into Components</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is effectively broken into methods &amp; classes</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer writes methods less than 7 lines</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />No more than 3 methods break the principle of SRP</li>
</ul>

<h3 id="3-test-driven-development">3. Test-Driven Development</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Each method is tested</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Functionality is accurately covered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Tests implement Ruby syntax &amp; style</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Balances unit and integration tests</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Evidence of edge cases testing</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Test Coverage metrics are present (SimpleCov)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A test RakeTask is implemented</li>
</ul>

<h3 id="4-functionality">4. Functionality</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Application meets all requirements (extension not req‚Äôd)</li>
</ul>

<h3 id="5-version-control">5. Version Control</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer commits at a pace of at least 1 commit per hour</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements branching and PRs</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />The final submitted version is merged into master</li>
</ul>

<h2 id="addendum-content">Addendum Content</h2>

<p>There is content from previous versions not germane to the assignment above <a href="https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me-addendum.markdown">available here</a>.</p>
:ET