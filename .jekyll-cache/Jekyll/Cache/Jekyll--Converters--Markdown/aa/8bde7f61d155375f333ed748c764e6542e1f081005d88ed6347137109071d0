I"¡V<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Recognize the limitations of single role / column-based authorization strategies</li>
  <li>Discuss patterns for implementing more sophisticated authorization strategies</li>
  <li>Practice using ActiveRecord models to implement an authorization strategy from scratch</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/multitenancy_authorization">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>Describe the authorization strategy that you used in your Little Shop project?</li>
  <li>Was there anything that frustrated you about this strategy?</li>
  <li>What would you need to do if you added another level of access to that application?</li>
</ul>

<h2 id="limitations-of-column-based-role-modeling">Limitations of Column-Based role modeling</h2>

<p>There‚Äôs a good chance your previous attempts used some sort of column on the users table
to track whether a given user was an ‚Äúadmin‚Äù and maybe also a ‚Äúplatform admin‚Äù.</p>

<p>This strategy has few moving parts, making it simple. But what are the limitations?</p>

<p>What did you have to do when a new role was needed?</p>

<p>Alternatively, we could have had a second table ‚Äì ‚Äúadmins‚Äù ‚Äì and inserted
simple records for each user that we want to mark as an admin (with ‚Äúid‚Äù and ‚Äúuser_id‚Äù as the only columns).</p>

<p>But we still run into the same fundamental problems ‚Äì adding more roles requires modifications
to our schema since we need to add more tables or columns to represent the new information.</p>

<h2 id="a-more-flexible-approach-to-modeling-application-roles">A more flexible approach to modeling application roles</h2>

<p>This is actually a very common problem in larger applications. Just about any
sophisticated business will need to track various ‚Äúroles‚Äù within their organization.
Additionally, you‚Äôll frequently need to create these on the fly, perhaps even
letting non-technical users do this through a web interface of some sort.</p>

<p>So let‚Äôs talk about what it would look like. What are the concepts we‚Äôre dealing with?</p>

<ul>
  <li>‚ÄúRoles‚Äù or ‚ÄúPermissions‚Äù - Some notion of multiple levels of access within the app
and the need to store these independently</li>
  <li>‚ÄúUsers‚Äù - Existing idea of user accounts. Remember that an account largely
handles the problem of authentication rather than authorization.</li>
  <li>‚ÄúUser-Roles‚Äù - Once we‚Äôve come up with a separate way of modeling the roles
themselves, we need a way to flexibly associate multiple users to multiple roles.</li>
</ul>

<p>Hopefully this shape is starting to make sense as a normal many-to-many relationship
using a join table to connect betwen the 2 record types. Modeling roles in this way
will allow us to re-use a handful of roles for a large number of user accounts.</p>

<h2 id="implementing-role-based-authorization">Implementing Role-based Authorization</h2>

<p>Let‚Äôs walk through the process of implementing role-based authorization.</p>

<p>Here‚Äôs a short list of goals we‚Äôd like to enable</p>

<ol>
  <li>Add a separate Roles table to track the existing roles</li>
  <li>Add a capability to grant a user a role (at least in <code class="highlighter-rouge">rails c</code>)</li>
  <li>Add methods to users to let us inquire about their permissions</li>
  <li>Make it so that guest users have to check in</li>
  <li>Add a route to create items that can only be accessed by store admins</li>
  <li>Add a route to edit and update items that can be accessed by either ‚Äúadmins‚Äù or ‚Äúinventory managers‚Äù</li>
</ol>

<p><strong>Setup</strong></p>

<p>For this workshop, let‚Äôs use a branch of storedom that already has basic store-based
multitenancy set up:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone -b multitenancy_authorization https://github.com/turingschool-examples/storedom.git multitenancy_authorization
cd multitenancy_authorization
bundle
bundle exec rake db:drop db:setup
</code></pre></div></div>

<h2 id="scoping-permissions-by-store">Scoping Permissions by Store</h2>

<h3 id="discussion">Discussion</h3>

<p>So we‚Äôve added a flexible permissions model and refactored it to better encapsulate
the logic within a dedicated object.</p>

<p>But something is still missing. We haven‚Äôt yet tackled the problem of authorizing users
across multiple stores. That is, we need a way to ensure that a user who‚Äôs
authorized as an admin for Store A can‚Äôt manipulate the items of Store B.</p>

<p>Can we boil down the main component missing from our authorization system?</p>

<ul>
  <li>How can we modify the relationship so that roles can be connected to users
as well as to specific stores?</li>
  <li>What changes in our authorization logic are needed to account for this new information?</li>
</ul>

<h3 id="workshop">Workshop</h3>

<p>With a partner, modify the existing authorization model to account
for store-based as well as user-based authorization:</p>

<ol>
  <li>Add a <code class="highlighter-rouge">store_id</code> column to the UserRoles table</li>
  <li>Add a test to verify that a user authorized for one store can‚Äôt
edit items of another store</li>
  <li>Modify the <code class="highlighter-rouge">Permissions</code> object to account for this additional logic. You
may need to modify its existing APIs. Don‚Äôt forget to add unit tests for this step.</li>
</ol>

<p><em>Specific Functionality</em></p>

<ol>
  <li>The store admin will have access to the stores, sessions, items, and orders controllers.</li>
  <li>However, he won‚Äôt have access to the users controller.</li>
  <li>Can you create a helper that will hide that functionality from the navbar?</li>
</ol>

<h2 id="implementation-overview">Implementation Overview</h2>

<h3 id="initial-repository">Initial Repository</h3>

<p>git clone -b multitenancy_authorization https://github.com/turingschool-examples/storedom.git multitenancy_authorization</p>

<h3 id="final-repository">Final Repository</h3>

<p>git checkout ‚Äîtrack https://github.com/turingschool-examples/storedom.git multitenancy_authorization_final</p>

<h3 id="procedure">Procedure</h3>

<ul>
  <li><code class="highlighter-rouge">rails g model Role name:string</code></li>
  <li><code class="highlighter-rouge">rails g model UserRole user:references role:references</code></li>
  <li>Add UserRole relationship in Role</li>
  <li>Add UserRole relationship in User</li>
  <li>rake db:migrate</li>
  <li>Create three roles
    <ol>
      <li>platform_admin</li>
      <li>store_admin</li>
      <li>registered_user</li>
    </ol>
  </li>
  <li>Add Permission methods in user model
    <ol>
      <li>platform_admin?</li>
      <li>store_admin?</li>
      <li>registered_user?</li>
    </ol>
  </li>
  <li>Create services folder</li>
  <li>Create Permission service</li>
  <li>initialize the object with a user</li>
  <li>implement #allow? method</li>
  <li>Only allow users to visit the stores controller</li>
  <li>Add additional permissions</li>
  <li>Add guest_user and add conditional</li>
  <li>Abstract permissions into private methods</li>
  <li>Add Permission methods in ApplicationController
    <ol>
      <li>current_permission</li>
      <li>authorize!</li>
      <li>before_action :authorize!</li>
      <li>private method :authorize?</li>
    </ol>
  </li>
  <li>Add helpers in ApplicationHelpers
    <ol>
      <li>platform_admin?</li>
      <li>store_admin?</li>
      <li>registered_user?</li>
    </ol>
  </li>
</ul>

<h4 id="implementation">Implementation</h4>

<p>app/model/user.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_secure_password</span>

  <span class="n">has_many</span> <span class="ss">:user_roles</span>
  <span class="n">has_many</span> <span class="ss">:roles</span><span class="p">,</span> <span class="ss">through: :user_roles</span>

  <span class="n">belongs_to</span> <span class="ss">:store</span>
  <span class="n">has_many</span> <span class="ss">:orders</span>

  <span class="k">def</span> <span class="nf">platform_admin?</span>
    <span class="n">roles</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"platform_admin"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">store_admin?</span>
    <span class="n">roles</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"store_admin"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">registered_user?</span>
    <span class="n">roles</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="ss">name: </span><span class="err">‚Äú</span><span class="n">registered_user</span><span class="err">‚Äù</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>app/model/user_role.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UserRole</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">belongs_to</span> <span class="ss">:role</span>
<span class="k">end</span>
</code></pre></div></div>

<p>app/model/role.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Role</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span>

  <span class="n">has_many</span> <span class="ss">:user_roles</span>
  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through: :user_roles</span>
<span class="k">end</span>
</code></pre></div></div>

<p>app/services/permission.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Permission</span>
  <span class="kp">extend</span> <span class="no">Forwardable</span>

  <span class="nb">attr_reader</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:controller</span><span class="p">,</span> <span class="ss">:action</span>

  <span class="n">def_delegators</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:platform_admin?</span><span class="p">,</span>
                        <span class="ss">:store_admin?</span><span class="p">,</span>
                        <span class="ss">:registered_user?</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span> <span class="o">||</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">allow?</span><span class="p">(</span><span class="n">controller</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="vi">@controller</span> <span class="o">=</span> <span class="n">controller</span>
    <span class="vi">@action</span>     <span class="o">=</span> <span class="n">action</span>

    <span class="k">case</span>
    <span class="k">when</span> <span class="n">platform_admin?</span>
      <span class="n">platform_admin_permissions</span>
    <span class="k">when</span> <span class="n">store_admin?</span>
      <span class="n">store_admin_permissions</span>
    <span class="k">when</span> <span class="n">registered_user?</span>
      <span class="n">registered_user_permissions</span>
    <span class="k">else</span>
      <span class="n">guest_user_permissions</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">platform_admin_permissions</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"sessions"</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"items"</span>  <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"stores"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"orders"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"users"</span>  <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">store_admin_permissions</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"sessions"</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"items"</span>  <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"stores"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"orders"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">registered_user_permissions</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"sessions"</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"items"</span>  <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"stores"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">guest_user_permissions</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"sessions"</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"items"</span>  <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index show)</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">controller</span> <span class="o">==</span> <span class="s2">"stores"</span> <span class="o">&amp;&amp;</span> <span class="n">action</span><span class="p">.</span><span class="nf">in?</span><span class="p">(</span><span class="sx">%w(index)</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>app/controllers/application_controller.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="c1"># Prevent CSRF attacks by raising an exception.</span>
  <span class="c1"># For APIs, you may want to use :null_session instead.</span>

  <span class="n">protect_from_forgery</span> <span class="ss">with: :exception</span>

  <span class="n">before_action</span> <span class="ss">:authorize!</span>

  <span class="n">add_flash_types</span> <span class="ss">:success</span><span class="p">,</span>
                  <span class="ss">:info</span><span class="p">,</span>
                  <span class="ss">:warning</span><span class="p">,</span>
                  <span class="ss">:danger</span>

  <span class="n">helper_method</span> <span class="ss">:current_user</span>

  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span> <span class="k">if</span> <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">current_permission</span>
    <span class="vi">@current_permission</span> <span class="o">||=</span> <span class="no">Permission</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">authorize!</span>
    <span class="k">unless</span> <span class="n">authorized?</span>
      <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="ss">danger: </span><span class="s2">"You are not authorized to visit this page"</span>

    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">authorized?</span>
    <span class="n">current_permission</span><span class="p">.</span><span class="nf">allow?</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:controller</span><span class="p">],</span> <span class="n">params</span><span class="p">[</span><span class="ss">:action</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>app/helpers/application_helper.rb</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">ApplicationHelper</span>
  <span class="k">def</span> <span class="nf">platform_admin?</span>
    <span class="n">current_user</span> <span class="o">&amp;&amp;</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">platform_admin?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">store_admin?</span>
    <span class="n">current_user</span> <span class="o">&amp;&amp;</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">store_admin?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">registered_user?</span>
    <span class="n">current_user</span> <span class="o">&amp;&amp;</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">registered_user?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="supporting-materials">Supporting Materials</h2>

<ul>
  <li><a href="https://vimeo.com/128915494">Video 1502</a></li>
  <li><a href="https://vimeo.com/137451107">Video 1505</a></li>
  <li><a href="https://github.com/NYDrewReynolds/multitenancy_auth">Repo from 1503 Session</a></li>
</ul>
:ET