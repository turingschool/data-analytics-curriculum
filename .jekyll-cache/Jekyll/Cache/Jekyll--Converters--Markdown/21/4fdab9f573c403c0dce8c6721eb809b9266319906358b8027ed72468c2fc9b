I"É<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Be able to define the terms algorithm, pseudocode, and iteration</li>
  <li>Be able to use pseudocode to describe the flow of an algorithm‚Äôs implementation</li>
  <li>Be familiar with using iterative processes to design increasingly robust solutions</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>10 - Warmup</li>
  <li>15 - Lecture</li>
  <li>5 - Break</li>
  <li>15 - Lecture Cont.</li>
  <li>10 - Challenge 1</li>
  <li>5 - Break</li>
  <li>15 - Challenge 2</li>
  <li>10 - Challenge 3</li>
  <li>5 - Closeout</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>Pseudocode</li>
  <li>Algorithm</li>
  <li>Iteration</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/problems_solutions_algorithms">here</a></p>

<h2 id="warmup">Warmup</h2>

<h3 id="part-1---writing">Part 1 - Writing</h3>

<p>First, spend 5 minutes writing an ‚Äúalgorithm‚Äù that explains how to tie your shoes.
Try to be as explicit and specific as possible. Assume your reader is a human, but a
very literal one.</p>

<h3 id="part-2---doing">Part 2 - Doing</h3>

<p>Now, pair up with your neighbor. The person whose name is alphabetically first will
read their algorithm step-by-step to the person whose name is alphabetically last.
The person whose name is alphabetically last will attempt to tie their shoes according
only to the instructions from their partner.</p>

<p>You can repeat instructions if needed, but don‚Äôt add any instructions beyond what
you had originally written down.</p>

<h2 id="lecture---big-picture-strategy">Lecture - Big-Picture Strategy</h2>

<ul>
  <li>What is an Algorithm
  <code class="highlighter-rouge">a process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.</code></li>
  <li>Incremental solutions (linear)</li>
  <li>Iterative solutions (spirals)</li>
  <li>Building a full ‚Äúslice‚Äù</li>
  <li>‚ÄúHalf a product not a half-assed product‚Äù</li>
</ul>

<h3 id="an-iterative-process">An Iterative Process</h3>

<ol>
  <li><em>Identify the big picture goal:</em> What do you want your program to do? How will you know when you‚Äôve succeeded?</li>
  <li><em>Identify the interface:</em> How do you want to interact with your program? What are its inputs and outputs?</li>
  <li><em>Identify a small picture goal:</em> What is the simplest case of this problem? Is there a sub-problem of even that case?</li>
  <li><em>Plan to solve that small goal:</em> Sketch ideas out in a notebook.</li>
  <li><em>Write a small goal test:</em> Identify expected inputs and outputs. Decide on a method name.</li>
  <li><em>Implement:</em> Write pseudocode and turn that into code.</li>
  <li><em>Repeat:</em> Is the whole problem solved? If not, go back to step 3.</li>
</ol>

<h3 id="exercise-1--common-words">Exercise 1 ‚Äì Common Words</h3>

<p>With a pair, answer the questions from steps 1 through 4 for the following problem.
When you get to steps 3 and 4, repeat them at least 3 times for increasing levels of complexity.</p>

<p><strong>Problem:</strong></p>

<p>I have a text document and want to know ‚ÄúWhat are the three most common words in the text?‚Äù</p>

<p><em>Extension</em>: Let‚Äôs exclude the following: I, you, he, she, it, we, they, they, a, an.</p>

<h3 id="software-processes--techniques--why-do-we-care">Software Processes / Techniques ‚Äì why do we care</h3>

<ul>
  <li>Programming ‚Äì what makes it hard? (Translating ideas into code? Or coming up with ideas?)</li>
  <li><strong>Perception</strong> - A good programmer is someone who solves technical problems <em>easily</em></li>
  <li><strong>Reality</strong> - A good programmer is someone equipped with the tools and processes to confront challenging problems and still emerge successful</li>
  <li>Problem solving challenges: What to do vs. How to do it</li>
  <li>‚ÄúDumping out the toolbox‚Äù - controlling nerves and pacing yourself</li>
  <li>Software development techniques are designed to <em>manage</em> these difficulties</li>
  <li>TDD</li>
  <li>Pseudocode</li>
  <li>Agile Development</li>
</ul>

<h2 id="remaining-exercises">Remaining Exercises</h2>

<h3 id="small-groups---algorithm-challenges">Small Groups - Algorithm Challenges</h3>

<p>We‚Äôll then break into small groups to work through this process for a few different problems.</p>

<h3 id="odds--evens">Odds &amp; Evens</h3>

<p>I have a file with 100 numbers. I want to create two new files: one with all the odds and one with all the evens.</p>

<p><em>Extension</em>: Don‚Äôt allow duplicates in the output</p>

<h3 id="palindromes">Palindromes</h3>

<p>A palindrome is a word or phrase that reads the same when you reverse all of the letters.</p>

<ul>
  <li>mom</li>
  <li>kayak</li>
  <li>noon</li>
  <li>Never odd or even</li>
</ul>

<p>A palindromic number is the same concept applied to numbers:</p>

<ul>
  <li>101</li>
  <li>11</li>
  <li>1221</li>
  <li>45654</li>
</ul>

<p>Create a program to find the largest palindromic number that you can create by multiplying two three digit numbers together.</p>

<h3 id="lats--longs">Lats &amp; Longs</h3>

<p>I have a file with 100 latitude/longitude pairs. Find the point that‚Äôs closest to the north pole.</p>

<p><em>Extension</em>: Find the one closest to the <strong>magnetic</strong> north pole.</p>

<h2 id="wrapup">WrapUp</h2>
<ul>
  <li>What is an algorithm? What is algorithmic thinking? Why is it necessary when working with computers?</li>
  <li>How does iterative problem solving work? Why is it beneficial to us as developers?</li>
  <li>What is pseudocode? How does it make programming easier? Why should we do it even if we think we‚Äôve got a pretty sweet plan?</li>
</ul>

:ET