I"%D<h2 id="learning-goals">Learning Goals</h2>

<p>After this lesson, students should be able to:</p>

<ul>
  <li>Explain the difference between remote and local repositories</li>
  <li>Create a Git repository locally</li>
  <li>Create a repository on GitHub</li>
  <li>Link a local repository to a remote repository</li>
  <li>Use a branching workflow with Git and GitHub</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/git_and_github">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What do you already know about Git/GitHub?</li>
  <li>Why do we use Git/GitHub</li>
</ul>

<h2 id="overview">Overview</h2>

<ul>
  <li>Git is a version control system that we use in programming.</li>
  <li>GitHub is a website that allows us to share Git repositories.</li>
  <li>In order to keep our code safe we use a branching workflow that allows us to make changes to multiple files before fully commiting to those changes.</li>
</ul>

<h2 id="git">Git</h2>

<h3 id="what-is-git">What is Git?</h3>

<p>Git is a <strong>Version Control System</strong> (VCS). It allows you to save work on your project, and reference previous states of a project if needed. Normally when we save something on our computer, the newer version <em>overwrites</em> the older version. This is problematic if we need to look back at an earlier version. Git solves this problem by providing you multiple save points. You can get the current version, and ANY previous version. Git’s philosophy: never lose anything.</p>

<h3 id="commits">Commits</h3>

<p>Saving your work in git is known as <strong>committing</strong>. Even though you may change a file and hit save, you don’t actually save it to your git repository until you use the <code class="highlighter-rouge">commit</code> command. Changes can be in 3 different states:</p>

<ol>
  <li><strong>Unstaged</strong>: we have made changes but not told git that we would like to commit them</li>
  <li><strong>Staged</strong>: we have made changes and told git that we are getting ready to commit them</li>
  <li><strong>Committed</strong>: we have committed our changes to the repository’s log of commits. Our work is saved.</li>
</ol>

<h3 id="important-git-commands">Important Git Commands</h3>

<ul>
  <li><code class="highlighter-rouge">init</code> - create a git repository in the current directory.</li>
  <li><code class="highlighter-rouge">status</code> - show what changes have been made. This will show changes that are staged and unstaged.</li>
  <li><code class="highlighter-rouge">add &lt;file name&gt;</code> - stage a change for commit.
    <ul>
      <li>ex: <code class="highlighter-rouge">git add credit_check.rb</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">commit -m "&lt;commit message&gt;"</code> - commit a change. Each commit requires a commit message (must be in quotes).
    <ul>
      <li>ex: <code class="highlighter-rouge">git commit -m "adds search feature"</code></li>
    </ul>
  </li>
</ul>

<h3 id="git-workflow">Git Workflow</h3>

<h4 id="creating-a-git-repository">Creating a Git Repository</h4>

<ol>
  <li>Use <code class="highlighter-rouge">mkdir</code> to create a new directory if you have not already.</li>
  <li><code class="highlighter-rouge">cd</code> into that directory.</li>
  <li>Run <code class="highlighter-rouge">git init</code> to make that directory a Git repository.</li>
  <li>The default branch created with git is named <code class="highlighter-rouge">master</code>. Rename this to <code class="highlighter-rouge">main</code> by running:
<code class="highlighter-rouge">git symbolic-ref HEAD refs/heads/main</code></li>
</ol>

<h4 id="committing-changes">Committing Changes</h4>

<p>These are the steps you should take to make changes and save them to your repository.</p>

<ol>
  <li><code class="highlighter-rouge">git status</code> - make sure our working directory is clean, which means there are no changes. If there are changes, we need to figure out what to do with them, either commit them or stash them.</li>
  <li>Make changes - e.g. create or update files</li>
  <li><code class="highlighter-rouge">git status</code> - we should see the files we changed as unstaged.</li>
  <li><code class="highlighter-rouge">git add &lt;name of file we changed&gt;</code> - stage those changes for commit. We need to do this for each file we changed.</li>
  <li><code class="highlighter-rouge">git status</code> -  we should see the files we changed as staged for commit.</li>
  <li><code class="highlighter-rouge">git commit -m "short message about the changes we made"</code> - commit the changes.</li>
</ol>

<h3 id="practice">Practice!</h3>

<p>Using the commands above:</p>

<ul>
  <li>Create a new directory called <code class="highlighter-rouge">git_practice</code>.</li>
  <li>Make your <code class="highlighter-rouge">git_practice</code> directory a Git repository.</li>
  <li>Create a file inside of that directory called <code class="highlighter-rouge">README.md</code> and add some text to that file.</li>
  <li>Commit your changes</li>
  <li>Make some additional changes</li>
  <li>Commit those changes</li>
</ul>

<h2 id="github">Github</h2>

<p>GitHub is a website for hosting git repositories.</p>

<p>The git repository on your computer is called the <strong>local repository</strong>. It is only accessible through your computer. If you are working with a partner, they cannot access it on their computer. That’s where Github comes in. When you push your repository to Github, you are creating a <strong>remote repository</strong>. It is in the cloud and collaborators can access it through the web.</p>

<p>Before GitHub, developers or companies configured and ran their own independent git servers, and things were much more fragmented. Now GitHub has become the de facto community standard for hosting and sharing repositories.</p>

<p>You certainly don’t need GitHub to use git, but its popularity and dominance, especially within the open source community, have intertwined the 2 for many users.</p>

<p>As you progress through becoming a more practiced git user, don’t forget that these are 2 distinct things – <code class="highlighter-rouge">git</code> provides the core technology for tracking and managing source control changes, while <code class="highlighter-rouge">GitHub</code> provides a shared location for hosting git projects.</p>

<h3 id="creating-a-new-repository-on-github">Creating a New Repository on GitHub</h3>

<p>In order to create a new repository on GitHub we need to visit the site and click on the green <code class="highlighter-rouge">New</code> button next to the Repositories heading on our dashboard.</p>

<p>Name the new repository the same as what you have named the directory that you’re working in. The other default values should be fine for our purposes.</p>

<h3 id="commands-for-interacting-with-github">Commands for interacting with GitHub</h3>

<p>Once you’ve created a new repository on GitHub, you need to link that repository to your local repository. We need to add a remote.</p>

<ul>
  <li><code class="highlighter-rouge">remote -v</code> - this will show you what your remote repository is configured as. This is helpful for debugging.</li>
  <li><code class="highlighter-rouge">remote add &lt;remote name&gt; &lt;remote url&gt;</code> - This adds a new remote. If you type <code class="highlighter-rouge">remote -v</code> and nothing shows up, it means you have no remotes and you will need to use this command to add one. Usually, you only need to do this once when you are setting up a project.</li>
  <li><code class="highlighter-rouge">push &lt;remote name&gt; &lt;branch name&gt;</code> - Update your remote repository to match your local repository. The remote name is almost always <code class="highlighter-rouge">origin</code>. The branch name is whatever branch you want to push to (more on branching further down). For instance, if you are working on the <code class="highlighter-rouge">main</code> branch, which is the default branch, the command would be:
    <ul>
      <li><code class="highlighter-rouge">git push origin main</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">pull &lt;remote name&gt; &lt;branch name&gt;</code> - update your local repository with the changes made to the remote. This will be important when you are working with someone else, and you want to get the changes they made. Similar to pushing, remote name will almost always be <code class="highlighter-rouge">origin</code>. Branch name is whatever branch you want to pull from. So if you wanted to get the recent changes to <code class="highlighter-rouge">main</code>, the command would be:
    <ul>
      <li><code class="highlighter-rouge">git pull origin main</code></li>
      <li><strong>note</strong>: This will pull the changes in to whatever branch you are currently working in</li>
    </ul>
  </li>
</ul>

<h3 id="git-workflow-with-github">Git workflow with Github</h3>

<h4 id="to-set-up-the-link-to-our-repository">To set up the link to our repository</h4>

<ol>
  <li><code class="highlighter-rouge">pwd</code> - make sure we’re in the right directory</li>
  <li><code class="highlighter-rouge">git status</code> - double check that we have already initialized our local Git repository</li>
  <li>Create the repo on GitHub</li>
  <li>Copy the SSH address from GitHub</li>
  <li><code class="highlighter-rouge">git remote -v</code>: this will tell us if we already have a remote repository for this local repository.</li>
  <li><code class="highlighter-rouge">git remote add origin &lt;YOUR_SSH_ADDRESS HERE&gt;</code></li>
  <li><code class="highlighter-rouge">git log</code> make sure we have at least one commit</li>
  <li><code class="highlighter-rouge">git push origin main</code></li>
</ol>

<h4 id="to-push-to-your-remote-repository">To push to your remote repository</h4>

<ol>
  <li>Make changes</li>
  <li><code class="highlighter-rouge">git status</code> - we should see the files we changed as unstaged.</li>
  <li><code class="highlighter-rouge">git add &lt;name of file we changed&gt;</code> - stage those changes for commit. We need to do this for each file we changed.</li>
  <li><code class="highlighter-rouge">git status</code> -  we should see the files we changed as staged for commit.</li>
  <li><code class="highlighter-rouge">git commit -m "short message about the changes we made"</code> - commit the changes.</li>
  <li><code class="highlighter-rouge">git push origin main</code></li>
</ol>

<p>It is important to note that you do not have to push every time you commit. You can make several commits, and <code class="highlighter-rouge">push</code> will send all the new commits you made at once.</p>

<h3 id="practice-1">Practice</h3>

<ul>
  <li>Create a new repository called <code class="highlighter-rouge">git_practice</code></li>
  <li>Add the remote to your local <code class="highlighter-rouge">git_practice</code> repository</li>
  <li>Push your existing commits to the GitHub repository</li>
  <li>Make additional changes to your README</li>
  <li>Commit them</li>
  <li>Push your changes to GitHub</li>
</ul>

<h2 id="branching">Branching</h2>

<p>If you do <code class="highlighter-rouge">git status</code> you’ll see part of the status is “On branch main”. Branches represent a line of development. The main branch is the default branch, and is typically where the code works without known bugs.</p>

<p>Switching to a branch is called a <strong>checkout</strong>. When you checkout a new branch, it can serve as a sandbox for development where you can make changes or experiment with a research spike without affecting the main branch. If whatever you are trying doesn’t work, no big deal; your main branch remains intact.</p>

<p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging">This link</a> shows some helpful visuals related to git branches.</p>

<p><a href="https://www.atlassian.com/git/tutorials/using-branches/git-branch">More info on branching.</a></p>

<h3 id="branching-commands">Branching commands</h3>

<ul>
  <li><code class="highlighter-rouge">branch</code> - view a list of branches</li>
  <li><code class="highlighter-rouge">branch &lt;branch name&gt;</code> - create a new branch
    <ul>
      <li>ex: <code class="highlighter-rouge">git branch new_feature</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">checkout &lt;branch name&gt;</code> - switch to a branch
    <ul>
      <li>ex: <code class="highlighter-rouge">git checkout main</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">checkout -b &lt;branch name&gt;</code> - create and switch to a branch in one command
    <ul>
      <li>ex: <code class="highlighter-rouge">git checkout -b new_feature</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">push &lt;remote name&gt; &lt;branch name&gt;</code> - push to a branch. If the branch doesn’t exist in your remote, Github will create a new one for you.
    <ul>
      <li>ex: <code class="highlighter-rouge">git push origin new_feature</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">pull &lt;remote name&gt; &lt;branch name&gt;</code> - pull from a branch. Generally you want to be pushing to feature branches (branches where you’re working on code) and pulling from main.</li>
</ul>

<h3 id="pull-requests">Pull Requests</h3>

<p>If what you did in a branch works and you want to add it to the main branch, you will <code class="highlighter-rouge">merge</code> that branch into the main branch.</p>

<p>Pull Requests are a Github feature that allows us to merge code from one branch into another. The name “Pull Request” can be confusing because you are actually trying to merge code rather than pull it. Some other online systems such as Gitlab call them “Merge Requests” for this reason.</p>

<p>Not only do Pull Requests allow you to merge branches, they allow other collaborators to look at the code you added, make comments, and review your changes BEFORE the code gets merged. They are a very powerful collaboration tool, and used extensively in the industry.</p>

<h3 id="git-workflow-with-branching-and-pull-requests">Git Workflow with Branching and Pull Requests</h3>

<p>This is the final version of our workflow, and is what you should be doing on every project, partner or solo.</p>

<ol>
  <li><code class="highlighter-rouge">git status</code> - make sure our working directory is clean. If there are changes, we need to figure out what to do with them, either commit them or stash them.</li>
  <li><code class="highlighter-rouge">git pull origin main</code> - Make sure you are up to date with the latest version of main.</li>
  <li><code class="highlighter-rouge">git branch &lt;feature name&gt;</code> - make a new branch based on a feature you want to add. Alternatively, you can use <code class="highlighter-rouge">git checkout -b &lt;feature name&gt;</code> to create and checkout the branch in one command.</li>
  <li><code class="highlighter-rouge">git checkout &lt;feature name&gt;</code> - Checkout the branch</li>
  <li>Make changes</li>
  <li><code class="highlighter-rouge">git status</code> - we should see the files we changed as unstaged.</li>
  <li><code class="highlighter-rouge">git add &lt;name of file we changed&gt;</code> - stage those changes for commit. We need to do this for each file we changed.</li>
  <li><code class="highlighter-rouge">git status</code> -  we should see the files we changed as staged for commit.</li>
  <li><code class="highlighter-rouge">git commit -m "short message about the changes we made"</code> - commit the changes.</li>
  <li><code class="highlighter-rouge">git push origin &lt;feature name&gt;</code> - Push your branch to Github.</li>
  <li>Repeat steps 4 - 10 until the feature is complete</li>
  <li>Put in a Pull Request (PR) to merge your branch into main.</li>
  <li>Visit GitHub and merge your pull request into main.</li>
  <li><code class="highlighter-rouge">git checkout main</code> - Switch back to the main branch.</li>
  <li><code class="highlighter-rouge">git pull origin main</code> - Make sure that you have the most recent changes that you made on your local main branch.</li>
</ol>

<h3 id="practice-2">Practice</h3>

<ul>
  <li>Check out a new branch</li>
  <li>Make some additional changes to your README</li>
  <li>Commit those changes</li>
  <li>Push your change to the branch on GitHub</li>
  <li>Visit GitHub</li>
  <li>Create a pull request</li>
  <li>Merge your pull request</li>
  <li>Check out your main branch locally</li>
  <li>Pull your changes into your main branch</li>
</ul>

<h3 id="change-default-branch-name-of-existing-repository">Change Default Branch Name of Existing Repository</h3>

<ul>
  <li>Locally:
    <ul>
      <li>git branch -m master main</li>
      <li>git push -u origin main</li>
    </ul>
  </li>
  <li>Github
    <ul>
      <li>Head to the repository on github.com</li>
      <li>Click on the <code class="highlighter-rouge">Settings</code> Tab</li>
      <li>Click on <code class="highlighter-rouge">Branches</code> on the left panel</li>
      <li>Change the default branch to <code class="highlighter-rouge">main</code> and click <code class="highlighter-rouge">update</code></li>
    </ul>
  </li>
</ul>

<p>You can now safely delete both the local master and remote master branches.</p>
:ET