I">C<h3 id="learning-goals">Learning Goals</h3>

<ul>
  <li>Make all CRUD functionality AJAX calls.</li>
  <li>Access APIs from client side JavaScript using standard HTTP verbs.</li>
  <li>Dynamically change content on a webpage without reloading the page.</li>
  <li>Explain the difference between client-side and server-side.</li>
</ul>

<h2 id="javascript-refresh">JavaScript Refresh</h2>
<p>Talk with a partner about the following:</p>

<ul>
  <li>How do you set a variable?</li>
  <li>How do you access the developer tools in your browser?</li>
  <li>What are two debugging tools?<br />
(Think, what is similar to puts and pry?)</li>
</ul>

<h3 id="variables">Variables</h3>

<p>Variables are declared with <code class="highlighter-rouge">var &lt;variableName&gt;</code> in <code class="highlighter-rouge">camelCase</code>. You may sometimes see <code class="highlighter-rouge">let</code> or <code class="highlighter-rouge">const</code> instead of <code class="highlighter-rouge">var</code> thanks to ES6.</p>

<h3 id="debugging-in-javascript">Debugging in Javascript</h3>

<p>Debugging JavaScript is a different beast than debugging Ruby. Because JS is run entirely in the browser, the technique for troubleshooting broken code is more complicated than <code class="highlighter-rouge">binding.pry</code>. Luckily, modern browsers are aware of this and give us a collection of options for digging into your code.</p>

<h4 id="1-developer-tools">1. Developer Tools</h4>

<p>One of the first things you should familiarize yourself with when working with JavaScript (or HTML…or CSS…) are the dev tools. You can find a cool tutorial to dive deeper with  <a href="http://discover-devtools.codeschool.com/">Code School’s Discover-DevTools Tutorial.</a> (Chapters 3 &amp; 4 are particularly helpful)</p>

<p>To open developer tools in Chrome:</p>
<ul>
  <li>Mac: <code class="highlighter-rouge">Cmd</code> + <code class="highlighter-rouge">Opt</code> + <code class="highlighter-rouge">i</code> (or <code class="highlighter-rouge">Cmd</code> + <code class="highlighter-rouge">Opt</code> + <code class="highlighter-rouge">j</code>)</li>
  <li>(or) Right click on the browser window and select <code class="highlighter-rouge">inspect</code></li>
  <li>(or) Select <code class="highlighter-rouge">View</code> in the navbar, then <code class="highlighter-rouge">Developer</code>, then <code class="highlighter-rouge">Developer Tools</code></li>
</ul>

<p>When working with JavaScript, it is useful to keep your console open at all times to watch for errors and anything you’ve told your code to print out. Bringing us to…</p>

<h4 id="2-consolelog">2. console.log()</h4>

<p><code class="highlighter-rouge">console.log()</code> is to JS what <code class="highlighter-rouge">puts</code> is to Ruby. This line of code will print whatever is provided as an argument to the console.</p>

<p>Given the following function called <code class="highlighter-rouge">printStuff()</code>, adding console.log() will print the value of <code class="highlighter-rouge">myVariable</code> to the console.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">printStuff</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">myVariable</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVariable</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">printStuff</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
</code></pre></div></div>

<p>If you’re confused about what a variable or function is returning, throw <code class="highlighter-rouge">console.log()</code> into your code or directly into the <code class="highlighter-rouge">console</code> in your browser to confirm/deny suspicions.</p>

<h4 id="3-debugging-in-the-console">3. Debugging In the Console</h4>

<p>Debugger is the <code class="highlighter-rouge">pry</code> of JS. Stick <code class="highlighter-rouge">debugger;</code> within a function to pause the browser from running the script when it hits a particular part of your code.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// index.js
$('#search-ideas').on('keyup', function() {
  var currentInput = this.value.toLowerCase();

  $ideas.each(function (index, idea) {
    var $idea = $(idea);
    var $ideaContent = $idea.find('.content').text().toLowerCase();
    debugger;
  });
</code></pre></div></div>

<p>In the browser, if we open up the dev tools, navigate to the console and try to search for something.  The program will freeze on the line <code class="highlighter-rouge">debugger</code>. This lets us type stuff into our <code class="highlighter-rouge">console</code> to see what’s going on.</p>

<p><em>NOTE - The console must be open for debugger to catch, otherwise the app will look normal and you won’t get any error messages - if you get stuck, refresh your page while the console is open and go from there.</em></p>

<p>For more details and information about other ways to dig into your js, check out the <a href="https://developer.chrome.com/devtools/docs/javascript-debugging">Chrome Documentation</a>.</p>

<h3 id="functions">Functions</h3>

<p>There are multiple types of functions in JavaScript.<br />
In ES5(aka Vanilla JS) there are function expressions and function declarations.<br />
function expression<br />
(where an anonymous function is saved to a variable, can only be called after it is set to a variable)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var myFunction = function(param) {
  do a thing with the param;
};
</code></pre></div></div>
<p>function declaration<br />
(a function with a name, can be called form anywhere)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function myFunction(param) {
  do a thing with the param;
};
</code></pre></div></div>

<h2 id="why-ajax">Why AJAX?</h2>

<p>Currently, if you have updated information to display on your webpage, what do you do?<br />
What are the pros/cons of this strategy?</p>

<h3 id="ajax-research">AJAX Research</h3>
<p>Use these resources to find the following answers:<br />
<a href="https://www.w3schools.com/xml/ajax_intro.asp">W3Schools on AJAX</a><br />
<a href="http://www.seguetech.com/ajax-technology/">Benefits of AJAX</a><br />
<a href="http://andrewhfarmer.com/ajax-libraries/">AJAX Library Comparisons</a></p>

<ul>
  <li>What does AJAX stand for?</li>
  <li>Explaining asynchronous vs synchronous</li>
  <li>What is it used for? Where is it used?</li>
  <li>Client vs. Server side rendering</li>
</ul>

<p>-*   UX and User Perception
-*   Client Side interactions - voting, polling, rating, interact with HTML elements, auto-complete, nearly instantaneous loading</p>

<h2 id="ajax-crud">AJAX CRUD</h2>

<h3 id="setup">setup</h3>

<p>For this lesson, we’ll use <a href="https://github.com/turingschool-examples/birdie">Birdie</a>, a REST API with dummy JSON data. Our interactions with this API would be similar for any other REST API you’d work with down the road.</p>

<blockquote>
  <p>As a refresher, REST simply refers to CRUD-ful routes you’d expect from an API (<code class="highlighter-rouge">get</code>, <code class="highlighter-rouge">show</code>, <code class="highlighter-rouge">create</code>, <code class="highlighter-rouge">update</code>, <code class="highlighter-rouge">delete</code>).</p>
</blockquote>

<p>Please set up the Birdie API by doing the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:turingschool-examples/birdie.git birdeck_api
<span class="nb">cd </span>birdeck_api
bundle <span class="nb">install
</span>bundle <span class="nb">exec </span>rake db:setup
bundle <span class="nb">exec </span>rails server
</code></pre></div></div>

<p>We’ll also be using a separate JS client-side application, called <code class="highlighter-rouge">Birdeck</code> to communicate with our local API.
This repository will be where all the AJAX magic happens.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:turingschool-examples/birdeck.git birdeck_client
<span class="nb">cd </span>birdeck_client
open index.html
</code></pre></div></div>
<p>What do you see on the page in the browser? Check out the raw HTML in index.html to see how it correlates. What do you have in birdeck.js? What is $(document).ready(); and why do we use it? What is event.preventDefault(); doing?</p>

<h3 id="ajax---get-index-code-along">AJAX - <code class="highlighter-rouge">GET</code> Index Code Along</h3>

<ol>
  <li>Right now, our Birdeck client isn’t loading in any posts from the our API. We’ll want to change that to fetch posts on page load using jQuery’s <code class="highlighter-rouge">$.ajax()</code>, but first, let’s see what our data looks like in either our browser or Postman.</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://localhost:3000/api/v1/posts
</code></pre></div></div>
<p>Back in our code:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// birdeck_client/assets/javascripts/birdeck.js</span>
<span class="kd">var</span> <span class="nx">API</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
      <span class="na">url</span><span class="p">:</span> <span class="nx">API</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/api/v1/posts</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#latest-posts</span><span class="dl">'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;p class="post"&gt;</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">description</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">&lt;/p&gt;</span><span class="dl">'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">};</span>

  <span class="c1">// on page load</span>
  <span class="nx">getPosts</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<ol>
  <li>Let’s modify our app to refresh posts when clicking the “Fetch Posts” buton.
    <ul>
      <li>Create an EventListener for the fetch button
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(thing you clicked).on('click', callbackFunctionThatImplementsReaction);  
</code></pre></div>        </div>
      </li>
      <li>Upon click fetch posts through the api
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$.ajax({
url: yourURL,
method: 'HTTP VERB'
})
</code></pre></div>        </div>
      </li>
      <li>Manage what you want to happen if the request is successful and if it fails
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.done().fail();
</code></pre></div>        </div>
      </li>
      <li>Clear currently listed posts
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $(find posts div).html('')   
</code></pre></div>        </div>
        <p>or maybe</p>
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $(find your thing to clear).val('')
</code></pre></div>        </div>
      </li>
      <li>Reprint all posts to the page
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> for (var i = 0; i &lt; data.length; i++) {
 $('#latest-posts').append('&lt;p class="post"&gt;' + data[i].description + '&lt;/p&gt;');
 }
</code></pre></div>        </div>
        <h3 id="ajax---get-show-workshop">AJAX - <code class="highlighter-rouge">GET</code> SHOW Workshop</h3>
      </li>
    </ul>
  </li>
</ol>

<p>On your own, try getting a post by ID.</p>
<ul>
  <li>Create an EventListener for the show-form</li>
  <li>Fetch post by id through the ‘show’ endpoint</li>
  <li>Find the id from your input field using jQuery</li>
  <li>Append the post to the latest posts (Do you want to clear the currently listed posts?)</li>
  <li>Can you clear the values from the input fields?</li>
</ul>

<h3 id="ajax---post-code-along">AJAX - POST Code Along</h3>

<p>Let’s set up our app to send an AJAX POST request to create a new post and update our feed with this new post all with one click of the “Create Post” button.</p>

<p>What steps will you need to take?</p>

<h3 id="ajax---put-workshop">AJAX - PUT Workshop</h3>

<p>First, with your neighbor, discuss strategies for accomplishing this. Remember, you’ll need to make sure you’re collecting the ID and updated description of the post to be updated.</p>

<p>Then, on your own update a post by ID. On submit of this form, you should be using AJAX to PUT this update, as well as get an updated posts feed.</p>

<h3 id="ajax---delete-workshop">AJAX - DELETE Workshop</h3>

<p>You know the drill - let’s delete a post by ID. Feel free to discuss approach again with your neighbor, but try to accomplish this on your own.</p>

<h2 id="wrap-up">Wrap Up</h2>

<p>Where would you use AJAX as a tool within a Rails Context?<br />
What are some use cases for AJAX vs a page refresh?<br />
What are three keys you might include in an AJAX Post request?</p>

<h3 id="additional-resources">Additional Resources</h3>

<ul>
  <li><a href="http://www.sitepoint.com/use-jquerys-ajax-function/">How to use $.ajax()</a></li>
  <li><a href="http://www.i-programmer.info/programming/jquery/8895-getting-started-with-jquery-ajax-the-basics.html">Basics of Jquery AJAX</a></li>
  <li><a href="http://www.i-programmer.info/programming/jquery/4788-jquery-promises-a-deferred.html">jQuery Promises and Deferred</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/AJAX">MDN AJAX</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started">MDN Getting Started with AJAX</a></li>
  <li><a href="http://api.jquery.com/jquery.ajax/">jQuery $.ajax()</a></li>
</ul>

<h3 id="readings">Readings</h3>

<ul>
  <li><a href="http://www.phpasks.com/articles/historyajax.html">AJAX: History</a></li>
  <li><a href="http://www.softwareengineerinsider.com/programming-languages/ajax.html#context/api/listings/prefilter">More AJAX History</a></li>
  <li><a href="http://www.codeconquest.com/website/client-side-vs-server-side/">Client Side vs Server Side</a></li>
  <li><a href="http://skillcrush.com/2012/07/30/client-side-vs-server-side/">More Client Side vs Server Side</a></li>
</ul>

<h3 id="video">Video</h3>

<ul>
  <li><a href="https://vimeo.com/131025914">Video</a></li>
</ul>
:ET