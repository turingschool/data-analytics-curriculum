I"ƒ<h1 id="iteration-4---additional-methods---find-pop-includes">Iteration 4 - Additional Methods - <code class="highlighter-rouge">find</code>, <code class="highlighter-rouge">pop</code>, <code class="highlighter-rouge">includes?</code></h1>

<p>Perfect, we are almost there! Next is to add <code class="highlighter-rouge">find</code>, <code class="highlighter-rouge">pop</code> and <code class="highlighter-rouge">includes?</code> methods.</p>

<p><code class="highlighter-rouge">find</code> takes two parameters, the first indicates the first position to return and the second parameter specifies how many elements to return.</p>

<p><code class="highlighter-rouge">includes?</code> gives back true or false whether the supplied value is in the list.</p>

<p><code class="highlighter-rouge">pop</code> removes the last element from the list. Before returning the last node, print that this family has ‚Äúdied of dysentery‚Äù</p>

<p>Expected behavior:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span><span class="p">.</span>
<span class="nf">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">to_string</span>
<span class="o">=&gt;</span> <span class="s2">"The McKinney family, followed by the Lawson family, followed by the Brooks family, followed by the Henderson family"</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"The Brooks family"</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"The Lawson family, followed by the Brooks family, followed by the Henderson family"</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">includes?</span><span class="p">(</span><span class="s2">"Brooks"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">includes?</span><span class="p">(</span><span class="s2">"Chapman"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">pop</span>
<span class="no">The</span> <span class="no">Henderson</span> <span class="n">family</span> <span class="n">has</span> <span class="n">died</span> <span class="n">of</span> <span class="n">dysentery</span>
<span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Node</span> <span class="n">surname</span><span class="o">=</span><span class="s2">"Henderson"</span> <span class="n">next_node</span><span class="o">=</span><span class="kp">nil</span> <span class="c1">#5678904567890&gt;</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">pop</span>
<span class="no">The</span> <span class="no">Brooks</span> <span class="n">family</span> <span class="n">has</span> <span class="n">died</span> <span class="n">of</span> <span class="n">dysentery</span>
<span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Node</span> <span class="n">surname</span><span class="o">=</span><span class="s2">"Brooks"</span> <span class="n">next_node</span><span class="o">=</span><span class="kp">nil</span> <span class="c1">#5678904567890&gt;</span>
<span class="o">&gt;</span> <span class="n">list</span><span class="p">.</span><span class="nf">to_string</span>
<span class="o">=&gt;</span> <span class="s2">"The McKinney family, followed by the Lawson family"</span>
</code></pre></div></div>
:ET