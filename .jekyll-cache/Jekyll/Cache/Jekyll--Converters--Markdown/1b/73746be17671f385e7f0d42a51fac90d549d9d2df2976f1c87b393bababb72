I"O<p>A minimal API for connecting web servers and web frameworks.</p>

<ul>
  <li>Most framework users will not need to</li>
  <li>All rack apps need to respond to #call</li>
  <li>Must return an array containing status (integer), headers (hash), body (array)</li>
  <li>The body needs to respond to #each and then successively return strings that represent the response body.</li>
  <li>Discuss Middleware - https://github.com/rack/rack-contrib/tree/master</li>
</ul>

<h3 id="worktime">Worktime</h3>

<p>Have the students experiment with Rack middleware by cloning this <a href="https://github.com/turingschool-examples/rack-lobster">Rack Lobster</a> repo.</p>

<ul>
  <li>Demonstrate how to start the server.</li>
  <li>Take a look at the <code class="highlighter-rouge">config.ru</code> file and have them work through the numbered comments in order.</li>
  <li>Make the end goal for them to get their names to appear on the page that is being served.</li>
  <li>Provide a link to <a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">Introducing Rack</a> for a better understanding.</li>
</ul>

<p>Further Reading:</p>

<ul>
  <li><a href="https://blog.engineyard.com/2015/understanding-rack-apps-and-middleware">Understanding Rack Apps and Middleware</a> - by Ben Lewis (gSchool1 alum!)</li>
  <li><a href="http://codefol.io/posts/What-is-Rack-A-Primer">What is Rack?: A Primer</a></li>
  <li><a href="http://railscasts.com/episodes/151-rack-middleware">RailsCasts: Rack Middleware</a></li>
  <li><a href="http://culttt.com/2015/09/09/what-is-ruby-rack/">What is Ruby Rack</a></li>
</ul>
:ET