I"W<h1 id="lets-get-sassy">Let’s Get SASSy</h1>

<h2 id="what-is-sass">What is SASS?</h2>

<p>SASS stands for “Syntactically Awesome StyleSheets”. It is an effective way to manage a stylesheet and is perfect for css that is repetitive. Today, we will go through a simple html example of compiling SASS (also referred to as scss) into css.</p>

<h3 id="goals-of-this-lesson">Goals of This Lesson:</h3>

<ol>
  <li>Understand what SASS is.</li>
  <li>Be able to setup the SASS gem and compile scss to css.</li>
  <li>Use variables in scss files.</li>
  <li>Understand and use nesting in SASS.</li>
</ol>

<h3 id="setup">Setup</h3>

<p>Clone down the <code class="highlighter-rouge">sass_playground</code> repo <a href="https://github.com/turingschool-examples/sass_playground">here</a>.</p>

<p>First things first, let’s get SASS setup for use with our command line.</p>

<ol>
  <li><code class="highlighter-rouge">gem install sass</code></li>
  <li>Verify that sass is setup by checking the version (<code class="highlighter-rouge">sass -v</code>).</li>
</ol>

<p>Check out the repo:</p>

<p>What is different between the <code class="highlighter-rouge">stylesheet</code> folder in this folder and a typical <code class="highlighter-rouge">stylesheet</code> folder?</p>

<p>Take a look at the <code class="highlighter-rouge">index.html</code> file. Is there anything different in that file?</p>

<p>Common Theme: Nesting</p>

<ul>
  <li>Nested within the <code class="highlighter-rouge">stylesheet/css</code> folder, there is a <code class="highlighter-rouge">scss</code> folder. This is where our SASS file lives and it is designated by <code class="highlighter-rouge">.scss</code>.</li>
</ul>

<p>Let’s jump in:</p>

<h3 id="compiling">Compiling</h3>

<p>This is how our <code class="highlighter-rouge">index.html</code> file looks:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>SASS Playground<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"stylesheet/css/custom.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"square"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"blob_1"</span><span class="nt">&gt;</span>
        Blob 1
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"blob_2"</span><span class="nt">&gt;</span>
        Blob 2
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>If we open the file in our browser (<code class="highlighter-rouge">open index.html</code> from terminal). What do we see?</p>

<p>The code inside our <code class="highlighter-rouge">custom.scss</code> has the indication that our square should be 500 x 500 pixels and have a background color of purple. What’s happening?</p>

<p>We have not yet compiled our scss to css. And since we installed the gem, this should be easy!</p>

<p>In our terminal, we do the following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass stylesheet/css/scss/custom.scss stylesheet/css/custom.css
</code></pre></div></div>

<p>Let’s do the above command now and refresh <code class="highlighter-rouge">index.html</code> and we should now see a purple square.</p>

<h4 id="why">Why?</h4>

<ul>
  <li>Our system does not know how to interpret scss like it knows to do with css so by installing the gem, we have created a way to command our computer to compile the scss into plain css.
    <ol>
      <li><code class="highlighter-rouge">sass</code> invokes the gem.</li>
      <li><code class="highlighter-rouge">stylesheet/css/scss/custom.scss</code> chooses the scss or sass file to compile.</li>
      <li><code class="highlighter-rouge">stylesheet/css/custom.scss</code> chooses where to put the compiled css file.</li>
    </ol>
  </li>
</ul>

<h3 id="variables">Variables</h3>

<p>SASS allows for the use of variables, just like other languages we are used to, which can be very helpful. A  value can now be changed in one place.</p>

<p>A variable is declared with the <code class="highlighter-rouge">$</code> sign.</p>

<p>For example:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/**/</span><span class="nt">declaring</span> <span class="nt">variable</span>
<span class="err">$</span><span class="nt">standard-margin</span><span class="o">:</span> <span class="err">40</span><span class="nt">px</span><span class="o">;</span>

<span class="c">/**/</span><span class="nt">using</span> <span class="nt">variable</span>
<span class="nc">.parent</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="err">$</span><span class="n">standard-margin</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The color of purple that I chose is unique so on your own, go ahead and declare a variable with the value of the unique color of purple and assign it to the background color of the square.</p>

<h3 id="nesting">Nesting</h3>

<p>In SASS, selectors are nested in other selectors. This allows us to maintain a parent while easily modifying the children.</p>

<p>Consider the following piece of html and css:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"parent"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"child-1"</span><span class="nt">&gt;</span>
    I am the 1st child.
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"child-2"</span><span class="nt">&gt;</span>
    I am the 2nd child.
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.parent</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.parent</span> <span class="nc">.child-1</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.parent</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="err">.child-1</span> <span class="err">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">sass_playground</code>, set the <code class="highlighter-rouge">font-size</code> of <code class="highlighter-rouge">blob_1</code> to <code class="highlighter-rouge">40px</code> and <code class="highlighter-rouge">blob_2</code> to <code class="highlighter-rouge">90px</code></p>

<p>Another type of nesting that SASS allows for is the nesting of CSS properties</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.parent</span> <span class="p">{</span>
  <span class="nl">font</span> <span class="p">:</span> <span class="err">{</span>
    <span class="n">size</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
    <span class="py">family</span><span class="p">:</span> <span class="n">Arial</span><span class="p">;</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p>The above will compile css as follows:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.parent</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="n">Arial</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lets’s add a <code class="highlighter-rouge">font-family</code> of cursive and a <code class="highlighter-rouge">text-decoration</code> of underline to <code class="highlighter-rouge">Blob 1</code></p>

<p>Let’s add a <code class="highlighter-rouge">text-decoration</code> of underline with <code class="highlighter-rouge">text-align</code> center for <code class="highlighter-rouge">Blob 2</code>.</p>

<p>Any refactoring that can happen?</p>

<p>A variable can be created for the <code class="highlighter-rouge">text-decoration</code>.</p>

<p>What about multiple arguments for something like a border? Take 5 minutes to do some self discovery and see if you can put a solid brown 3px border around each blob.</p>

<h3 id="mixins">Mixins</h3>

<p>There is advanced capabilities but we are going to talk about a simple way to create what I would call, a function or method in SASS. It can encompass multiple attributes that might be common together.</p>

<p>Do some research on mixins for 5 minutes and see if there is some refactoring that we can do in the <code class="highlighter-rouge">scss</code> file.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="nt">underlined</span><span class="o">:</span> <span class="nt">underline</span><span class="o">;</span>
<span class="err">$</span><span class="nt">brown-border</span><span class="o">:</span> <span class="err">3</span><span class="nt">px</span> <span class="nt">solid</span> <span class="nt">brown</span><span class="o">;</span>

<span class="k">@mixin</span> <span class="n">text_components</span> <span class="p">{</span>
  <span class="py">text</span> <span class="p">:</span> <span class="err">{</span>
    <span class="n">align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="py">decoration</span><span class="p">:</span> <span class="err">$</span><span class="n">underlined</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">border</span><span class="o">:</span> <span class="err">$</span><span class="nt">brown-border</span><span class="o">;</span>
<span class="err">}</span>

<span class="nc">.square</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#672e6d</span><span class="p">;</span>
  <span class="err">.blob_1</span> <span class="err">{</span>
    <span class="nl">font</span> <span class="p">:</span> <span class="err">{</span>
      <span class="n">size</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
      <span class="py">family</span><span class="p">:</span> <span class="nb">cursive</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">@include</span> <span class="n">text_components</span><span class="p">;</span>
  <span class="err">}</span>
  <span class="nc">.blob_2</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
    <span class="err">@include</span> <span class="err">text_components;</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p>A mixin can also take an argument:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="nt">underlined</span><span class="o">:</span> <span class="nt">underline</span><span class="o">;</span>
<span class="err">$</span><span class="nt">brown-border</span><span class="o">:</span> <span class="err">3</span><span class="nt">px</span> <span class="nt">solid</span> <span class="nt">brown</span><span class="o">;</span>

<span class="k">@mixin</span> <span class="n">text_components</span><span class="p">(</span><span class="err">$</span><span class="n">underlined</span><span class="p">)</span> <span class="p">{</span>
  <span class="py">text</span> <span class="p">:</span> <span class="err">{</span>
    <span class="n">align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="py">decoration</span><span class="p">:</span> <span class="err">$</span><span class="n">underlined</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">border</span><span class="o">:</span> <span class="err">$</span><span class="nt">brown-border</span><span class="o">;</span>
<span class="err">}</span>

<span class="nc">.square</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#672e6d</span><span class="p">;</span>
  <span class="err">.blob_1</span> <span class="err">{</span>
    <span class="nl">font</span> <span class="p">:</span> <span class="err">{</span>
      <span class="n">size</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
      <span class="py">family</span><span class="p">:</span> <span class="nb">cursive</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">@include</span> <span class="n">text_components</span><span class="p">(</span><span class="err">$</span><span class="n">underlined</span><span class="p">);</span>
  <span class="err">}</span>
  <span class="nc">.blob_2</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
    <span class="err">@include</span> <span class="err">text_components($</span><span class="py">underlined</span><span class="p">:</span> <span class="nb">line-through</span><span class="p">);</span>
  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p>What happens when we compile and open <code class="highlighter-rouge">index.html</code>? Why?</p>

<p>In the example above, <code class="highlighter-rouge">Blob 2</code>, <code class="highlighter-rouge">$underlined</code> is set to <code class="highlighter-rouge">line-through</code>. We can pass in default arguments to our mixins and change those values!</p>

<p>Multiple arguments can be passed into a mixin.</p>

<p>What will the following code compile to do in Blob 2?</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@include</span> <span class="n">text_components</span><span class="p">(</span><span class="err">$</span><span class="n">underlined</span><span class="p">,</span> <span class="err">$</span><span class="n">brown-border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">dashed</span> <span class="no">green</span><span class="p">);</span>
</code></pre></div></div>

<p>What problems did you run into?</p>

<p>Define a new mixin of your choice to implement.</p>

<h3 id="mixins-with-dynamic-values">Mixins with Dynamic Values</h3>

<p>Another way that we could use a mixin is in a more dynamic way. In the above example, we used variables that we had already had created. How do we create a more dynamic mixin?</p>

<p>Take 3 minutes to see if you can build a dynamic <code class="highlighter-rouge">border-styling</code> mixin that will take 3 arguments: radius, style and color. Give Blob 1 a border radius of 9px, style of dotted and a color of blue. Try this without changing the <code class="highlighter-rouge">text-components</code> mixin and then after that, try with changing it.</p>

<p>Run into any problems?</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="n">border-styling</span><span class="p">(</span><span class="err">$</span><span class="n">radius</span><span class="p">,</span> <span class="err">$</span><span class="n">style</span><span class="p">,</span> <span class="err">$</span><span class="n">color</span><span class="p">)</span> <span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="err">$</span><span class="n">radius</span> <span class="err">$</span><span class="n">style</span> <span class="err">$</span><span class="n">color</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we want to use that within the <code class="highlighter-rouge">text-components</code> mixin, it would look something like this:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="n">text_components</span><span class="p">(</span><span class="err">$</span><span class="n">underlined</span><span class="p">)</span> <span class="p">{</span>
  <span class="py">text</span> <span class="p">:</span> <span class="err">{</span>
    <span class="n">align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="py">decoration</span><span class="p">:</span> <span class="err">$</span><span class="n">underlined</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">@include</span> <span class="n">border-styling</span><span class="p">(</span><span class="err">$</span><span class="n">radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">,</span> <span class="err">$</span><span class="n">style</span><span class="p">:</span> <span class="nb">solid</span><span class="p">,</span> <span class="err">$</span><span class="n">color</span><span class="p">:</span> <span class="no">brown</span><span class="p">);</span>
<span class="err">}</span>
</code></pre></div></div>

<p>Notice that we removed <code class="highlighter-rouge">$brown-border</code> from the mixin and instead defined defaults for my <code class="highlighter-rouge">text_components</code> mixin border.</p>

<p>We have also adjusted the following information to capture the custom borders of both blobs:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.square</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#672e6d</span><span class="p">;</span>
  <span class="err">.blob_1</span> <span class="err">{</span>
    <span class="nl">font</span> <span class="p">:</span> <span class="err">{</span>
      <span class="n">size</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
      <span class="py">family</span><span class="p">:</span> <span class="nb">cursive</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">@include</span> <span class="n">text_components</span><span class="p">(</span><span class="err">$</span><span class="n">underlined</span><span class="p">);</span>
    <span class="k">@include</span> <span class="n">border-styling</span><span class="p">(</span><span class="err">$</span><span class="n">radius</span><span class="p">:</span> <span class="m">9px</span><span class="p">,</span> <span class="err">$</span><span class="n">style</span><span class="p">:</span> <span class="nb">dotted</span><span class="p">,</span> <span class="err">$</span><span class="n">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">);</span>
  <span class="err">}</span>
  <span class="nc">.blob_2</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
    <span class="err">@include</span> <span class="err">text_components($</span><span class="py">underlined</span><span class="p">:</span> <span class="nb">line-through</span><span class="p">);</span>
    <span class="err">@include</span> <span class="err">border-styling($</span><span class="py">radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">,</span> <span class="err">$</span><span class="n">style</span><span class="p">:</span> <span class="nb">dashed</span><span class="p">,</span> <span class="err">$</span><span class="n">color</span><span class="p">:</span> <span class="no">green</span><span class="p">);</span>

  <span class="p">}</span>
<span class="err">}</span>
</code></pre></div></div>

<h3 id="recap">Recap:</h3>

<p>Couldn’t get it to work? See the solutions branch <a href="https://github.com/turingschool-examples/sass_playground/tree/solutions-check-point-1">here</a>.</p>

<p>When could this have been useful in the past?</p>

<ul>
  <li>Compiling</li>
  <li>Variables</li>
  <li>Nesting</li>
  <li>Mixins</li>
  <li><a href="http://sass-lang.com/">SASS Resource</a></li>
</ul>
:ET