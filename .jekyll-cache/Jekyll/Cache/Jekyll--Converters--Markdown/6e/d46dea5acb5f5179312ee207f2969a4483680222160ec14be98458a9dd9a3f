I"º:<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand what stubbing is, how to stub in Ruby with Minitest, when to use it</li>
  <li>Understand what mocking is, how to mock in Ruby with Minitest, and when to use it</li>
  <li>Understand what a fixture is and how to create one</li>
  <li>What‚Äôs the difference between behavior and state testing</li>
</ul>

<p>Slides <a href="../slides/fixtures_mocks_stubs">here</a></p>

<h2 id="test-helper-a-preface">Test Helper: A Preface</h2>

<p>Tired of writing all those <code class="highlighter-rouge">require</code> statements at the top of each file? Let‚Äôs start thinking of our test files in a more DRY fashion.</p>

<p>Creating a <code class="highlighter-rouge">test_helper.rb</code> that our test files require allows us to store the rest of our repetitive setup in one centralized location.</p>

<h2 id="fixtures">Fixtures</h2>

<p>You may not have fully noticed yet, but all that data processing we‚Äôre testing is really starting to affect our test suite‚Äôs performance. Let‚Äôs see if we can <em>fix</em> that up.</p>

<h3 id="basics">Basics</h3>

<ul>
  <li>Create smaller copies of files you‚Äôll use in production</li>
  <li>Mimic a request to an external dependency within testing environment, making calls
Let‚Äôs set up a quick <code class="highlighter-rouge">learning_fixtures</code> project folder in our <code class="highlighter-rouge">classwork</code> directory complete with <code class="highlighter-rouge">lib</code>, <code class="highlighter-rouge">data</code>, and <code class="highlighter-rouge">test</code> directories.</li>
</ul>

<p>We‚Äôre going to test-drive iterating over an absurdly long CSV.</p>

<p>But first, you‚Äôll need to download <a href="https://gist.github.com/laurenfazah/3390b8417274f11dee87eef02ea3c4db">this</a> and save it in <code class="highlighter-rouge">data</code>.</p>

<p>Let‚Äôs use our CSV knowledge create a hash based on the values contained in the CSV. We‚Äôll just create a new hash based on a few <em>key</em> headers and redefine those values with each new row in our CSV. We‚Äôll assert that the last <code class="highlighter-rouge">"EPISODE"</code> key‚Äôs value is from the last row of the CSV.</p>

<p>Seems pointless? We really just want to create a task that will take significantly long to perform, but would be relatively quick with a customized fixture.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'csv'</span>
<span class="nb">require</span> <span class="s1">'pry'</span>

<span class="k">class</span> <span class="nc">Bob</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="vi">@filename</span> <span class="o">=</span> <span class="n">filename</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">final_episode</span>
    <span class="n">episode</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="vi">@filename</span><span class="p">,</span> <span class="ss">headers: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
      <span class="n">episode</span><span class="p">[</span><span class="s2">"EPISODE"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s2">"EPISODE"</span><span class="p">]</span>
    <span class="k">end</span>

    <span class="n">episode</span><span class="p">[</span><span class="s2">"EPISODE"</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'./test/test_helper'</span>
<span class="nb">require</span> <span class="s1">'./lib/bob'</span>

<span class="k">class</span> <span class="nc">BobTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_exists</span>
    <span class="n">assert_instance_of</span> <span class="no">Bob</span><span class="p">,</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'./data/bob_elements.csv'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_pointless_iteration</span>
    <span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'./data/bob_elements.csv'</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="s2">"S31E13"</span><span class="p">,</span> <span class="n">bob</span><span class="p">.</span><span class="nf">final_episode</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Want to see approximately how long your tests take to run? Use the `-v` flag when running your tests and Minitest will be more verbose.
</code></pre></div></div>

<p>Once this is running, let‚Äôs speed things up with a <code class="highlighter-rouge">bob_elements_truncated.csv</code> fixture.</p>

<h2 id="mocks-and-stubs">Mocks and Stubs</h2>

<p>To get access to methods that create mocks and stubs, we‚Äôll need to install and require <code class="highlighter-rouge">mocha</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>mocha
</code></pre></div></div>

<p>Once that‚Äôs set, require <code class="highlighter-rouge">mocha/mini_test</code> in your test_helper.rb.</p>

<h3 id="mocks">Mocks</h3>

<p>Mocks are objects that stand in for other objects. The other object might be one that‚Äôs not implemented yet, doesn‚Äôt yet have the functionality we need, or maybe we just want to work with a simpler situation.</p>

<p>Let‚Äôs imagine we wanted to test <code class="highlighter-rouge">Bob</code>‚Äôs <code class="highlighter-rouge">paint_palatte</code> method to see that it returns a collection of <code class="highlighter-rouge">Paint</code> instances.</p>

<p>Does it seem entirely necessary to create and test <code class="highlighter-rouge">Paint</code> instances within a <code class="highlighter-rouge">BobTest</code>?</p>

<h4 id="a-first-mock">A First Mock</h4>

<p>A mock is a simple object that stands in for another object. At the base level, a mock is just a ‚Äúthing‚Äù ‚Äì a blank canvas that we can use for just about anything. You create a mock like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_thing</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">'name'</span><span class="p">)</span>
</code></pre></div></div>

<p>Looks weird, right? Read this code carefully and figure out:</p>

<ul>
  <li>what is <code class="highlighter-rouge">mock</code>, from a Ruby perspective? (like an ‚Äúobject‚Äù, ‚Äúinteger‚Äù, what?)</li>
  <li>what type thing is <code class="highlighter-rouge">'name'</code>?</li>
</ul>

<p>Let‚Äôs try to put it to use. Add within our <code class="highlighter-rouge">test_paint_palatte</code> method a mock for the <code class="highlighter-rouge">Paint</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">'paint'</span><span class="p">)</span>
<span class="n">paint_2</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">'paint'</span><span class="p">)</span>
<span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>

<p>Run your test and pry should pause things. Figure out what the class of <code class="highlighter-rouge">paint_1</code> and <code class="highlighter-rouge">paint_2</code> is. Find the documentation for this class on the web to get an idea of what‚Äôs possible. Query the <code class="highlighter-rouge">paint_1</code> object to find out what methods it has. Exit pry.</p>

<p>Remove the <code class="highlighter-rouge">binding.pry</code>, run the test, and it still fails. Add the functionality needed to <code class="highlighter-rouge">Bob</code> to make it work!</p>

<p>Now that your tests are passing, notice how the mocks allowed you to build out the <code class="highlighter-rouge">Bob</code> functionality without actually implementing a <code class="highlighter-rouge">Paint</code> class.</p>

<h4 id="mock-expectations">Mock Expectations</h4>

<p>Mocks can do more than just stand there.</p>

<p>Imagine we want to test a <code class="highlighter-rouge">paint_colors</code> method that returns an array of colors as strings.</p>

<p>Also imagine our future <code class="highlighter-rouge">Paint</code> class will be initialized with a parameter of <code class="highlighter-rouge">color</code> that will be returned to us by a <code class="highlighter-rouge">color</code> method on it.</p>

<p>Again, we‚Äôre focusing on tests for <code class="highlighter-rouge">Bob</code>, so we shouldn‚Äôt get sidetracked by the <code class="highlighter-rouge">Paint</code> class requirements.</p>

<p>When you look at the mocha documentation you‚Äôll find that a mock has methods we can call on it.</p>

<ul>
  <li><code class="highlighter-rouge">.expects</code> defines a method that can be called on the mock</li>
  <li><code class="highlighter-rouge">.returns</code> defines the value that the expected method should return</li>
</ul>

<p>Putting that together we can do the following within <code class="highlighter-rouge">BobTest</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">'paint'</span><span class="p">)</span>
<span class="n">paint_1</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:color</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="s2">"Alizarin Crimson"</span><span class="p">)</span>
<span class="n">paint_2</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">'paint'</span><span class="p">)</span>
<span class="n">paint_2</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:color</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="s2">"Van Dyke Brown"</span><span class="p">)</span>
<span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
</code></pre></div></div>

<p>Once you‚Äôre in pry, try calling the <code class="highlighter-rouge">color</code> method on <code class="highlighter-rouge">paint_1</code>. Does it work? Call it again? Does it work?</p>

<p>Now go ahead and implement the <code class="highlighter-rouge">paint_colors</code> method in <code class="highlighter-rouge">Bob</code> to make the test pass.</p>

<p>That‚Äôs how mocks work. You create a mock to stand in for other objects and can add some simple capabilities to get you the functionality you need.</p>

<h3 id="stubs">Stubs</h3>

<p>A stub is a fake method added to or overriding an existing method on an object. It‚Äôs really just syntactic sugar for the <code class="highlighter-rouge">expects</code> &amp; <code class="highlighter-rouge">returns</code> duo with Mocks above - just more straightforward!</p>

<p>So why would we use a stub over an expectation? Stubs take precedence. From the Mocha docs:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; if you create an expectation and then a stub for the same method, the stub will always override the expectation and the expectation will never be met.

&gt; if you create a stub and then an expectation for the same method, the expectation will match, and when it stops matching the stub will be used instead, possibly masking test failures.

&gt; if you create different expectations for the same method, they will be invoked in the opposite order than that in which they were specified, rather than the same order
</code></pre></div></div>

<h4 id="a-first-stub">A First Stub</h4>

<p>Let‚Äôs create another test for <code class="highlighter-rouge">Bob</code> that checks how much paint he has left with a <code class="highlighter-rouge">paint_amount</code> method.</p>

<p>Let‚Äôs set up our <code class="highlighter-rouge">Paint</code> instances with an <code class="highlighter-rouge">amount</code> method that returns something numeric.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span><span class="p">.</span><span class="nf">stubs</span><span class="p">(</span><span class="ss">:amount</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="mi">22</span><span class="p">)</span>
<span class="n">paint_2</span><span class="p">.</span><span class="nf">stubs</span><span class="p">(</span><span class="ss">:amount</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div></div>

<p>With these in place, let‚Äôs leverage our advanced enum knowledge to get this test to pass with a total <code class="highlighter-rouge">paint_amount</code> of 62.</p>

<h3 id="check-for-understanding">Check for Understanding</h3>

<p>With your partners, teach back the difference between stubs and mocks. Check the <a href="https://github.com/freerange/mocha">mocha docs</a> for more details.</p>

<h2 id="the-ultimate-cfu">The Ultimate CFU</h2>

<ul>
  <li>How will you know you‚Äôre writing a test that might be appropriate for stubbing or mocking?</li>
  <li>When would you use a stub over a mock with expectations and returns?</li>
  <li>How many lines of data should you include in your fixture files?</li>
</ul>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li>Martin Fowler - Test Double: link <a href="http://www.martinfowler.com/bliki/TestDouble.html">here</a></li>
  <li>Gerard Meszaros - Test Double: link <a href="http://xunitpatterns.com/Test%20Double.html">here</a></li>
</ul>
:ET