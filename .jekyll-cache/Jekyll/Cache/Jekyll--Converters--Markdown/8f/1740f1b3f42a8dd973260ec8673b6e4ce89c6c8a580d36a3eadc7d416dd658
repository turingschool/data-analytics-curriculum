I"•/<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand what mocking and stubbing is and why we would use it.
    <ul>
      <li>Understand the difference between a mock and a stub.</li>
    </ul>
  </li>
  <li>Learn the syntax for mocks and stubs with mocha.</li>
  <li>Pracice creating stubs to help with integration tests.</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>Mock</li>
  <li>Stub</li>
  <li>Unit Test</li>
  <li>Integration Test</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>Thinking back to your first two projects - was there any functionality for which you could <strong>not</strong> write tests?</li>
  <li>Can you think of any scenarios where a method would return an <em>unknowable</em> value?</li>
</ul>

<h2 id="syntax-overview">Syntax Overview</h2>

<h3 id="setup">Setup</h3>

<ol>
  <li>Clone the <a href="https://github.com/turingschool/bob_ross">Bob Ross repo</a> onto your local computer.</li>
  <li>cd bob_ross</li>
</ol>

<p>To get access to methods that create mocks and stubs, we‚Äôll need to install and require the <code class="highlighter-rouge">mocha</code> gem. A gem is a package of code that someone else wrote. We bring them in to projects to make our lives easier!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>mocha
</code></pre></div></div>

<p>Once that‚Äôs set, we can now require mocha at the top of our bob_test.rb:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'mocha/minitest'</span>
<span class="nb">require</span> <span class="s1">'./lib/bob'</span>

</code></pre></div></div>

<h3 id="mocks">Mocks</h3>

<p>In the test below, we are testing <code class="highlighter-rouge">Bob</code>‚Äôs <code class="highlighter-rouge">paints</code> method to see that it returns a collection of <code class="highlighter-rouge">Paint</code> instances.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_it_can_have_paint</span>
  <span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">paint_1</span> <span class="o">=</span> <span class="no">Paint</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Alizarin Crimson"</span><span class="p">)</span>
  <span class="n">paint_2</span> <span class="o">=</span> <span class="no">Paint</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Van Dyke Brown"</span><span class="p">)</span>

  <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_1</span><span class="p">)</span>
  <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_2</span><span class="p">)</span>

  <span class="n">assert_equal</span> <span class="p">[</span><span class="n">paint_1</span><span class="p">,</span> <span class="n">paint_2</span><span class="p">],</span> <span class="n">bob</span><span class="p">.</span><span class="nf">paints</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Turn and Talk:</strong></p>

<p>Run the test - why is it so slow?</p>

<p>In this particular example, we are relying on creating an object that takes a loooong time to create.  In this example, we have forced the issue by putting a <code class="highlighter-rouge">sleep</code> in the Paint class; but in the real world, this kind of slow down could be caused by a lengthy API call, or perhaps another team is working on the Paint class, and we don‚Äôt have the class yet (and it is not our task to create the class).  In order to focus our test more distincly on the Bob class, we can use a Mock.</p>

<p><strong>Mocks are objects that stand in for other objects.</strong> The other object might be one that‚Äôs not implemented yet, doesn‚Äôt yet have the functionality we need, or maybe we just want to work with a simpler situation. You can think of a mock as fake or a dummy object.</p>

<p>In the test above, we are going to use a Mock object to stand in for a Paint object.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">"paint"</span><span class="p">)</span>
</code></pre></div></div>

<p>The argument to the <code class="highlighter-rouge">mock</code> method is an identifier. You can leave it out:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_2</span> <span class="o">=</span> <span class="n">mock</span>
</code></pre></div></div>

<p>Remember, a mock is a simple object that stands in for another object. At the base level, a mock is just a ‚Äúthing‚Äù ‚Äì a blank canvas that we can use for just about anything.</p>

<p>Let‚Äôs update this test so that it uses Mocks instead of Paints.</p>

<h3 id="stubs">Stubs</h3>

<p>In our next test, we are testing that we can get an array of the paint colors (not just paint objects).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_it_can_return_colors</span>
  <span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">"paint 1"</span><span class="p">)</span>
  <span class="n">paint_2</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s2">"paint 2"</span><span class="p">)</span>
  <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_1</span><span class="p">)</span>
  <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_2</span><span class="p">)</span>

  <span class="n">assert_equal</span> <span class="p">[</span><span class="s2">"Alizarin Crimson"</span><span class="p">,</span> <span class="s2">"Van Dyke Brown"</span><span class="p">],</span> <span class="n">bob</span><span class="p">.</span><span class="nf">paint_colors</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>A stub is a fake method.</strong> It can be added to an object that doesn‚Äôt have that method, or it can override an existing method. We can add a stub to a mock so our fake object will now have a fake method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span>
<span class="n">paint_1</span><span class="p">.</span><span class="nf">stubs</span><span class="p">(</span><span class="ss">:color</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="s2">"Van Dyke Brown"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, whenever we call <code class="highlighter-rouge">paint_1.color</code> it will return <code class="highlighter-rouge">"Van Dyke Brown"</code>.</p>

<p>Let‚Äôs update this test so that it stubs out the color method for the Mock objects.</p>

<h3 id="mock-expectations">Mock Expectations</h3>

<p>Replace your existing <code class="highlighter-rouge">paint_colors</code> method with the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">paint_colors</span>
  <span class="p">[</span><span class="s2">"Alizarin Crimson"</span><span class="p">,</span> <span class="s2">"Van Dyke Brown"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run your test. What happens?</p>

<p>Mocks can do more than just stand there. <strong>They can also verify that they have been called.</strong> Why might we want that functionality when using stubs?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paint_1</span> <span class="o">=</span> <span class="n">mock</span>
<span class="n">paint_1</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:color</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="s2">"Van Dyke Brown"</span><span class="p">)</span>
</code></pre></div></div>

<p>Run your tests and you will notice they now fail. Read the failure carefully.</p>

<p>Change your <code class="highlighter-rouge">paint_colors</code> method to pass the test.</p>

<p><strong>Pair Work:</strong></p>

<p>With that last test, update it to use mocks and stubs so that you can make it pass without invoking the Paint class. (Your tests should run in under 1second)</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">test_it_can_total_paint_amount</span>
    <span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">paint_1</span> <span class="o">=</span> <span class="no">Paint</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Alizarin Crimson"</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
    <span class="n">paint_2</span> <span class="o">=</span> <span class="no">Paint</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Van Dyke Brown"</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>

    <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_1</span><span class="p">)</span>
    <span class="n">bob</span><span class="p">.</span><span class="nf">add_paint</span><span class="p">(</span><span class="n">paint_2</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="mi">67</span><span class="p">,</span> <span class="n">bob</span><span class="p">.</span><span class="nf">total_paint_amount</span>
  <span class="k">end</span>
</code></pre></div></div>

<h3 id="individiual-practice">Individiual Practice:</h3>

<p><strong>Setup:</strong></p>

<ol>
  <li>Clone down the <a href="https://github.com/turingschool-examples/user_image_generator">User Image Generator</a>.</li>
  <li>cd user_image_generator</li>
  <li>gem install mocha</li>
</ol>

<p><strong>Directions:</strong></p>

<ul>
  <li>Review the Image Generator class and corresponding test file to familiarize yourself with the functionality</li>
  <li>Leveraging stubs, write tests for <code class="highlighter-rouge">#generate_images</code> and <code class="highlighter-rouge">#change_max_size</code></li>
  <li>Move on to the <code class="highlighter-rouge">user_test.rb</code></li>
  <li>Run the tests, and read through the comments carefully</li>
  <li>Using stubs and/or mocks, write the tests to confirm the rest of the functionality that exists in ``./lib/user.rb`</li>
</ul>

<h3 id="interview-question">Interview Question</h3>

<p>What are mocks and stubs? When would you use them?</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li>Martin Fowler - Test Double: link <a href="http://www.martinfowler.com/bliki/TestDouble.html">here</a></li>
  <li>Gerard Meszaros - Test Double: link <a href="http://xunitpatterns.com/Test%20Double.html">here</a></li>
</ul>
:ET