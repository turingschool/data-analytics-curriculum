I"è<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand how Ruby finds code when using <code class="highlighter-rouge">require</code></li>
  <li>Understand file namespacing (advantages of <code class="highlighter-rouge">lib/enigma/chunk_rotate.rb</code> over <code class="highlighter-rouge">lib/chunk_rotate.rb</code>)</li>
  <li>No more relative requires (<code class="highlighter-rouge">require "./lib/file"</code> or <code class="highlighter-rouge">require_relative "file"</code>)</li>
  <li>Understand why they can use <code class="highlighter-rouge">require</code> when testing, but not when run outside the test env</li>
  <li>Be able to use Rubyâ€™s <code class="highlighter-rouge">-I</code> flag</li>
  <li>Be able to set the <code class="highlighter-rouge">$LOAD_PATH</code> from their toplevel file.</li>
  <li>Understand how to find code with <code class="highlighter-rouge">gem which anything/i/can/require</code></li>
</ul>

<h2 id="structure">Structure</h2>

<h2 id="content">Content</h2>

<p>Raise your hand if your code has ever mysteriously broken because it canâ€™t find the file youâ€™re requiring
(thatâ€™s all of you). Ever fix it by messing around with the require statement until it worksâ€¦
only to find it broken again at some other point? Fkn frustrating, eh?</p>

<p>What weâ€™ll learn today will put that nonsense in the past!</p>

<h3 id="what-is-the-load_path">What is the <code class="highlighter-rouge">$LOAD_PATH</code>?</h3>

<p>The <code class="highlighter-rouge">$LOAD_PATH</code> is a global variable that points at an array of directoryies (folders).
Take a look at it now:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ruby -r pp -e 'pp $LOAD_PATH'
["/Users/josh/.rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/x86_64-darwin13",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/site_ruby",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/vendor_ruby/2.2.0",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/vendor_ruby/2.2.0/x86_64-darwin13",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/vendor_ruby",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/2.2.0",
 "/Users/josh/.rubies/ruby-2.2.2/lib/ruby/2.2.0/x86_64-darwin13"]
</code></pre></div></div>

<h3 id="exercise-write-my_require">Exercise: Write <code class="highlighter-rouge">my_require</code></h3>

<p>When you require a file, Ruby will search through this array, sequentially,
until it locates the file you required.</p>

<p>Go ahead and try writing it. Youâ€™ll need to know about these helpful methods:</p>

<ul>
  <li><code class="highlighter-rouge">File.exist?("my_file.rb") # =&gt; true</code> Give it a path, it will tell you whether thereâ€™s a file there.</li>
  <li><code class="highlighter-rouge">raise LoadError, "cannot load such file -- #{filename}"</code> This will make it blow up like it does when you require nonexistent files</li>
  <li><code class="highlighter-rouge">File.read("#{dirname}/#{filename}.rb")</code> Returns the fileâ€™s contents, as a string</li>
  <li><code class="highlighter-rouge">eval("123 + 456") # =&gt; 579</code> Give it a string of Ruby code, it will evaluate the code</li>
</ul>

<p>Here is <a href="https://gist.github.com/JoshCheek/bb272ccc4748a5d062db">my solution</a>.</p>

<h3 id="exercise">Exercise</h3>

<p>Put this in a file named <code class="highlighter-rouge">file1.rb</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is file1</span>
<span class="nb">puts</span> <span class="s2">"beginning of file1"</span>
<span class="c1"># directory = File.expand_path(".", __dir__) # __dir__ is the directory of the current file</span>
<span class="c1"># $LOAD_PATH.unshift(directory)</span>
<span class="nb">require</span> <span class="s1">'file2'</span>
<span class="nb">puts</span> <span class="s2">"end of file1"</span>
</code></pre></div></div>

<p>In the same directory, this will be <code class="highlighter-rouge">file2.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"file2 loaded"</span>
</code></pre></div></div>

<p>The first file requires the second, and it is in the same directory.
Run (<code class="highlighter-rouge">$ ruby file1.rb</code> it and see it fail.</p>

<p>Uncomment the third and fourth lines to fix the load path.
Now run it and see it pass.</p>

<p>Now, put file1 into a directory named test, and file2 into a directory named lib.
Run it again, it should fail. Fix the path so it finds the correct directory.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir test </span>lib
<span class="nv">$ </span><span class="nb">mv </span>file1.rb <span class="nb">test</span>/file1.rb
<span class="nv">$ </span><span class="nb">mv </span>file2.rb lib/file2.rb
</code></pre></div></div>

<h3 id="setting-the-load_path">Setting the <code class="highlighter-rouge">$LOAD_PATH</code></h3>

<p>Here are a few common ways to set the <code class="highlighter-rouge">$LOAD_PATH</code></p>

<ol>
  <li>Edit the global variable, as weâ€™ve done above.</li>
  <li>In a test environment, mrspec will add <code class="highlighter-rouge">lib</code> and <code class="highlighter-rouge">test</code> and <code class="highlighter-rouge">spec</code> for you, if those directories exist.</li>
  <li>The -I flag will also set directories on the load path <code class="highlighter-rouge">ruby -I /abc -r pp -e 'pp $LOAD_PATH'</code></li>
</ol>

<h3 id="exercise-1">Exercise</h3>

<p>Recomment the load path code in test/file1.rb, and use the <code class="highlighter-rouge">-I</code> flag to make the require statement work again.</p>

<h3 id="questions">Questions</h3>

<ul>
  <li>What happens if there are 2 directories that have a file of that name?</li>
</ul>

<hr />

<p>Other stuff I didnâ€™t incorporate, but might be useful for next time:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Related topics we can cover if we have time
  Why do we do `$LOAD_PATH.unshift dirname` instead of `$LOAD_PATH &lt;&lt; dirname` ?
  What happens if you require a file more than once?
  Why do gems follow the directory structure of example2?


------------------------
The $PATH
  On the command line there is the $PATH
  This can be thought of as an array which holds directories.
  Really it's string with directories separated by colons.
  `$ echo $PATH`
  `$ echo $PATH | tr : "\n"`
  When I run a program like `$ls`, it searches through these directories until it finds the program, and then runs it.
  You can see where a program is by saying `$which ls` (/bin/ls)
  And we can see that /bin is in the $PATH, so when we run it, it will search through these directories until it finds the ls in /bin
  Now what if we put another directory in front of it, which has an ls program in it?
  Then it will find the other ls program.

  `
  $ echo echo LOLOL &gt; ls
  $ chmod +x ls

  $ ls
  some_file.rb ls

  $ export PATH="$PWD:$PATH"
  $ ls
  LOLOL
  `

  In fact, this is how RVM switches out which Ruby you are currently using, it modifies the load path so that the ruby you want to use will always be found first.
</code></pre></div></div>
:ET