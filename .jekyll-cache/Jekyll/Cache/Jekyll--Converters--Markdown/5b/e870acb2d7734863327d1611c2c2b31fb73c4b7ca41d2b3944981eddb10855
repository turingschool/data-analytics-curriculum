I"n_<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Learn how to use &amp; recreate the functionality of <code class="highlighter-rouge">.map</code>, <code class="highlighter-rouge">.find_all</code> and <code class="highlighter-rouge">.find</code> using <code class="highlighter-rouge">.each</code></li>
  <li>Understand when to use <code class="highlighter-rouge">.map</code>, <code class="highlighter-rouge">.find_all</code> and <code class="highlighter-rouge">.find</code> appropriately.</li>
  <li>Learn how to explore new enumerables using Ruby docs.</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>enumerable</li>
  <li>iterate</li>
  <li>map, find, find_all</li>
  <li>return value</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>What is <strong>iteration</strong> and when do we use it?</li>
  <li>In your notebook, write the code to that you would use to print each of the letters in this array: <code class="highlighter-rouge">dynasty_1 = ["K", "e", "n", "n", "e", "d", "y"]</code>.</li>
  <li>In your notebook, write the code that you would use to create a new array with capitalized versions of the following names.: <code class="highlighter-rouge">names = ['jack', 'bobby', 'teddy']</code></li>
</ul>

<h2 id="intro">Intro</h2>

<p>Earlier this week, we learned about the method #each. We used #each to iterate over a collection to accomplish a variety of tasks: transforming collections, pulling a subset of elements, and creating new things based on some or all of the elements in the collection.  Because iteration is something we do on a nearly daily basis as programmers, Ruby has built some out-of-the-box tools that help us streamline the more common iteration patterns.  These tools are categorized as <strong>enumerables</strong>.  Enumerables are methods that take the base function of #each and build on it to simplify certain patterns of iteration.</p>

<p>Before we get into the enumerables themselves, let’s take a moment to form a strategy for learning all of these new methods.  In a moment, you will receive a half sheet of guided notes, but for now, let’s use our notebooks to record the three key parts that we will want to know for any enumerable, including the method #each:</p>

<ul>
  <li>syntax</li>
  <li>return value</li>
  <li>best use-cases</li>
</ul>

<p>As we walk through some of the more common enumerables, we will be recording these three parts for each enumerable in your guided notes - you will be able to use these notes as a study tool to better cement each enumerable in your mind.</p>

<p>Let’s start our notes with #each.<br />
In the box labeled “Syntax”, let’s record the general syntax for an each method:</p>

<ul>
  <li>
    <p>syntax:</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">collection</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
  <span class="c1"># the block of code here will run for each element</span>
<span class="k">end</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Similarly, let’s record our return value that .each gives us, and the best use-cases for .each on the lines provided in the guided notes:</p>

<ul>
  <li>return value - #each returns the original array</li>
  <li>best use-cases - When iterating over a collection <em>and</em> there is not an Enumerable that specifically accomplishes the goal.</li>
</ul>

<h3 id="return-values">Return Values</h3>

<p>When we were learning about #each, we learned that #each will always return the <strong>original array</strong>, and we saw that when we use #each, we need to use a placeholder to preserve the return value we are looking for, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="n">doubles</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="n">doubles</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">doubles</span>
</code></pre></div></div>

<p>Knowing what we do about return values, can you guess what the following code snippet would return? Discuss with your parter, then we’ll run the code for the class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">double</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

  <span class="n">doubles</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
    <span class="n">doubles</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">double</span>
</code></pre></div></div>

<p>Even when we wrap an #each block inside a method, we need a placeholder to keep track of the return value that we want.  This is because the return value of a method will generally be the last line of code that is run, and we can consider the #each block from <code class="highlighter-rouge">do</code> to <code class="highlighter-rouge">end</code> as a single line of code.  Remember that each can be written on a single line like this: <code class="highlighter-rouge">numbers.each { |number| doubles &lt;&lt; number * 2 }</code></p>

<p>So, we would want to revise the code above to something like this to get the method to return doubles:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">double</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

  <span class="n">doubles</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
    <span class="n">doubles</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="k">end</span>

  <span class="n">doubles</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">double</span>
</code></pre></div></div>

<p>Now, our last line of code is <code class="highlighter-rouge">doubles</code> instead of the #each block, and the method will return what we expect.</p>

<p>We can also see the return value of <code class="highlighter-rouge">#each</code> if we save it to a variable:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="n">doubles</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">original</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="n">doubles</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">doubles</span>
<span class="nb">p</span> <span class="n">original</span>
</code></pre></div></div>

<h3 id="map--collect"><code class="highlighter-rouge">map</code> / <code class="highlighter-rouge">collect</code></h3>

<p><code class="highlighter-rouge">map</code> is a lot like <code class="highlighter-rouge">each</code>.</p>

<p>The difference is that <code class="highlighter-rouge">map</code> actually <em>returns whatever we do in the block</em>. Think about how this is different from each which will always return the content of the <em>original</em> array.</p>

<p>First, let’s look at the example we used above - taking an array of the numbers, we want to end up with an array with the doubles of each of those numbers. With <code class="highlighter-rouge">each</code>, we would do it like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="n">doubles</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="n">doubles</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">doubles</span>
</code></pre></div></div>

<p>Using map can make this much simpler:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">doubles</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">doubles</span>
</code></pre></div></div>

<p>Because <code class="highlighter-rouge">#map</code> returns the new array, we can easily return it from a method like so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">double</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
  <span class="n">doubles</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
    <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">double</span>
</code></pre></div></div>

<h4 id="partner-practice">Partner Practice</h4>

<p>Let’s just use one computer between the two of you for these activities. The method below returns an array of the brothers names in all caps using the method <code class="highlighter-rouge">#each</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">kennedy_brothers</span>
  <span class="n">brothers</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Robert"</span><span class="p">,</span> <span class="s2">"Ted"</span><span class="p">,</span> <span class="s2">"Joseph"</span><span class="p">,</span> <span class="s2">"John"</span><span class="p">]</span>

  <span class="n">caps_brothers</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="n">brothers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">brother</span><span class="o">|</span>
    <span class="n">caps_brothers</span> <span class="o">&lt;&lt;</span> <span class="n">brother</span><span class="p">.</span><span class="nf">upcase</span>
  <span class="k">end</span>

  <span class="n">caps_brothers</span>

<span class="k">end</span>
</code></pre></div></div>

<p><strong>Your Task</strong>
Open up a ruby file, and write a method that does the same thing as the code above, but using <code class="highlighter-rouge">#map</code>. Wait to record this in your notes until we go over it with the group.</p>

<p><strong>Turn &amp; Talk</strong><br />
Share your code with the partners next to you. Talk them through it and be specific. What is similar/different? Are there any changes/additions you want to make to your own code?</p>

<h3 id="find--detect"><code class="highlighter-rouge">find</code> / <code class="highlighter-rouge">detect</code></h3>

<p>A good thing about the methods in Ruby is that you can pretty much figure out what they do just by their name.</p>

<p><strong>Think About It</strong>
What do you think <code class="highlighter-rouge">find</code> or <code class="highlighter-rouge">detect</code> does? What will it return?</p>

<p><code class="highlighter-rouge">find</code> will return the <strong>first</strong> item from the collection that evaluates as <em>truthy</em>.</p>

<p>But before we go into how that works, let’s implement it with <code class="highlighter-rouge">each</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_me_first_even</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
    <span class="k">return</span> <span class="n">num</span> <span class="k">if</span> <span class="n">num</span><span class="p">.</span><span class="nf">even?</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>We walk through the array, and upon the first number it comes across that makes the block return true, it just returns the item and we are done.</p>

<p>This looks like fairly simple code, but we can make it cleaner with <code class="highlighter-rouge">.find</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_me_first_even</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">find</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
    <span class="n">num</span><span class="p">.</span><span class="nf">even?</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Oh just look at that, so nice. Remember, it will return the <strong>first</strong> item for which the block returns a truthy value.</p>

<h4 id="partner-practice-1">Partner Practice</h4>

<p>Using <code class="highlighter-rouge">#each</code>, write the code to find the first sister over four letters in length. Wait to move on until we discuss this as a group.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_sisters</span>
  <span class="n">sisters</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Rose"</span><span class="p">,</span> <span class="s2">"Kathleen"</span><span class="p">,</span> <span class="s2">"Eunice"</span><span class="p">,</span> <span class="s2">"Patricia"</span><span class="p">,</span> <span class="s2">"Jean"</span><span class="p">]</span>

  <span class="c1">### YOUR CODE HERE</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Your Task</strong>
Open up a ruby file, and write a method that does the same thing as the code above, but using <code class="highlighter-rouge">#find</code>. Wait to record this in your notes until we go over it with the group.</p>

<p><strong>Turn &amp; Talk</strong><br />
Share your code with the partners next to you. Talk them through it and be specific. What is similar/different? Are there any changes/additions you want to make to your own code?</p>

<h3 id="find_all--select"><code class="highlighter-rouge">find_all</code> / <code class="highlighter-rouge">select</code></h3>

<p>We’ve figured out how to get <em>one</em> matching thing out of an array, but what if we want ALL of the matching things?</p>

<p>Let’s start by thinking about how we would do this using our old friend, <code class="highlighter-rouge">.each</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">all_the_odds</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

  <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="k">if</span> <span class="n">num</span><span class="p">.</span><span class="nf">odd?</span>
  <span class="k">end</span>

  <span class="n">result</span>

<span class="k">end</span>
</code></pre></div></div>

<p>How does this look?</p>

<p>Not bad, but we’re stuck with that <code class="highlighter-rouge">result</code> container that we don’t like. Pay attention to this - it’s a pattern we want to keep an eye out for in the future. <strong>If we are catching things with a collector like this, there’s probably a better enumerable that we can use.</strong> So let’s use <code class="highlighter-rouge">.select</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">all_the_odds</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

  <span class="n">numbers</span><span class="p">.</span><span class="nf">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
    <span class="n">num</span><span class="p">.</span><span class="nf">odd?</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<h4 id="partner-practice-2">Partner Practice</h4>

<p>Using <code class="highlighter-rouge">#each</code>, write the code that will return the numbers that are divisible by 3. Wait to move on until we discuss this as a group.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_all_nums_divisible_by_3</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
  
  <span class="c1">### YOUR CODE HERE</span>

<span class="k">end</span>

</code></pre></div></div>

<p><strong>Your Task</strong>
Open up a ruby file, and write a method that does the same thing as the code above, but using <code class="highlighter-rouge">#find_all</code>. Wait to record this in your notes until we go over it with the group.</p>

<p><strong>Turn &amp; Talk</strong><br />
Share your code with the partners next to you. Talk them through it and be specific. What is similar/different? Are there any changes/additions you want to make to your own code?</p>

<h3 id="additional-enumerables">Additional Enumerables</h3>

<p>Now that we have walked through 3 of the most common Enumerables as a class, its time for you and your partner to do some independent research!  Working with your partner, research the following Enumerables and take notes on their syntax, return value, and best use cases. Be ready to share what you find! The <a href="https://ruby-doc.org/core-2.4.1/Enumerable.html">Enumerable Ruby docs</a> will be a great place to start!</p>

<ul>
  <li>#max</li>
  <li>#min</li>
  <li>#max_by</li>
  <li>#min_by</li>
  <li>#sort_by</li>
  <li>#all?</li>
  <li>#any?</li>
  <li>#none?</li>
  <li>#one?</li>
</ul>

<h2 id="final-cfu">Final CFU</h2>

<ul>
  <li>What do map, find, and find_all do? What do they return?</li>
  <li>What makes an enumerable preferable to each?</li>
  <li>What does the <code class="highlighter-rouge">?</code> on the end of a method indicate?</li>
</ul>

<h2 id="additional-exercises">Additional Exercises</h2>

<p>The <a href="https://github.com/turingschool/enums-exercises">Ruby-Exercises</a> are a great resource to get familiarized with enumerables. Enum exercises are in the <code class="highlighter-rouge">enumerables</code> tab.  Read the README to get a handle on how the exercises work, then complete the <code class="highlighter-rouge">map</code>, <code class="highlighter-rouge">select</code>, and <code class="highlighter-rouge">find</code> exercises.</p>
:ET