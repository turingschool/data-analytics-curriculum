I"¼X<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand Return Values</li>
  <li>Understand Arguments</li>
  <li>Define methods in Ruby</li>
  <li>Explain why we use methods</li>
  <li>Understand different types of methods</li>
  <li>Understand how abstraction helps us program</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/methods_and_return_values">here</a></p>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Return</li>
  <li>Method</li>
  <li>Argument</li>
  <li>Parse</li>
  <li>Execute</li>
  <li>Abstraction</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>
    <p>Write out a list of steps to describe how these lines of code work:</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159265359</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">pi</span>
</code></pre></div>    </div>
  </li>
  <li>What methods are being called?</li>
  <li>What are those methods being called on?</li>
</ul>

<h2 id="return-values">Return Values</h2>

<p>A <strong>Return Value</strong> is the output of a <strong>Method</strong>.</p>

<p>Every <strong>Method</strong> has <em>exactly one</em> <strong>Return Value</strong>.</p>

<p>A <strong>Return Value</strong> can be any type, for example <code class="highlighter-rouge">4</code>, <code class="highlighter-rouge">"Hello World"</code>, <code class="highlighter-rouge">true</code>, <code class="highlighter-rouge">[1,2,3]</code>, <code class="highlighter-rouge">nil</code>.</p>

<p>If you open a pry session and type</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span><span class="p">.</span><span class="nf">upcase</span>
<span class="o">=&gt;</span> <span class="s2">"HELLO WORLD"</span>
</code></pre></div></div>

<p>You are calling the <code class="highlighter-rouge">upcase</code> <strong>Method</strong> on the string<code class="highlighter-rouge">"Hello World"</code>. The <strong>Return Value</strong>, denoted by the <code class="highlighter-rouge">=&gt;</code>, is <code class="highlighter-rouge">"HELLO WORLD"</code>.</p>

<h2 id="arguments">Arguments</h2>

<p><strong>Arguments</strong> are the input to a method. They are also known as <strong>Parameters</strong>.</p>

<p>If you open a pry session and type</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span><span class="p">.</span><span class="nf">include?</span> <span class="s2">"Hello"</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<p>You are calling the <code class="highlighter-rouge">include?</code> method on the string <code class="highlighter-rouge">"Hello World"</code>. You are passing the <strong>Argument</strong> <code class="highlighter-rouge">"Hello"</code> to the <code class="highlighter-rouge">include?</code> method. The <strong>Return Value</strong> is <code class="highlighter-rouge">true</code>.</p>

<p><strong>Note</strong>: Parenthesis are optional when passing parameters. The previous code snippet could also be written as:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<p>Some methods take multiple <strong>Arguments</strong>. For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="s2">"World"</span><span class="p">,</span> <span class="s2">"Turing"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"Hello Turing"</span>
</code></pre></div></div>

<p>This is the same as:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span><span class="p">.</span><span class="nf">gsub</span> <span class="s2">"World"</span><span class="p">,</span> <span class="s2">"Turing"</span>
<span class="o">=&gt;</span> <span class="s2">"Hello Turing"</span>
</code></pre></div></div>

<h2 id="defining-our-own-methods">Defining our own Methods</h2>

<p><code class="highlighter-rouge">.upcase</code>, <code class="highlighter-rouge">.include?</code>, and <code class="highlighter-rouge">.gsub</code> are all <strong>Methods</strong> built in to the string class. What if we want to define our own methods? We do that with the <code class="highlighter-rouge">def</code> keyword.</p>

<p>Letâ€™s make a new file called <code class="highlighter-rouge">converter.rb</code> to convert Fahrenheit to Celsius. Weâ€™ll add the following lines of code and run this file from the command using <code class="highlighter-rouge">ruby converter.rb</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s2">"Welcome!"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Why didnâ€™t we see <code class="highlighter-rouge">Welcome</code> printed to the screen? Because the <code class="highlighter-rouge">def</code> keyword <em>defines</em> the <strong>Method</strong> <code class="highlighter-rouge">print_welcome</code>, but it does not <em>call</em> the <strong>Method</strong>. In order to call the <strong>Method</strong>, we could do something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s2">"Welcome!"</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
</code></pre></div></div>

<p>And we could see <code class="highlighter-rouge">Welcome</code> printed to the screen.</p>

<h2 id="defining-methods-that-take-arguments">Defining methods that take Arguments</h2>

<p>Letâ€™s now add a method that can convert a Fahrenheit temperature to Celsius.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span>

<span class="k">end</span>
</code></pre></div></div>

<p>We need to give this method the Fahrenheit temperature as an input. Therefore, we define a <strong>Parameter</strong> called <code class="highlighter-rouge">fahrenheit</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>

<span class="k">end</span>
</code></pre></div></div>

<h2 id="defining-return-values">Defining Return Values</h2>

<p>We want this method to output, or <strong>Return</strong> the Celsius temperature. How does Ruby know what value to return?</p>

<p>A return value is either:</p>

<ol>
  <li>defined <em>explicitly</em> using the <code class="highlighter-rouge">return</code> keyword OR</li>
  <li>is the last line of code run, if no <code class="highlighter-rouge">return</code> keyword was used.</li>
</ol>

<p>Letâ€™s create an <strong>Explicit Return</strong> like so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="n">celsius</span> <span class="o">=</span> <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">celsius</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We could write the same method using an <strong>Implicit Return</strong>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We could add lines above the last line if we wanted and the method would still return the same value:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="mi">1</span><span class="o">+</span><span class="mi">1</span>
  <span class="p">[</span><span class="s2">"piglet"</span><span class="p">,</span> <span class="s2">"kitten"</span><span class="p">,</span> <span class="s2">"baby gorilla"</span><span class="p">]</span>
  <span class="mi">99</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And we could add lines below and use the <code class="highlighter-rouge">return</code> keyword:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="mi">1</span><span class="o">+</span><span class="mi">1</span>
  <span class="p">[</span><span class="s2">"piglet"</span><span class="p">,</span> <span class="s2">"kitten"</span><span class="p">,</span> <span class="s2">"baby gorilla"</span><span class="p">]</span>
  <span class="mi">99</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As soon as Ruby sees the <code class="highlighter-rouge">return</code> keyword, the method stops and outputs the specified value.</p>

<p><strong>IMPORTANT: each of the previous versions of convert_to_celsius return the same value</strong></p>

<h2 id="calling-our-methods">Calling our Methods</h2>

<p>Letâ€™s update the <code class="highlighter-rouge">converter.rb</code> file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>Once you have saved the code above, run it using the command <code class="highlighter-rouge">ruby converter.rb</code> in your terminal. Be sure you are in the same directory as the <code class="highlighter-rouge">converter.rb</code> file.</p>

<p>What happens? Is it what you expected? Why or why not?</p>

<p>It may look like nothing happened, but in the background this program ran and did everything we told it to. We didnâ€™t see anything because we never explicitly told it to print values to the screen.</p>

<p>Letâ€™s change the program so that we can see some output.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">celsius_1</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">celsius_2</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">celsius_3</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

<span class="n">print_welcome</span>
<span class="nb">puts</span> <span class="n">celsius_1</span>
<span class="nb">puts</span> <span class="n">celsius_2</span>
<span class="nb">puts</span> <span class="n">celsius_3</span>
</code></pre></div></div>

<h3 id="calling-methods-from-other-methods">Calling Methods from Other Methods</h3>

<p>We can also call methods from within other methods that are in the same scope. Letâ€™s add a function that takes a number and then prints a more robust message.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_converted</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="n">converted</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">temperature</span><span class="si">}</span><span class="s2"> degrees Fahrenheit is equal to </span><span class="si">#{</span><span class="n">converted</span><span class="si">}</span><span class="s2"> degrees Celsius"</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="layers-of-abstraction">Layers of Abstraction</h3>

<p>One of the advantages of using methods is that we can build methods that operate at higher levels of abstraction than other methods. Abstraction is a practice where less complex functionality is exposed in an interface and more complex functionality is suppressed. In some ways, this is like a pyramid where higher level methods rely on lower level methods to take care of the details.</p>

<p><img src="https://camo.githubusercontent.com/07f5ef4748c194ee893c18089a2b6513d473ac37/687474703a2f2f6d696e6573662e636f6d2f7265736f75726365732f6363612f77702d636f6e74656e742f75706c6f6164732f323031302f30312f61627374726163742d6f2d6d65746572312e6a7067" alt="" /></p>

<p>If we look at our <code class="highlighter-rouge">converter.rb</code> file, what we really want to do is take three numbers, print a welcome, and then print a message for each of those numbers. We can create a method that does exactly that. Bundling these more detailed methods into more abstract methods can help us to create more complex programs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">third</span><span class="p">)</span>
  <span class="n">print_welcome</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">first</span><span class="p">)</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">second</span><span class="p">)</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">third</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">fahrenheit</span><span class="p">)</span>
  <span class="p">((</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_converted</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="n">converted</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">temperature</span><span class="si">}</span><span class="s2"> degrees Fahrenheit is equal to </span><span class="si">#{</span><span class="n">converted</span><span class="si">}</span><span class="s2"> degrees Celsius"</span>
<span class="k">end</span>
<span class="n">convert</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">convert</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">65</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Turng &amp; Talk</strong>
Talk with your partner about the flow of this program. Where does it start, how does each method get called?</p>

<p>With a partner, create a method that provides similar functionality for <code class="highlighter-rouge">doubler.rb</code>. If you finish that, see if you can change your method so that it accepts an array as an argument and prints a message for each element of the array.</p>

<h2 id="wrapup">WrapUp</h2>

<ul>
  <li>How do we define methods in Ruby?</li>
  <li>What is the difference in how we define a method that takes arguments from one that does not?</li>
  <li>How do you call one method from within another method?</li>
  <li>Why do we use methods?</li>
</ul>
:ET