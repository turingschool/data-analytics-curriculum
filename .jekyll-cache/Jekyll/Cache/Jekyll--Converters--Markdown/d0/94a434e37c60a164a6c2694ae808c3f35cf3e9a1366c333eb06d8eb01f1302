I"Z<h3 id="learning-goals">Learning Goals</h3>

<ul>
  <li>Define the ‘Vocabulary’ of the web</li>
  <li>Describe the Request/Response Cycle at a high level</li>
  <li>Describe the parts of a URL</li>
  <li>Explain Verb/Path combinations</li>
  <li>Describe the 5 common HTTP verbs</li>
</ul>

<h3 id="vocabulary">Vocabulary</h3>

<ul>
  <li>Client</li>
  <li>Server</li>
  <li>URL</li>
  <li>URI</li>
  <li>User</li>
  <li>Request</li>
  <li>Response</li>
  <li>HTTP</li>
  <li>Verb</li>
  <li>Path</li>
</ul>

<h2 id="what-is-the-internet">What is the Internet?</h2>

<p>The internet, which for most people is the web…how does that work?</p>

<p>The basis of all web interactions is someone asking for information, and receiving information. In order to ask for and receive any information, we need two players - the asker and the producer. In basic web interactions, the ‘asker’ is a <strong>client</strong> and the ‘producer’ is a <strong>server</strong>. Clients send <strong>Requests</strong> to Servers asking for some kind of information. Upon receiving a Request, Servers send <strong>Responses</strong> back to the Client.</p>

<p>The <strong>Internet</strong> is the network between devices that allows clients and servers to exchange this information. <strong>HTTP</strong> is a set of rules for how this exchange of information happens. Clients and Servers adhere to these rules to ensure that they understand each other’s Requests and Responses.</p>

<p>In the web development world, a client is a web browser, not an individual person.  The person using the browser is referred to as a <strong>user</strong>.</p>

<h2 id="penpal-analogy">Penpal Analogy</h2>

<p>Okay, that was a lot of information. Let’s break all of this down with a metaphor:</p>

<p>Imagine you’re writing to a penpal. The process would look something like this:</p>

<ol>
  <li>Write a letter</li>
  <li>Specify your penpal’s address</li>
  <li>Drop the letter in your mailbox</li>
  <li>The letter goes through the postal system and arrives at your penpal’s mailbox</li>
</ol>

<p>Your penpal then goes through a very similar set of steps:</p>

<ol>
  <li>Read your letter and write a response</li>
  <li>Specify your address</li>
  <li>Drop their letter in their mailbox</li>
  <li>The letter goes through the postal system and arrives at your mailbox</li>
</ol>

<p>In this analogy:</p>

<ul>
  <li>You are the <strong>Client</strong></li>
  <li>Your penpal is the <strong>Server</strong></li>
  <li>Your letter is the <strong>Request</strong></li>
  <li>Your penpal’s letter is the <strong>Response</strong></li>
  <li>The postal system, the thing responsible for ensuring your letters are delivered, is <strong>The Internet</strong></li>
</ul>

<p><strong>HTTP</strong> is the language you write in so that your penpal can understand you. You may write in English because you know you both understand English. If you wrote a letter in Spanish and your penpal only spoke English, they might write you a letter back saying “Please write to me in English”.</p>

<p>Metaphor aside, let’s run through the protocol as executed by computers:</p>

<ol>
  <li>You open your browser, the Client, and type in a web address like <code class="highlighter-rouge">http://turing.io</code> and hit enter.</li>
  <li>The browser takes this address and builds an <strong>HTTP Request</strong>. It addresses it to the Server located at <code class="highlighter-rouge">http://turing.io</code>.</li>
  <li>The Request is handed off to your Internet Service Provider (ISP) (like CenturyLink or Comcast) and they send it through the Internet, mostly a series of wires and fiber optic cables, to the Server</li>
  <li>The Server reads the Request. It knows how to read it because it is formatted as an <strong>HTTP Request</strong>.</li>
  <li>The Server generates an <strong>HTTP Response</strong> to that Request.</li>
  <li>The server hands the Response off to their ISP and it goes through the internet to arrive at your computer.</li>
  <li>Your browser reads the Response. It knows how to read it because it is formatted as an <strong>HTTP Response</strong>.</li>
  <li>Your browser displays the data on your machine.</li>
</ol>

<p>That’s the HTTP Request/Response cycle. At its core, it is a bunch of formatting rules that Clients and Servers use to talk to each other. You can read more on the <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">wikipedia page</a> or the <a href="https://tools.ietf.org/html/rfc2616">IETF specification</a>.</p>

<h2 id="the-request-and-response-cycle">The Request and Response Cycle</h2>

<p>As we start to build out web applications, it is important to be able to visualize the way information flows through the system; typically called the Request/Response Cycle.</p>

<p>First a user gives a client a URL, the client builds a <strong>request</strong> for information (or resources) to be generated by a server.  When the server receives that request, it uses the information included in the request to build a <strong>response</strong> that contains the requested information. Once built, that response is sent back to the client in the requested format, to be rendered to the user.</p>

<p>It is our job as web developers to build out and maintain servers that can successfully build responses based on standardized requests that will be received.  But, what does a standard request look like?  We need to know that before we can start building servers that will respond successfully.</p>

<p>The standard, or protocol we use is <strong>HTTP</strong>.</p>

<h2 id="http-requests-and-responses">HTTP Requests and Responses</h2>

<p>The HyperText Transfer Protocol gives us rules about how messages should be sent around the Internet. The system that initiates a connection sends a “request”, and the system the answers sends a “response”.</p>

<h3 id="http-request">HTTP Request</h3>

<p>When a “client” (like a web browser) retrieves information, it sends a payload of data to a server as a “request”. This request has many parts, but for now we are going to focus on the <strong>verb</strong> and <strong>path</strong>.</p>

<h3 id="verb-and-path">Verb and Path</h3>

<p>Every request needs to be able to tell a server <em>what</em> information is requested and <em>how</em> that information is being requested.  The <em>what</em> is the <strong>path</strong> (also know as a URI), indicating what resource this request is referencing.</p>

<p>Examples of a path:</p>

<ul>
  <li><code class="highlighter-rouge">/tasks</code></li>
  <li><code class="highlighter-rouge">/tasks/4</code></li>
  <li><code class="highlighter-rouge">/items/6/reviews</code></li>
</ul>

<p>The <em>how</em> is the <strong>verb</strong>, indicating what actions the server should take regarding the requested resource.  While the path can vary greatly based on the application, the verbs follow common patterns.  There are 5 common HTTP verbs:</p>

<ul>
  <li>GET - retrieve some information to be READ by the client/user</li>
  <li>POST - CREATE a new resource with information contained in the request</li>
  <li>PUT - UPDATE an entire resource with information contained in the request</li>
  <li>PATCH - UPDATE a part of a resource with information contained in the request</li>
  <li>DELETE - DESTROY a resource, typically indicating that it is removed from the database</li>
</ul>

<p>With these 5 verbs, we send requests that allow us to perform all CRUD functions (create, read, update, destroy) for resources in a database!</p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>Describe the HTTP request/response cycle. Use each of the following terms:
    <ul>
      <li>User</li>
      <li>Client</li>
      <li>Server</li>
      <li>Request</li>
      <li>Response</li>
      <li>HTTP</li>
    </ul>
  </li>
  <li>What is a path?</li>
  <li>What is a verb?</li>
  <li>What are the 5 common http verbs and what do they do?</li>
</ul>
:ET