I"+<h1 id="implement-user-login">Implement User Login</h1>
<p>When users register for our site, we‚Äôll want them to be able to later return to our site and login using the details that they provided when registering‚Äîspecifically, the e-mail address and password.  How will our application determine whether or not the user supplied a correct e-mail and password combination?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="c1"># e.g., User.authenticate('penelope@turing.com', 'boom')</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
    <span class="c1"># if email and password correspond to a valid user, return that user</span>
    <span class="c1"># otherwise, return nil</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p><em>Figure 1</em>.  Shell code for an authenticate method.</p>

<p>We‚Äôll add an <code class="highlighter-rouge">.authenticate</code> method to our <code class="highlighter-rouge">User</code> model to make this determination.  Figure 1 provides some shell code and pseudocode for our method.</p>

<p>Now, let‚Äôs actually implement logging in by allowing users to submit their login credentials as a post request to a <code class="highlighter-rouge">/login</code> URL.  If the user sends a valid email and password combination, we‚Äôll log the user in.  We‚Äôll ‚Äúremember‚Äù that the user is logged in by storing data in the <code class="highlighter-rouge">session</code> hash. Use the following user story to help guide this implementation:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
I visit the users index
and click on 'Log In'
Then my current path is '/login'
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
I visit '/login'
When I fill in a form with an existing user's email and password
And click 'Log Me In!'
I am redirected to the users index
And I see a message saying 'Welcome &lt;user name&gt;, you are logged in!'
And I do not see a link to 'Log In'
</code></pre></div></div>

<p>If the <code class="highlighter-rouge">session</code> hash and/or how to use it is unclear, revisit this <a href="http://www.theodinproject.com/courses/ruby-on-rails/lessons/sessions-cookies-and-authentication">reading</a>.  Also, remember that you have access to the session information in the view, if you need it (hint hint). If it is still unclear after reading the documentation, ask for help from a cohortmate or staff member.</p>

<p>Also, the form that you will use to ‚Äòlog in‚Äô will not deal with creating or editing resources in our database as we have done previously with <code class="highlighter-rouge">form_with</code>, so you will need a new tool - <code class="highlighter-rouge">form_tag</code>.  Explore how to use <code class="highlighter-rouge">form_tag</code> on the <a href="https://guides.rubyonrails.org/form_helpers.html#dealing-with-basic-forms">rails guides</a>.</p>

<p><em>Note</em>: there‚Äôs not many agreed upon RESTful routing conventions for logging in/logging out. I suggest having a <code class="highlighter-rouge">UsersController</code> that handles registering a new user (so <code class="highlighter-rouge">new</code> and <code class="highlighter-rouge">create</code> actions) and a <code class="highlighter-rouge">SessionsController</code> to handle logging in and logging out.</p>

<p><a href="./auth_exp_it3">Next to Iteration 3</a></p>
:ET