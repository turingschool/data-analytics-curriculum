I"ü÷<h2 id="learning-goals">Learning Goals</h2>

<p>By the end of this lesson, you will‚Ä¶</p>
<ul>
  <li>Write tests for your Express application</li>
  <li>Explain the differences between the way we test when we have a front end</li>
  <li>Explain the benefits of testing</li>
</ul>

<h2 id="overview">Overview</h2>

<p>Server-side testing is a crucial facet of testing. As your app grows in size and complexity, there will be more points of potential failure.</p>

<p>When we have render our applications through a front-end, our server-side testing looks a little different than what are you used to testing in Rails - <strong>front-end</strong> testing should test what renders based on user interactions, while <strong>server-side</strong> testing focuses on the API routes - looking at a request coming from a client, processing the request, and testing if the correct response to the client is given.</p>

<h2 id="why-do-we-test">Why do we test?</h2>

<ul>
  <li>Why do we test our code?</li>
  <li>What do you like and dislike about testing?</li>
</ul>

<h2 id="basic-structure-of-a-server-side-test">Basic Structure of a Server-Side Test</h2>

<ol>
  <li>DB setup (if testing route that interacts with the database)</li>
  <li>Make a request to a server route</li>
  <li>Get a response from the server</li>
  <li>Test the response</li>
  <li>DB clean up (if testing route that interacts with the database)</li>
</ol>

<p>What about the response should we test?</p>

<ul>
  <li>The status code</li>
  <li>What content type do we expect? (json, plain text)</li>
  <li>What is the data structure of the response body? (object, array)</li>
  <li>What should be contained in the body?
    <ul>
      <li>If it‚Äôs an array, how many elements should be in the array?</li>
      <li>If it‚Äôs an object, what properties and values should the object have?</li>
    </ul>
  </li>
</ul>

<h2 id="lets-go-through-some-examples">Let‚Äôs Go Through Some Examples</h2>

<p>We‚Äôll be using <a href="https://mochajs.org/">mocha</a> for our test runner, <a href="http://chaijs.com/">chai</a> for our assertion library, and <a href="https://github.com/chaijs/chai-http">chai-http</a> for our request generator.</p>

<p>We will use the express app that we‚Äôve been working on in class to practice testing. Checkout to the <code class="highlighter-rouge">testing-practice</code> branch.</p>

<h3 id="setup">Setup</h3>

<p>Now let‚Äôs install our testing tools from the terminal.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-D</span> mocha chai
npm <span class="nb">install</span> <span class="nt">-D</span> https://github.com/chaijs/chai-http#3ea4524 <span class="c"># Must use this version for correct error handling</span>
</code></pre></div></div>

<p>Create a directory called <code class="highlighter-rouge">test</code> and create a new test file called <code class="highlighter-rouge">routes.spec.js</code> within the <code class="highlighter-rouge">test</code> directory. Open the new test file.</p>

<p>At the top of the test file, <code class="highlighter-rouge">routes.spec.js</code>, add:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">chaiHttp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai-http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../app.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">chai</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">chaiHttp</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Client Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="p">});</span>
</code></pre></div></div>

<p>Run the test suite with the command <code class="highlighter-rouge">NODE_ENV=test mocha --exit</code> (you‚Äôll have to have mocha installed globally to run this command in the terminal). The test output should be something like:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
0 passing <span class="o">(</span>3ms<span class="o">)</span>

</code></pre></div></div>

<p>This makes sense because we don‚Äôt have any tests yet, but now we‚Äôre all setup to add tests!</p>

<p><em>Note:</em> You may or may not need the <code class="highlighter-rouge">--exit</code> flag.</p>

<h3 id="before-and-beforeeach">before and beforeEach</h3>

<p>Server-side tests should run in isolation and each test should not leave artifacts in the database. For instance, the first test in the test file should not influence what happens with the fifth test. Therefore, we need to run migrations before we run the test suite and reset the database before each test.</p>

<p>If you‚Äôre using a ‚Äúreal‚Äù database like postgreSQL with knex, you will typically need to:</p>

<ol>
  <li>Before all tests, run the migrations for your test environment and seed the test database</li>
  <li>Before each test:
    <ul>
      <li>Clean out the database (delete records in all tables)</li>
      <li>Seed your database with records</li>
    </ul>
  </li>
</ol>

<p>With our testing structure, we have built-in methods called <code class="highlighter-rouge">before</code> and <code class="highlighter-rouge">beforeEach</code>, and they run before all tests and before each test in the describe block they are scoped in, respectively. There is also <code class="highlighter-rouge">after</code> and <code class="highlighter-rouge">afterEach</code>, but there is a caveat with <code class="highlighter-rouge">afterEach</code>. If a test fails, the <code class="highlighter-rouge">afterEach</code> will <em>not</em> run after that test, which can leave your database in a bad state. So be sure to put your database in a good state for every test even if one fails.</p>

<p>Let‚Äôs write these methods within the <code class="highlighter-rouge">describe('API Routes', ...</code> block.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Run migrations and seeds for test database</span>
  <span class="nx">database</span><span class="p">.</span><span class="nx">migrate</span><span class="p">.</span><span class="nx">latest</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">done</span><span class="p">())</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">done</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">beforeEach</span><span class="p">((</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Would normally run run your seed(s), which includes clearing all records</span>
  <span class="c1">// from each of the tables</span>
  <span class="nx">database</span><span class="p">.</span><span class="nx">seed</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">done</span><span class="p">())</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">done</span><span class="p">();</span> <span class="c1">// Need to call the done function because this is not a promise/async</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="happy-path">Happy Path</h3>

<p>The happy path is a test case we write for when we expect everything to go well. This includes a well-formed request and an appropriate response.</p>

<p>As a basic test, let‚Äôs test the root endpoint to our app, <code class="highlighter-rouge">localhost:3000/</code>, or just <code class="highlighter-rouge">/</code>. In the <code class="highlighter-rouge">routes.spec.js</code> file. Use chai-http to make the request inside of the test.</p>

<p>The test for the route <code class="highlighter-rouge">/</code> becomes:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Client Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the home page with text</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">html</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Here is the breakdown of the test:</p>

<ol>
  <li>Start a request to the server</li>
  <li>For a specific route, use the request verb</li>
  <li>When you get the response from the server, test what the response contains
    <ul>
      <li>If you cannot return a promise from the test, then you need to use the <code class="highlighter-rouge">done()</code> function to tell mocha that the test has completed (or else the test will timeout and fail - we‚Äôll see this later in the lesson)</li>
    </ul>
  </li>
</ol>

<p>The tests are written using <code class="highlighter-rouge">should</code>, but you can choose to use <code class="highlighter-rouge">expect</code> or <code class="highlighter-rouge">assert</code> - just be consistent. See the <a href="http://chaijs.com/api/">chai docs</a> for more info.</p>

<h3 id="sad-path">Sad Path</h3>

<p>Let‚Äôs test a route that doesn‚Äôt exist in our app. All we have to do is make a request to a garbage endpoint and we then expect a standard 404 response. Here is what our tests look like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Client Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the home page with text</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">html</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 404 for a route that does not exist</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/sad</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>

<span class="p">});</span>
</code></pre></div></div>

<p>The status code is the very least we can test for. If you have a custom 404 error page, then you can also test for the contents of the page.</p>

<p>When you run the tests with <code class="highlighter-rouge">NODE_ENV=test mocha --exit</code>, you should see something like:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Test Express is running on 3000.
  Client Routes
    ‚úì should <span class="k">return </span>the homepage with text
    ‚úì should <span class="k">return </span>a 404 <span class="k">for</span><span class="nb">.</span> a route that does not exist


  2 passing <span class="o">(</span>46ms<span class="o">)</span>
</code></pre></div></div>

<p>Great! We have some basic routes tested, both a happy and sad path. Let‚Äôs start testing the API routes.</p>

<p>Right now, this is what the entire test file looks like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">chaiHttp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai-http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../app.js</span><span class="dl">'</span><span class="p">);</span>


<span class="nx">chai</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">chaiHttp</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Client Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the home page with text</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">html</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">});</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 404 for a route that does not exist</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/sad</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">});</span>

<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="p">});</span>
</code></pre></div></div>

<h3 id="setup-for-api-routes">Setup for API routes</h3>

<p>So you have access to your database, add at the top of the <code class="highlighter-rouge">routes.spec.js</code> file:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="create-and-setup-database">Create and Setup Database</h4>

<p>Use the following commands to create your test database:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql
CREATE DATABASE secrets_test<span class="p">;</span>
</code></pre></div></div>

<p>Migrate your secrets_test with:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>knex migrate:latest <span class="nt">--env</span> <span class="nb">test</span>
</code></pre></div></div>

<p>Create a new directory under seeds called <code class="highlighter-rouge">test</code>, and touch <code class="highlighter-rouge">secrets.js</code> - this should contain the exact same thing that your <code class="highlighter-rouge">secrets.js</code> inside of the <code class="highlighter-rouge">dev</code> seed file.</p>

<p>Seed your secrets_test with:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>knex seed:run <span class="nt">--env</span> <span class="nb">test</span>
</code></pre></div></div>

<h3 id="test-an-api-call-get-request">Test an API Call (GET Request)</h3>

<p>From our basic server-side tests above, you can see how we might test our API. The first test is for the <code class="highlighter-rouge">/api/secrets/:id</code> route. A GET request to this endpoint should return a single secret.</p>

<p>Let‚Äôs write the test. In the <code class="highlighter-rouge">API Routes</code> describe block:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the secret by ID</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
        <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/1</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">();</span> <span class="c1">//what status code should come back?</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">....;</span> <span class="c1">//what format do you expect your response to come in as?</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-type</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//what data type?</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="c1">//how many elements?</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">property-name</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//key</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].[</span><span class="nx">property</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">value</span><span class="o">-</span><span class="k">of</span><span class="o">-</span><span class="nx">property</span><span class="p">);</span> <span class="c1">//value</span>
          <span class="c1">//repeat for all properties</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>

  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Run the tests with <code class="highlighter-rouge">NODE_ENV=test mocha --exit</code>. Because we already have the route set up in our <code class="highlighter-rouge">server.js</code> file, you should see something like:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Test Express is running on 3000.
  Client Routes
    ‚úì should <span class="k">return </span>the homepage with text
    ‚úì should <span class="k">return </span>a 404 <span class="k">for</span><span class="nb">.</span> a route that does not exist

  API Routes
    GET /api/secrets/:id
      ‚úì should <span class="k">return </span>the secret by ID


  3 passing <span class="o">(</span>61ms<span class="o">)</span>

</code></pre></div></div>

<h3 id="test-a-post-request">Test a POST Request</h3>

<p>For a post request, we need to not only send the request to the correct endpoint, but we also need to give some information in the body of the post request.</p>

<p>In another <code class="highlighter-rouge">describe</code> block, let‚Äôs write the test first:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST /api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should add a secret</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">send</span><span class="p">({</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">I am in love with Mr. Wigglesworth.</span><span class="dl">"</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">();</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">shoud</span><span class="p">...</span>
        <span class="c1">//you write the rest!</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">});</span>
  <span class="p">});</span>

<span class="p">});</span>
</code></pre></div></div>

<h3 id="post-sad-path">POST Sad Path</h3>

<p>What if we make a POST request and don‚Äôt specify all of the properties of a secret (in this case, the message)? An example with multiple properties would be an endpoint that requires lastname, program, and enrolled. In the request body if we specify <code class="highlighter-rouge">{lastname: 'Knuth', program: 'FE'}</code>, but we leave out the <code class="highlighter-rouge">enrolled</code> property and value, the new record should not be created. We don‚Äôt want unintended null values in our database!</p>

<p>We should have designed our server so that it does not accept this kind of situation with missing data; now we need to test that!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should not add a secret if message is not provided</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">send</span><span class="p">({})</span> <span class="c1">// Missing the message property</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">expected</span> <span class="nx">status</span> <span class="nx">code</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="what-could-go-wrong-more-sad-paths">What Could Go Wrong? More Sad Paths</h3>

<p>There are many more possibilities for route sad paths. Some could be:</p>

<ul>
  <li>The resource requested at the endpoint does not exist (<code class="highlighter-rouge">/api/secrets/5</code>, but secret #5 does not exist in the database)</li>
  <li>For a POST request, the request does not contain all of the necessary data in the body (missing properties or null data)</li>
  <li>For a PUT request, the request body has missing properties or null data</li>
  <li>For a PUT request, a user tries to change a property of a record that does not exist in the database</li>
  <li>A user tries to change the primary key of a record</li>
  <li>A user submits duplicate data for table columns that must have unique record values</li>
  <li>And others!</li>
</ul>

<h3 id="file-summary">File summary</h3>

<p>By the end of it all, this is what the <code class="highlighter-rouge">routes.spec.js</code> file looks like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">chaiHttp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai-http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../app.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>

<span class="nx">chai</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">chaiHttp</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Client Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the home page with text</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">html</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 404 for a route that does not exist</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/sad</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>

<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Routes</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="nx">before</span><span class="p">((</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">database</span><span class="p">.</span><span class="nx">migrate</span><span class="p">.</span><span class="nx">latest</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">done</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">done</span><span class="p">();</span>

  <span class="p">});</span>

  <span class="nx">beforeEach</span><span class="p">((</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">database</span><span class="p">.</span><span class="nx">seed</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">done</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return the secret by ID</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
        <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/1</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="dl">'</span><span class="s1">array</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="dl">'</span><span class="s1">I hate mashed potatoes</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>

  <span class="p">});</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST /api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should add a secret</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">send</span><span class="p">({</span>
          <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">I am in love with Mr. Wigglesworth.</span><span class="dl">"</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="dl">'</span><span class="s1">array</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">);</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="dl">'</span><span class="s1">I am in love with Mr. Wigglesworth.</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should not add a secret if message is not provided</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">send</span><span class="p">({})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">422</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">});</span>

<span class="p">});</span>

</code></pre></div></div>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What libraries do we use to test server-side endpoints?</li>
  <li>What is the difference between happy and sad path tests?</li>
  <li>What about a response should we test?</li>
</ul>

<h2 id="interview-question">Interview Question</h2>

<ul>
  <li>Tell me two advantages of testing your code.</li>
</ul>
:ET