I"ËC<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand what nested resources are</li>
  <li>Understand the routes and requests needed to create nested resources</li>
</ul>

<h2 id="warm-up">Warm up</h2>

<p>Discuss with a partner:</p>

<p>In SetList, when we fill out the form to create a new Artist and click the submit button, what does the resulting request look like? What information does it contain? To what path is it sent? What verb does it use?</p>

<h2 id="nested-resources">Nested Resources</h2>

<p>Sometimes in our applications we will have resources that are essentially tied to each other, meaning one cannot exist without the other. We refer to these as <strong>Nested Resources</strong>. In our SetList app, our Song model says that it <code class="highlighter-rouge">belongs_to</code> an Artist. That means that it has to have an Artist. We say that <code class="highlighter-rouge">Songs</code> are <strong>nested</strong> under <code class="highlighter-rouge">Artists</code>. So, for some actions we want to take on a Song, we have to know which Artist it belongs to.</p>

<p>In SetList, we want users to be able to create new songs, but we have to know which artist the song is being created for. So, when we send a request to create a new song, we will use these routes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET  /artists/:artist_id/songs/new   #new song form
POST /artists/:artist_id/songs       #create a song
</code></pre></div></div>

<h2 id="writing-the-test">Writing the test</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/features/songs/new_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"creating a new song"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"can create a song"</span> <span class="k">do</span>
    <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Journey"</span><span class="p">)</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s2">"Don't Stop Believin'"</span>
    <span class="n">length</span> <span class="o">=</span> <span class="mi">231</span>
    <span class="n">play_count</span> <span class="o">=</span> <span class="mi">7849</span>

    <span class="n">visit</span> <span class="s2">"/artists/</span><span class="si">#{</span><span class="n">artist</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">/songs/new"</span>

    <span class="n">fill_in</span> <span class="s2">"title"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">title</span>
    <span class="n">fill_in</span> <span class="s2">"length"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">length</span>
    <span class="n">fill_in</span> <span class="s2">"play_count"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">play_count</span>

    <span class="n">click_on</span> <span class="s2">"Create Song"</span>

    <span class="n">new_song</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">last</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/songs/</span><span class="si">#{</span><span class="n">new_song</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">length</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">play_count</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">artist</span><span class="p">.</span><span class="nf">name</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Discuss with the person next to you:</p>

<ul>
  <li>What route are we visiting?</li>
  <li>What should happen when we click submit?</li>
</ul>

<p>When we run the test, we see that no route exists for our new song form.</p>

<h2 id="creating-the-nested-routes">Creating the Nested Routes</h2>

<p>Letâ€™s add that nested route now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">get</span> <span class="s1">'/artists/:artist_id/songs/new'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#new'</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake routes</code> and examine what routes this generated for us.</p>

<h2 id="creating-the-form">Creating the Form</h2>

<p>Running the test gives us an <code class="highlighter-rouge">ActionNotFound</code> error.</p>

<p>Create the <code class="highlighter-rouge">new</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#songs_controller.rb</span>

<span class="k">def</span> <span class="nf">new</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next weâ€™ll get a missing template error, so go create the view:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch app/views/songs/new.html.erb
</code></pre></div></div>

<p>Now the tests are telling us that it canâ€™t find the form fields.</p>

<h2 id="creating-the-form-1">Creating the Form</h2>

<p>First, letâ€™s think about where we want this path to submit. Thinking back to our discussion at the beginning, what verb/path combo should we use?</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_tag</span><span class="p">(</span><span class="s2">"/artists/</span><span class="si">#{</span><span class="vi">@artist_id</span><span class="si">}</span><span class="s2">/songs"</span><span class="p">,</span> <span class="ss">method: :post</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Notice that we have used <code class="highlighter-rouge">@artist_id</code> in the path, so letâ€™s add that instance variable to our action. Where does that information come from? From the path! Take a look back at <code class="highlighter-rouge">routes.rb</code> to remind yourself what the route to show this form looks like.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new</span>
  <span class="vi">@artist_id</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:artist_id</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If we run the test again, weâ€™ll still get our error for missing fields, so letâ€™s add those fields:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">label_tag</span> <span class="s2">"Title"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">text_field_tag</span> <span class="ss">:title</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">label_tag</span> <span class="s2">"Length"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">number_field_tag</span> <span class="ss">:length</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">label_tag</span> <span class="s2">"Play Count"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">number_field_tag</span> <span class="ss">:play_count</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">submit_tag</span> <span class="s2">"Create Song"</span><span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Now when we run the test, weâ€™ll see no route matches when we submit the form.</p>

<h2 id="creating-the-new-song">Creating the New Song</h2>

<p>Letâ€™s add the route to create a song:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="s1">'/artists/:artist_id/songs'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#create'</span>
</code></pre></div></div>

<p>Letâ€™s add our create action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># songs_controller.rb</span>
<span class="k">def</span> <span class="nf">create</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Running the test will give us:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NoMethodError:
      undefined method `id' for nil:NilClass
</code></pre></div></div>

<p>Follow the stack trace for this error to figure why this is happening.</p>

<p>We havenâ€™t actually created our Song, so letâ€™s do that in our Songs controller. As always with handling form data, we are going to use strong params:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">private</span>

  <span class="k">def</span> <span class="nf">song_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:play_count</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Letâ€™s try to create our Song with these strong params:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">song</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">song_params</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Notice how we are using <code class="highlighter-rouge">create!</code> rather than <code class="highlighter-rouge">create</code>. The bang (<code class="highlighter-rouge">!</code>) will give us an error if our creation is unsuccessful, which is useful when developing. It is always a good idea to start with <code class="highlighter-rouge">create!</code> first to make sure everything is working correctly.</p>

<p>Run the test and, sure enough, our Song was not created successfully. Our error should be</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActiveRecord::RecordInvalid:
      Validation failed: Artist must exist
</code></pre></div></div>

<p>Finally, we are seeing the implications of our nested resources. A Song canâ€™t exist on its own, it needs an artist. This is why weâ€™ve been passing the <code class="highlighter-rouge">artist_id</code> in our path:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:artist_id</span><span class="p">])</span>
  <span class="n">song</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">song_params</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the test again and we no longer get an error that our Song couldnâ€™t be created, so it looks like that is working.</p>

<p>Now we get a failure in our test saying the path is wrong, so all thatâ€™s left to do is redirect the request:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:artist_id</span><span class="p">])</span>
  <span class="n">song</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">song_params</span><span class="p">)</span>
  <span class="n">redirect_to</span> <span class="s2">"/songs/</span><span class="si">#{</span><span class="n">song</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>It is important to note that the way weâ€™ve set up the relationship is not the only way to do it. For instance, we donâ€™t <strong>have</strong> to find the Artist object to set up the relationship. We could manually use the artistâ€™s id to associate it with the song:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">song</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">song_params</span><span class="p">)</span>
  <span class="n">song</span><span class="p">.</span><span class="nf">artist_id</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:artist_id</span><span class="p">]</span>
  <span class="n">song</span><span class="p">.</span><span class="nf">save!</span>
  <span class="n">redirect_to</span> <span class="s2">"/songs/</span><span class="si">#{</span><span class="n">song</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In this case, we have to first do <code class="highlighter-rouge">Song.new</code>, then change the artist_id, then save the song. <code class="highlighter-rouge">create</code> will do a <code class="highlighter-rouge">new/save</code> all at once.</p>

<p>As usual, there are many ways of doing something in Rails. You should be comfortable with using either of these two options weâ€™ve shown here.</p>

<h2 id="checking-our-work-in-development-mode">Checking our work in Development Mode:</h2>

<ul>
  <li>Be sure you have at least one artist in your database (use <code class="highlighter-rouge">rails console</code> if you need to)</li>
  <li>Run <code class="highlighter-rouge">rails s</code></li>
  <li>Visit <code class="highlighter-rouge">/artists/1/songs/new</code></li>
  <li>See if it works!</li>
</ul>

<h2 id="independent-practice">Independent Practice</h2>

<p>Write a test and implement the code for an Artistâ€™s Song index page. This page will show all the songs for a particular artist. It should use this route: <code class="highlighter-rouge">get /artists/:artist_id/songs</code>.</p>

<h1 id="checks-for-understanding">Checks for Understanding</h1>

<p>Turn and talk to your neighbor and discuss:</p>

<ul>
  <li>What is a nested resource?</li>
  <li>What does the route look like for a nested resource?</li>
  <li>Consider the following features we could add in our app:
    <ul>
      <li>show a song</li>
      <li>show all songs</li>
      <li>delete a song</li>
      <li>show a particular artistâ€™s songs</li>
      <li>create a song</li>
      <li>update a song</li>
    </ul>
  </li>
</ul>

<p>Which of them would require a nested route?</p>
:ET