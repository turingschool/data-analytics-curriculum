I"Â<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand the relationship between client and server.</li>
  <li>Understand IP addressing.</li>
  <li>Understand the Domain Name System.</li>
  <li>Ports</li>
  <li>Understand HTTP Requests and Responses
    <ul>
      <li>Header</li>
      <li>Response Code</li>
      <li>Body</li>
    </ul>
  </li>
</ul>

<h3 id="the-client-server-model">The Client-Server Model</h3>

<ul>
  <li>The Client-Server model is a structure that partitions tasks or workloads
between the providers and consumers of a service.</li>
  <li>In general, the server is something that provides a resource or a service.</li>
  <li>In general, the client sends requests of the service provided by a server.</li>
  <li>This division of responsibility is a logical or perhaps virtual one, not
a physical one.</li>
  <li>This leads to some confusion, as a server and a client can also refer to
physical pieces of hardware.</li>
  <li>Example - when you wrote task manger, your laptop was a server and client
at the very same time.</li>
  <li>It was a server because it was running the server software that let your
Sinatra application run, and it was a client because your web browser was
making requests of your Sinatra application.</li>
  <li><a href="https://upload.wikimedia.org/wikipedia/commons/c/c9/Client-server-model.svg">Visual</a></li>
</ul>

<h3 id="ip-addressing">IP Addressing</h3>

<ul>
  <li>An IP address, or an internet protocol address, is a unique identifying
number given to every single computer on the internet.</li>
  <li>Consider it similar to a personâ€™s phone number.</li>
  <li>Too reach a person, they would have to know their IP address.</li>
  <li>Traditionally, they are represented by four numbers separated by dots.
This is IPv4. Like 192.168.1.1.</li>
  <li>Now, with IPv6, itâ€™s a bit more complex, an address can look like:
3ffe:1900:4545:3:200:f8ff:fe21:67cf</li>
</ul>

<h3 id="how-dns-works">How DNS Works</h3>

<ul>
  <li>When we visit a website, we enter the domain name of the website in our
browserâ€™s address bar.</li>
  <li>But thatâ€™s not an IP address.</li>
  <li>How does our computer know how to communicate to the appropriate server?</li>
  <li>We can compare this problem with how we handle phone numbers.</li>
  <li>Nowadays, we donâ€™t actualy remember phone numbers.</li>
  <li>If I want to call someone, I look up their name on my phone, and call them
that way.</li>
  <li>When that person receives my phone call, and so long as I am in their address
book, it doesnâ€™t display my phone number, but my name.</li>
  <li>Letâ€™s say that we want to visit cheese.com.</li>
  <li>Our computer checks itâ€™s cache, or short term memory to see if it knows the
IP address of cheese.com.</li>
  <li>We know we visit cheese.com every day, but letâ€™s pretend that weâ€™ve never
been there before.</li>
  <li>First, itâ€™s actually going to cheese.com.</li>
  <li>With that extra period. With nothing after it.</li>
  <li>We just donâ€™t see it.</li>
  <li>You can test this by going to www.google.com.</li>
  <li>Itâ€™s just hidden from us, and it stands for the root name server.</li>
  <li>Our computer, upon seeing that it knows nothing about cheese.com, asks
the Resolving Name Server for the IP addresses of domains it does not know.</li>
  <li>If the Resolving Name Server knows where it is, it sends the response back
to our computer.</li>
  <li>If it does not, it then contacts the root name servers and asks it about
cheese.com</li>
  <li>The root name servers know nothing about cheese.com. However, it knows
about the .com, or Top Level Domain name servers. It sends this information
to the resolving name servers.</li>
  <li>So it goes to the TLD name servers, and then asks them about cheese.com</li>
  <li>The TLD servers then directs them to the cheese.com name servers.</li>
  <li>Now these servers are the authoritative name servers.</li>
  <li>So the TLD servers know what the authoritative name servers are because
when you register a domain name, the registrar is told what authoritative
name servers you need to use.</li>
  <li>They tell the organization for the TLD, in this case, .com, and then tell
them to update the TLD name servers.</li>
  <li>So now the authoritative name servers will be like, I KNOW WHERE THAT IS,
and then passes along the IP address they have for that domain.</li>
</ul>

<h3 id="check-for-understanding">Check for Understanding</h3>

<ul>
  <li>What does a resolving name server do?</li>
  <li>What information does a root name server have?</li>
  <li>How does the TLD Name Server know about a domainâ€™s authoritative name
server?</li>
</ul>

<h3 id="the-http-requestresponse-cycle">The HTTP Request/Response Cycle</h3>

<ul>
  <li>What is a request?</li>
  <li>It is a set of instructions that tells a server what kind of response we
want.</li>
  <li>Letâ€™s use as our example, turing.io/team</li>
  <li>We are going to request this. A request is made up of many pieces.</li>
  <li>The first, a request path.</li>
  <li>Here, it is /path it tells our server what resource we are looking for.</li>
  <li>Next, we have our request Verb.</li>
  <li>When we are just visiting a site, we are using GET.</li>
  <li>This retreives information from our server.</li>
  <li>Other HTTP Verbs include POST, PUT and DELETE.</li>
  <li>Post sends informatoin to the server, Put updates information.</li>
  <li>What do you think Delete does?</li>
  <li>Query data, this is if we had done /team?page=2 we arenâ€™t doing this,
but if we had params, that would be the query data.</li>
  <li>Weâ€™d have something like this if we had pagination, pagination being
multiple pages.</li>
  <li>Header data, send a request using Postman to show what gets sent in header.</li>
  <li>Header data defines how we expect the response to be formatted
such as in language and encoding.</li>
  <li>See what youâ€™re sending <a href="https://www.whatismybrowser.com/detect/what-http-headers-is-my-browser-sending">here</a></li>
  <li>Now the server sees the request, the verb and the path.</li>
  <li>The server formulates an HTTP Response.</li>
  <li>The response has headers.</li>
  <li>Cookies are in the headers too.</li>
  <li>Also, Status Codes come back.</li>
  <li>What are some common status codes? 200? 404? 500?</li>
  <li>Finally, there is the body.</li>
</ul>

<h3 id="check-for-understanding-1">Check For Understanding</h3>

<ul>
  <li>What are the components of an HTTP Request?</li>
  <li>Where are cookies stored in an HTTP Response?</li>
  <li>What is HTTP Code 200?</li>
</ul>

:ET