I"9g<h1 id="intro-to-javascript-build-tools">Intro to JavaScript Build Tools</h1>

<h2 id="goals">Goals</h2>

<p>By the end of this lesson, you will know/be able to:</p>

<ul>
  <li>Understand the purpose of client side build tools</li>
  <li>Understand what Webpack is and what it does for us</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>Read this <a href="https://x-team.com/blog/webpack-can-absolute-beginners/">article</a> for an overview of Webpack.</p>

<h2 id="what-is-webpack">What is Webpack?</h2>

<p><a href="https://webpack.github.io/">Webpack</a> is a module bundler. Think of it as the Asset Pipeline, but <em>way</em> better and without Rails.</p>

<p>If you remember, in Quantified Self, your <code class="highlighter-rouge">html</code> code may have looked like this:</p>

<p><img src="http://i.imgur.com/Fr5xoLk.png" alt="Imgur" /></p>

<p>With a semi-simple application like Quantified Self, you may need to add script tags for each individual JavaScript or CSS file. Imagine what this would be like if we continued to add complexity to Quantified Self. This will most likely get messy - it already is looking pretty messy! Enter: Webpack.</p>

<p>Webpack is going to allow us to load a single JS file. This is one of the major benefits of Webpack (or another frontend build tool) – it will package all of our JS files and their dependencies into a single bundle that we can load.</p>

<h2 id="install-some-command-line-tools">Install Some Command Line Tools</h2>

<p>Before we get started, let’s install some command line tools. We’ll also use local versions of these packages, but the in order to use global commands, we’ll need to install them globally as well.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g webpack webpack-dev-server mocha
</code></pre></div></div>

<p>This will install <a href="http://webpack.github.io/">Webpack</a> and <a href="https://mochajs.org/">Mocha</a> command line tools globally – hence the <code class="highlighter-rouge">-g</code> flag – on your file system.</p>

<p>You’ll be able to run these tools with the <code class="highlighter-rouge">webpack</code>, <code class="highlighter-rouge">webpack-dev-server</code>, and <code class="highlighter-rouge">mocha</code> command respectively.</p>

<p>Creating your first Webpack project</p>

<p>First, create a directory for your project:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir webpack-walkthrough
cd webpack-walkthrough
git init
</code></pre></div></div>

<h2 id="setting-up-npm">Setting Up npm</h2>

<p>At this point, we have a very simple project. Basically, we have a folder. Let’s initialize <code class="highlighter-rouge">npm</code> and then install some dependencies.</p>

<p>First, create your project with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init
</code></pre></div></div>

<p>You’ll be guided through a command-line setup “wizard”, prompting you for some info on your project such as its:</p>

<ul>
  <li>Name</li>
  <li>Author</li>
  <li>Version</li>
  <li>Description</li>
  <li>License, etc.</li>
</ul>

<p>For most of these items you can use the default option by pressing <code class="highlighter-rouge">Enter</code>.</p>

<p>Finally, install our libary dependencies with <code class="highlighter-rouge">npm install</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save-dev webpack webpack-dev-server mocha mocha-loader chai
</code></pre></div></div>

<p>We installed a few development dependencies:</p>

<ul>
  <li><a href="http://webpack.github.io/">Webpack</a></li>
  <li><a href="http://webpack.github.io/docs/webpack-dev-server.html">Webpack Development Server</a></li>
  <li><a href="https://mochajs.org/">Mocha</a></li>
  <li>A Webpack loader for Mocha</li>
  <li><a href="http://chaijs.com/">Chai</a></li>
</ul>

<h3 id="recommended-sane-gitignore-defaults">Recommended: sane <code class="highlighter-rouge">.gitignore</code> defaults</h3>

<ul>
  <li><a href="https://www.npmjs.com/">NPM</a> vs. <a href="http://bundler.io/">Bundler</a> dependency storage</li>
  <li>Git strategy – keeping diffs meaningful and project churn low</li>
  <li>Git problems caused by versioning dependencies or other frequently
  changing files</li>
</ul>

<p>For these reasons, it’s often helpful to start with a <code class="highlighter-rouge">.gitignore</code> file which includes “sane defaults” for NPM projects.
One example is provided on github, and we can easily include it in our newly created project by pulling the file down with
<code class="highlighter-rouge">curl</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://raw.githubusercontent.com/github/gitignore/master/Node.gitignore &gt; .gitignore
</code></pre></div></div>

<h3 id="adding-a-readmemd">Adding a README.md</h3>

<p>We’ll also want to add a README.md documentation file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch README.md
</code></pre></div></div>

<p>As we continue along in the coding process, we should leave breadcrumbs for ourselves in this file.</p>

<p>Here’s a good start for our README.md</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Webpack Walkthrough

To install the dependencies:

npm install
</code></pre></div></div>

<h2 id="filling-out-the-project">Filling out the Project</h2>

<p>Next, let’s create some empty files and folders for our future code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir lib test
touch lib/index.js test/index.js
</code></pre></div></div>

<p>Our directory structure should look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lib/
  index.js
node_modules/
test/
  index.js
.gitignore
package.json
README.md
</code></pre></div></div>

<h2 id="setting-up-our-html">Setting Up Our HTML</h2>

<p><strong>Discussion: Application Entry Points</strong></p>

<ul>
  <li>What is needed to trigger an application to “run” in its most standard configuration?</li>
  <li>How do we run a rails project? It’s test suite?</li>
</ul>

<p>You’ll want an HTML page that loads up each of your bundles in the browser.</p>

<p>We’ll create two HTML files: <code class="highlighter-rouge">touch index.html test.html</code> 
These will provide entry points to our application and test suite, respectively</p>

<p>Below is an example of the basic structure you can use:</p>

<p><strong>index.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Webpack Walkthrough<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"main.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>The important part is the third line from the bottom:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script src="main.bundle.js"&gt;&lt;/script&gt;
</code></pre></div></div>

<p>This is the line that loads up your bundle. Notice that we only have to load a single JS file. This is one of the major benefits of Webpack (or another frontend build tools) – it will package all of our JS files and their dependencies into a single bundle that we can load.</p>

<p>Since the <code class="highlighter-rouge">index.html</code> file is the entry point for our application, we’re loading in the “main” bundle.</p>

<p>For our <code class="highlighter-rouge">test.html</code> file, we’ll have almost the same thing, except we’ll load in the test bundle:</p>

<p><strong>test.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Webpack Walkthrough Tests<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"test.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Note that these pages won’t work yet, since the bundles themselves have not yet been built.</p>

<h2 id="setting-up-webpack">Setting Up Webpack</h2>

<p>We installed Webpack it earlier, but let’s add a configuration file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch webpack.config.js
</code></pre></div></div>

<p>In that file, add the following contents:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">main</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./lib/index.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">test</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mocha-loader!./test/index.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[name].bundle.js</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above configuration, we’re telling Webpack that we’d like it to build two different bundles: our main application and our test suite (these are the 2 distinct bundles we referenced from our 2 entry point <code class="highlighter-rouge">html</code> files).</p>

<p>We can build the files once with <code class="highlighter-rouge">webpack</code> or we can set up a development server that will reload our changes with <code class="highlighter-rouge">webpack-dev-server</code>.</p>

<p>Let’s fire up <code class="highlighter-rouge">webpack-dev-server</code> and head over to <code class="highlighter-rouge">http://localhost:8080/</code>.</p>

<h2 id="our-first-test">Our First Test</h2>

<p>In <code class="highlighter-rouge">test/index.js</code>, let’s write our first test:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span><span class="p">;</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">our test bundle</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should work</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Visit <code class="highlighter-rouge">http://localhost:8080/test.html</code> to confirm that it works.</p>

<p><strong>Note:</strong> You can require additional test files by using <code class="highlighter-rouge">require('other-test-file')</code>. As your project becomes more complicated, you’ll probably want to keep your actual tests broken up into separate files, and simply use <code class="highlighter-rouge">test/index.js</code> to
pull them all together.</p>

<p><strong>Keep in mind:</strong></p>

<ul>
  <li>Requiring files is path-relative to the file you are requiring <em>from</em> (i.e. if you want to require a file in your project root into <code class="highlighter-rouge">lib/index.js</code>, you’ll need to step up one directory level to access it)</li>
</ul>

<p><strong>Your Turn – additional test files</strong></p>

<ul>
  <li>Create 2 additional test files in your <code class="highlighter-rouge">test</code> directory</li>
  <li>To each one, add a basic example test similar to the one we added to <code class="highlighter-rouge">test/index.js</code>. Make sure your tests have different names so we can tell them apart.</li>
  <li>Require your 2 new files from <code class="highlighter-rouge">index.js</code></li>
  <li>Refresh your <code class="highlighter-rouge">test.html</code> file and make sure all 3 tests appear (the original one plus the 2 you added)</li>
</ul>

<p><strong>Your Turn – additional JS files</strong></p>

<ul>
  <li>Create 2 additional JS files in your <code class="highlighter-rouge">lib</code> directory. See if you can get them to load using webpack (remember you’ll need to require them)</li>
</ul>

<h2 id="additional-loaders">Additional Loaders</h2>

<p>Like the Asset Pipeline in Rails, Webpack can transpile assets during the build process. An example of this is if we want to write in SCSS. The browser can only run CSS, so we have to convert our assets for the browser.</p>

<p>Webpack handles this using <em>loaders</em>. There are many loaders on npm. We’ll discuss just a few of them. Loaders allow you to preprocess files as you require or load them. Loaders can transform files from a different language like CoffeeScript to JavaScript or SCSS to CSS.</p>

<p>The first step is to download and install the dependencies for the loaders you’d like to use.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save-dev css-loader style-loader sass-loader node-sass
</code></pre></div></div>

<p>In our <code class="highlighter-rouge">webpack.config.js</code>, we can add another property called <code class="highlighter-rouge">module</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">main</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./lib/index.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">test</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mocha-loader!./test/index.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[name].bundle.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader</span><span class="dl">"</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader!sass-loader</span><span class="dl">"</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here, “test” is a regular expression that tests what kind of files to run through the loader specified. Above, we’re declaring that any files ending in <code class="highlighter-rouge">css</code> or <code class="highlighter-rouge">scss</code> will be run through the loader specified. You might be wondering what the bangs are within the loader section - those are just separating which loaders we want to use. We can now require a CSS file with <code class="highlighter-rouge">require('my-file-name.css')</code> or a SCSS files with <code class="highlighter-rouge">require('my-file-name.scss')</code>.</p>

<p><strong>Your Turn: Using SCSS</strong></p>

<ul>
  <li>Create a new scss stylesheet file and add some styling to it:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$color: #F00;
body { background-color: $color; }
</code></pre></div>    </div>
  </li>
  <li>In your <code class="highlighter-rouge">index.js</code>, require this file</li>
  <li>load your main page and see if your styles are present</li>
</ul>

<p>As an added bonus, we can also tell Webpack to resolve the file extensions on our behalf.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">main</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./lib/index.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">test</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mocha-loader!./test/index.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[name].bundle.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader</span><span class="dl">"</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader!sass-loader</span><span class="dl">"</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.json</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.scss</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.css</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="using-babel">Using Babel</h3>

<p><a href="https://babeljs.io/">Babel</a> is a transpiler that allows us to use features from ES6 and ES7 in our JavaScript applications today.</p>

<p>To install the dependency, use the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save-dev babel-loader babel-core
</code></pre></div></div>

<p>We’ll add another loader into your <code class="highlighter-rouge">webpack.config.js</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">main</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./lib/index.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">test</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mocha-loader!./test/index.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">__dirname</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[name].bundle.js</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">loaders</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">js$/</span><span class="p">,</span> <span class="na">exclude</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/node_modules/</span><span class="dl">'</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-loader</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader</span><span class="dl">"</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">scss$/</span><span class="p">,</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader!css-loader!sass-loader</span><span class="dl">"</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.json</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.scss</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.css</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice that we exclude our <code class="highlighter-rouge">node_modules</code> folder. We want to process all files that end in <code class="highlighter-rouge">.js</code>, but <em>not</em> the ones we didn’t write.</p>

<p><strong>Your Turn</strong></p>

<p>Practice using the ES6 <code class="highlighter-rouge">let</code> feature in one of your tests. Make sure it still runs. (Recall that <code class="highlighter-rouge">let</code> works similarly to <code class="highlighter-rouge">var</code>, but has stricter rules around where the new variable will be in scope).</p>

<p><a href="http://babeljs.io">Babel</a></p>
:ET