I"˙Ä<h2 id="learning-goals">Learning Goals</h2>

<p>Students will be able to ‚Ä¶</p>
<ul>
  <li>Provide a high level explanation of FE libraries/frameworks, specifically React and it‚Äôs benefits</li>
  <li>Students can define and use basic React vocabulary (Component, JSX, Prop, State)</li>
  <li>Build an application with stateful and stateless components</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>What do you know thus far about React?</li>
  <li>Why do front-end frameworks / libraries exist?</li>
  <li>How do we currently understand elements to be added to and removed from our browser‚Äôs viewport?</li>
</ul>

<h2 id="what-is-react">What is React</h2>

<p>People will define React in many ways, but at it‚Äôs core,</p>

<blockquote>
  <p>React is a client-side JavaScript library that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction</p>
</blockquote>

<h3 id="the-virtual-dom">The Virtual DOM</h3>
<p>We mentioned previously that a big benefit of React is how well it can handle DOM manipulations in an easy and efficient way. This is done through the use of a Virtual DOM. A Virtual DOM is a JavaScript object that represents a copy of a DOM structure. This provides us with a huge performance benefit, because accessing and updating a JavaScript object is much faster than accessing the true DOM directly.</p>

<p>React lets us alter this virtual DOM first, then renders the change for us - making the smallest amount of true DOM manipulations possible. React will only render the deltas of what actually needs to be changed, rather than making a massive DOM manipulation to elements on the page that aren‚Äôt actually changing.</p>

<h3 id="jsx">JSX</h3>

<p>JSX is a special syntax that allows you to write HTML in your JavaScript, and JavaScript in your HTML. It‚Äôs technically XML, but you can just think of it as HTML and JavaScript working together to create that Virtual DOM. The same way Babel converts ES6 into ES5, Webpack converts JSX into JavaScript and HTML.</p>

<p>JSX syntax takes some getting used to, and it might seem to fly in the face of what you know about ‚Äúseparation of concerns‚Äù - but after a bit of practice you‚Äôll find it becomes more intuitive. In the early days when we talked about separation of concerns, we thought: split up your HTML (content) from your CSS (presentation) from your interactivity (JavaScript). Now when we think about separating our concerns, we do it in a slightly more semantic, user-centric way. We‚Äôre not bothered by mashing up our HTML, CSS and JavaScript in a single file, if all of that logic works together to create a single application feature. Our separation of concerns is now much more focused on the concerns of our users, rather than concerns about our file structure. We‚Äôll see this demonstrated a bit further later on in this lesson.</p>

<p>First, let‚Äôs take a look at the JSX syntax:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">listItems</span> <span class="o">=</span> <span class="p">[{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">peaches</span><span class="dl">'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">raspberries</span><span class="dl">'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mint</span><span class="dl">'</span> <span class="p">}];</span>

<span class="kd">const</span> <span class="nx">groceryList</span> <span class="o">=</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"grocery"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span> <span class="nx">someFunction</span> <span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>A Grocery List<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="si">{</span>
        <span class="nx">listItems</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
          <span class="p">})</span>
      <span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>
<p>What looks familiar? What looks different? You might notice the curly braces around things like onClick={someFunction}. These curly braces are allowing us to interpolate JavaScript in our HTML. Think about how you may have used template strings in vanilla JavaScript in the past: we use the ${} syntax to denote that this particular chunk of the string is a dynamic value that should be evaluated and parsed as a dynamic JavaScript value, rather than plain text. The curly braces in React give us similar functionality. Anywhere in our JSX where we want to tell our application ‚ÄúThis is JavaScript, so don‚Äôt render it character by character like HTML, we can wrap that code in curly braces to signal that.</p>

<h3 id="components">Components</h3>

<p>Components are reusable pieces of code that represent templates for a particular instance of a UI element. Components can take in parameters that might vary from instance to instance, allowing us to create unique elements with a shared structure and style. The main benefit of components is how modular they are - they can snap or nest together to create complete pages and applications.</p>

<p>If we take a look at a website like Twitter, we can start to flesh out what components might be making up the entire page, and how they‚Äôre being reused:</p>

<p><img src="/assets/images/lessons/react-in-theory/twitter-components.png" alt="" /></p>

<p>You‚Äôll hear the term ‚Äòcomponent‚Äô used in many different areas of programming, and it might mean slightly different things depending on the context. In React, components have the following characteristics:</p>

<ul>
  <li>they are either functions or an extended ES6 class</li>
  <li>they return one, single JSX element (remember, functions can only return one thing!)</li>
  <li>there are two types of components: stateless and stateful</li>
</ul>

<p>We‚Äôll start investigating these characteristics by practicing with stateless components.</p>

<h4 id="stateless-components">Stateless Components</h4>

<p>Stateless components are components that simply need to render content to the DOM, and do not need to be aware of any application data that might be changing. They are sometimes called ‚Äúdumb‚Äù components. Stateless components are just functions that return the HTML you want rendered to the DOM. Examine the following example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="nx">Hello</span> <span class="nx">World</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="stateful-components">Stateful Components</h4>

<p>Stateful components are ES6 classes that extend an abstract ‚ÄòComponent‚Äô class, given to us by default by React. They each have a render method that allows us to specify what should be rendered to the DOM, and they keep track of some sort of application data.</p>

<h3 id="props-and-state">Props and State</h3>

<p>Props and state are how we manage and share information among components in React. We will dig into exactly how that works when we see it in action later in the lesson. It will be important for you to know what responsibility each has, and the difference between the two.</p>

<h2 id="discussion">Discussion</h2>

<p>Now that you‚Äôve had a little introduction into React, discuss the following with your partner:</p>

<ul>
  <li>What parts of Quantified Self could have been easier with React?</li>
  <li>Draw out a sketch of one of the QS views - how would you break it out into components, and what semantic names would you give those components?</li>
</ul>

<p>And then let‚Äôs come back as a group and report out your answers.</p>

<h2 id="fur-friends-greeting">Fur Friends Greeting</h2>

<p>We ultimately want to create something like this:</p>

<p><img src="/assets/images/lessons/react-in-theory/fur-friends-final.png" alt="" /></p>

<p>Let‚Äôs break this up so we can develop individual components.</p>

<p>If you were dividing this UI into sections, what would your sections be?</p>

<h3 id="install-some-tools">Install Some Tools</h3>

<p>Install the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">react dev tools</a>. It will give you additional information about your React application in the Chrome dev tools.</p>

<p>Then we‚Äôre going to clone down a repo already set up for us.</p>

<p>When you create your own React application, it is recommended to use a tool from Facebook called <a href="https://github.com/facebookincubator/create-react-app">Create React App</a>. It configures webpack and babel for us, so we don‚Äôt need to worry about them and can focus on React.</p>

<p>After cloning the repo, let‚Äôs navigate to <code class="highlighter-rouge">http://localhost:3000/</code>.</p>

<h3 id="explore-the-app">Explore the app</h3>

<p>Open a new tab in Terminal and open up your project with your text editor.</p>

<p>Open <code class="highlighter-rouge">./src/components/App.js</code></p>

<p>Let‚Äôs walk through this‚Ä¶</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">FurFriend</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./FurFriend</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/App.css</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"list-of-names"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">className</span><span class="p">=</span><span class="s">"title"</span><span class="p">&gt;</span>Well hello...<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p>First we import React and specifically the Component class from React. We can also import images, svg files and css. Then we define our main <code class="highlighter-rouge">App</code> component / module.</p>

<p>How does our App component get added to our view?</p>

<p>Open your <code class="highlighter-rouge">./index.js</code> file.</p>

<p>ReactDOM is React‚Äôs object for interacting with the DOM. You can see we create an instance of our <code class="highlighter-rouge">&lt;App /&gt;</code> and add it to our root element which can be found in our <code class="highlighter-rouge">public/index.html</code> page.</p>

<p>Open <code class="highlighter-rouge">./src/components/FurFriend.js</code></p>

<p>Let‚Äôs walk through this‚Ä¶</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/FurFriend.css</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">FurFriend</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"greeting"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>‚ú®fur friend‚ú®<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>10<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"increase-score"</span><span class="p">&gt;</span>+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">FurFriend</span><span class="p">;</span>
</code></pre></div></div>
<p>Head back to your browser. Open up the console, click on the React tab, Expand the <code class="highlighter-rouge">&lt;App&gt;</code> component and you‚Äôll see we have our <code class="highlighter-rouge">&lt;FurFriend /&gt;</code> component. Take a minute to dig in and see what comes up in our sidebar.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Props
  Empty Object
</code></pre></div></div>

<h4 id="capitalized-react-component-convention">Capitalized React Component Convention</h4>

<p>Take note of how <code class="highlighter-rouge">&lt;App /&gt;</code> is capitalized.</p>

<p>From the <a href="https://facebook.github.io/react/docs/jsx-in-depth.html">React docs</a>:</p>

<blockquote>
  <p>Capitalized types indicate that the JSX tag is referring to a React component. These tags get compiled into a direct reference to the named variable, so if you use the JSX <Foo></Foo> expression, Foo must be in scope.
When an element type starts with a lowercase letter, it refers to a built-in component like &lt;div&gt; or <span> and results in a string ‚Äòdiv‚Äô or ‚Äòspan‚Äô passed to React.createElement. Types that start with a capital letter like <Foo></Foo> compile to React.createElement(Foo) and correspond to a component defined or imported in your JavaScript file.
We recommend naming components with a capital letter. If you do have a component that starts with a lowercase letter, assign it to a capitalized variable before using it in JSX.</span></p>
</blockquote>

<h3 id="time-to-render-fur-friends-with-names">Time to Render Fur Friends with Names!</h3>

<p>We are currently re-using the FurFriend component three times. This is a common pattern in React and should be utilized as much as possible. However, it‚Äôs not dynamic, so this doesn‚Äôt look like much right now. Remember how we saw that empty props object in the React Dev Tools a minute ago? We need to change that by passing some props to the FurFriend component.</p>

<h3 id="props">Props</h3>

<p>We mentioned that components are reusable pieces of code, that allow us to create unique instances of certain UI elements. We can do this by passing props to each of our components. Think about how you create new instances of ES6 Classes - they share the same base, but you pass in different arguments every time you create a new instance, which allows each instance to vary slightly.</p>

<p>Props allow us to pass information from parent components to child components. We can pass strings, numbers, booleans, arrays, objects, functions, pretty much any piece of data we want access to in our child component. We can name them whatever we‚Äôd like, as long as we‚Äôre consistent and semantic with the names that we choose.</p>

<p>When we pass props down to a child component, it comes through as a simple JavaScript object with key value pairs.</p>

<p>Let‚Äôs start in App, the parent component of the FurFriend component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">FurFriend</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./FurFriend</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/App.css</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"list-of-names"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">className</span><span class="p">=</span><span class="s">"title"</span><span class="p">&gt;</span>Well hello...<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="na">name</span><span class="p">=</span><span class="s">"Shih-Tzu"</span><span class="p">/&gt;</span> // PROPS
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="na">name</span><span class="p">=</span><span class="s">"Shar-Pei"</span><span class="p">/&gt;</span> // BEING
      <span class="p">&lt;</span><span class="nc">FurFriend</span> <span class="na">name</span><span class="p">=</span><span class="s">"Hedgie"</span><span class="p">/&gt;</span>   // PASSED
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p>Now, rather than just rendering three FurFriend components that are exactly the same, we are rendering three FurFriend components, each of which now have the property of <code class="highlighter-rouge">name</code>.</p>

<p>Check out your React dev tools again. Select the <code class="highlighter-rouge">&lt;FurFriend /&gt;</code>, what do you see under props?</p>

<p>Now, let‚Äôs access those props within the FurFriend component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/FurFriend.css</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">FurFriend</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"greeting"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>‚ú®<span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span>‚ú®<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>10<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"increase-score"</span><span class="p">&gt;</span>+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">FurFriend</span><span class="p">;</span>
</code></pre></div></div>

<p>Note that the word <code class="highlighter-rouge">name</code> here is completely arbitrary. It can be whatever you want to refer to that value as in your component. We could have put <code class="highlighter-rouge">&lt;FurFriend jellyfish="Shih-Tzu"/&gt;</code> and within our JSX, accessed <code class="highlighter-rouge">{this.props.jellyfish}</code>.</p>

<h3 id="turn-and-talk">Turn and Talk</h3>

<ul>
  <li>Are App and FurFriend stateless or stateful components?</li>
  <li>How did FurFriend get the props of <code class="highlighter-rouge">name</code>?</li>
</ul>

<h3 id="action-time---stateful-components">Action Time - Stateful Components</h3>

<p>Currently, our button does not do anything. We want each Furry Friend to keep track of it‚Äôs rating, so we need this FurFriend component to be <code class="highlighter-rouge">stateful</code>.</p>

<p>State is slightly different than props: state holds data that represents the actual state of our application. State can be changed and mutated through user interactions, whereas props should remain immutable.</p>

<p>One of the more confusing things about React is when to make a component stateful. A general rule of thumb to keep in mind is that, if you‚Äôre not sure if a component should be stateless or stateful, start with a stateless component. Add state if you find that you need it. Stateful components are a lot heavier than stateless component. Keep your app as lean as possible!</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">FurFriend</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">()</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">count</span><span class="p">:</span> <span class="mi">10</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"greeting"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>‚ú®<span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span>‚ú®<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"increase-score"</span><span class="p">&gt;</span>
          +1
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nothing should look different in the browser - feel free to change the default state to another number, and you should see that reflected in your browser!</p>

<p>Let‚Äôs make this button actually do it‚Äôs job! We need to give it an event listener (this will look a little different from what we‚Äôre used to seeing in jQuery). On that click, let‚Äôs call a function that‚Äôs inside of this class/component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">FurFriend</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">()</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">count</span><span class="p">:</span> <span class="mi">10</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">incrementCount</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// do something</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"greeting"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>‚ú®<span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span>‚ú®<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"increase-score"</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">incrementCount</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
          +1
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice the difference between the className and onClick. onClick was assigned to an expression wrapped in <code class="highlighter-rouge">{ }</code> braces. We had to call the incrementCount function with <code class="highlighter-rouge">this</code> because we want to refer to the incrementCount() function that is part of this FurFriend class.</p>

<p>We are still aren‚Äôt actually incrementing. React gives us an important function:</p>

<h4 id="setstate"><code class="highlighter-rouge">setState()</code></h4>

<p><code class="highlighter-rouge">setState()</code> can be called on the instance of the component. This function takes an object as an argument - the part of the state that you would like to set, or change.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">incrementCount</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="turn-and-talk-1">Turn and Talk</h3>

<ul>
  <li>What is the difference between state and props?</li>
  <li>How, and where, do we update state?</li>
</ul>

<h2 id="interview-questions">Interview questions</h2>
<ul>
  <li>I saw on your resume you have used React on a couple of projects. What did you like/dislike about working in React?</li>
  <li>What are some of the advantages and disadvantages of working in React?</li>
</ul>

<h2 id="cfus">CFUs</h2>
<p>On your own, fill out the Intro to React Checks for Understanding questions <a href="https://goo.gl/forms/SHYac3wCF8yFxmrq2">here</a>.</p>

<h2 id="going-further">Going Further</h2>

<p>If you‚Äôre enjoying what we‚Äôve seen so far with React, I‚Äôd highly recommend reading their section of documentation called <a href="https://facebook.github.io/react/docs/thinking-in-react.html">Thinking in React</a>.</p>

<p>This article walks you through their best practices for approaching a new application using React. Since component-based / data down, actions up paradigms are fairly new to us, it‚Äôll be a worthy read for you.</p>

<h2 id="resources-and-additional-learning-materials">Resources and Additional Learning Materials</h2>

<p><a href="https://github.com/applegrain/creact">React &amp; Rails Tutorial</a></p>

<p><a href="https://facebook.github.io/react/docs/component-specs.html">Render vs Return</a></p>

<p><a href="https://toddmotto.com/react-create-class-versus-component/">React Classes vs extend Component</a></p>

<p><a href="https://camjackson.net/post/9-things-every-reactjs-beginner-should-know">9 Things Every React Dev Should Know</a></p>

<p><a href="https://facebook.github.io/react/docs/tutorial.html">React Tutorial by Facebook</a></p>
:ET