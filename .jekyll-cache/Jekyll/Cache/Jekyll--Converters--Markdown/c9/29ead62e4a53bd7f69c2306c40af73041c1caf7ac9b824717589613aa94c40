I"»"<p>This lesson plan last updated with Ruby 2.4.1 and Rails 5.2.0</p>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand how an API works at a conceptual level</li>
  <li>Use request specs to TDD an API</li>
  <li>Understand what makes a valid JSON data structure</li>
  <li>Learn how to parse and create JSON in Ruby</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/building_an_internal_api">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What is an API?</li>
  <li>As early as Mod 1, everyone in this room has already built an API. Can you give an example?</li>
  <li>What do you suspect is different about the APIs we will be building in Mod 3?</li>
  <li>What value will these APIs provide?</li>
</ul>

<h2 id="lecture">Lecture</h2>

<h3 id="discussion">Discussion</h3>

<p>Answer the questions above.</p>

<h3 id="apis">APIs</h3>

<ul>
  <li>Sketch a diagram of a standard browser application consuming HTML (Airbnb)
    <ul>
      <li>HTML responses</li>
      <li>Include: Browser, Rails, Database</li>
    </ul>
  </li>
  <li>Who is the intended audience for HTML?</li>
  <li>Add a mobile device to the diagram (running the Airbnb app)
    <ul>
      <li>Is this app going to consume HTML? Why or why not?</li>
      <li>What would be the fastest way to send data back and forth?</li>
    </ul>
  </li>
</ul>

<p>APIs provide a means for us to transmit data between web-based applications without worrying about all the overhead associated with HTML.</p>

<p>Why else might we create an API?</p>

<ul>
  <li>Create an application that uses client-side JavaScript to update a page without a full-page refresh.</li>
  <li>Provide a means for developers at other companies to use a service that we provide.</li>
  <li>Split the work of our application into smaller applications that are each deployed separately (service oriented architecture)</li>
</ul>

<h3 id="background-json">Background: JSON</h3>

<h4 id="exploration">Exploration</h4>

<p>Discuss the examples of JSON linked below with a partner and describe what you notice.</p>

<ul>
  <li><a href="https://developer.github.com/v3/git/commits">Example 1</a></li>
  <li><a href="https://birdeck-api.herokuapp.com/api/v1/posts/2">Example 2</a>.</li>
</ul>

<h4 id="overview">Overview</h4>

<p>When designing a service or an API, you need a machine-readable way to transmit data. Typically, machine-readable formats have been just that‚Äîmachine-readable (Think zeros and ones).</p>

<p>At its core, JSON is an agreed upon format to represent data. It strikes a balance between being machine-readable, but also human-readable. It is frequently used as a language-neutral means to transmit data on the web.</p>

<p>Because it‚Äôs also more lightweight than XML (read: fewer characters) it‚Äôs typically faster because it requires less bandwidth to transmit.</p>

<p>Other notes:</p>

<ul>
  <li>JSON stands for ‚ÄúJavaScript Object Notation‚Äù</li>
  <li>It is a string</li>
  <li>It maps easily onto the data structures used by most programming languages (numbers, strings, booleans, nulls, arrays and hashes/dictionaries)</li>
  <li>It looks and acts similarly like Ruby‚Äôs hash syntax</li>
  <li>It‚Äôs lightweight and easy for humans to read and write</li>
  <li>Most programming languages have a library for reading and writing JSON structures</li>
  <li>It‚Äôs a subset of the object syntax in JavaScript. All JSON is valid JavaScript, but not all JavaScript objects are valid JSON (functions, non-string keys, etc.)</li>
  <li>When working in Ruby we will rarely work with JSON directly. Instead, we will parse JSON as a hash and access the elements of the hash as we have in our previous work.</li>
</ul>

<h4 id="json-rules">JSON Rules</h4>

<p>JSON data structures are typically string representations of either a single JavaScript object (similar to a Ruby hash) or an array of objects or other values.</p>

<ul>
  <li>Objects are made up of name/value pairs</li>
  <li>Keys must be double-quoted and followed by a colon</li>
</ul>

<p>You also have a few types of values available in a JSON structure:</p>

<ul>
  <li>Numbers</li>
  <li>Strings (in double quotes only)</li>
  <li>Booleans (<code class="highlighter-rouge">true</code> and <code class="highlighter-rouge">false</code>)</li>
  <li>Arrays</li>
  <li>Objects (again, objects in JavaScript are similar to hashes in Ruby)</li>
  <li><code class="highlighter-rouge">null</code></li>
</ul>

<h4 id="common-mistakes">Common Mistakes</h4>

<ul>
  <li>Using single quotes instead of double quotes</li>
  <li>Not using quotes at all (JavaScript doesn‚Äôt require quotes on keys nor does Ruby‚Äôs symbol shorthand)</li>
  <li>Including a trailing comma in an array</li>
  <li>Trying to break a string over multiple lines (<code class="highlighter-rouge">\n</code> is fine)</li>
</ul>

<h3 id="new-tools">New Tools</h3>

<p>Before we begin, let‚Äôs take a look at some of the new tools you‚Äôll be using.</p>

<h4 id="json-and-ruby">JSON and Ruby</h4>

<p>Let‚Äôs play around with it in our <code class="highlighter-rouge">pry</code> consoles.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">hello: </span><span class="s2">"goodbye"</span> <span class="p">}</span>
<span class="nb">puts</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="n">my_hash</span><span class="p">)</span> <span class="c1">#=&gt; "{"hello":"goodbye"}"</span>
<span class="nb">puts</span>  <span class="n">my_hash</span><span class="p">.</span><span class="nf">to_json</span> <span class="c1">#=&gt; "{"hello":"goodbye"}"</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">person</span> <span class="o">=</span> <span class="s1">'{"name":"Jennifer Johnson","street":"641 Pine St.","phone":true,"age":50,"pets":["cat","dog","fish"]}'</span>
<span class="n">parsed_person</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="c1">#=&gt; {"name"=&gt;"Jennifer Johnson", "street"=&gt;"641 Pine St.", "phone"=&gt;true, "age"=&gt;50, "pets"=&gt;["cat", "dog", "fish"]}</span>
<span class="nb">puts</span> <span class="n">parsed_person</span>
<span class="nb">puts</span> <span class="n">parsed_person</span><span class="p">[</span><span class="s1">'pets'</span><span class="p">]</span>
</code></pre></div></div>

<h4 id="json-in-rails-testing">JSON in Rails Testing</h4>

<p>Diagram feature testing and draw comparisons to writing request specs.</p>

<ul>
  <li><code class="highlighter-rouge">get 'api/v1/items'</code>: submits a get request to your application (like <code class="highlighter-rouge">visit</code>, but without all of the Capybara bells and whistles)</li>
  <li><code class="highlighter-rouge">response</code>: captures the response to a given request (like <code class="highlighter-rouge">page</code> when using Capybara)</li>
  <li><code class="highlighter-rouge">JSON.parse(response)</code>: parses a JSON response</li>
</ul>

<h3 id="json-in-the-controller">JSON in the Controller</h3>

<ul>
  <li><code class="highlighter-rouge">render</code>: tells your controller what to render as a response</li>
  <li><code class="highlighter-rouge">json: Item.all</code>: hash argument for render - converts Item.all to valid JSON</li>
</ul>

<h3 id="discussion-1">Discussion</h3>

<ul>
  <li>What is API versioning?</li>
  <li>Why do we do it?</li>
  <li>The Importance of Habit:
    <ul>
      <li>Was anyone at Traversal?</li>
      <li>Juniors who struggle on the job frequently have haphazard window placement, use the mouse a lot, start and stop servers etc</li>
    </ul>
  </li>
  <li>While working through the tutorial:
    <ul>
      <li>practice a consistent window setup.</li>
      <li>add one keyboard shortcut (Make it CMD + TAB if you aren‚Äôt already using it).</li>
      <li>keep a Rails server running</li>
      <li>keep a Rails console running</li>
      <li>keep a tab with a command prompt ready for running tests</li>
      <li>BONUS: setup your editor with a keyboard shortcut for running your tests without leaving your editor.</li>
    </ul>
  </li>
</ul>

<h2 id="practice">Practice</h2>

<p>Complete the exercise <a href="./exercises/building_an_api">here</a></p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What are some reasons you‚Äôd want to create an API?</li>
  <li>At its core, what is JSON?</li>
  <li>What are the main differences between creating a traditional Rails application and creating an API?</li>
</ul>
:ET