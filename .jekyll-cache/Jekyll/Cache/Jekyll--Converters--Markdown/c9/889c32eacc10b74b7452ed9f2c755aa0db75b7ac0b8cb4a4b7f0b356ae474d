I"<<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Explain why we use/need forms</li>
  <li>Understand the role of <code class="highlighter-rouge">form_for</code></li>
  <li>Construct a basic form with the help of documentation/references</li>
  <li>Practice building the C portion of a CRUD application with a form</li>
</ul>

<h2 id="vocab">Vocab</h2>
<ul>
  <li>form_for</li>
  <li>params</li>
  <li>strong params</li>
</ul>

<h2 id="warmup">WarmUp</h2>
<ul>
  <li>What is the syntax for a form in raw html for the following constraints
    <ul>
      <li>create a new song</li>
      <li>field to enter title</li>
      <li>field to enter song length</li>
      <li>field to enter play count</li>
      <li>labels for each field</li>
    </ul>
  </li>
</ul>

<h3 id="setup">Setup</h3>

<ul>
  <li>Open up a working version of <code class="highlighter-rouge">jukebox</code>.</li>
  <li><strong>Get familiar with the <code class="highlighter-rouge">/new</code> route.</strong> What functionality is there?</li>
</ul>

<h3 id="user-story">User Story</h3>

<ol>
  <li>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> As a user,
 When I visit "/artists/new"
 Then I see a form where I can create a new artist`
</code></pre></div>    </div>
  </li>
  <li>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> As a user,
 When I visit "/artists/new"
 And I fill in name
 And I click "Create Artist"
 Then I am taken to the show page for the new artist`
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="tests">Tests</h3>

<ul>
  <li>First things first, let’s run our test suite since we added our Artists table. Why isn’t it passing?</li>
  <li>Answer: Our songs now require a artist, we can’t create songs by themselves any more.</li>
  <li>Lets go into our test suite and add a artist to our songs in our test setup.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">journey</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Journey"</span><span class="p">)</span>
  <span class="n">song</span> <span class="o">=</span> <span class="n">journey</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Stop Believin'"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">231</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>Now that we have fixed those errors, lets add a new test:
<code class="highlighter-rouge">touch spec/features/artists/new_spec.rb</code></p>

<h4 id="new-artist-test">New Artist Test</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># put this content into a new test, don't forget to do your describes, etc</span>
<span class="n">new_artist</span> <span class="o">=</span> <span class="s2">"Journey"</span>

<span class="n">visit</span> <span class="s2">"/artists/new"</span>

<span class="n">fill_in</span> <span class="s2">"artist[name]"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">new_artist</span>
<span class="n">click_on</span> <span class="s2">"Create Artist"</span>

<span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">new_artist</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="code-along">Code Along</h3>

<p>Let’s run the test and see what happens:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
       No route matches <span class="o">[</span>GET] <span class="s2">"/artists/new"</span>
</code></pre></div></div>

<p>So we need to add the route, in fact, lets open up all our artists resources:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#routes.rb</span>
  <span class="n">resources</span> <span class="ss">:songs</span>
  <span class="n">resources</span> <span class="ss">:artists</span>
</code></pre></div></div>

<p>Now if we run RSpec again, we get a different error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="c"># NameError:</span>
     <span class="c">#   uninitialized constant ArtistsController</span>
</code></pre></div></div>

<p>This is telling us that we need a ArtistsController, let’s go make that.<br />
<code class="highlighter-rouge">touch app/controllers/artists_controller.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/artists_controller.rb</span>

<span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

<span class="k">end</span>
</code></pre></div></div>
<p>Run RSpec again, and we have a new error.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The action <span class="s1">'new'</span> could not be found <span class="k">for </span>ArtistsController
</code></pre></div></div>

<p>Adding a <code class="highlighter-rouge">new</code> method in our ArtistsController should fix this!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/artists_controller.rb</span>

<span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We get that funny templating error when we run our tests again:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ArtistsController#new is missing a template <span class="k">for </span>this request format and variant.

request.formats: <span class="o">[</span><span class="s2">"text/html"</span><span class="o">]</span>
request.variant: <span class="o">[]</span>

NOTE! For XHR/Ajax or API requests, this action would normally respond with 204 No Content: an empty white screen. Since you<span class="s1">'re loading it in a web browser, we assume that you expected to actually render a template, not nothing, so we'</span>re showing an error to be extra-clear. If you expect 204 No Content, carry on. That<span class="s1">'s what you'</span>ll get from an XHR or API request. Give it a shot.
</code></pre></div></div>

<p>Clearly (NOT!), we need to add the new html/erb template:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir app/views/artists
touch app/views/artists/new.html.erb
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- #views/artists/new.html.erb --&gt;</span>

  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form_for</span> <span class="na">Artist.new</span> <span class="na">do</span> <span class="err">|</span><span class="na">f</span><span class="err">|</span> <span class="err">%</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p&gt;&lt;</span><span class="err">%=</span> <span class="na">f.label</span> <span class="na">:name</span> <span class="err">%</span><span class="nt">&gt;&lt;br/&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">f.text_field</span> <span class="na">:name</span> <span class="err">%</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;&lt;</span><span class="err">%=</span> <span class="na">f.submit</span> <span class="err">%</span><span class="nt">&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<ul>
  <li>What is <code class="highlighter-rouge">form_for</code>?
    <ul>
      <li>A form helper: Form helpers are designed to make working with models much easier compared to using just standard HTML elements by providing a set of methods for creating forms based on your models. This helper generates the HTML for forms, providing a method for each sort of input (From the <a href="http://api.rubyonrails.org/v5.1/classes/ActionView/Helpers/FormHelper.html">rails documentation</a>.)</li>
    </ul>
  </li>
  <li>Why do we need a new <code class="highlighter-rouge">Artist</code> object defined at our form’s route? Why are we calling model code (<code class="highlighter-rouge">.new</code>) in our VIEW?! Let’s change that to <code class="highlighter-rouge">@artist</code> and define <code class="highlighter-rouge">@artist</code> in our controller:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">form_for</code> figures out where the browser should submit the form, and which HTTP verb to use, based on the object we pass:</p>

<ul>
  <li>if the object does not have an <code class="highlighter-rouge">id</code>:
    <ul>
      <li>form_form will use a POST verb and the action path will be <code class="highlighter-rouge">/resources</code></li>
      <li>the form will start out empty</li>
      <li>the submit button will say ‘Create (resource name)’</li>
      <li>the action method we need to process the form data will be called <code class="highlighter-rouge">create</code></li>
    </ul>
  </li>
  <li>if the object has an <code class="highlighter-rouge">id</code>:
    <ul>
      <li>form_for will use a PUT verb and the action path will be something like <code class="highlighter-rouge">/resources/:id</code></li>
      <li>the form will pre-populate the fields with the data from the database</li>
      <li>the submit button will say ‘Update (resource name)’</li>
      <li>the action method we need to to process the form data will be called <code class="highlighter-rouge">update</code></li>
    </ul>
  </li>
</ul>

<p>By creating this form, we should now be further along in our errors:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The action <span class="s1">'create'</span> could not be found <span class="k">for </span>ArtistsController
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#controllers/artists_controller.rb</span>

<span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What do we have access to?? What should we check when we aren’t sure? PARAMS!!!!</p>

<p>But there is some other junk in there too, how can we separate out the things we need and make sure that only the attributes we want are present?</p>

<ul>
  <li>Strong Parameters
    <ul>
      <li>Protects against security threats.</li>
      <li>Presumes that no attributes are accessible unless specified in the model.</li>
      <li>Since this method is not called from any external object, let’s make it <code class="highlighter-rouge">private</code></li>
    </ul>
  </li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">new</span>
      <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">create</span>
      <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">artist</span><span class="p">.</span><span class="nf">save</span>
        <span class="c1"># everything saved properly</span>
        <span class="n">redirect_to</span> <span class="s2">"/artists/</span><span class="si">#{</span><span class="n">artist</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span>
      <span class="k">else</span>
        <span class="c1"># we were unable to save, so show the user the `new` form again</span>
        <span class="c1"># remember to write a test for this !!!</span>
        <span class="n">render</span> <span class="ss">:new</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">artist_params</span>
      <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:artist</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">params.require(:artist).permit(:name)</code> - when the params come through, we are going to require that the key of <code class="highlighter-rouge">artist</code> is present, and ONLY create the object if we see that key. When we see that key, we now are going to only allow (“permit”) the attributes that we explicitly list there, like <code class="highlighter-rouge">:name</code>.</li>
</ul>

<h3 id="exercise-finish-create-artists-and-add-create-playlists">Exercise: Finish Create Artists and Add Create Playlists</h3>

<ul>
  <li>You’re likely still getting a failing test from our last user story. Finish out the actions/view combo to get a passing test.</li>
  <li>Add the functionality for a user to add a new playlist name in a form, including routes</li>
</ul>
:ET