I"*’<h3 id="if-you-are-who-you-say-you-are">If you are who you say you are‚Ä¶</h3>

<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>explain the use of Authentication and why it‚Äôs important</li>
  <li>implement Authentication using BCrypt</li>
  <li>utilize Sessions in a Rails app</li>
  <li>Utilize <code class="highlighter-rouge">helper_method</code> in ApplicationController for use in views and controllers</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>authentication</li>
  <li>session</li>
  <li>hash</li>
  <li>helper_method</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>What is a cookie? What is a session?</li>
  <li>How could we use sessions to implement authentication?</li>
</ul>

<h2 id="overview">Overview</h2>

<ul>
  <li>Creating a user in our database</li>
  <li>Using <em>BCrypt</em> to hash passwords that we save</li>
  <li>Creating <em>custom routes</em> to login/logout</li>
  <li>Creating and destroying a <em>session</em></li>
  <li>Using a <em>helper_method</em> to access <em>current_user</em> in views</li>
</ul>

<h2 id="what-is-authentication">What is Authentication?</h2>

<p>Authentication is the client proving to the application that they are who they say they are. Usually this is done through a username/email and password combination. We handle this interaction a little differently than we handle a traditional user creation because we need to provide a way for our application to remember our user.</p>

<h2 id="registering-users">Registering Users</h2>

<p>In SetList, our next goal is to create users who can reserve songs in our application. This will require a way for a user to log in to our application, and for our application to ‚Äúremember‚Äù that user.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor
When I visit '/'
and I can click a link that says "Sign Up to Be a User"
and I can enter registration details in a form
and submit that form
Then I should see a welcome message with my username
and my user details have been saved in the database.
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"User registration form"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"creates new user"</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="s2">"/"</span>

    <span class="n">click_on</span> <span class="s2">"Register as a User"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/users/new"</span><span class="p">)</span>

    <span class="n">username</span> <span class="o">=</span> <span class="s2">"funbucket13"</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s2">"test"</span>

    <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">username</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="n">password</span>

    <span class="n">click_on</span> <span class="s2">"Create User"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run our test, we get a failure because we do not have a root path defined in our <code class="highlighter-rouge">routes.rb</code> file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: visit <span class="s2">"/"</span>

     ActionController::RoutingError:
       No route matches <span class="o">[</span>GET] <span class="s2">"/"</span>
</code></pre></div></div>

<p>We can handroll this route like so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#routes.rb</span>

  <span class="n">get</span> <span class="s2">"/"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"welcome#index"</span>
</code></pre></div></div>

<p>Or we can use the handy <code class="highlighter-rouge">root</code> method that Rails gives us to create a route for the root path (‚Äú/‚Äù):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">#routes.rb</span>

  <span class="n">root</span> <span class="s2">"welcome#index"</span>
</code></pre></div></div>

<p>According to this <code class="highlighter-rouge">root</code> path, we are directing our root path to a <code class="highlighter-rouge">WelcomeController</code> and an <code class="highlighter-rouge">index</code> action in that controller.</p>

<p>When we run our test, we get this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
       uninitialized constant WelcomeController
</code></pre></div></div>

<p>Let‚Äôs create the <code class="highlighter-rouge">WelcomeController</code> and a method for the <code class="highlighter-rouge">index</code> action as well. We are going to be rendering some basic content so we don‚Äôt need to fetch any data or build any instance variables in our controller.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/welcome_controller.rb</span>

<span class="k">class</span> <span class="nc">WelcomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now when we run our test, we get a missing template error. Add the template to <code class="highlighter-rouge">views/welcome/index.html.erb</code> (remember, filenames and folder names are based on the controller and action names)</p>

<p>We get a new error if we run our test:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Capybara::ElementNotFound:
       Unable to find visible <span class="nb">link </span>or button <span class="s2">"Register as a User"</span>
</code></pre></div></div>

<p>Let‚Äôs add the link to sign up in the <code class="highlighter-rouge">app/views/welcome/index.html.erb</code> file</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%=</span> <span class="na">link_to</span> <span class="err">"</span><span class="na">Register</span> <span class="na">as</span> <span class="na">a</span> <span class="na">User</span><span class="err">"</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>But which URI path should we send a user to who clicks on this link?</p>

<p>Our goal here is to create a ‚Äúnew user‚Äù resource.</p>

<p><strong>Notice we are treating this resource as any other resource.</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%=</span> <span class="na">link_to</span> <span class="err">"</span><span class="na">Register</span> <span class="na">as</span> <span class="na">a</span> <span class="na">User</span><span class="err">",</span> <span class="err">"/</span><span class="na">users</span><span class="err">/</span><span class="na">new</span><span class="err">"</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>When we run our tests we get this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
       No route matches <span class="o">[</span>GET] <span class="s2">"/users/new"</span>
</code></pre></div></div>

<p>We still need to define this routes in our <code class="highlighter-rouge">routes.rb</code> file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/users/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"users#new"</span>
</code></pre></div></div>

<p>If we run our test again we‚Äôll get this succession of errors:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
 uninitialized constant UsersController
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AbstractController::ActionNotFound:
 The action <span class="s1">'new'</span> could not be found <span class="k">for </span>UsersController
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ActionController::UnknownFormat:
   UsersController#new is missing a template <span class="k">for </span>this request format and variant.
</code></pre></div></div>

<p>Let‚Äôs define the action and template that go along with our new user path.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/users_controller.rb</span>

<span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/users/new.html.erb --&gt;</span>

<span class="nt">&lt;</span><span class="err">%=</span> <span class="na">form_tag</span> <span class="err">'/</span><span class="na">users</span><span class="err">',</span> <span class="na">method:</span> <span class="na">:post</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">label_tag</span> <span class="na">:username</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">text_field_tag</span> <span class="na">:username</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">label_tag</span> <span class="na">:password</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">password_field_tag</span> <span class="na">:password</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">submit_tag</span> <span class="err">"</span><span class="na">Create</span> <span class="na">User</span><span class="err">"</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>We have our form set up to take in the information that we want to create our user object with (username and password).</p>

<p>Run the tests again and the error is</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
       No route matches [POST] "/users"
</code></pre></div></div>

<p>Let‚Äôs add this route to our <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="s2">"/users"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"users#create"</span>
</code></pre></div></div>

<p>Now we get:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AbstractController::ActionNotFound:
  The action 'create' could not be found for UsersController
</code></pre></div></div>

<p>Add the create action to the UsersController:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our error is now:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Capybara::ElementNotFound:
  Unable to find xpath "/html"
</code></pre></div></div>

<p>We haven‚Äôt rendered a view, so let‚Äôs redirect back to the home page:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">redirect_to</span> <span class="s2">"/"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now our test can‚Äôt find the username, so let‚Äôs try to create the User. We are ‚Äúdream driving‚Äù at this point. I really wish I had a user class that I could use to create users:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
  <span class="n">redirect_to</span> <span class="s2">"/"</span>
<span class="k">end</span>

<span class="kp">private</span>
<span class="k">def</span> <span class="nf">user_params</span>
  <span class="n">params</span><span class="p">.</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:username</span><span class="p">,</span> <span class="ss">:password</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our tests will now complain about an <code class="highlighter-rouge">uninitialized constant UsersController::User</code>. Let‚Äôs create a User model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Next we get this whopper of an error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     ActiveRecord::StatementInvalid:
       PG::UndefinedTable: ERROR:  relation <span class="s2">"users"</span> does not exist
       LINE 8:                WHERE a.attrelid <span class="o">=</span> <span class="s1">'"users"'</span>::regclass
                                                 ^
       :               SELECT a.attname, format_type<span class="o">(</span>a.atttypid, a.atttypmod<span class="o">)</span>,
                            pg_get_expr<span class="o">(</span>d.adbin, d.adrelid<span class="o">)</span>, a.attnotnull, a.atttypid, a.atttypmod,
                    <span class="o">(</span>SELECT c.collname FROM pg_collation c, pg_type t
                      WHERE c.oid <span class="o">=</span> a.attcollation AND t.oid <span class="o">=</span> a.atttypid AND a.attcollation &lt;<span class="o">&gt;</span> t.typcollation<span class="o">)</span>,
                            col_description<span class="o">(</span>a.attrelid, a.attnum<span class="o">)</span> AS comment
                       FROM pg_attribute a LEFT JOIN pg_attrdef d
                         ON a.attrelid <span class="o">=</span> d.adrelid AND a.attnum <span class="o">=</span> d.adnum
                      WHERE a.attrelid <span class="o">=</span> <span class="s1">'"users"'</span>::regclass
                        AND a.attnum <span class="o">&gt;</span> 0 AND NOT a.attisdropped
                      ORDER BY a.attnum
</code></pre></div></div>

<p>The <code class="highlighter-rouge">PG::UndefinedTable: ERROR:  relation "users" does not exist</code> tells us that PostgreSQL can‚Äôt find a <code class="highlighter-rouge">users</code> table.</p>

<p>We still have to make the database portions (migration, etc) but it doesn‚Äôt feel right to store our passwords as plain text. <strong>IT ISN‚ÄôT!!! DON‚ÄôT DO IT. Use a password encryption tool (such as BCrypt) to store encrypted passwords in the database</strong>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails g migration CreateUsers username:string password_digest:string
</code></pre></div></div>

<p>Apply that migration (<code class="highlighter-rouge">rake db:migrate</code>).</p>

<p>We‚Äôll get back to why we called the field <code class="highlighter-rouge">password_digest</code> in a moment ‚Äì we should also make sure that our User model requires that the username and password fields be populated by adding validations.</p>

<p>Let‚Äôs start with a test in <code class="highlighter-rouge">spec/models/user_spec.rb</code> that looks like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">"validations"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:username</span><span class="p">)}</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:username</span><span class="p">)}</span>
    <span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:password</span><span class="p">)}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let‚Äôs try to make these tests pass with this User model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># models/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
  <span class="n">validates_presence_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our model test is complaining that we don‚Äôt have an attribute called <code class="highlighter-rouge">password</code>, and it‚Äôs right! Look at the migration and the schema. We have a field called <code class="highlighter-rouge">password_digest</code>.</p>

<h2 id="why-password_digest">Why <code class="highlighter-rouge">password_digest</code>?</h2>

<h3 id="bcrypt">BCrypt</h3>

<ul>
  <li><a href="https://github.com/codahale/bcrypt-ruby">BCrypt Docs</a></li>
  <li><a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password">Rails built-in SecurePassword module</a></li>
  <li>Secure Password Requires that the object have a <code class="highlighter-rouge">password_digest</code> attribute that will recognize both <code class="highlighter-rouge">password</code> and <code class="highlighter-rouge">password_confirmation</code> as attributes even though the attribute is called <code class="highlighter-rouge">password_digest</code>.</li>
  <li>Built into Rails, comes out of the box in the gem file but it is commented out by default. Must uncomment to use it.</li>
  <li>Takes password and password_confirmation (if necessary) and encrypts it to a very long string which is hard to decrypt; this is referred to as <strong>hashing</strong>.</li>
  <li>Takes care of matching the <code class="highlighter-rouge">password</code> and <code class="highlighter-rouge">password_confirmation</code> fields (if used).</li>
</ul>

<p>Find the <code class="highlighter-rouge">gem 'bcrypt'</code> in the <code class="highlighter-rouge">Gemfile</code> and uncomment it. Run <code class="highlighter-rouge">bundle</code> again to complete the process.</p>

<p>We now need to tell our model that it will be expecting a field <code class="highlighter-rouge">password</code> (and <code class="highlighter-rouge">password_confirmation</code> if needed) with the <code class="highlighter-rouge">has_secure_password</code> entry below.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># models/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
  <span class="n">validates_presence_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">true</span>

  <span class="n">has_secure_password</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the model tests again and they should be passing.</p>

<p>When we run our feature test again we get this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: expect<span class="o">(</span>page<span class="o">)</span>.to have_content<span class="o">(</span><span class="s2">"Welcome, #{username}!"</span><span class="o">)</span>
  expected to find text <span class="s2">"Welcome, funbucket13!"</span> <span class="k">in</span> <span class="s2">"Register as a User"</span>
</code></pre></div></div>

<p>Let‚Äôs look back at the UsersController. It looks like the new user is being created, so let‚Äôs add a flash message to show the welcome message:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">new_user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
  <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">new_user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
  <span class="n">redirect_to</span> <span class="s2">"/"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our test should now be passing!</p>

<h2 id="remembering-users">Remembering Users</h2>

<p>From a User Experience perspective, it feels weird to make a user sign up, but then they have to log in again after registering. A better User Experience is this: When a new user signs up, we want them to be logged in automatically. So how do we do that? What tool in Rails might we be able to use to store information about our user as they are visiting our application?</p>

<p>HTTP is a stateless protocol, which means there is no connection between each request sent. Nothing is being ‚Äúremembered‚Äù by the server from one request to another. Whenever we need to remember something about a user‚Äôs previous actions, a session will be a good tool. Sessions make http <em>seem</em> stateful. Without the idea of sessions, the user would have to authenticate on every request.</p>

<p>Let‚Äôs add a test to capture this idea:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"User registration form"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"creates new user"</span> <span class="k">do</span>
    <span class="o">...</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"keeps a user logged in after registering"</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="s2">"/"</span>

    <span class="n">click_on</span> <span class="s2">"Register as a User"</span>

    <span class="n">username</span> <span class="o">=</span> <span class="s2">"funbucket13"</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s2">"test"</span>

    <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">username</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="n">password</span>

    <span class="n">click_on</span> <span class="s2">"Create User"</span>

    <span class="n">visit</span> <span class="s1">'/profile'</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Hello, </span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We are imagining that there is a profile page that shows the username. When we visit the profile path (<code class="highlighter-rouge">/profile</code>) after registering, it should remember our username.</p>

<p>Run the test and you should get:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
  No route matches [GET] "/profile"
</code></pre></div></div>

<p>Add that route:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get '/profile', to: 'users#show'
</code></pre></div></div>

<p>Run the test again to get a missing action error. Add that action to the UsersController:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And a view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code># app/views/users/show.html.erb
<span class="nt">&lt;h1&gt;</span>Hello, <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="p">.</span><span class="nf">username</span> <span class="cp">%&gt;</span>!<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>We‚Äôre now getting <code class="highlighter-rouge">undefined method 'username' for nil:NilClass</code>. In our controller, we need to define which user‚Äôs profile we‚Äôre viewing.</p>

<p>Think about how this is different than other <code class="highlighter-rouge">show</code> actions you‚Äôve implemented in the past for other resources. Usually, our route includes an id to indicate which resources we are viewing, for example <code class="highlighter-rouge">/songs/:id</code>. But in this case, our route doesn‚Äôt include that id (<code class="highlighter-rouge">/profile</code>). This is because we don‚Äôt want users to see the profile for other users.</p>

<p>What we want to do instead is show the user that is currently logged in. We will indicate who is logged in by storing a user id in the session. Since sessions are stored on the client, every different user who accesses our site will have a different user id stored in that session.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the test again and you should get <code class="highlighter-rouge">Couldn't find User with 'id'=</code>. Put a pry in that show action and check what <code class="highlighter-rouge">session[:user_id]</code> is. It‚Äôs <code class="highlighter-rouge">nil</code>! Because we haven‚Äôt actually added that user id to the session. We want to do this once a user registers, so go back to the UsersController create action and add it there:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">new_user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
  <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">new_user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
  <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_user</span><span class="p">.</span><span class="nf">id</span>
  <span class="n">redirect_to</span> <span class="s2">"/"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the tests and they should pass. Our user is now logged in after they register.</p>

<h2 id="logging-in">Logging In</h2>

<ul>
  <li>On our root page, we should also have the option to log in if our account already exists.</li>
  <li>Let‚Äôs add a new test for this functionality</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a registered user
When I visit '/'
and I click on a link that says "I already have an account"
Then I should see a login form
When I enter my username and password
and submit the form
I am redirected to the home page
and I see a welcome message with my username
and I should no longer see the link that says "I already have an account"
and I should no longer see the link that says "Register as a User"
and I should see a link that says "Log out"
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"Logging In"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"can log in with valid credentials"</span> <span class="k">do</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">username: </span><span class="s2">"funbucket13"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"test"</span><span class="p">)</span>

    <span class="n">visit</span> <span class="s2">"/"</span>

    <span class="n">click_on</span> <span class="s2">"I already have an account"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>

    <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">username</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">password</span>

    <span class="n">click_on</span> <span class="s2">"Log In"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_link</span><span class="p">(</span><span class="s2">"Log out"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_link</span><span class="p">(</span><span class="s2">"Register as a User"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_link</span><span class="p">(</span><span class="s2">"I already have an account"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run this test and we get a missing link error. Add the link to the welcome/index view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"I already have an account"</span><span class="p">,</span> <span class="s2">"/login"</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Next, we need to add the route. But where should we send the user to to log in? Lets send them to a sessions controller that will handle information related to the session:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s1">'/login'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'sessions#new'</span>
</code></pre></div></div>

<p>Notice that even though a ‚Äúsession‚Äù is not a resource in our Database, we still try to follow ReSTful conventions for what our routes should look like and Rails conventions for how those routes are handled.</p>

<p>Run the test and you should get an <code class="highlighter-rouge">uninitialized constant SessionsController</code> error. And then <code class="highlighter-rouge">The action 'new' could not be found for SessionsController</code>. We will need a controller and a new action to handle this information:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/sessions_controller.rb</span>

<span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next we expect a no template errror:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Failure/Error: click_on <span class="s2">"I already have an account"</span>

     ActionController::UnknownFormat:
       SessionsController#new is missing a template <span class="k">for </span>this request format and variant.
</code></pre></div></div>

<p>And a view to render the form</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/sessions/new.html.erb --&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="s1">'/login'</span><span class="p">,</span> <span class="ss">method: :post</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">label_tag</span> <span class="ss">:username</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">text_field_tag</span> <span class="ss">:username</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">label_tag</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">password_field_tag</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">submit_tag</span> <span class="s2">"Log In"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Now that we have our form, when we run RSpec, we get a new error complaining about not having a post to <code class="highlighter-rouge">/login</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: click_on <span class="s2">"Log In"</span>

     ActionController::RoutingError:
       No route matches <span class="o">[</span>POST] <span class="s2">"/login"</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#routes.rb  </span>
  <span class="n">post</span> <span class="s1">'/login'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'sessions#create'</span>
</code></pre></div></div>

<p>Now we get an error when we click the ‚ÄúLog In‚Äù button!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: click_on <span class="s2">"Log In"</span>

     AbstractController::ActionNotFound:
       The action <span class="s1">'create'</span> could not be found <span class="k">for </span>SessionsController
</code></pre></div></div>

<p>We need an action in our controller that handles the post request. We want it to find the user by email, log them in, and show a welcome message:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
  <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>
  <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
  <span class="n">redirect_to</span> <span class="s1">'/'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next, our root page isn‚Äôt showing the correct links, so let‚Äôs add some if/else logic there:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Log out"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Register as a User"</span><span class="p">,</span> <span class="s2">"/users/new"</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"I already have an account"</span><span class="p">,</span> <span class="s2">"/login"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>If we run our tests, they will fail because we have not defined <code class="highlighter-rouge">current_user</code>.</p>

<h3 id="helper-method---current-user">Helper Method - Current User</h3>

<p>We‚Äôre dream driving this method called <code class="highlighter-rouge">current_user</code> that will tell us who (if anyone) is currently logged in. Because we‚Äôll want to be able to find the current user throughout the application, we will define it in <code class="highlighter-rouge">ApplicationController</code>. Because all controllers inherit from ApplicationController, every controller will have access to this method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/application_controller.rb</span>

<span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">protect_from_forgery</span> <span class="ss">with: :exception</span>

  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run this test again, and we get the same error! We are calling this method in our view, and views don‚Äôt have access to methods we define in our controllers by default. We can give views access to these methods by declaring them as <a href="https://apidock.com/rails/AbstractController/Helpers/ClassMethods/helper_method">helper methods</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">protect_from_forgery</span> <span class="ss">with: :exception</span>

  <span class="n">helper_method</span> <span class="ss">:current_user</span>

  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our next error is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionView::Template::Error:
       Couldn't find User with 'id'=
</code></pre></div></div>

<p>This is happening when no one is logged in, and <code class="highlighter-rouge">session[:user_id]</code> is nil. Let‚Äôs add an <code class="highlighter-rouge">if</code> statement to guard against this case:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">current_user</span>
  <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span> <span class="k">if</span> <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our test is now passing! Let‚Äôs add one more improvement to our <code class="highlighter-rouge">current_user</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span> <span class="k">if</span> <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">||=</code> is <a href="http://gavinmiller.io/2013/basics-of-ruby-memoization/">memoization</a>. Ruby will look to see if the variable on the left exists, if it does it uses that value. If it doesn‚Äôt exist it preforms the operation on the right. This makes it so that if we need to check the current user multiple times over the course of one request, we don‚Äôt have to go to the database to find the user multiple times.</p>

<p>If you run your tests again, you should get passing tests. However, I want to implement one more refactor. In your <code class="highlighter-rouge">UsersController#show</code> action, you can delete <code class="highlighter-rouge">User.find</code> and change your view to show <code class="highlighter-rouge">current_user</code> rather than <code class="highlighter-rouge">@user</code>. This implementation is more DRY but it is also more secure. Think about other ways you might use current_user in your controllers and views.</p>

<h2 id="checking-the-users-password">Checking the User‚Äôs Password</h2>

<p>If you look at the <code class="highlighter-rouge">SessionsController#create</code> action, we aren‚Äôt actually checking the user‚Äôs password. We want to add a sad path test that users can‚Äôt log in with bad credentials:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s2">"can log in with valid credentials"</span> <span class="k">do</span>
  <span class="o">...</span>
<span class="k">end</span>

<span class="n">it</span> <span class="s2">"cannot log in with bad credentials"</span> <span class="k">do</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">username: </span><span class="s2">"funbucket13"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"test"</span><span class="p">)</span>

  <span class="n">visit</span> <span class="s2">"/"</span>

  <span class="n">click_on</span> <span class="s2">"I already have an account"</span>

  <span class="n">fill_in</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">username</span>
  <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">with: </span><span class="s2">"incorrect password"</span>

  <span class="n">click_on</span> <span class="s2">"Log In"</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Sorry, your credentials are bad."</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">SessionsController#create</code> action, we need to check the password and handle the case when it doesn‚Äôt match. <strong>Remember, we never store a user‚Äôs password in the database!</strong> So we can‚Äôt do something like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
<span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">passsword</span> <span class="o">==</span> <span class="n">params</span><span class="p">[</span><span class="ss">:password</span><span class="p">]</span>
  <span class="c1"># password matches</span>
<span class="k">else</span>
  <span class="c1">#password doesn't match</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What we‚Äôre actuallly storing in the database is a <strong>hash</strong> or <strong>digest</strong> of the user‚Äôs password, so we are going need to hash the given password and see if it matches what‚Äôs in our database. Luckily, that <code class="highlighter-rouge">has_secure_password</code> line we added to our User model gives us a handy method to do this for us called <code class="highlighter-rouge">authenticate</code>. This method is called on a User object and takes a password as an argument:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">username: </span><span class="n">params</span><span class="p">[</span><span class="ss">:username</span><span class="p">])</span>
  <span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:password</span><span class="p">])</span>
    <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:success</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Welcome, </span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">username</span><span class="si">}</span><span class="s2">!"</span>
    <span class="n">redirect_to</span> <span class="s1">'/'</span>
  <span class="k">else</span>
    <span class="n">flash</span><span class="p">[</span><span class="ss">:error</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Sorry, your credentials are bad."</span>
    <span class="n">render</span> <span class="ss">:new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our tests should now be passing.</p>

<h3 id="workshop">Workshop</h3>

<ul>
  <li>Create a test that logs out a currently logged in user. This will require you to create a new route and send it to a new action that will destroy the session. Think about how you will show whether a user is logged in on the page? How will you deal with whether there should be a ‚ÄúLog In‚Äù link or a ‚ÄúLog Out‚Äù link showing.</li>
</ul>

<h3 id="takeaways">Takeaways</h3>

<ul>
  <li>Encrypt passwords in your database when you store them</li>
  <li>Use <em>ApplicationController</em> to hold methods you‚Äôll be using across controllers</li>
  <li>Use <code class="highlighter-rouge">helper_method :method_name</code> for methods you want to use in the views</li>
  <li>Don‚Äôt hesitate to use  <em>custom routes</em> when appropriate</li>
  <li>Use a <em>session</em> to store a logged in user id</li>
</ul>

<h2 id="wrapup">WrapUp</h2>
<ul>
  <li>What does Authentication mean? Why do we use it and when?</li>
  <li>What are the steps to implementing Authentication in a Rails app? I counted 5 main steps. How many do you come up with?</li>
  <li>How might you use Sessions to help with Authentication? Why is this an important piece?</li>
  <li>What is a helper_method? Why might we use them?</li>
</ul>
:ET