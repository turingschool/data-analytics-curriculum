I"™<h2 id="learning-goals">Learning Goals</h2>

<p>By the end of this lesson, you will know/be able to:</p>

<ul>
  <li>Understand the 5 pieces of information <code class="highlighter-rouge">rake routes</code> gives us.</li>
  <li>Use a route helper to easily refer to a relative and absolute path.</li>
  <li>Understand the difference between what <code class="highlighter-rouge">_url</code> and <code class="highlighter-rouge">_path</code> return when combined with a routes prefix.</li>
  <li>Find a routes prefix and use that prefix to build a helper.</li>
  <li>Understand how to use link_to and button_to view helpers.</li>
</ul>

<h2 id="vocab">Vocab</h2>

<ul>
  <li>routes</li>
  <li>path helper</li>
  <li>url helper</li>
</ul>

<h2 id="warmup">WarmUp</h2>

<ul>
  <li>How have you been sending a user to another route, say in your tests or in a controller?</li>
  <li>Read the following sections of the Rails Guides for Routing:
    <ul>
      <li><a href="https://guides.rubyonrails.org/routing.html#connecting-urls-to-code">1.1 Connecting URLs to Code</a></li>
      <li><a href="https://guides.rubyonrails.org/routing.html#resources-on-the-web">2.1 Resources on the Web</a></li>
      <li><a href="https://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">2.2 CRUD, Verbs and Actions</a></li>
      <li><a href="https://guides.rubyonrails.org/routing.html#restricting-the-routes-created">4.6 Restricting the Routes Created</a></li>
    </ul>
  </li>
  <li>What is the syntax for creating a single route?</li>
  <li>What shortcut does Rails give us to create multiple routes at once?</li>
</ul>

<h2 id="routes">Routes</h2>

<p>With your partner, take a look at the entries in the table that <code class="highlighter-rouge">rake routes</code> gives you and fill out the table below in your notebook or on your computer.</p>

<table>
  <tbody>
    <tr>
      <td>Table Heading</td>
      <td>Prefix</td>
      <td>Verb</td>
      <td>URI Pattern</td>
      <td>Data Collection</td>
      <td>Controller#Action</td>
      <td>Redirect or Render?</td>
      <td>View</td>
      <td>Path Helper</td>
      <td>URL Helper</td>
    </tr>
    <tr>
      <td>photos</td>
      <td>photos</td>
      <td>get</td>
      <td>/photos</td>
      <td>Photo.all</td>
      <td>photos#index</td>
      <td>render</td>
      <td>index</td>
      <td>photos_path</td>
      <td>photos_url</td>
    </tr>
  </tbody>
</table>

<p>Fill in your answers <a href="https://docs.google.com/spreadsheets/d/1AGjUE49UJajPEQHvh3plKjaem5RAGvuv5SNjZzvjD9U/edit#gid=0">here</a>.</p>

<h4 id="large-group-share">Large group share</h4>

<ul>
  <li>What is the path helper for each CRUD action? Which ones take an argument?</li>
  <li>What is the url helper for each? How do these compare to the path helpers?</li>
</ul>

<h3 id="using-prefix-names-to-make-path-helpers">Using prefix names to make path helpers</h3>

<ul>
  <li>Rails will use the ‚Äúprefix‚Äù column to build our ‚Äúpath helpers‚Äù, we just need to add <code class="highlighter-rouge">_path</code> to the end of the prefix name</li>
  <li>Generally, any row that does not include a ‚Äúprefix‚Äù uses the same ‚Äúprefix‚Äù as the line above it</li>
</ul>

<h2 id="passing-parameters-to-path-helpers">Passing Parameters to Path Helpers</h2>

<p>Any time a path helper needs a dynamic parameter, like <code class="highlighter-rouge">:id</code> we MUST pass a value to the path helper.</p>

<p>Best practice is to pass the entire object to the path helper, such as:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">journey</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Journey'</span><span class="p">)</span>
<span class="n">visit</span> <span class="n">artist_path</span><span class="p">(</span><span class="n">journey</span><span class="p">)</span>
</code></pre></div></div>

<p>Rails will check if the object has an ID value and build the path helper appropriately.</p>

<p><strong>Turn &amp; Talk</strong></p>

<ul>
  <li>What happens if we forget to pass a parameter to a path helper that needs it?</li>
  <li>What error do we see?</li>
  <li>Practice reading the ENTIRE error message to understand what‚Äôs going on</li>
</ul>

<p>Point out to students that the error message will start to look like a ‚Äúmissing route‚Äù error, but when they read the ENTIRE error, it will actually tell them the path helper is missing a parameter.</p>

<h3 id="using-rake-routes-as-a-debugging-tool">Using <code class="highlighter-rouge">rake routes</code> as a debugging tool</h3>

<p>We can use <code class="highlighter-rouge">rake routes</code> as a debugging tool for our path helpers:</p>

<ul>
  <li>examine the <code class="highlighter-rouge">edit</code> path helper for an album:</li>
</ul>

<p><code class="highlighter-rouge">edit_album GET    /albums/:id/edit(.:format) albums#edit</code></p>

<p>We can see in the <code class="highlighter-rouge">rake routes</code> output that we need a ‚Äúdynamic parameter‚Äù in our URI path, called <code class="highlighter-rouge">/:id/</code>. Here, <code class="highlighter-rouge">rake routes</code> is telling us exactly what the parameter is called, and that also indicates how we can access this value in our params hash: <code class="highlighter-rouge">params[:id]</code></p>

<p>If you add a custom route to <code class="highlighter-rouge">config/routes.rb</code> with its own ‚Äúdynamic parameter‚Äù, like:</p>
<ul>
  <li><code class="highlighter-rouge">get '/albums/:album_id', to: 'albums#show'</code>
and run <code class="highlighter-rouge">rake routes</code> again</li>
  <li><code class="highlighter-rouge">GET    /albums/:album_id(.:format) albums#show</code></li>
</ul>

<p>Again, <code class="highlighter-rouge">rake routes</code> shows us a dynamic parameter in the URI path, called <code class="highlighter-rouge">:album_id</code>, and we would also access this as <code class="highlighter-rouge">params[:album_id]</code></p>

<p><strong>Be sure to remove any custom routes for albums</strong></p>

<hr />

<h1 id="we-only-want-to-see-you-using-path-helpers-moving-forward-no-exceptions">We only want to see you using path helpers moving forward, no exceptions</h1>

<hr />

<h4 id="independent-practice">Independent Practice</h4>

<p>Update your test suite to use path helpers instead of direct paths (i.e. ‚Äú/songs‚Äù)</p>

<h4 id="partnered-workshop">Partnered Workshop</h4>

<p>Research how to use link helpers with your path helpers to create a navigation bar. This navigation bar would contain a link that leads to all songs and one that leads to all artists. It also includes a link to go home. Your home would show links to create a new song or artist.</p>

<h4 id="partnered-share">Partnered Share</h4>

<p>Turn to a new partner and share out how you used path helpers to dry up your code.</p>

<h3 id="wrapup">WrapUp</h3>

<ul>
  <li>What does artists_path evaluate to outside of a link helper?</li>
  <li>What does artists_url evaluate to outside of a link helper?</li>
  <li>What does artist_path(@artist) give you? Why do you need to pass it @artist? Which other routes need you to pass a resource?</li>
</ul>
:ET