I"LG<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>explain falsy vs truthy in Ruby</li>
  <li>apply the key logic operators AND, OR, and NOT</li>
  <li>combine operations into a logic expression</li>
  <li>utilize a truth table to illustrate a logical expression</li>
  <li>trace multiple paths through a code snippet</li>
  <li>apply compound logic to flatten nested <code class="highlighter-rouge">if</code> statements</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>Boolean</li>
  <li>Truthy</li>
  <li>Falsey</li>
  <li>Precedence</li>
  <li>Truth Table</li>
  <li>Flow Control</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/boolean_logic">here</a></p>

<h2 id="warmup">WarmUp</h2>

<p>First, start by doing some research.
You may choose independent or paired.</p>

<h4 id="truthy-and-falsey-values">Truthy and falsey values</h4>

<ul>
  <li>How many falsey values are there in Ruby?</li>
  <li>What is truthy in Ruby?</li>
</ul>

<p>When you’ve answered the questions above, which of these are truthy and which are falsey?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#pry</span>
<span class="k">if</span> <span class="n">value_to_check</span>
  <span class="nb">puts</span> <span class="s2">"I'm truthy!"</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Values to Check:</p>

<ul>
  <li>1.0</li>
  <li>“hello”</li>
  <li>nil</li>
  <li>0</li>
  <li>false</li>
  <li>true</li>
  <li>“false”</li>
</ul>

<h2 id="why">Why?</h2>

<p>Why is it helpful to have a working understanding of boolean logic? It can help us flatten <code class="highlighter-rouge">if</code> statements and reduce the number of lines in our code. We are also going to encounter this frequently in our jobs. A lack in understanding can introduce bugs into our code bases.</p>

<h2 id="andornot-and-truth-tables">AND/OR/NOT and Truth Tables</h2>

<p>A truth table is a mathematical table used in logic. In the truth table below the first two columns (<code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>) are our <em>input variables</em>. Our table should cover all of the different possible combinations of input variables. There are four different combinations for our two input variables (<code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>). These are represented as rows. The remaining columns show all of the possible results of three Ruby operators for a given row. So the first row says if <code class="highlighter-rouge">a</code> is <code class="highlighter-rouge">true</code> and <code class="highlighter-rouge">b</code> is <code class="highlighter-rouge">true</code> then <code class="highlighter-rouge">a &amp;&amp; b</code> is <code class="highlighter-rouge">true</code>, <code>a &#124;&#124; b</code> is <code class="highlighter-rouge">true</code>, and <code class="highlighter-rouge">!a</code> is <code class="highlighter-rouge">false</code>.</p>

<h3 id="independent-practice">Independent Practice</h3>

<p>Use a <code class="highlighter-rouge">pry</code> session to clarify how these three Ruby operators work. For each row, set <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> to their values and experiment with the Ruby operators.</p>

<p><strong>Example:</strong></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="kp">true</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="kp">true</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><code class="highlighter-rouge">a</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">b</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">a &amp;&amp; b</code></th>
      <th style="text-align: center"><code>a &#124;&#124; b</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">!a</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
    </tr>
    <tr>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">false</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">false</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<p><br />
   <br />
   <br />
   <br /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><code class="highlighter-rouge">a</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">b</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">a &amp;&amp; b</code></th>
      <th style="text-align: center"><code>a &#124;&#124; b</code></th>
      <th style="text-align: center"><code class="highlighter-rouge">!a</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
    </tr>
    <tr>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
    </tr>
    <tr>
      <td style="text-align: center">false</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">true</td>
      <td style="text-align: center">true</td>
    </tr>
    <tr>
      <td style="text-align: center">false</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">false</td>
      <td style="text-align: center">true</td>
    </tr>
  </tbody>
</table>

<h3 id="expressions-and-precedence-with-parentheses">Expressions and Precedence with Parentheses</h3>

<p>Let’s pop a few scenarios into pry, pause before hitting ‘enter’:</p>

<p><strong>Agree/Disagree</strong>
What do you expect it to return? <code class="highlighter-rouge">true</code>? <code class="highlighter-rouge">false</code>? Why?
<code class="highlighter-rouge">false &amp;&amp; false || true</code></p>

<h4 id="precedence">Precedence</h4>

<p>It depends on the order Ruby executes.
<a href="https://ruby-doc.org/core-2.4.0/doc/syntax/precedence_rdoc.html">Precedence</a> refers to the order of opperations which Ruby follows. Here are a few you probably use regularly. The list is read top down in order of precedence.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!
&gt;, &gt;=, &lt;, &lt;=
&lt;=&gt;, ==, ===, !=, =~, !~
&amp;&amp;
||
=, +=, -=, etc.
</code></pre></div></div>
<p>Ruby will run comparisions in order or precedence, if there are multiple of the same operator they will be evaluated starting with the left most operator.</p>

<p>If we take this Boolean Expression, <code class="highlighter-rouge">false || true &amp;&amp; false || false</code>, we can diagram the order Ruby will evaluate it in.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>false || true &amp;&amp; false || false
         \          /
false ||     false     ||  false

             false
</code></pre></div></div>

<p>What if you want the order Ruby executes this in to be different from its default? Enter, parens ().</p>

<p>Let’s revisit that last expressions in <code class="highlighter-rouge">pry</code>, but let’s add some parentheses.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">false</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span> <span class="o">||</span> <span class="kp">true</span>
<span class="kp">false</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kp">false</span> <span class="o">||</span> <span class="kp">true</span><span class="p">)</span>
</code></pre></div></div>
<p><strong>Turn &amp; Talk</strong>
Turn to your neighbor and discuss what order you believe Ruby is evaluating each boolean expression in. What will the result be?</p>

<h3 id="paired-practice">Paired Practice</h3>

<h4 id="complex-truth-tables">Complex Truth Tables</h4>

<p>Evaluate the following by creating a <a href="https://docs.google.com/spreadsheets/d/1-1GjYCcTwfPhDCGPvUdB7FsTRQqTY9V3g1ieIVlQ3JU/edit#gid=0">truth table</a> for three boolean values (<code class="highlighter-rouge">A</code>, <code class="highlighter-rouge">B</code>, and <code class="highlighter-rouge">C</code>) and using it to solve the following expressions:</p>

<ul>
  <li><code class="highlighter-rouge">(A || B) &amp;&amp; (A || C)</code></li>
  <li><code class="highlighter-rouge">(A || !B) || (!A || C)</code></li>
  <li><code class="highlighter-rouge">((A &amp;&amp; B) &amp;&amp; C) || (B &amp;&amp; !A)</code></li>
  <li><code class="highlighter-rouge">((A &amp;&amp; B) &amp;&amp; !C) || ((A &amp;&amp; C) &amp;&amp; !B)</code></li>
</ul>

<!-- ### Quick Aside: Short-Circuit Evaluation

[Short-Circuit Evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation) is used by many programming languages (including Ruby) to shortcut-eval an expression based on its first value and operator. Only if the result of the operation cannot be determined by that does it look at the second value.

For example, `false && x # => false` without needing to know what `x` equals.

-->

<h3 id="independent-practice-1">Independent Practice</h3>

<p>By yourself or with a partner:</p>
<ol>
  <li>Clone the <a href="https://github.com/turingschool-examples/vehicle_boolean">Boolean Logic Practice Repo</a> onto your local machine</li>
  <li>cd vehicle_boolean</li>
  <li>ruby test/vehicle_analysis_test.rb (make sure all tests start out passing)
    <ul>
      <li>You may need to <code class="highlighter-rouge">gem install stringio</code> and/or <code class="highlighter-rouge">gem install o_stream_catcher</code></li>
    </ul>
  </li>
  <li>Complete Activity 1 and Activity 2 (see below)</li>
</ol>

<h4 id="activity-1-vehicle">Activity 1: Vehicle</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vehicle.rb</span>

<span class="k">class</span> <span class="nc">Vehicle</span>
  <span class="nb">attr_reader</span> <span class="ss">:model</span><span class="p">,</span> <span class="ss">:four_wheel</span><span class="p">,</span> <span class="ss">:big_back_wheels</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">four_wheel</span><span class="p">,</span> <span class="n">big_back_wheels</span><span class="p">)</span>
    <span class="vi">@model</span> <span class="o">=</span> <span class="n">model</span>
    <span class="vi">@four_wheel</span> <span class="o">=</span> <span class="n">four_wheel</span>
    <span class="vi">@big_back_wheels</span> <span class="o">=</span> <span class="n">big_back_wheels</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">car?</span>
    <span class="n">model</span> <span class="o">==</span> <span class="s2">"car"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tractor?</span>
    <span class="n">model</span> <span class="o">==</span> <span class="s2">"tractor"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">pickup?</span>
    <span class="n">model</span> <span class="o">==</span> <span class="s2">"pickup"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">four_wheel_drive?</span>
    <span class="n">four_wheel</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">big_back_wheels?</span>
    <span class="n">big_back_wheels</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vehicle_analysis.rb</span>

<span class="k">class</span> <span class="nc">VehicleAnalysis</span>

  <span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">car?</span>
      <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">four_wheel_drive?</span> <span class="o">||</span> <span class="o">!</span><span class="n">vehicle</span><span class="p">.</span><span class="nf">four_wheel_drive?</span>
        <span class="nb">puts</span> <span class="s2">"Vehicle has four wheels "</span>
        <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">four_wheel_drive?</span>
          <span class="nb">puts</span> <span class="s2">"with four wheel drive"</span>
        <span class="k">else</span>
          <span class="nb">puts</span> <span class="s2">"with two wheel drive"</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">elsif</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">tractor?</span>
      <span class="nb">puts</span> <span class="s2">"Vehicle has four wheels "</span>
      <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">big_back_wheels?</span>
        <span class="nb">puts</span> <span class="s2">"with big wheels in the back"</span>
      <span class="k">end</span>
    <span class="k">elsif</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">pickup?</span>
      <span class="nb">puts</span> <span class="s2">"Vehicle has four wheels "</span>
      <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">four_wheel_drive?</span>
        <span class="nb">puts</span> <span class="s2">"with four wheel drive"</span>
      <span class="k">else</span>
        <span class="nb">puts</span> <span class="s2">"with two wheel drive"</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">vehicle</span><span class="p">.</span><span class="nf">big_back_wheels?</span>
        <span class="nb">puts</span> <span class="s2">"with big wheels in the back"</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># analysis_runner.rb</span>
<span class="nb">require</span> <span class="s2">"vehicle"</span>
<span class="nb">require</span> <span class="s2">"vehicle_analysis"</span>

<span class="n">vehicle</span> <span class="o">=</span> <span class="no">Vehicle</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"pickup"</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
<span class="no">VehicleAnalysis</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>How many unique execution paths are there through the block of code starting with <code class="highlighter-rouge">if vehicle.car?</code> statement?</li>
  <li>Chart out the conditions which would lead to these paths consider using a truth table.</li>
</ul>

<h3 id="activity-2-flattening-if-statements">Activity 2: Flattening <code class="highlighter-rouge">if</code> statements</h3>

<p>Take the code from the previous exercise. Let’s try to refactor it. Start by flattening it down. Can you simplify the logic to reduce the number of paths? How few can you get it down to? Compare your results with a peer.</p>

<p>Convert the nested if/else statements to flatter boolean expressions.</p>

<h2 id="wrapup">Wrapup</h2>

<ul>
  <li>What objects are truthy? What objects are falsey?</li>
  <li>What are the rules of precedence in Boolean expressions?</li>
  <li>Why might you use complex Boolean expressions?</li>
</ul>
:ET