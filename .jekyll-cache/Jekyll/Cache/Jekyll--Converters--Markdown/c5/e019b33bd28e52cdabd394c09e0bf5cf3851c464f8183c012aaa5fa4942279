I"Ô`<p>This project builds on the lessons learned in <a href="../projects/eventmanager">EventManager</a>
to focus on fundamental Ruby style/concepts.</p>

<h2 id="project-overview">Project Overview</h2>

<h3 id="learning--practice-goals">Learning &amp; Practice Goals</h3>

<ul>
  <li>Determine appropriate classes and methods based on specifications</li>
  <li>Demonstrate understanding of variable scope and lifecycle</li>
  <li>Create multiple coordinating methods and objects</li>
  <li>Choose enumerables best suited for the task</li>
  <li>Utilize effective debugging techniques</li>
</ul>

<h3 id="abstract">Abstract</h3>

<p>Let‚Äôs take <a href="eventmanager">EventManager</a> to the next
level. Based on the larger data file, build an interactive query-and-reporting
tool which fulfills the expectations below. Re-use data-cleaning procedures
from the original <code class="highlighter-rouge">EventManager</code> to handle dirty input and generate beautiful
output. We are also going to explore creating our own HTML files.</p>

<h3 id="data-supplied">Data Supplied</h3>

<ul>
  <li>Source data file: <a href="full_event_attendees.csv">full_event_attendees.csv</a></li>
</ul>

<h2 id="base-expectations">Base Expectations</h2>

<p>As a user launching the program, I‚Äôm provided a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL (Read-Eval-Print-Loop)</a> where I can issue one of several commands, described below. After each command completes, the prompt returns, waiting for another instruction.</p>

<h3 id="the-queue">The Queue</h3>

<p>The program has a concept called the ‚Äúqueue‚Äù. The queue holds the stored results from a previous search. As a user, I issue a search command to find records, then later issue another command to do work with those results. The queue is <em>not</em> cleared until the user runs the command <code class="highlighter-rouge">queue clear</code> or a new <code class="highlighter-rouge">find</code> command.</p>

<h3 id="the-repl">The REPL</h3>

<p>The program must respond to the following commands:</p>

<h4 id="load-filename"><code class="highlighter-rouge">load &lt;filename&gt;</code></h4>

<p>Erase any loaded data and parse the specified file. If no filename is given, default to <code class="highlighter-rouge">full_event_attendees.csv</code>.</p>

<h4 id="find-attribute-criteria"><code class="highlighter-rouge">find &lt;attribute&gt; &lt;criteria&gt;</code></h4>

<p>Populate the queue with all records matching the criteria for the given attribute. Example usages:</p>

<ul>
  <li><code class="highlighter-rouge">find zipcode 20011</code></li>
  <li><code class="highlighter-rouge">find last_name Johnson</code></li>
  <li><code class="highlighter-rouge">find state VA</code></li>
</ul>

<p>The comparison should:</p>

<ul>
  <li>Be case insensitive, so <code class="highlighter-rouge">"Mary"</code> and <code class="highlighter-rouge">"mary"</code> would be found in the same search</li>
  <li>Be insensitive to internal whitespace, but not external:
    <ul>
      <li><code class="highlighter-rouge">"John"</code> and <code class="highlighter-rouge">"John "</code> are considered matches</li>
      <li><code class="highlighter-rouge">"John Paul"</code> and <code class="highlighter-rouge">"Johnpaul"</code> are not matches</li>
    </ul>
  </li>
  <li>Not do substring matches, so a <code class="highlighter-rouge">find first_name Mary</code> does not find a record with first name <code class="highlighter-rouge">"marybeth"</code></li>
</ul>

<h4 id="queue-count"><code class="highlighter-rouge">queue count</code></h4>

<p>Output how many records are in the current queue</p>

<h4 id="queue-clear"><code class="highlighter-rouge">queue clear</code></h4>

<p>Empty the queue</p>

<h4 id="queue-print"><code class="highlighter-rouge">queue print</code></h4>

<p>Print out a tab-delimited data table with a header row following this format:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  LAST NAME  FIRST NAME  EMAIL  ZIPCODE  CITY  STATE  ADDRESS  PHONE
</code></pre></div></div>

<h4 id="queue-print-by-attribute"><code class="highlighter-rouge">queue print by &lt;attribute&gt;</code></h4>

<p>Print the data table sorted by the specified <code class="highlighter-rouge">attribute</code> like <code class="highlighter-rouge">zipcode</code>.</p>

<h4 id="queue-save-to-filenamecsv"><code class="highlighter-rouge">queue save to &lt;filename.csv&gt;</code></h4>

<p>Export the current queue to the specified filename as a CSV. The file should
include data and headers for last name, first name, email, zipcode, city,
state, address, and phone number.</p>

<h4 id="queue-export-html-filenamecsv"><code class="highlighter-rouge">queue export html &lt;filename.csv&gt;</code></h4>

<p>Export the current queue to the specified filename as a valid HTML file. The
file should use tables and include the data for all of the expected information.</p>

<h4 id="help"><code class="highlighter-rouge">help</code></h4>

<p>Output a listing of the available individual commands</p>

<h4 id="help-command"><code class="highlighter-rouge">help &lt;command&gt;</code></h4>

<p>Output a description of how to use the specific command. For example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>help queue clear
help find
</code></pre></div></div>

<h3 id="test-cases-for-base-expectations">Test Cases for Base Expectations</h3>

<p>Your program must handle the following scenarios correctly:</p>

<h4 id="a-happy-paths">A. Happy Paths</h4>

<ol>
  <li><code class="highlighter-rouge">load full_event_attendees.csv</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">0</code></li>
  <li><code class="highlighter-rouge">find first_name John</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">63</code></li>
  <li><code class="highlighter-rouge">queue clear</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">0</code></li>
  <li><code class="highlighter-rouge">help</code> should list the commands</li>
  <li><code class="highlighter-rouge">help queue count</code> should explain the queue count function</li>
  <li><code class="highlighter-rouge">help queue print</code> should explain the printing function</li>
</ol>

<h4 id="b-lets-try-printing">B. Let‚Äôs Try Printing</h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">0</code></li>
  <li><code class="highlighter-rouge">find first_name John</code></li>
  <li><code class="highlighter-rouge">find first_name Mary</code></li>
  <li><code class="highlighter-rouge">queue print</code> should print out the 16 attendees</li>
  <li><code class="highlighter-rouge">queue print by last_name</code> should print the same attendees sorted alphabetically by last name</li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">16</code></li>
</ol>

<h4 id="c-saving">C. Saving</h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find city Salt Lake City</code></li>
  <li><code class="highlighter-rouge">queue print</code> should display 13 attendees</li>
  <li><code class="highlighter-rouge">queue save to city_sample.csv</code></li>
  <li>Open the CSV and inspect that it has correct headers and the data rows from step 3.</li>
  <li><code class="highlighter-rouge">find state DC</code></li>
  <li><code class="highlighter-rouge">queue print by last_name</code> should print them alphabetically by last name</li>
  <li><code class="highlighter-rouge">queue save to state_sample.csv</code></li>
  <li>Open the CSV and inspect that it has the headers, the data from step 7, but not the data previously found in step 2.</li>
  <li><code class="highlighter-rouge">queue clear</code></li>
  <li>Repeat steps 2 through 8, except with HTML.</li>
</ol>

<h4 id="d-reading-your-data">D. Reading Your Data</h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find state MD</code></li>
  <li><code class="highlighter-rouge">queue save to state_sample.csv</code></li>
  <li><code class="highlighter-rouge">quit</code></li>
</ol>

<p><em>Restart the program and continue‚Ä¶</em></p>

<ol>
  <li><code class="highlighter-rouge">load state_sample.csv</code></li>
  <li><code class="highlighter-rouge">find first_name John</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">4</code></li>
</ol>

<h4 id="e-emptiness">E. Emptiness</h4>

<p>Note that this set intentionally has no call to <code class="highlighter-rouge">load</code>:</p>

<ol>
  <li><code class="highlighter-rouge">find last_name Johnson</code></li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">0</code></li>
  <li><code class="highlighter-rouge">queue print</code> should not print any attendee data</li>
  <li><code class="highlighter-rouge">queue clear</code> should not return an error</li>
  <li><code class="highlighter-rouge">queue print by last_name</code> should not print any data</li>
  <li><code class="highlighter-rouge">queue save to empty.csv</code> should output a file with only headers</li>
  <li><code class="highlighter-rouge">queue count</code> should return <code class="highlighter-rouge">0</code></li>
</ol>

<h2 id="extensions">Extensions</h2>

<h3 id="improving-queue-print">Improving <code class="highlighter-rouge">queue print</code></h3>

<ul>
  <li>Modify your <code class="highlighter-rouge">queue print</code> command so it prints in left-aligned columns where the size of each column is determined by the longest entry in the column.</li>
  <li>If the queue is more than 10 lines, pause after ten until the user hits either the spacebar or enter keys.</li>
  <li>Add a status line that reads like ‚ÄúShowing Matches 20-30 of 80‚Äù</li>
</ul>

<h3 id="improving-find">Improving <code class="highlighter-rouge">find</code></h3>

<ul>
  <li>Modify your <code class="highlighter-rouge">find</code> instruction so all searches are case insensitive</li>
  <li>Modify your <code class="highlighter-rouge">find</code> instruction to allow compound searches using a single <code class="highlighter-rouge">and</code> such as:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find zipcode 20011 and last_name Johnson
</code></pre></div></div>

<h3 id="improving-queue-save-to">Improving <code class="highlighter-rouge">queue save to</code></h3>

<ul>
  <li>Modify the instruction to respect the filename extension so that:
    <ul>
      <li><code class="highlighter-rouge">csv</code> generates comma-separated values</li>
      <li><code class="highlighter-rouge">txt</code> generates tab-delimited values</li>
      <li><code class="highlighter-rouge">json</code> generates valid, parsable JSON</li>
      <li><code class="highlighter-rouge">xml</code> generates valid, parsable XML</li>
      <li><code class="highlighter-rouge">yml</code> generates valid YAML</li>
    </ul>
  </li>
</ul>

<h3 id="implementing-queue-district">Implementing <code class="highlighter-rouge">queue district</code></h3>

<p>If there are less than 10 entries in the queue, this command will use the <a href="https://developers.google.com/civic-information/">Google Civic Information API</a> to get Congressional District information for each entry.</p>

<h3 id="implementing-queue-math">Implementing Queue Math</h3>

<p>Assuming I have results currently in the queue, implement queue math like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find state DC
subtract zipcode 20011
</code></pre></div></div>

<p>That would find me all entries for DC that are <em>not</em> in <code class="highlighter-rouge">20011</code>. Similarly:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find state DC
add zipcode 22182
</code></pre></div></div>

<p>Would load the queue with all entries from DC or the <code class="highlighter-rouge">22182</code> zipcode.</p>

<h3 id="nightmare-mode-find">Nightmare-Mode <code class="highlighter-rouge">find</code></h3>

<p>Modify your <code class="highlighter-rouge">find</code> method to allow multiple attribute values in parentheses like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find zipcode (20011, 22182) and last_name (Johnson, Patrick, Smith)
</code></pre></div></div>

<p>Support an <code class="highlighter-rouge">or</code> operation:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find zipcode (20011, 22182) or last_name (Johnson, Patrick, Smith)
</code></pre></div></div>

<p>And support <code class="highlighter-rouge">find</code> only within the queue:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find zipcode (20011, 22182)
queue find last_name Johnson
</code></pre></div></div>

<p>Which would find only the Johnsons in 20011 or 22182.</p>

<h3 id="test-cases-for-extensions">Test Cases for Extensions</h3>

<p>For the extensions to pass the evaluation, it must handle the following scenarios correctly.</p>

<h4 id="a-improved-queue-print">A. Improved <code class="highlighter-rouge">queue print</code></h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find first_name sarah</code></li>
  <li><code class="highlighter-rouge">queue print</code></li>
</ol>

<p>Observe the first two screens of output similar to this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LAST NAME       FIRST NAME  EMAIL                                  ZIPCODE     CITY                    STATE  ADDRESS                              PHONE
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hankins         SArah       pinalevitsky@jumpstartlab.com          20009       Washington              DC     2022 15th Street NW                  4145205000
Xx              Sarah       lqrm4462@jumpstartlab.com              33703       Saint Petersburg        FL     4175 3rd Street North                9419792000
Cordova         Sarah       tmai.202@jumpstartlab.com              21044       Columbia                MD     5430 Hesperus Drive                  4109639000
Irvine          Sarah       wwoodruf@jumpstartlab.com              30127       Powder Springs          GA     6184 Windflower Drive                7704249000
Hough           Sarah       gi@jumpstartlab.com                    06614       stratford               CT     42c powder mill drive                2036506000
Geretz          Sarah       ovdawaaa@jumpstartlab.com              01002       Amherst                 MA     72 Triangle St. appt. 2              8572311000
Sample          Sarah       nqiza@jumpstartlab.com                 94619       Oakland                 CA     270 Rishell Drive                    5107086000
Gerow           Sarah       xnb77@jumpstartlab.com                 33559       Lutz                    FL     2501 Black Horse Loop Apt 301C       8137359000
Eden            Sarah       cetephenson@jumpstartlab.com           33559       Lutz                    FL     2501 Black Horse Loop Apt 301C       8136798000
Riordan         Sarah       ctuhspugha@jumpstartlab.com            80212       Denver                  CO     2814 Tennyson St.                    7202058000
Displaying records 0 - 10 of 78
press space bar or the enter key to show the next set of records

Gordon          Sarah       cxcahdprice@jumpstartlab.com           43554       Pioneer                 OH     18476 County Road 15                 4197373000
Johnston        Sarah       gylaki@jumpstartlab.com                94104       San Francisco           CA     221 Pine St                          4157863000
Oddie           Sarah       blhhhhhhhh@jumpstartlab.com            94101       san francisco           CA     221 pine st                          4157863000
Catlin          Sarah       tlacyjamesrossi3@jumpstartlab.com      40206       Louisville              KY     114 N Galt Ave                       5029386000
Clatterbuck     Sarah       dhchleith@jumpstartlab.com             05401       Burlington              VT     37 D Conger Ave                      8025401000
Dernoga         Sarah       gkpaldin@jumpstartlab.com              49461       Whitehall               MI     7473 Easy Street                     2316707000
Ojeh            Sarah       bfkelly@jumpstartlab.com               20742       College Park            MD     8000 Boteler Lane Appt 248A          4104743000
Sparrow         Sarah       jw9@jumpstartlab.com                   13346       Hamilton                NY                                          9084187000
Deutschmann     Sarah       pooneil@jumpstartlab.com               03435       Keene, NH               NH     229 Main St.                         6032752000
Alilionis       Sarah       jhagamininj4@jumpstartlab.com          03431       Keene                   NH     21 Coolidge Street                   2032783000
Displaying records 10 - 20 of 78
press space bar or the enter key to show the next set of records
</code></pre></div></div>

<p>Noting that it has‚Ä¶</p>

<ol>
  <li>Aligned columns</li>
  <li>10 entries per screen</li>
  <li>A status bar displaying total records</li>
</ol>

<p><em>But</em>, the exact number of records may differ if the program does not implement the ‚Äúimproved find‚Äù with case-insensitive search.</p>

<h4 id="b-improved-find">B. Improved <code class="highlighter-rouge">find</code></h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find first_name sarah and state CA</code></li>
  <li>Observe that there should only be four records in the queue</li>
</ol>

<h4 id="c-improved-queue-save-to">C. Improved <code class="highlighter-rouge">queue save to</code></h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find first_name Sarah</code></li>
  <li><code class="highlighter-rouge">queue save to sarah.xml</code></li>
  <li><code class="highlighter-rouge">queue save to sarah.json</code></li>
  <li><code class="highlighter-rouge">queue save to sarah.txt</code></li>
  <li><code class="highlighter-rouge">queue save to sarah.yml</code></li>
  <li>Inspect the four output files for completeness and structure.</li>
</ol>

<h4 id="d-queue-district">D. <code class="highlighter-rouge">queue district</code></h4>

<p><code class="highlighter-rouge">queue print</code> for queues less than 10 should now print a data table with a header row following this format:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  LAST NAME  FIRST NAME  EMAIL  ZIPCODE  CITY  STATE  ADDRESS  PHONE  DISTRICT
</code></pre></div></div>

<h4 id="e-queue-math">E. Queue Math</h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find zipcode 20011</code></li>
  <li><code class="highlighter-rouge">subtract first_name william</code></li>
  <li><code class="highlighter-rouge">add zipcode 20010</code></li>
  <li>Observe that there are 8 records in the queue.</li>
</ol>

<h4 id="f-nightmare-mode-find">F. Nightmare-Mode Find</h4>

<ol>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find state (DC, VA, MD) and last_name johnson</code></li>
  <li>Observe that there are three records in the queue.</li>
  <li><code class="highlighter-rouge">load</code></li>
  <li><code class="highlighter-rouge">find state dc or last_name smith</code></li>
  <li>Observe that there are 270 records in the queue</li>
  <li><code class="highlighter-rouge">queue find first_name alicia</code></li>
  <li>Observe that only 3 records remain in the queue</li>
</ol>

<h2 id="evaluation-rubric">Evaluation Rubric</h2>

<p>The project will be assessed with the following guidelines:</p>

<ul>
  <li>4: Above expectations</li>
  <li>3: Meets expectations</li>
  <li>2: Below expectations</li>
  <li>1: Well-below expectations</li>
</ul>

<h3 id="1-ruby-syntax--style">1. Ruby Syntax &amp; Style</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Applies appropriate attribute encapsulation</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer creates instance and local variables appropriately</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Naming follows convention (is idiomatic)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Ruby methods used are logical and readable</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements best-choice enumerable methods</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is indented properly</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code does not exceed 80 characters per line</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A directory/file structure provides basic organization via lib/ and/or /test</li>
</ul>

<h3 id="2-breaking-logic-into-components">2. Breaking Logic into Components</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Code is effectively broken into methods &amp; classes</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer writes methods less than 7 lines</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />No more than 3 methods break the principle of SRP</li>
</ul>

<h3 id="3-test-driven-development">3. Test-Driven Development</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Each method is tested</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Functionality is accurately covered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Tests implement Ruby syntax &amp; style</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Balances unit and integration tests</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Evidence of edge cases testing</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Test Coverage metrics are present (SimpleCov)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A test RakeTask is implemented</li>
</ul>

<h3 id="4-functionality">4. Functionality</h3>

<p>Expectations:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Application meets all requirements (extension not req‚Äôd)</li>
</ul>

<h3 id="5-version-control">5. Version Control</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer commits at a pace of at least 1 commit per hour</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Developer implements branching and PRs</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />The final submitted version is merged into master</li>
</ul>

:ET