I"ŸY<h2 id="javascript-does-its-thing">Javascript Does It‚Äôs Thing</h2>

<p>Traditionally JavaScript is executed client-side, or in the browser on the consumers own computer. This is made possible by a browsers JavaScript Engine. Firefox‚Äôs engine is called SpiderMonkey, and Chrome‚Äôs is called V8.</p>

<h3 id="today-well-look-into-nodejs-what-is-it">Today, We‚Äôll look into node.js. What is it?</h3>

<p>According to <a href="nodejs.org">nodejs.org</a> node, in it‚Äôs most basic form, ‚Äúis a JavaScript runtime built on Chrome‚Äôs V8 JavaScript engine.‚Äù</p>

<h4 id="aside-npm">aside: NPM</h4>

<p>NPM (Node Package Manger) allows for organization of outside packages much like Ruby Gems. We‚Äôll cover it in more depth later on.</p>

<h3 id="installing-node">Installing Node:</h3>

<ul>
  <li>Jump over to <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> and download node.</li>
  <li>Done</li>
</ul>

<p>When you download node - you also get npm</p>

<h3 id="what-can-we-do-with-node">What Can We Do With Node?</h3>

<p>With node.js, we can execute basic JavaScript code in the terminal. Think back to Module 1 when we did this with ruby. We can also spin up a server to listen to a specific port, but today we‚Äôre just focusing on executing JavaScript outside of the browser.</p>

<p>Basic Examples:</p>

<p>The first example we‚Äôre going to look at is our basic HelloWorld.</p>

<ul>
  <li>Navigate to a location that you want to put these examples.</li>
</ul>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mkdir node-sandbox
touch node-sandbox/hello-world.js
cd node-sandbox
</span></code></pre></div></div>

<p>next open the <code class="highlighter-rouge">hello-world.js</code> file in your text editor. Inside that file we will add the following code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">I'm being executed in the terminal!!!</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">helloWorld</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World!!</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloWorld</span><span class="p">)</span>
</code></pre></div></div>

<p>Run your file:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>node hello-world.js
</code></pre></div></div>

<p>Your output should look a little like this:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>node hello_world.js
<span class="go">I'm being executed in the terminal!!!
Hello World!!
</span></code></pre></div></div>

<p>Pretty simple, right? Remember V8? V8 is leveraged by node and is what allows us to execute JavaScript outside of the browser and in the terminal.</p>

<p>I think you get the point already, but lets look at one more basic example.</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">touch add.js
</span></code></pre></div></div>

<p>Open <code class="highlighter-rouge">add.js</code> in your editor and add this code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
</code></pre></div></div>

<p>Now, execute the code:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>node add.js
</code></pre></div></div>

<p>Your output should look a little like this:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>node add.js
<span class="go">4
</span></code></pre></div></div>

<h2 id="test-that-node">Test that Node!</h2>

<h2 id="mocha---the-test-runner">Mocha - the test runner</h2>

<p>Mocha has one job, to run your tests. It doesn‚Äôt even do assertions. We‚Äôll get to that in a minute.</p>

<p>To install mocha for use in your terminal, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm <span class="nb">install </span>mocha <span class="nt">-g</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">-g</code> installs a package globally, and for use on the command line. So let‚Äôs write some mocha tests.</p>

<p>Mocha gives you a few functions right off the bat. You might recognize them if you‚Äôre used to using RSpec:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">describe</span><span class="p">()</span>
  <span class="nx">context</span><span class="p">()</span>
  <span class="nx">it</span><span class="p">()</span>
</code></pre></div></div>

<p>They‚Äôre used similarly to RSpec. The biggest different how you pass a block to the function. Since there isn‚Äôt a <code class="highlighter-rouge">do...end</code> in JavaScript, we pass a ‚Äúcallback‚Äù function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Something that I'm describing</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">context</span><span class="p">(</span><span class="dl">"</span><span class="s2">That thing under some context</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">does a thing</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>For future reference: If you‚Äôre familiar with ES6 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow Functions</a>, these will make your callbacks slightly less verbose. I‚Äôm not going to bother with them for this lesson.</p>

<p>Save the above text in a file named <code class="highlighter-rouge">test/test.js</code>. Then run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mocha <span class="nb">test</span>/test.js
</code></pre></div></div>

<p>You should see something like</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Something that I'm describing
  That thing under some context
    ‚úì does a thing


1 passing (8ms)
</code></pre></div></div>

<p>The test passes, because there aren‚Äôt any assertions that fail. Although Mocha doesn‚Äôt handle assertions, it‚Äôs built on Node, which does have some <a href="https://nodejs.org/api/assert.html">built in simple assertions</a>. Here‚Äôs a simple test using built in Node based assertions:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">assert</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert true</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="dl">'</span><span class="s1">TRUE IS FALSE! UP IS DOWN! DAY IS NIGHT!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>A couple things to note about the test above:</p>

<ol>
  <li><code class="highlighter-rouge">describe()</code> and <code class="highlighter-rouge">context()</code> are not necessary. Typically, you‚Äôll want at least a <code class="highlighter-rouge">describe()</code> block to tell us what it is you‚Äôre testing, but can omit context if you don‚Äôt think it‚Äôs necessary.</li>
  <li><code class="highlighter-rouge">assert</code> is a ‚Äúnode module‚Äù. It doesn‚Äôt come pre-loaded, so we have to require it. In node, as opposed to Ruby, you have to capture the return value of a <code class="highlighter-rouge">require</code>.</li>
  <li>Like RSpec, I can have an optional message as part of my assertion which will be displayed if the assertion fails. If <code class="highlighter-rouge">true</code> is somehow false, something has seriously gone wrong.</li>
</ol>

<p>Node‚Äôs built in <code class="highlighter-rouge">assert</code> module isn‚Äôt very fully featured. A popular assertion library for JavaScript is called <a href="http://chaijs.com/">Chai</a>. This is what we‚Äôre going to use. You can install it by typing the following in your terminal.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>chai
</code></pre></div></div>

<p>You can confirm that chai installed properly by looking for it in the <code class="highlighter-rouge">node_modules</code> folder. If npm didn‚Äôt create this folder for you, go ahead and <code class="highlighter-rouge">mkdir node_modules</code> and try the install command again.</p>

<p>Now, modify your <code class="highlighter-rouge">test.js</code> to the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span><span class="p">;</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert true</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="dl">'</span><span class="s1">TRUE IS FALSE! UP IS DOWN! DAY IS NIGHT!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>And <code class="highlighter-rouge">mocha test/test.js</code> should return the same output as when we were using Node‚Äôs assertion library. Let‚Äôs try out a few more of Chai‚Äôs assertions.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span><span class="p">;</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Chai Assertions Sandbox</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert true</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert 1 is 1</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert 2 is not 3</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">notEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can assert that something is a given data type</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">isObject</span><span class="p">({</span><span class="na">answer</span><span class="p">:</span> <span class="mi">42</span><span class="p">});</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">isArray</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]);</span>
    <span class="kd">var</span> <span class="nx">thingIHaventDefined</span><span class="p">;</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">thingIHaventDefined</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="equal-strictequal-and-deepequal"><code class="highlighter-rouge">equal</code>, <code class="highlighter-rouge">strictEqual</code> and <code class="highlighter-rouge">deepEqual</code></h4>

<p>Equality in JavaScript is funky. <code class="highlighter-rouge">1 == true</code> but not <code class="highlighter-rouge">1 === true</code>. <code class="highlighter-rouge">'3' == 3</code> but not <code class="highlighter-rouge">'3' === 3</code>. <code class="highlighter-rouge">assert.equal</code> will compare using double equals (<code class="highlighter-rouge">==</code>), and <code class="highlighter-rouge">assert.strictEqual</code> will compare using triple equals(<code class="highlighter-rouge">===</code>).</p>

<p><code class="highlighter-rouge">deepEqual</code> is used for arrays and objects. In the deep underpinnings of JavaScript, each time you define an array, it‚Äôs a different array. So <code class="highlighter-rouge">[1,2,3,4] == [1,2,3,4]</code> will always return false. <code class="highlighter-rouge">deepEqual</code> will compare each value in an array, or each key/value pair in an object. Let‚Äôs add the following to our sandbox:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can compare two arrays that contain the same values</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">actualArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">actualArray</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]);</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">can compare two objects that contain the same key/value pairs</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">actualObject</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nate</span><span class="dl">"</span><span class="p">,</span> <span class="na">module</span><span class="p">:</span> <span class="mi">4</span><span class="p">};</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">actualObject</span><span class="p">,</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nate</span><span class="dl">"</span><span class="p">,</span> <span class="na">module</span><span class="p">:</span> <span class="mi">4</span><span class="p">});</span>
    <span class="p">})</span>
</code></pre></div></div>

<h3 id="testing-our-code">Testing our Code</h3>

<p>Let‚Äôs test our JavaScript file!</p>

<p>Export the function from the <code class="highlighter-rouge">add.js</code> file.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">add</span>
</code></pre></div></div>

<p>Let‚Äôs create a test file just for this module.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch test/add-test.js
</code></pre></div></div>

<p>Let‚Äôs setup our <code class="highlighter-rouge">add-test.js</code> file. We‚Äôll add <code class="highlighter-rouge">chai</code> as well as the module that we exported from <code class="highlighter-rouge">add.js</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span>
<span class="kd">const</span> <span class="nx">addNumbers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../add</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>In the above snippet, we are using the constant that has the same name as our exported function and finding the file via its file path.</p>

<p>Now we are ready to write a test!</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span>
<span class="kd">const</span> <span class="nx">addNumbers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../add</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">add functionality</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">context</span><span class="p">(</span><span class="dl">'</span><span class="s1">add function</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">it can add two numbers</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">addNumbers</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="mi">15</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>To run the tests, type <code class="highlighter-rouge">mocha test/add-test.js</code>. If all is set up correctly, we should have a passing test!</p>

<h3 id="lets-work-on-a-few-challenges">Let‚Äôs work on a few challenges:</h3>

<p>Do the following challenges in the same <code class="highlighter-rouge">node-sandbox</code> folder. Try to write tests for each challenge.</p>

<ul>
  <li><a href="https://github.com/turingschool/challenges/blob/master/character_count.markdown">Character Count</a></li>
  <li><a href="https://github.com/turingschool/challenges/blob/master/fibber.markdown">fibonacci</a></li>
</ul>
:ET