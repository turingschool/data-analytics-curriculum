I"Ù><h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand how to read a stack trace</li>
  <li>Understand common error messages</li>
  <li>Understand how to use pry to create breakpoints in code to help verify assumptions</li>
  <li>Develop a debugging process</li>
</ul>

<h2 id="tools--repositories">Tools &amp; Repositories</h2>

<p>To start, we need to make sure we have the appropriate tooling installed.</p>

<ul>
  <li><a href="https://github.com/pry/pry">pry</a> - <code class="highlighter-rouge">gem install pry</code></li>
</ul>

<p>We‚Äôll also be using the <a href="https://github.com/turingschool-examples/erroneous_creatures">Erroneous Creatures</a> respository. Clone that repository so that you have a version that you can work on locally.</p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What do you do when you don‚Äôt know what‚Äôs going wrong with your application?</li>
  <li>What do you know about <code class="highlighter-rouge">pry</code>?</li>
  <li>What questions do you still have about <code class="highlighter-rouge">pry</code>?</li>
</ul>

<h2 id="debugging-process">Debugging Process</h2>

<p>There are two ways that programming can go wrong:</p>

<ol>
  <li>Your program doesn‚Äôt run. You get an <strong>Error</strong>.</li>
  <li>Your program runs, but it doesn‚Äôt work the way you expect. You get a <strong>Failure</strong>.</li>
</ol>

<p>Having a debugging process when things go wrong is crucial to being an effective developer. No matter how skilled you are at coding, you will always write bugs, so it is very important to know how to hunt them down and fix them.</p>

<p>The recommended series of steps you should take to Debug your program are:</p>

<ul>
  <li>Read your error (the WHOLE error)</li>
  <li>Read your stack trace (find the error).</li>
  <li>Verify your assumptions.</li>
  <li>Try things.</li>
</ul>

<p>You might add <code class="highlighter-rouge">research</code> to that list, but generally research is something that you do so that you can try things.</p>

<h2 id="stack-trace">Stack Trace</h2>

<p>A Stack Trace shows what line of code an error occurred on, and all the method calls that led to that error. It is like a treasure map of exactly where to find the cause of the error.</p>

<h3 id="reading-a-stack-trace">Reading a Stack Trace</h3>

<p>Let‚Äôs look at an example. If we run the <code class="highlighter-rouge">hobbit_test.rb</code> test in our erroneous_creatures directory with <code class="highlighter-rouge">ruby test/hobbit_test.rb</code>, we will see this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) Error:
HobbitTest#test_can_get_tired_if_play_3times:
NoMethodError: undefined method `&gt;=' for nil:NilClass
    /Users/timo/staff_turing/lessons/debugging_techniques/erroneous_creatures/lib/hobbit.rb:18:in `adult?'
    /Users/timo/staff_turing/lessons/debugging_techniques/erroneous_creatures/lib/hobbit.rb:22:in `play'
    test/hobbit_test.rb:75:in `block in test_can_get_tired_if_play_3times'
    test/hobbit_test.rb:74:in `times'
    test/hobbit_test.rb:74:in `test_can_get_tired_if_play_3times'
</code></pre></div></div>

<p>Let‚Äôs break this down line by line:</p>

<ul>
  <li><code class="highlighter-rouge">HobbitTest#test_can_get_tired_if_play_3times</code>: This is Minitest telling us what test was running when this error occurred.</li>
  <li><code class="highlighter-rouge">NoMethodError: undefined method '&gt;=' for nil:NilClass</code>: This is the actual error that occurred</li>
  <li>All of the following lines are part of the <strong>Stack Trace</strong>:
    <ul>
      <li><code class="highlighter-rouge">/Users/timo/staff_turing/lessons/debugging_techniques/erroneous_creatures/lib/hobbit.rb:18:in 'adult?'</code>: This is the first line of the stack trace, and is the line where the error actually happened. The first part is a big long file path to the file. Generally, we only care about the last part, the file name. In this case, it is <code class="highlighter-rouge">hobbit.rb:18</code>. This is telling us that the error occurred in the <code class="highlighter-rouge">hobbit.rb</code> file on line 18. The next part, <code class="highlighter-rouge">in 'adult?'</code> tells us that this error happened in the <code class="highlighter-rouge">adult?</code> method. <code class="highlighter-rouge">hobbit.rb:18</code> is the most important part of the whole stack trace. It tells us the exact location of the error.</li>
      <li><code class="highlighter-rouge">/Users/timo/staff_turing/lessons/debugging_techniques/erroneous_creatures/lib/hobbit.rb:22:in 'play'</code>: The next line in the stack trace tells us where the <code class="highlighter-rouge">adult?</code> method was called from. Again, the most important part is the file and line number, <code class="highlighter-rouge">hobbit.rb</code> line 22. The last part, <code class="highlighter-rouge">in 'play'</code> is telling us that the <code class="highlighter-rouge">play</code> method was running when the <code class="highlighter-rouge">adult?</code> method was called.</li>
      <li><code class="highlighter-rouge">test/hobbit_test.rb:75:in block in test_can_get_tired_if_play_3times</code>: The next line in the stack trace tells us where the <code class="highlighter-rouge">play</code> method was called from. It was called from the <code class="highlighter-rouge">hobbit_test.rb</code> file on line 75 in a block.</li>
      <li><code class="highlighter-rouge">test/hobbit_test.rb:74:in times</code> is telling us that that block was part of a <code class="highlighter-rouge">times</code> loop that started on line <code class="highlighter-rouge">74</code></li>
      <li><code class="highlighter-rouge">test/hobbit_test.rb:74:in 'test_can_get_tired_if_play_3times'</code> is telling us that the <code class="highlighter-rouge">times</code> loop was called from <code class="highlighter-rouge">test_can_get_tired_if_play_3times</code>.</li>
    </ul>
  </li>
</ul>

<p>If we chart this out as a series of method calls, it looks something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_can_get_tired_if_play_3times -&gt; times -&gt; play -&gt; adult?
</code></pre></div></div>

<h3 id="tracing-back-through-our-program">Tracing back through our Program</h3>

<p>When we use the stack trace, we start at the top and work our way down. In this case, we start at <code class="highlighter-rouge">hobbit.rb:18</code> to see the line where the error occurred. The error was <code class="highlighter-rouge">undefined method '&gt;=' for nil:NilClass</code>. Looking at that line of code, we can see that the variable <code class="highlighter-rouge">@age</code> was misspelled, causing it to be <code class="highlighter-rouge">nil</code>. Fixing the spelling resolves the error.</p>

<p>If we didn‚Äôt find an error in the <code class="highlighter-rouge">play</code> method, we could take another step back into the <code class="highlighter-rouge">adult?</code> method to see if we can find an error there.</p>

<p>When reading a stack trace, you should ignore references to code that you didn‚Äôt write. For instance, run the <code class="highlighter-rouge">unicorn_test.rb</code> file and you will see this output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/timo/.rvm/rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0/rubygems/core_ext/kernel_require.rb:120:in `require': cannot load such file -- .lib/unicorn (LoadError)
	from /Users/timo/.rvm/rubies/ruby-2.4.1/lib/ruby/site_ruby/2.4.0/rubygems/core_ext/kernel_require.rb:120:in `require'
	from test/unicorn_test.rb:4:in `&lt;main&gt;'
</code></pre></div></div>

<p>Let‚Äôs follow our same process for reading the Stack Trace (note that unlike before, Minitest doesn‚Äôt tell us what test was running). The first line tells us the error is <code class="highlighter-rouge">cannot load such file -- .lib/unicorn (LoadError)</code>. The next line tells it happened on line 20 of <code class="highlighter-rouge">kernel_require</code>. Because we didn‚Äôt write <code class="highlighter-rouge">kernel_require</code> we can ignore that. The next line tells us that <code class="highlighter-rouge">kernel_require</code> code was called from <code class="highlighter-rouge">unicorn_test.rb</code> line 4. Examining this line, we can see a mispelling in our require statement.</p>

<h2 id="errors">Errors</h2>

<p>When you see an error in your terminal, it can be tempting to read it as ‚Äúblah blah blah something isn‚Äôt working, let me open up my code and fix it‚Äù. Instead, you should read the error, the <strong>ENTIRE</strong> error, maybe even read it twice, and really try to understand your problem before you try to fix it. Here are some common errors and how we can interpret them:</p>

<p><code class="highlighter-rouge">NameError: uninitialized constant SomeClass::SomeConstant</code> - Ruby doesn‚Äôt know what <code class="highlighter-rouge">SomeConstant</code> is.</p>

<p><code class="highlighter-rouge">undefined local variable or method 'x' for SomeObject (NameError)</code> - Ruby doesn‚Äôt know what <code class="highlighter-rouge">x</code> is. It looked for a local variable <code class="highlighter-rouge">x</code> but couldn‚Äôt find one. It then looked for a method <code class="highlighter-rouge">x</code> and couldn‚Äôt find one for <code class="highlighter-rouge">SomeObject</code></p>

<p><code class="highlighter-rouge">wrong number of arguments (given x, expected y) (ArgumentError)</code> - You called a method with <code class="highlighter-rouge">x</code> number of arguments, but the method definition specifies it needs <code class="highlighter-rouge">y</code> number of arguments. This often happens when we call <code class="highlighter-rouge">.new</code> on something. Remember, when you call <code class="highlighter-rouge">.new</code> it also calls <code class="highlighter-rouge">.initialize</code> so you need to make sure the number of arguments you pass to <code class="highlighter-rouge">.new</code> match the number of arguments defined in <code class="highlighter-rouge">.initialize</code></p>

<p><code class="highlighter-rouge">undefined method 'some_method' for SomeObject:SomeClass (NoMethodError)</code> - you tried to call <code class="highlighter-rouge">some_method</code> on <code class="highlighter-rouge">SomeObject</code>, but <code class="highlighter-rouge">SomeObject</code> doesn‚Äôt respond to that method. This means that <code class="highlighter-rouge">some_method</code> is not defined in <code class="highlighter-rouge">SomeClass</code>. This error can take several forms:</p>

<ol>
  <li>If you didn‚Äôt write <code class="highlighter-rouge">SomeClass</code>, you called a method that doesn‚Äôt exist i.e. <code class="highlighter-rouge">"hello world".first</code>.</li>
  <li>If you did write <code class="highlighter-rouge">SomeClass</code>, you misspelled the name of the method or you didn‚Äôt define <code class="highlighter-rouge">some_method</code> for <code class="highlighter-rouge">SomeClass</code></li>
  <li>If <code class="highlighter-rouge">SomeObject:SomeClass</code> shows up as <code class="highlighter-rouge">nil:NilClass</code>, this means that something is nil that shouldn‚Äôt be.</li>
  <li>Sometimes <code class="highlighter-rouge">SomeObject:SomeClass</code> looks like <code class="highlighter-rouge">#&lt;SomeClass:0x00007f7fa21d5410&gt;</code>. You can read this as ‚Äúyou tried to call <code class="highlighter-rouge">some_method</code> on a <code class="highlighter-rouge">SomeClass</code> object‚Äù.</li>
</ol>

<p><code class="highlighter-rouge">syntax error, unexpected end-of-input, expecting keyword_end</code> - You are missing an <code class="highlighter-rouge">end</code>. Indenting your code properly will make it MUCH easier to hunt down the missing end.</p>

<p><code class="highlighter-rouge">syntax error, unexpected end-of-input, expecting keyword_end</code> - You have an extra <code class="highlighter-rouge">end</code> or an <code class="highlighter-rouge">end</code> in the wrong place. Indenting your code properly will make it MUCH easier to hunt down the offensive end.</p>

<p><code class="highlighter-rouge">require': cannot load such file -- file_name (LoadError)</code> - Ruby cannot load the file <code class="highlighter-rouge">file_name</code>. Make sure <code class="highlighter-rouge">file_name</code> is spelled correctly, the path is written correctly i.e. <code class="highlighter-rouge">./lib/file_name</code>, and that you are running from the root directory of your project.</p>

<h2 id="verifying-your-assumptions">Verifying Your Assumptions</h2>

<p>Not verifying your assumptions can be one of the costliest mistakes you make as a dev. It‚Äôs possible to be <em>absolutely convinced</em> that you know exactly what‚Äôs causing an error, spend hours working to resolve an issue that you‚Äôre sure exists, only to later find that the error occurred long before the piece of code that held your focus so tightly.</p>

<p>While it‚Äôs nice to drop into IRB to see if there are methods that exist in Ruby that I can use to solve my problem, it‚Äôs even better to put a <code class="highlighter-rouge">pry</code> <em>into my code</em> to see exactly what I can do given the other methods and variables I‚Äôve defined.</p>

<p>Let‚Äôs run the Hippogriff test, and review the errors that are generated there:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error:
HippogriffTest#test_when_it_flies_it_collects_a_unique_moonrock:
NoMethodError: undefined method `push' for nil:NilClass
    /Users/timo/staff_turing/lessons/debugging_techniques/erroneous_creatures/lib/hippogriff.rb:14:in `fly'
    test/hippogriff_test.rb:37:in `test_when_it_flies_it_collects_a_unique_moonrock'
</code></pre></div></div>

<p>Let‚Äôs start by reading that stack trace, and then answer the following questions with a partner:</p>

<ul>
  <li>What test is generating this error?</li>
  <li>What line in that test is generating the error?</li>
  <li>Is there any setup involved before we hit that line?</li>
  <li>If so, can we use pry to confirm that the setup has been completed successfully? Do we have access to the variables that we think we do? Are they holding the objects we expect them to?</li>
  <li>What about in the Hippogriff class itself? What line is generating an error?</li>
  <li>Use pry to verify that the variables we are using in that method are holding the objects we expect them to.</li>
  <li>Can you identify the error?</li>
  <li>Can you make the test pass?</li>
</ul>

<h3 id="trying-things">Trying Things</h3>

<p>One other thing we can do when we are trying to debug is to use <code class="highlighter-rouge">pry</code> to try something in our code before we actually commit to adding it to our class.</p>

<p>Let‚Äôs look at an error from our Wizard test suite:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure:
WizardTest#test_is_not_always_bearded [test/wizard_test.rb:25]:
Expected {:bearded=&gt;false} to not be truthy.
</code></pre></div></div>

<p>With a partner:</p>

<ul>
  <li>Read the stack trace to determine where the error is occurring.</li>
  <li>Use pry in the test file to verify any assumptions you may have about what‚Äôs happening.</li>
  <li>Use pry in the Wizard class to see if you can determine how to implement this method before you enter any code into the Wizard class. Ask yourself: how can I get the return value that I want?</li>
</ul>

<h2 id="exercise---erroneous-creatures">Exercise - Erroneous Creatures</h2>

<p>See if you can finish updating the Erroneous Creatures to make the rest of the test suite pass.</p>

<p>Use the debugging techniques discussed above to diagnose and fix the bugs, and get your creatures back to passing.</p>

<h3 id="addenda--more-material">Addenda / More Material</h3>

<ul>
  <li>http://tutorials.jumpstartlab.com/topics/debugging/debugging.html</li>
</ul>
:ET