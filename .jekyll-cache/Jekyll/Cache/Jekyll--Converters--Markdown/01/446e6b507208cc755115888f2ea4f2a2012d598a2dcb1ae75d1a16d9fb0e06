I"Xã<h2 id="goals">Goals</h2>
<ul>
  <li>Understand how to use <code class="highlighter-rouge">max</code>, <code class="highlighter-rouge">max_by,</code> their opposites, and <code class="highlighter-rouge">sort_by</code>
appropriately.</li>
</ul>

<h3 id="hook">Hook</h3>

<p>We‚Äôve got a handle on the beginner enumerables, and you‚Äôve probably figued out
how to use another few to sort our information. So far, we‚Äôve learned how to
create a new collection, and how to search in the selection returning us either
a single item or multiple items.</p>

<h3 id="min--max">min / max</h3>

<p>What would we do if we wanted to take the smallest thing out of an array?</p>

<p>Let‚Äôs think about how we would do that with .each.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">max</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">first</span>

    <span class="n">array</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">num</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="n">result</span>
    <span class="k">end</span>

    <span class="n">result</span>
  <span class="k">end</span>

  <span class="n">result</span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
</code></pre></div></div>

<p>That‚Äôs cool. But there‚Äôs easier.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">].</span><span class="nf">max</span>
</code></pre></div></div>

<p>And what if we wanted to take the smallest? You‚Äôd just use .min instead.</p>

<p>Note, that you can use these methods for strings as well as numbers.
Letters have a sort of intrinsic values on their own.</p>

<p>What do I mean? open up a pry session in your terminal and type in,
<code class="highlighter-rouge">"a" &gt; "b"</code></p>

<p>We can see that the string, <code class="highlighter-rouge">"a"</code> is in fact, less than the string <code class="highlighter-rouge">"b"</code>.</p>

<p>Knowing this we can do some cool things like grabbing the ‚Äúlowest‚Äù
alphabetical string within an array.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">[</span><span class="s2">"selena"</span><span class="p">,</span> <span class="s2">"carly"</span><span class="p">,</span> <span class="s2">"justin"</span><span class="p">].</span><span class="nf">min</span>
</code></pre></div></div>

<p>This code, here, it‚Äôll return us <code class="highlighter-rouge">"carly"</code></p>

<p>If we swap out the min for a max, what will we get?</p>

<p>This is normally where we would have you try this on your own, but
I‚Äôm not going to insult your intelligence.</p>

<h3 id="min_by--max_by">min_by / max_by</h3>

<p>Getting the largest value out of an array is all well and good, but life
isn‚Äôt always that simple. We often deal with complex sets of data.</p>

<p>Imagine we have a class <code class="highlighter-rouge">Person</code> that has some data stored in instance
variables. Let‚Äôs just arbitrarily say that it is storing the person‚Äôs name
and their age.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Person</span>
    <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
                <span class="ss">:age</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
      <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>So far, we haven‚Äôt done anything even remotely exotic. But let‚Äôs store
 a number of these persons into an array.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">people</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Alice"</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Dave"</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Zayn"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>

</code></pre></div></div>

<p>We‚Äôve now got an array of three <code class="highlighter-rouge">Person</code> objects.</p>

<p>The challenge here is how we can grab the largest or smallest items by
a particular attribute.</p>

<p>So let‚Äôs walk this process out and look at how we would do this with .each.
It‚Äôs a lot like how we would implement .max or .min.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">max_by</span><span class="p">(</span><span class="n">people</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="nf">first</span>
    <span class="n">people</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">person</span> <span class="k">if</span> <span class="n">person</span><span class="p">.</span><span class="nf">age</span> <span class="o">&gt;</span> <span class="n">result</span><span class="p">.</span><span class="nf">age</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This is very similar to our original implementation. The main difference
is that instead of comparing the objects and determing which is ‚Äúgreater
or lesser‚Äù, we are comparing their attributes to each other.</p>

<p>And so, the max_by enumerable works similarly.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">people</span><span class="p">.</span><span class="nf">max_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">age</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>We are iterating over the array, looking at each item in the array, looking
at the attribute and then returning the entire object that has the largest
value that we want.</p>

<p>Simply put, to use this enumerable, we just list our criteria for searching
in the block, and the numerable will simply give us the matching object.</p>

<p>We can also grab the first alphabetically here.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">people</span><span class="p">.</span><span class="nf">min_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">name</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>But we may be overcomplicating things. It doesnt have to be an array of
objects, it can be an array of arrays. We‚Äôre talking about a collection
of things that might hold more than one piece of data.</p>

<p>So let‚Äôs simplify the problem.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">people</span> <span class="o">=</span> <span class="p">[[</span><span class="s2">"Bob"</span><span class="p">,</span> <span class="mi">24</span><span class="p">],[</span><span class="s2">"Dave"</span><span class="p">,</span> <span class="mi">26</span><span class="p">],[</span><span class="s2">"Zayn"</span><span class="p">,</span> <span class="mi">30</span><span class="p">]]</span>

  <span class="n">people</span><span class="p">.</span><span class="nf">max_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
    <span class="n">person</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Now you try.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">one_direction</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Niall"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Liam"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Harry"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Louis"</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Zayn"</span><span class="p">,</span> <span class="mi">23</span><span class="p">)</span>

</code></pre></div></div>

<p>On paper, Grab me the oldest member of One Direction, and then grab me the first
alphabetically.</p>

<p>Now check with your work with your neighbor.</p>

<h3 id="sort_by">sort_by</h3>

<p>There‚Äôs a theme today, and that‚Äôs dealing with place.</p>

<p>We‚Äôve worked on grabbing the largest thing or smallest thing out of a
collection, and that‚Äôs great. But the next logical step is to sort them.</p>

<p>Essentially, it works very similarly to the enumerable methods that we‚Äôve
been talking about so far. The main difference is that instead of
returning a single object, it returns an array of sorted objects, sorted
by the criteria that you select IN ASCENDING ORDER.</p>

<p>So let‚Äôs look at some code.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">sort_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
    <span class="n">num</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This bit of code will return <code class="highlighter-rouge">[1,2,3,4]</code>, because it sorts items in
ascending order.</p>

<p>That‚Äôs a simple array, we can take it to the next level by using
our previous example.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">one_direction</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Niall"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Liam"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Harry"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Louis"</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
<span class="n">one_direction</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Zayn"</span><span class="p">,</span> <span class="mi">23</span><span class="p">)</span>

</code></pre></div></div>

<p>Using this, how do you think we can sort by their name alphabetically?</p>

<p>Do this on paper. Check your work with a nearby friend.</p>

<h3 id="all">all?</h3>

<p>Finally, we are going to take a different tack here.</p>

<p>We‚Äôre going to look at one of the enumerables that returns a simple true
or false.</p>

<p>Let‚Äôs look at the name of this enumerable, <code class="highlighter-rouge">all?</code>. Simply, it‚Äôs an
enumerable with a conditional in the block. If every item in a collection
returns true when going through the block, it returns <code class="highlighter-rouge">true</code>. Otherwise,
it will return <code class="highlighter-rouge">false</code>.</p>

<p>Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">all?</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
  <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This returns <code class="highlighter-rouge">true</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="s2">"dog"</span><span class="p">,</span><span class="s2">"cat"</span><span class="p">,</span><span class="s2">"pig"</span><span class="p">,</span><span class="s2">"hippopotamus"</span><span class="p">].</span><span class="nf">all?</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
  <span class="n">word</span><span class="p">.</span><span class="nf">length</span> <span class="o">==</span> <span class="mi">3</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This would return false.</p>

<p>Ruby collections (Array, Hash, Range) have access to the <a href="http://ruby-doc.org/core-2.3.1/Enumerable.html">Enumerable</a> module.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="p">.</span><span class="nf">included_modules</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="no">Enumerable</span><span class="p">,</span> <span class="no">PP</span><span class="o">::</span><span class="no">ObjectMixin</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">]</span>
</code></pre></div></div>

<p>The Enumerable module gives Array access to many enumerable methods.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Enumerable</span><span class="p">.</span><span class="nf">instance_methods</span> <span class="c1"># 54 total</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:to_a</span><span class="p">,</span> <span class="ss">:to_h</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:find</span><span class="p">,</span> <span class="ss">:entries</span><span class="p">,</span> <span class="ss">:sort</span><span class="p">,</span> <span class="ss">:sort_by</span><span class="p">,</span> <span class="ss">:grep</span><span class="p">,</span> <span class="ss">:grep_v</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:detect</span><span class="p">,</span> <span class="ss">:find_index</span><span class="p">,</span> <span class="ss">:find_all</span><span class="p">,</span> <span class="ss">:select</span><span class="p">,</span> <span class="ss">:reject</span><span class="p">,</span> <span class="ss">:collect</span><span class="p">,</span> <span class="ss">:map</span><span class="p">,</span> <span class="ss">:flat_map</span><span class="p">,</span> <span class="ss">:collect_concat</span><span class="p">,</span> <span class="ss">:inject</span><span class="p">,</span> <span class="ss">:reduce</span><span class="p">,</span> <span class="ss">:partition</span><span class="p">,</span> <span class="ss">:group_by</span><span class="p">,</span> <span class="ss">:first</span><span class="p">,</span> <span class="ss">:all?</span><span class="p">,</span> <span class="ss">:any?</span><span class="p">,</span> <span class="ss">:one?</span><span class="p">,</span> <span class="ss">:none?</span><span class="p">,</span> <span class="ss">:min</span><span class="p">,</span> <span class="ss">:max</span><span class="p">,</span> <span class="ss">:minmax</span><span class="p">,</span> <span class="ss">:min_by</span><span class="p">,</span> <span class="ss">:max_by</span><span class="p">,</span> <span class="ss">:minmax_by</span><span class="p">,</span> <span class="ss">:member?</span><span class="p">,</span> <span class="ss">:each_with_index</span><span class="p">,</span> <span class="ss">:reverse_each</span><span class="p">,</span> <span class="ss">:each_entry</span><span class="p">,</span> <span class="ss">:each_slice</span><span class="p">,</span> <span class="ss">:each_cons</span><span class="p">,</span> <span class="ss">:each_with_object</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">,</span> <span class="ss">:take</span><span class="p">,</span> <span class="ss">:take_while</span><span class="p">,</span> <span class="ss">:drop</span><span class="p">,</span> <span class="ss">:drop_while</span><span class="p">,</span> <span class="ss">:cycle</span><span class="p">,</span> <span class="ss">:chunk</span><span class="p">,</span> <span class="ss">:slice_before</span><span class="p">,</span> <span class="ss">:slice_after</span><span class="p">,</span> <span class="ss">:slice_when</span><span class="p">,</span> <span class="ss">:chunk_while</span><span class="p">,</span> <span class="ss">:lazy</span><span class="p">]</span>

<span class="no">Array</span><span class="p">.</span><span class="nf">instance_methods</span> <span class="c1"># 184 total</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:fill</span><span class="p">,</span> <span class="ss">:assoc</span><span class="p">,</span> <span class="ss">:rassoc</span><span class="p">,</span> <span class="ss">:uniq</span><span class="p">,</span> <span class="ss">:uniq!</span><span class="p">,</span> <span class="ss">:compact</span><span class="p">,</span> <span class="ss">:compact!</span><span class="p">,</span> <span class="ss">:flatten</span><span class="p">,</span> <span class="ss">:to_h</span><span class="p">,</span> <span class="ss">:flatten!</span><span class="p">,</span> <span class="ss">:shuffle!</span><span class="p">,</span> <span class="ss">:shuffle</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:combination</span><span class="p">,</span> <span class="ss">:repeated_permutation</span><span class="p">,</span> <span class="ss">:permutation</span><span class="p">,</span> <span class="ss">:product</span><span class="p">,</span> <span class="ss">:sample</span><span class="p">,</span> <span class="ss">:repeated_combination</span><span class="p">,</span> <span class="ss">:bsearch_index</span><span class="p">,</span> <span class="ss">:bsearch</span><span class="p">,</span> <span class="ss">:select!</span><span class="p">,</span> <span class="ss">:&amp;</span><span class="p">,</span> <span class="p">:</span><span class="o">*</span><span class="p">,</span> <span class="p">:</span><span class="o">+</span><span class="p">,</span> <span class="p">:</span><span class="o">-</span><span class="p">,</span> <span class="ss">:sort</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:find_index</span><span class="p">,</span> <span class="ss">:select</span><span class="p">,</span> <span class="ss">:reject</span><span class="p">,</span> <span class="ss">:collect</span><span class="p">,</span> <span class="ss">:map</span><span class="p">,</span> <span class="ss">:pack</span><span class="p">,</span> <span class="ss">:first</span><span class="p">,</span> <span class="ss">:any?</span><span class="p">,</span> <span class="ss">:reverse_each</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">,</span> <span class="ss">:take</span><span class="p">,</span> <span class="ss">:take_while</span><span class="p">,</span> <span class="ss">:drop</span><span class="p">,</span> <span class="ss">:drop_while</span><span class="p">,</span> <span class="ss">:cycle</span><span class="p">,</span> <span class="ss">:insert</span><span class="p">,</span> <span class="ss">:|</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">:rindex</span><span class="p">,</span> <span class="ss">:replace</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">:pretty_print</span><span class="p">,</span> <span class="ss">:&lt;=&gt;</span><span class="p">,</span> <span class="ss">:&lt;&lt;</span><span class="p">,</span> <span class="ss">:==</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:[]=</span><span class="p">,</span> <span class="ss">:reverse</span><span class="p">,</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:eql?</span><span class="p">,</span> <span class="ss">:concat</span><span class="p">,</span> <span class="ss">:reverse!</span><span class="p">,</span> <span class="ss">:shelljoin</span><span class="p">,</span> <span class="ss">:inspect</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">:slice</span><span class="p">,</span> <span class="ss">:slice!</span><span class="p">,</span> <span class="ss">:to_ary</span><span class="p">,</span> <span class="ss">:to_a</span><span class="p">,</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:pretty_print_cycle</span><span class="p">,</span> <span class="ss">:dig</span><span class="p">,</span> <span class="ss">:hash</span><span class="p">,</span> <span class="ss">:at</span><span class="p">,</span> <span class="ss">:fetch</span><span class="p">,</span> <span class="ss">:last</span><span class="p">,</span> <span class="ss">:push</span><span class="p">,</span> <span class="ss">:pop</span><span class="p">,</span> <span class="ss">:shift</span><span class="p">,</span> <span class="ss">:unshift</span><span class="p">,</span> <span class="ss">:frozen?</span><span class="p">,</span> <span class="ss">:each_index</span><span class="p">,</span> <span class="ss">:join</span><span class="p">,</span> <span class="ss">:rotate</span><span class="p">,</span> <span class="ss">:rotate!</span><span class="p">,</span> <span class="ss">:sort!</span><span class="p">,</span> <span class="ss">:collect!</span><span class="p">,</span> <span class="ss">:map!</span><span class="p">,</span> <span class="ss">:sort_by!</span><span class="p">,</span> <span class="ss">:keep_if</span><span class="p">,</span> <span class="ss">:values_at</span><span class="p">,</span> <span class="ss">:delete_at</span><span class="p">,</span> <span class="ss">:delete_if</span><span class="p">,</span> <span class="ss">:reject!</span><span class="p">,</span> <span class="ss">:transpose</span><span class="p">,</span> <span class="ss">:find</span><span class="p">,</span> <span class="ss">:entries</span><span class="p">,</span> <span class="ss">:sort_by</span><span class="p">,</span> <span class="ss">:grep</span><span class="p">,</span> <span class="ss">:grep_v</span><span class="p">,</span> <span class="ss">:detect</span><span class="p">,</span> <span class="ss">:find_all</span><span class="p">,</span> <span class="ss">:flat_map</span><span class="p">,</span> <span class="ss">:collect_concat</span><span class="p">,</span> <span class="ss">:inject</span><span class="p">,</span> <span class="ss">:reduce</span><span class="p">,</span> <span class="ss">:partition</span><span class="p">,</span> <span class="ss">:group_by</span><span class="p">,</span> <span class="ss">:all?</span><span class="p">,</span> <span class="ss">:one?</span><span class="p">,</span> <span class="ss">:none?</span><span class="p">,</span> <span class="ss">:min</span><span class="p">,</span> <span class="ss">:max</span><span class="p">,</span> <span class="ss">:minmax</span><span class="p">,</span> <span class="ss">:min_by</span><span class="p">,</span> <span class="ss">:max_by</span><span class="p">,</span> <span class="ss">:minmax_by</span><span class="p">,</span> <span class="ss">:member?</span><span class="p">,</span> <span class="ss">:each_with_index</span><span class="p">,</span> <span class="ss">:each_entry</span><span class="p">,</span> <span class="ss">:each_slice</span><span class="p">,</span> <span class="ss">:each_cons</span><span class="p">,</span> <span class="ss">:each_with_object</span><span class="p">,</span> <span class="ss">:chunk</span><span class="p">,</span> <span class="ss">:slice_before</span><span class="p">,</span> <span class="ss">:slice_after</span><span class="p">,</span> <span class="ss">:slice_when</span><span class="p">,</span> <span class="ss">:chunk_while</span><span class="p">,</span> <span class="ss">:lazy</span><span class="p">,</span> <span class="ss">:pry</span><span class="p">,</span> <span class="ss">:__binding__</span><span class="p">,</span> <span class="ss">:pretty_print_instance_variables</span><span class="p">,</span> <span class="ss">:pretty_print_inspect</span><span class="p">,</span> <span class="ss">:instance_of?</span><span class="p">,</span> <span class="ss">:public_send</span><span class="p">,</span> <span class="ss">:instance_variable_get</span><span class="p">,</span> <span class="ss">:instance_variable_set</span><span class="p">,</span> <span class="ss">:instance_variable_defined?</span><span class="p">,</span> <span class="ss">:remove_instance_variable</span><span class="p">,</span> <span class="ss">:private_methods</span><span class="p">,</span> <span class="ss">:kind_of?</span><span class="p">,</span> <span class="ss">:instance_variables</span><span class="p">,</span> <span class="ss">:tap</span><span class="p">,</span> <span class="ss">:is_a?</span><span class="p">,</span> <span class="ss">:extend</span><span class="p">,</span> <span class="ss">:define_singleton_method</span><span class="p">,</span> <span class="ss">:to_enum</span><span class="p">,</span> <span class="ss">:enum_for</span><span class="p">,</span> <span class="ss">:===</span><span class="p">,</span> <span class="p">:</span><span class="o">=~</span><span class="p">,</span> <span class="p">:</span><span class="o">!~</span><span class="p">,</span> <span class="ss">:respond_to?</span><span class="p">,</span> <span class="ss">:freeze</span><span class="p">,</span> <span class="ss">:display</span><span class="p">,</span> <span class="ss">:send</span><span class="p">,</span> <span class="ss">:pretty_inspect</span><span class="p">,</span> <span class="ss">:object_id</span><span class="p">,</span> <span class="ss">:method</span><span class="p">,</span> <span class="ss">:public_method</span><span class="p">,</span> <span class="ss">:singleton_method</span><span class="p">,</span> <span class="ss">:nil?</span><span class="p">,</span> <span class="ss">:class</span><span class="p">,</span> <span class="ss">:singleton_class</span><span class="p">,</span> <span class="ss">:clone</span><span class="p">,</span> <span class="ss">:dup</span><span class="p">,</span> <span class="ss">:itself</span><span class="p">,</span> <span class="ss">:taint</span><span class="p">,</span> <span class="ss">:tainted?</span><span class="p">,</span> <span class="ss">:untaint</span><span class="p">,</span> <span class="ss">:untrust</span><span class="p">,</span> <span class="ss">:trust</span><span class="p">,</span> <span class="ss">:untrusted?</span><span class="p">,</span> <span class="ss">:methods</span><span class="p">,</span> <span class="ss">:protected_methods</span><span class="p">,</span> <span class="ss">:public_methods</span><span class="p">,</span> <span class="ss">:singleton_methods</span><span class="p">,</span> <span class="p">:</span><span class="o">!</span><span class="p">,</span> <span class="p">:</span><span class="o">!=</span><span class="p">,</span> <span class="ss">:__send__</span><span class="p">,</span> <span class="ss">:equal?</span><span class="p">,</span> <span class="ss">:instance_eval</span><span class="p">,</span> <span class="ss">:instance_exec</span><span class="p">,</span> <span class="ss">:__id__</span><span class="p">]</span>
</code></pre></div></div>

<p>When an array <em>instance</em> uses an enumerable method, the enumerator creates an instance of  <a href="http://ruby-doc.org/core-2.2.0/Enumerator.html">Enumerator</a> from the array.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mf">2.3</span><span class="p">]</span>

<span class="n">array</span><span class="p">.</span><span class="nf">each</span><span class="p">.</span><span class="nf">inspect</span>
<span class="o">=&gt;</span> <span class="s2">"#&lt;Enumerator: [1,2,3]:each]&gt;

array.select.inspect
=&gt; "</span><span class="c1">#&lt;Enumerator: [1, 2, 3]:select&gt;"</span>
</code></pre></div></div>

<p>Ruby collections (built in or created by you), can include the Enumerable module and make use of Enumerable methods as long as the class has it‚Äôs own #each method that Enumerable can use. Each is built into most Ruby collections (Array, Hash, Range), but can also be written by other</p>

<p>Array can also use the <code class="highlighter-rouge">to_enum</code> method (inherited from the Object class) to transform into a Enumerator.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Array</span><span class="p">.</span><span class="nf">superclass</span>
<span class="o">=&gt;</span> <span class="no">Object</span>
<span class="no">Object</span><span class="p">.</span><span class="nf">instance_methods</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="o">...</span><span class="p">,</span><span class="n">to_enum</span><span class="p">,</span><span class="o">...</span><span class="p">]</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">to_enum</span><span class="p">.</span><span class="nf">inspect</span>
<span class="o">=&gt;</span> <span class="s2">"#&lt;Enumerator: [1, 2, 3]:each&gt;"</span>
</code></pre></div></div>

<p>If you want to know more about why Ruby is so eager to transform collections to Enumerators, read up on Ruby‚Äôs <code class="highlighter-rouge">lazy</code> versus <code class="highlighter-rouge">eager</code> tradeoffs (for example, Pat Shaughnessy‚Äôs, <a href="http://patshaughnessy.net/2013/4/3/ruby-2-0-works-hard-so-you-can-be-lazy">‚ÄúRuby 2.0 Works Hard So You Can Be Lazy‚Äù</a>).</p>
:ET