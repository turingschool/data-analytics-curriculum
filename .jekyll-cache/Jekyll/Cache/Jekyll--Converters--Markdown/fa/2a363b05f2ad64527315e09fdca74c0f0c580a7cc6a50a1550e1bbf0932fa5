I"≈;<h3 id="learning-goals">Learning Goals</h3>
<ul>
  <li>Practice breaking a program into logical components</li>
  <li>Distinguishing between classes and instances of those classes</li>
  <li>Understanding how binary search trees work to store and find data</li>
  <li>Testing components in isolation and in combination</li>
  <li>Use and implement iteration or recursion techniques</li>
  <li>Measure test coverage with <a href="https://github.com/colszowka/simplecov">SimpleCov</a></li>
</ul>

<h2 id="overview">Overview</h2>

<p>You are a junior developer at Netflix. You‚Äôre on a team that is developing a list of movies for Netflix users called ‚ÄúSuggested for You.‚Äù Each time movies are added to Netflix, an algorithm determines a score of how likely a given user is to enjoy that movie.</p>

<ul>
  <li>Scores are integers between 0 and 100</li>
  <li>No two movies will get the same score</li>
</ul>

<p>It is your job to take new movies that have been scored, and store them in a Binary Search Tree.</p>

<h2 id="binary-search-trees">Binary Search Trees</h2>

<p>A binary search tree is a fundamental data structure useful for organizing large sets of data. It‚Äôs ideal whenever you need to retrieve and sort data quickly.</p>

<p>More on Wikipedia: <a href="http://en.wikipedia.org/wiki/Binary_search_tree">http://en.wikipedia.org/wiki/Binary_search_tree</a></p>

<p>A binary tree is built from <em>nodes</em>. Each node has:</p>

<ul>
  <li>A) An element of data</li>
  <li>B) A link to the <em>left</em>. All nodes to the left have elements with a value less or lower than this node‚Äôs data element.</li>
  <li>C) A link to the <em>right</em>. All nodes to the right have elements with a value more or greater than this node‚Äôs data element.</li>
</ul>

<h2 id="base-expectations">Base Expectations</h2>

<p>Build a binary search tree which can fulfill each of the interactions below.</p>

<p>Assume we‚Äôve started with:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span> <span class="o">=</span> <span class="no">BinarySearchTree</span><span class="p">.</span><span class="nf">new</span>
</code></pre></div></div>

<h3 id="insert"><code class="highlighter-rouge">insert</code></h3>

<p>The <code class="highlighter-rouge">insert</code> method adds a new node with the passed-in data. Each node is comprised of a score and a movie title. It returns the depth of the new node in the tree.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span> <span class="s2">"Bill &amp; Ted's Excellent Adventure"</span><span class="p">)</span>
<span class="c1"># =&gt; 0</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="s2">"Johnny English"</span><span class="p">)</span>
<span class="c1"># =&gt; 1</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">92</span><span class="p">,</span> <span class="s2">"Sharknado 3"</span><span class="p">)</span>
<span class="c1"># =&gt; 1</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="s2">"Hannibal Buress: Animal Furnace"</span><span class="p">)</span>
<span class="c1"># =&gt; 2</span>
</code></pre></div></div>

<p>For all the later methods defined here, assume that we‚Äôve run these four inserts.</p>

<h3 id="include"><code class="highlighter-rouge">include?</code></h3>

<p>Verify/reject the presence of a score in the tree:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="c1"># =&gt; true</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="mi">72</span><span class="p">)</span>
<span class="c1"># =&gt; false</span>
</code></pre></div></div>

<h3 id="depth_of"><code class="highlighter-rouge">depth_of</code></h3>

<p>Reports the depth of the tree where a score appears. Return nil if the score does not exist:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">depth_of</span><span class="p">(</span><span class="mi">92</span><span class="p">)</span>
<span class="c1"># =&gt; 1</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">depth_of</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
<span class="c1"># =&gt; 2</span>
</code></pre></div></div>

<h3 id="max"><code class="highlighter-rouge">max</code></h3>

<p>Which movie has the highest score in the list? What is it‚Äôs score?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">max</span>
<span class="c1"># =&gt; {"Sharknado 3"=&gt;92}</span>
</code></pre></div></div>

<h3 id="min"><code class="highlighter-rouge">min</code></h3>

<p>Which movie has the lowest score in the list? What is it‚Äôs score?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">min</span>
<span class="c1"># =&gt; {"Johnny English"=&gt;16}</span>
</code></pre></div></div>

<h3 id="sort"><code class="highlighter-rouge">sort</code></h3>

<p>Return an array of all the movies and scores in sorted ascending order. Return them as an array of hashes.
<em>Note</em>: you‚Äôre not using Ruby‚Äôs <code class="highlighter-rouge">Array#sort</code>. You‚Äôre traversing the tree.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">sort</span>
<span class="c1"># =&gt; [{"Johnny English"=&gt;16},</span>
<span class="c1">#   {"Hannibal Buress: Animal Furnace"=&gt;50},</span>
<span class="c1">#   {"Bill &amp; Ted's Excellent Adventure"=&gt;61},</span>
<span class="c1">#  {"Sharknado 3"=&gt;92}]</span>
</code></pre></div></div>

<h3 id="load"><code class="highlighter-rouge">load</code></h3>

<p>Assuming we have a file named <code class="highlighter-rouge">movies.txt</code> with one score/movie pair per line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># movies.txt sample format:
34, Hannibal Buress: Comedy Camisado
63, Meet My Valentine
22, Experimenter
84, French Dirty
41, Love
10, I Love You Phillip Morris
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="s1">'movies.txt'</span><span class="p">)</span>
<span class="c1"># =&gt; 99</span>
</code></pre></div></div>

<p>Where the return value is the number of movies inserted into the tree. If a score is already present in the tree when <code class="highlighter-rouge">load</code> is called, ignore it.</p>

<p>See an example file <a href="https://gist.github.com/neight-allen/dbc9e3ad0f79bff24888">here</a></p>

<h3 id="health"><code class="highlighter-rouge">health</code></h3>

<p>Report on the health of the tree by summarizing the number of child nodes (nodes beneath each node) at a given depth. For health, we‚Äôre worried about 3 values:</p>

<ul>
  <li>Score of the node</li>
  <li>Total number of child nodes including the current node</li>
  <li>Percentage of all the nodes that are this node or it‚Äôs children</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">98</span><span class="p">,</span> <span class="s2">"Animals United"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">58</span><span class="p">,</span> <span class="s2">"Armageddon"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="s2">"Bill &amp; Ted's Bogus Journey"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">93</span><span class="p">,</span> <span class="s2">"Bill &amp; Ted's Excellent Adventure"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">86</span><span class="p">,</span> <span class="s2">"Charlie's Angels"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">38</span><span class="p">,</span> <span class="s2">"Charlie's Country"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">69</span><span class="p">,</span> <span class="s2">"Collateral Damage"</span><span class="p">)</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">health</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="mi">98</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">100</span><span class="p">]]</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">health</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="mi">58</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">85</span><span class="p">]]</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">health</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="mi">36</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">28</span><span class="p">],</span> <span class="p">[</span><span class="mi">93</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">]]</span>
</code></pre></div></div>

<p>Where the return value is an <code class="highlighter-rouge">Array</code> with one nested array per node at that level. The nested array is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[score in the node, 1 + number of child nodes, floored percentage of (1+children) over the total number of nodes]
</code></pre></div></div>

<p>When the percentages of two nodes at the same level are dramatically different, like <code class="highlighter-rouge">28</code> and <code class="highlighter-rouge">42</code> above, then we know that this tree is starting to become unbalanced.</p>

<h3 id="understanding-the-shape">Understanding the Shape</h3>

<p>This extensions is made up of two methods:</p>

<h4 id="leaves"><code class="highlighter-rouge">leaves</code></h4>

<p>A leaf is a node that has no left or right value. How many leaf nodes are on the tree?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">leaves</span>
<span class="c1"># =&gt; 2</span>
</code></pre></div></div>

<h4 id="height"><code class="highlighter-rouge">height</code></h4>

<p>What is the height (aka the maximum depth) of the tree?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">height</span>
<span class="c1"># =&gt; 4</span>
</code></pre></div></div>

<h2 id="extension">Extension</h2>

<h3 id="deleting-nodes">Deleting Nodes</h3>

<p>Remove a specified piece score from the tree:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="c1"># =&gt; 30</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="mi">101</span><span class="p">)</span>
<span class="c1"># =&gt; nil</span>
</code></pre></div></div>

<p>Note that any children of the deleted node should still be present in the tree.</p>

<h2 id="evaluation-rubric">Evaluation Rubric</h2>

<p>The project will be assessed with the following guidelines:</p>

<ul>
  <li>4: Above expectations</li>
  <li>3: Meets expectations</li>
  <li>2: Below expectations</li>
  <li>1: Well-below expectations</li>
</ul>

<p><strong>Expectations:</strong></p>

<h3 id="1-ruby-syntax--style">1. Ruby Syntax &amp; Style</h3>

<ul>
  <li>Applies appropriate attribute encapsulation</li>
  <li>Developer creates instance and local variables appropriately</li>
  <li>Naming follows convention (is idiomatic)</li>
  <li>Ruby methods used are logical and readable</li>
  <li>Code is indented properly</li>
  <li>Code does not exceed 80 characters per line</li>
  <li>Each class has correctly-named files and corresponding test files in the proper directories</li>
</ul>

<h3 id="2-breaking-logic-into-components">2. Breaking Logic into Components</h3>

<ul>
  <li>Code is effectively broken into methods &amp; classes</li>
  <li>Developer writes methods less than 10 lines</li>
  <li>No more than 3 methods break the principle of SRP</li>
</ul>

<h3 id="3-test-driven-development">3. Test-Driven Development</h3>

<ul>
  <li>Each method is tested</li>
  <li>Tests implement Ruby syntax &amp; style</li>
  <li>Tests exist to cover edge cases</li>
  <li>Tests covers critical functionality of software</li>
  <li>Testing exhibits TDD approach</li>
  <li>Test coverage is measured with <a href="https://github.com/colszowka/simplecov">SimpleCov</a></li>
  <li>Test coverage exceeds 95%</li>
</ul>

<h3 id="4-version-control">4. Version Control</h3>

<p>Expectations:</p>

<ul>
  <li>Developer commits at a pace of at least 1 commit per hour</li>
  <li>Developer implements branching and PRs</li>
  <li>The final submitted version is merged into master</li>
</ul>

<h3 id="5-functionality">5. Functionality</h3>

<ul>
  <li>Application meets all requirements (extension not req‚Äôd)</li>
</ul>

:ET