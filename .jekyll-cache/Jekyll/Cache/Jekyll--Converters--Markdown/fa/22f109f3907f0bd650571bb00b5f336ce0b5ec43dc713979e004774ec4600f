I"¼ô<h2 id="overview">Overview</h2>

<ul>
  <li>Versioned APIs</li>
  <li>Tutorial
    <ol>
      <li>RSpec &amp; FactoryBot Setup</li>
      <li>Creating Our First Test and Factory</li>
      <li>Api::V1::BooksController#index</li>
      <li>Api::V1::BooksController#show</li>
      <li>Api::V1::BooksController#create</li>
      <li>Api::V1::BooksController#update</li>
      <li>Api::V1::BooksController#destroy</li>
    </ol>
  </li>
  <li>Going Above and Beyond
    <ol>
      <li>Add Api::V2::BooksController#index</li>
    </ol>
  </li>
</ul>

<h2 id="background-versioned-apis">Background: Versioned APIs</h2>

<p>In software (and probably other areas in life) youâ€™re never going to know less about a problem than you do right now. Procrastination and being resolved to solve only immediate problems can be an effective strategy while writing software. Our assumptions are often wrong and we need to change what we build.</p>

<p>When building APIs, we donâ€™t always know exactly how they will be used. Because of this, we should aim to build with the assumption that things will need to change.</p>

<p>Imagine we are serving up an API that several other companies and developers are using. Letâ€™s think through a simple example. Letâ€™s say we have an API endpoint of <code class="highlighter-rouge">GET /api/books/1</code> that returns a JSON response that includes an <code class="highlighter-rouge">id</code>, <code class="highlighter-rouge">title</code>, <code class="highlighter-rouge">author</code>, <code class="highlighter-rouge">genre</code>, <code class="highlighter-rouge">summary</code> and <code class="highlighter-rouge">number_sold</code>. Now imagine that at a later date we no longer want to provide <code class="highlighter-rouge">number_sold</code> and instead want to replace it with a new attribute called <code class="highlighter-rouge">popularity</code>. What happens to all of our consumers that were dependent on <code class="highlighter-rouge">number_sold</code>?</p>

<p>We can provide a better experience for our clients (other developers) by versioning our API. Instead of our endpoint being <code class="highlighter-rouge">GET /api/books/1</code> we can add an extra segment to our URL with a version number. Something like <code class="highlighter-rouge">GET /api/v1/books/1</code>. If we ever want to change our API in the future we can simply change the segment to represent the new API <code class="highlighter-rouge">GET /api/v2/books/1</code>. The big advantage here is we can have both endpoints served simultaneously to allow our clients to transition their code bases to use the newest version. Usually the intent is to shutdown the initial API since maintaining multiple versions can be a drain on resources. Most companies will provide a date that the deprecated API will be shutdown.</p>

<p>Weâ€™ll be building a versioned API in this tutorial.</p>

<h2 id="tutorial">Tutorial</h2>

<h3 id="0-rspec-factory-bot-setup--faker">0. RSpec, Factory Bot Setup, &amp; Faker</h3>

<p>Letâ€™s start by creating a new Rails project. If you are creating an api only Rails project, you can append <code class="highlighter-rouge">--api</code> to your rails new line in the command line.
Read <a href="http://edgeguides.rubyonrails.org/api_app.html">section 3 of the docs</a> to see how an api-only rails project is configured.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails new building_internal_apis <span class="nt">-T</span> <span class="nt">-d</span> postgresql <span class="nt">--api</span>
<span class="nv">$ </span><span class="nb">cd </span>building_internal_apis
<span class="nv">$ </span>bundle
<span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:create
</code></pre></div></div>

<p>Add <code class="highlighter-rouge">gem 'rspec-rails'</code> to your :development, :test block in your Gemfile.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle
<span class="nv">$ </span>rails g rspec:install
</code></pre></div></div>

<p>Now letâ€™s get our factories set up!</p>

<p>add <code class="highlighter-rouge">gem 'factory_bot_rails'</code>, <code class="highlighter-rouge">gem 'faker'</code> to your :development, :test block in your Gemfile.</p>

<p>Inside of the rails_helper.rb file add this to the RSpec.configure block:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="no">FactoryBot</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</code></pre></div></div>

<h3 id="1-creating-our-first-test">1. Creating Our First Test</h3>

<p>Now that our configuration is set up, we can start test driving our code. First, letâ€™s set up the test file.
In true TDD form, we need to create the structure of the test folders ourselves. Even though we are going to be creating controller files for
our api, users are going to be sending HTTP requests to our app. For this reason, we are going to call these specs <code class="highlighter-rouge">requests</code> instead of
<code class="highlighter-rouge">controller specs</code>. Letâ€™s create our folder structure.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> spec/requests/api/v1
<span class="nv">$ </span><span class="nb">touch </span>spec/requests/api/v1/books_request_spec.rb
</code></pre></div></div>

<p>Note that we are namespacing under <code class="highlighter-rouge">/api/v1</code>. This is how we are going to namespace our controllers, so we want to do the same in our tests.</p>

<p>On the first line of our test, we want to set up our data. We configured Factory Bot so letâ€™s have it generate some books for us.
We then want to make the request that a user would be making. We want a <code class="highlighter-rouge">get</code> request to <code class="highlighter-rouge">api/v1/books</code> and we would like to get
json back. At the end of the test we want to assert that the response was a success.</p>

<p><strong>spec/requests/api/v1/books_request_spec.rb</strong></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"Books API"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"sends a list of books"</span> <span class="k">do</span>
    <span class="n">create_list</span><span class="p">(</span><span class="ss">:book</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">get</span> <span class="s1">'/api/v1/books'</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="2-creating-our-first-model-migration-and-factory">2. Creating Our First Model, Migration, and Factory</h3>

<p>Letâ€™s make the test pass!</p>

<p>The first error that we should receive is</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: create_list<span class="o">(</span>:book, 3<span class="o">)</span>  KeyError:
       Factory not registered: <span class="s2">"book"</span>
</code></pre></div></div>

<p>This is because we have not created a factory yet. The easiest way to create a factory is to generate the model.</p>

<p>Letâ€™s generate a model.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails g model Book title author genre summary:text number_sold:integer
</code></pre></div></div>

<p>Notice that not only was the Book model created, but a factory was created for the book in
<code class="highlighter-rouge">spec/factories/books.rb</code></p>

<p>Now letâ€™s migrate!</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
<span class="o">==</span> 20160229180616 CreateBooks: migrating <span class="o">======================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:books<span class="o">)</span>
   -&gt; 0.0412s
<span class="o">==</span> 20160229180616 CreateBooks: migrated <span class="o">(</span>0.0413s<span class="o">)</span> <span class="o">=============================</span>
</code></pre></div></div>

<p>Before we run our test again, letâ€™s take a look at the Book Factory that was generated for us.</p>

<p><strong>spec/factories/books.rb</strong></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryBot</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="no">FactoryBot</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">factory</span> <span class="ss">:book</span> <span class="k">do</span>
      <span class="n">title</span> <span class="p">{</span> <span class="s2">"MyString"</span> <span class="p">}</span>
      <span class="n">author</span> <span class="p">{</span> <span class="s2">"MyString"</span> <span class="p">}</span>
      <span class="n">genre</span> <span class="p">{</span> <span class="s2">"MyString"</span> <span class="p">}</span>
      <span class="n">summary</span> <span class="p">{</span> <span class="s2">"MyText"</span> <span class="p">}</span>
      <span class="n">number_sold</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

</code></pre></div></div>

<p>We can see that the attributes are created with auto-populated data using <code class="highlighter-rouge">My</code> and the attribute data type.
This is boring. Letâ€™s user Faker to generate data for us.</p>

<p><strong>spec/factories/books.rb</strong></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryBot</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="n">factory</span> <span class="ss">:book</span> <span class="k">do</span>
    <span class="n">title</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Book</span><span class="p">.</span><span class="nf">title</span> <span class="p">}</span>
    <span class="n">author</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Book</span><span class="p">.</span><span class="nf">author</span> <span class="p">}</span>
    <span class="n">genre</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Book</span><span class="p">.</span><span class="nf">genre</span> <span class="p">}</span>
    <span class="n">summary</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Lorem</span><span class="p">.</span><span class="nf">paragraph</span> <span class="p">}</span>
    <span class="n">number_sold</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Number</span><span class="p">.</span><span class="nf">within</span><span class="p">(</span><span class="ss">range: </span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h3 id="3-apiv1bookscontrollerindex">3. Api::V1::BooksController#index</h3>

<p>Weâ€™re TDDâ€™ing so letâ€™s run our tests again.</p>

<p>We should get the error <code class="highlighter-rouge">ActionController::RoutingError: No route matches [GET] "/api/v1/books"</code></p>

<p>This is because we havenâ€™t yet set up our routing.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
    <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
      <span class="n">resources</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Sure enough, that changes our error.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
  uninitialized constant Api
</code></pre></div></div>

<p>Our routes file is telling our app to look for a directory <code class="highlighter-rouge">api</code> in our <code class="highlighter-rouge">controllers</code> directory, but that doesnâ€™t yet exist. Ultimately, weâ€™re going to need a controller. Letâ€™s go ahead and create that controller in this next step.</p>

<p>If youâ€™d like, feel free to run your tests after creating the directory structure to see the new error confirming that weâ€™re looking for a controller.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> app/controllers/api/v1
<span class="nv">$ </span><span class="nb">touch </span>app/controllers/api/v1/books_controller.rb
</code></pre></div></div>

<p>We can add the following to the controller we just made:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">class</span> <span class="nc">Api::V1::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Also, add the action in the controller:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">class</span> <span class="nc">Api::V1::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Great! We are successfully getting a response. But we arenâ€™t actually getting any data. Without any data or templates, Rails 5 API
will respond with <code class="highlighter-rouge">Status 204 No Content</code>. Since itâ€™s a <code class="highlighter-rouge">2xx</code> status code, it is interpreted as a success.</p>

<p>Now lets see if we can actually get some data.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"Books API"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"sends a list of books"</span> <span class="k">do</span>
     <span class="n">create_list</span><span class="p">(</span><span class="ss">:book</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

      <span class="n">get</span> <span class="s1">'/api/v1/books'</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>

      <span class="n">books</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
   <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run our tests again, we get a semi-obnoxious <code class="highlighter-rouge">JSON::ParserError</code>.</p>

<p>Well that makes sense. We arenâ€™t actually rendering anything yet. Letâ€™s render some JSON from our controller.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">class</span> <span class="nc">Api::V1::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Andâ€¦ our test is passing again.</p>

<p>Letâ€™s take a closer look at the response. Put a pry on line eight in the test, right below where we make the request.</p>

<p>If you just type <code class="highlighter-rouge">response</code> you can take a look at the entire response object. We care about the response body. If you enter <code class="highlighter-rouge">response.body</code> you can see the data that is returned from the endpoint.</p>

<p>The data we got back is json, and we need to parse it to get a Ruby object. Try entering <code class="highlighter-rouge">JSON.parse(response.body)</code>. As you see, the data looks a lot more like Ruby after we parse it. Now that we have a Ruby object, we can make assertions about it.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"Books API"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"sends a list of books"</span> <span class="k">do</span>
    <span class="n">create_list</span><span class="p">(</span><span class="ss">:book</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">get</span> <span class="s1">'/api/v1/books'</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>

    <span class="n">books</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">,</span> <span class="ss">symbolize_names: </span><span class="kp">true</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">books</span><span class="p">.</span><span class="nf">count</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="n">books</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:id</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_an</span><span class="p">(</span><span class="no">Integer</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:title</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:author</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:author</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:genre</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:genre</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:summary</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:summary</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:number_sold</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:number_sold</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_an</span><span class="p">(</span><span class="no">Integer</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run your tests again and they should still be passing.</p>

<h3 id="4-bookscontrollershow">4. BooksController#show</h3>

<p>Now we are going to test drive the <code class="highlighter-rouge">/api/v1/books/:id</code> endpoint. From the <code class="highlighter-rouge">show</code> action, we want to return a single book.</p>

<p>First, letâ€™s write the test. As you can see, we have added a key <code class="highlighter-rouge">id</code> in the request:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="n">it</span> <span class="s2">"can get one book by its id"</span> <span class="k">do</span>
  <span class="nb">id</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">).</span><span class="nf">id</span>

  <span class="n">get</span> <span class="s2">"/api/v1/books/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">"</span>

  <span class="n">book</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">,</span> <span class="ss">symbolize_names: </span><span class="kp">true</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:id</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:title</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:author</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:author</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:genre</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:genre</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:summary</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:summary</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:number_sold</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:number_sold</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_an</span><span class="p">(</span><span class="no">Integer</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="try-to-test-drive-the-implementation-before-looking-at-the-code-below">Try to test drive the implementation before looking at the code below.</h2>

<p>Run the tests and the first error we get is: <code class="highlighter-rouge">ActionController::RoutingError: No route matches [GET] "/api/v1/books/980190962"</code>, or some other similar route. Factory Bot has created an id for us.</p>

<p>Letâ€™s update our routes.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the tests andâ€¦ <code class="highlighter-rouge">The action 'show' could not be found for Api::V1::BooksController</code>.</p>

<p>Add the action and declare what data should be returned from the endpoint:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show</span>
  <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the tests andâ€¦ we should have two passing tests.</p>

<h3 id="5-bookscontrollercreate">5. BooksController#create</h3>

<p>Letâ€™s start with the test. Since we are creating a new book, we need to pass data for the new book via the HTTP request.
We can do this easily by adding the params as a key-value pair. Also note that we swapped out the <code class="highlighter-rouge">get</code> in the request for a <code class="highlighter-rouge">post</code> since we are creating data.</p>

<p>Also note that we arenâ€™t parsing the response to access the last book we created, we can simply query for the last Book record created.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="n">it</span> <span class="s2">"can create a new book"</span> <span class="k">do</span>
  <span class="n">book_params</span> <span class="o">=</span> <span class="p">({</span>
                  <span class="ss">title: </span><span class="s1">'Murder on the Orient Express'</span><span class="p">,</span>
                  <span class="ss">author: </span><span class="s1">'Agatha Christie'</span><span class="p">,</span>
                  <span class="ss">genre: </span><span class="s1">'mystery'</span><span class="p">,</span>
                  <span class="ss">summary: </span><span class="s1">'Filled with suspense.'</span><span class="p">,</span>
                  <span class="ss">number_sold: </span><span class="mi">432</span>
                <span class="p">})</span>
  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"CONTENT_TYPE"</span> <span class="o">=&gt;</span> <span class="s2">"application/json"</span><span class="p">}</span>

  <span class="c1"># We include this header to make sure that these params are passed as JSON rather than as plain text</span>
  <span class="n">post</span> <span class="s2">"/api/v1/books"</span><span class="p">,</span> <span class="ss">headers: </span><span class="n">headers</span><span class="p">,</span> <span class="ss">params: </span><span class="no">JSON</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="ss">book: </span><span class="n">book_params</span><span class="p">)</span>
  <span class="n">created_book</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">last</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">created_book</span><span class="p">.</span><span class="nf">title</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">book_params</span><span class="p">[</span><span class="ss">:title</span><span class="p">])</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">created_book</span><span class="p">.</span><span class="nf">author</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">book_params</span><span class="p">[</span><span class="ss">:author</span><span class="p">])</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">created_book</span><span class="p">.</span><span class="nf">summary</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">book_params</span><span class="p">[</span><span class="ss">:summary</span><span class="p">])</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">created_book</span><span class="p">.</span><span class="nf">genre</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">book_params</span><span class="p">[</span><span class="ss">:genre</span><span class="p">])</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">created_book</span><span class="p">.</span><span class="nf">number_sold</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">book_params</span><span class="p">[</span><span class="ss">:number_sold</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the test and you should get <code class="highlighter-rouge">ActionController::RoutingError:No route matches [POST] "/api/v1/books"</code></p>

<p>First, we need to add the route and the action.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:create</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">def</span> <span class="nf">create</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the testsâ€¦ and the test fails. You should get <code class="highlighter-rouge">NoMethodError: undefined method 'name' for nil:NilClass</code>. Thatâ€™s because we arenâ€™t actually creating anything yet.</p>

<p>We are going to create an book with the incoming params. Letâ€™s take advantage of all the niceties Rails gives us and use strong params.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">def</span> <span class="nf">create</span>
  <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">book_params</span><span class="p">)</span>
<span class="k">end</span>

<span class="kp">private</span>

  <span class="k">def</span> <span class="nf">book_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:book</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:summary</span><span class="p">,</span> <span class="n">genere</span><span class="p">,</span> <span class="ss">:number_sold</span> <span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Run the tests and we should have 3 passing tests.</p>

<h3 id="6-apiv1bookscontrollerupdate">6. Api::V1::BooksController#update</h3>

<p>Like before, letâ€™s add a test.</p>

<p>This test looks very similar to the previous one we wrote. Note that we arenâ€™t making assertions about the response, instead we are accessing the book we updated from the database to make sure it actually updated the record.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="n">it</span> <span class="s2">"can update an existing book"</span> <span class="k">do</span>
  <span class="nb">id</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">).</span><span class="nf">id</span>
  <span class="n">previous_name</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">last</span><span class="p">.</span><span class="nf">title</span>
  <span class="n">book_params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">title: </span><span class="s2">"Charlotte's Web"</span> <span class="p">}</span>
  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"CONTENT_TYPE"</span> <span class="o">=&gt;</span> <span class="s2">"application/json"</span><span class="p">}</span>

  <span class="c1"># We include this header to make sure that these params are passed as JSON rather than as plain text</span>
  <span class="n">patch</span> <span class="s2">"/api/v1/books/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="ss">headers: </span><span class="n">headers</span><span class="p">,</span> <span class="ss">params: </span><span class="no">JSON</span><span class="p">.</span><span class="nf">generate</span><span class="p">({</span><span class="ss">book: </span><span class="n">book_params</span><span class="p">})</span>
  <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">id: </span><span class="nb">id</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="nf">title</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">eq</span><span class="p">(</span><span class="n">previous_name</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="nf">title</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Charlotte's Web"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="try-to-test-drive-the-implementation-before-looking-at-the-code-below-1">Try to test drive the implementation before looking at the code below.</h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">def</span> <span class="nf">update</span>
  <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">],</span> <span class="n">book_params</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="7-apiv1bookscontrollerdestroy">7. Api::V1::BooksController#destroy</h3>

<p>Ok, last endpoint to test and implement: destroy!</p>

<p>In this test, the last line in this test is refuting the existence of the book we created at the top of this test.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="n">it</span> <span class="s2">"can destroy an book"</span> <span class="k">do</span>
  <span class="n">book</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="no">Book</span><span class="p">.</span><span class="nf">count</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

  <span class="n">delete</span> <span class="s2">"/api/v1/books/</span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>
  <span class="n">expect</span><span class="p">(</span><span class="no">Book</span><span class="p">.</span><span class="nf">count</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">{</span><span class="no">Book</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="nf">id</span><span class="p">)}.</span><span class="nf">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can also use RSpecâ€™s <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/expect-change">expect change</a> method as an extra check. In our case, <code class="highlighter-rouge">change</code> will check that the numeric difference of <code class="highlighter-rouge">Book.count</code> before and after the block is run is <code class="highlighter-rouge">-1</code>.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v1/books_request_spec.rb</span>
<span class="n">it</span> <span class="s2">"can destroy an book"</span> <span class="k">do</span>
  <span class="n">book</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">{</span> <span class="n">delete</span> <span class="s2">"/api/v1/books/</span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span> <span class="p">}.</span><span class="nf">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Book</span><span class="p">,</span> <span class="ss">:count</span><span class="p">).</span><span class="nf">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_success</span>
  <span class="n">expect</span><span class="p">{</span><span class="no">Book</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="nf">id</span><span class="p">)}.</span><span class="nf">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="make-the-test-pass">Make the test pass.</h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:books</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v1/books_controller.rb</span>
<span class="k">def</span> <span class="nf">destroy</span>
  <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Pat yourself on the back. You just built an API. And with TDD. Huzzah! Now go call a friend and tell them how cool you are.</p>

<h3 id="one-step-further">One Step Further</h3>

<p>At the beginning of this exercise we discussed the importance of versioning. So letâ€™s implement a v2 route for our books index that will return book <code class="highlighter-rouge">popularity</code> and not <code class="highlighter-rouge">number_sold</code>.</p>

<p>Letâ€™s begin by making a test. We will need to create a new <code class="highlighter-rouge">v2</code> directory to hold our <code class="highlighter-rouge">books_request_spec</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> spec/requests/api/v2
<span class="nv">$ </span><span class="nb">touch </span>spec/requests/api/v2/books_request_spec.rb
</code></pre></div></div>

<p>Now add the test in our spec.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/requests/api/v2/books_request_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"Books API"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"sends a list of books"</span> <span class="k">do</span>
    <span class="n">create_list</span><span class="p">(</span><span class="ss">:book</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">get</span> <span class="s1">'/api/v2/books'</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_successful</span>

    <span class="n">books</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">,</span> <span class="ss">symbolize_names: </span><span class="kp">true</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">books</span><span class="p">.</span><span class="nf">count</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="n">books</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:id</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_an</span><span class="p">(</span><span class="no">Integer</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:title</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:author</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:author</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:genre</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:genre</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:summary</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:summary</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:popularity</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:popularity</span><span class="p">]).</span><span class="nf">to</span> <span class="n">be_an</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">book</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:number_sold</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We should see an error for the missing route.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
   No route matches <span class="o">[</span>GET] <span class="s2">"/api/v2/books"</span>
</code></pre></div></div>

<p>Update the routes file to include the new <code class="highlighter-rouge">v2</code> namespace.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>
<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v2</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We should see a new error:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
     uninitialized constant Api::V2
</code></pre></div></div>

<p>This error is telling us that we are missing a v2 directory in the api folder within app/controllers. Add a new <code class="highlighter-rouge">v2</code> directory and <code class="highlighter-rouge">books_controller.rb</code> file.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> app/controllers/api/v2
<span class="nv">$ </span><span class="nb">touch </span>app/controllers/api/v2/books_controller.rb
</code></pre></div></div>

<p>Within the file we need to set up our controller with the index action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Api::V2::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Since we currently are not returning anything we will get that weird JSON error:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: books <span class="o">=</span> JSON.parse<span class="o">(</span>response.body, symbolize_names: <span class="nb">true</span><span class="o">)</span>

 JSON::ParserError:
   765: unexpected token at <span class="s1">''</span>
</code></pre></div></div>

<p>To fix this letâ€™s return our books.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Api::V2::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="no">Book</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We are still missing our new attribute popularity. Create a migration to add it to our books table.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails g migration AddPopularityToBooks popularity:string
</code></pre></div></div>

<p>Run the migration.</p>

<p>We need a way to calculate popularity so we are going to use a callback on our model. Check out the <a href="https://guides.rubyonrails.org/active_record_callbacks.html">rails docs</a> to learn more about callbacks.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/book.rb</span>
<span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="n">before_save</span> <span class="p">{</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span> <span class="n">book</span><span class="p">.</span><span class="nf">popularity</span> <span class="o">=</span> <span class="n">calculate_popularity</span> <span class="p">}</span>

<span class="kp">private</span>
  <span class="k">def</span> <span class="nf">calculate_popularity</span>
    <span class="k">if</span> <span class="n">number_sold</span> <span class="o">&gt;</span> <span class="mi">5</span>
      <span class="s1">'high'</span>
    <span class="k">else</span>
      <span class="s1">'low'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Awesome! Now we have our popularity attribute. Before we celebrate too early though, we still have a failing test because we are returning the <code class="highlighter-rouge">number_sold</code>. We need to customize our response a little bit more. For us to accomplish this, we are going to use something called a Serializer.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> app/serializers
<span class="nv">$ </span><span class="nb">touch </span>app/serailizers/books_serializer.rb
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/serializers/books_serializer.rb</span>
<span class="k">class</span> <span class="nc">BookSerializer</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">format_books</span><span class="p">(</span><span class="n">books</span><span class="p">)</span>
    <span class="n">books</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
      <span class="p">{</span>
        <span class="ss">id: </span><span class="n">book</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span>
        <span class="ss">title: </span><span class="n">book</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span>
        <span class="ss">author: </span><span class="n">book</span><span class="p">.</span><span class="nf">author</span><span class="p">,</span>
        <span class="ss">genre: </span><span class="n">book</span><span class="p">.</span><span class="nf">genre</span><span class="p">,</span>
        <span class="ss">summary: </span><span class="n">book</span><span class="p">.</span><span class="nf">summary</span><span class="p">,</span>
        <span class="ss">popularity: </span><span class="n">book</span><span class="p">.</span><span class="nf">popularity</span>
      <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now that we have a serializer that formats our books for our json response we can use it in our controller.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/api/v2/bookscontroller.</span>
<span class="k">class</span> <span class="nc">Api::V2::BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">books</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="no">BookSerializer</span><span class="p">.</span><span class="nf">format_books</span><span class="p">(</span><span class="n">books</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run our tests again and we should have a passing test! If you are still curious about serializers look ahead to the serializers lesson and do a little research.</p>

<h2 id="supporting-materials">Supporting Materials</h2>

<ul>
  <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md">Getting started with Factory Bot</a></li>
  <li><a href="https://robots.thoughtbot.com/use-factory-girls-build-stubbed-for-a-faster-test">Use Factory Botâ€™s Build Stubbed for a Faster Test</a> (Note that this post uses <code class="highlighter-rouge">FactoryGirl</code> instead of <code class="highlighter-rouge">FactoryBot</code>. <code class="highlighter-rouge">FactoryGirl</code> is the old name.)</li>
  <li><a href="https://vimeo.com/185342639">Building an Internal API Short Tutorial</a></li>
</ul>
:ET