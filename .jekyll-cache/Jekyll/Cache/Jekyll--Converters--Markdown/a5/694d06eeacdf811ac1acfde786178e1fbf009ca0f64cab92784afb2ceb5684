I"á"<h2 id="graduation-requirements">Graduation Requirements</h2>

<p>In order to graduate from Module 4, students must successfully complete <strong>each</strong> of the following:</p>

<h3 id="final-assessment">Final Assessment</h3>

<p>Students must pass each part of the final assessment. The final assessment is composed of three sections:</p>

<ul>
  <li>JavaScript Assessment</li>
  <li><a href="https://gist.github.com/ameseee/e1bcf257e7bdf2a4a429d7fd12f67306">Mock Interview</a></li>
  <li><a href="http://backend.turing.io/module4/capstone_project_overview">Capstone Project</a></li>
</ul>

<p>Assessment requirements will be provided during the first week of the module.</p>

<h3 id="independent-work">Independent Work</h3>

<p><em>Expected:</em> Students will build their Capstone project.</p>

<p><em>Expected:</em> Students will complete and submit weekly Checks for Understanding questions (weeks 1-4).</p>

<h3 id="group-work">Group Work</h3>

<p><em>Expected:</em> Students, as a pair, complete the Quantified Self project.</p>

<p><em>Expected:</em> Students, as a project team, are responsible for passing their House of Vars (Open Source) project and submitting an individual blog post summarizing the experience.</p>

<h3 id="career-development">Career Development</h3>

<p>The Career Development segment is made up of several pieces:</p>

<ul>
  <li>The 30-day post-grad job search action <a href="https://github.com/turingschool/career-development-curriculum/blob/master/module_four/post_grad_plan.md">plan</a> (submitted in markdown for presentation <em>and</em> via DM to your coach)</li>
  <li>Prepare a lightning talk of their Turing story to present during the final week of the module (see the Turing Story Presentation section below)</li>
</ul>

<h3 id="feedback--community">Feedback &amp; Community</h3>

<p>As stewards of the larger Turing community, Module 4 students are expected to facilitate a Gear-up session that theyâ€™ve designed with other Mod 4 students.</p>

<p>When documenting your community contribution, say a few words about the facilitation experience.</p>

<h3 id="presentation--portfolio">Presentation &amp; Portfolio</h3>

<p>To reflect on the work youâ€™ve done during this module, you will prepare a 10 minute presentation outlined <a href="https://gist.github.com/LouisaBarrett/03aa5567937943ca274437205bc35271">here</a>. You will present this to one of your current instructors, another staff member, and a community member/alum. A PR submitting the associated markdown is due at 9 am the day of presentations.</p>

<h3 id="turing-story-presentation">Turing Story Presentation</h3>

<p>On Thursday of Week 6, youâ€™ll present the story of your journey at Turing to your classmates and staff.</p>

<p>Your presentationâ€¦</p>

<ul>
  <li>should be about 4 minutes</li>
  <li>should include the time leading up to Turing</li>
  <li>should include your time at Turing</li>
  <li>should include the trajectory youâ€™re on as you start your new career</li>
  <li>should include thoughtful reflection and describe how youâ€™ve grown and changed</li>
  <li>can include a slide deck, or any other visual aids youâ€™d like</li>
</ul>

<p>After you present, instructors will ask you a couple questions, mostly to dig into things we found interesting about your story. Thereâ€™s not specific answers weâ€™ll be looking for.</p>

<p>If youâ€™re unsure how to cover your time at Turing, a common pattern is to simply talk about each module. Talk about your favorite project, or what the biggest takeaway was for you, or just a fun story from that module.</p>

<p>Youâ€™re required to present, but thereâ€™s no grade. As long as you get up and speak, youâ€™ve met the requirement.</p>

<h2 id="skill-proficiencies">Skill Proficiencies</h2>

<p>Academic success in B4 means that students demonstrate proficiency and comfort with the concepts below. The expected mastery level can be understood with the following scale:</p>

<ul>
  <li><strong>Mastery</strong>: student is able to explain and implement the concept independently or with light reference</li>
  <li><strong>Functional</strong>: student recognizes when to use the concept and can implement it with the support of documentation and/or a collaborator</li>
  <li><strong>Familiarity</strong>: student can recognize and describe the concept when needed/appropriate, but is not able to implement the technology/technique</li>
</ul>

<p>Each of the following skills is covered in the curriculum, and most are covered by an assessment or project rubric.</p>

<h2 id="professional-skills">Professional Skills</h2>

<h3 id="agile-processes">Agile Processes</h3>

<ul>
  <li>Students use an agile process to turn acceptance requirements into deployed software <em>(mastery)</em></li>
  <li>Students estimate complexity of user stories <em>(functional)</em></li>
  <li>Students translate acceptance requirements into user stories that are ready for work <em>(mastery)</em></li>
  <li>Students verify acceptance requirements using automated testing <em>(mastery)</em></li>
</ul>

<h3 id="technical-communication">Technical Communication</h3>

<ul>
  <li>Students formulate questions by synthesizing what was expected vs what was observed <em>(mastery)</em></li>
  <li>Students explain intent and execution of their code <em>(mastery)</em></li>
  <li>Students document intent and usage of their code for effective collaboration <em>(functional)</em></li>
  <li>Students use pull requests to organize discussion about features <em>(functional)</em></li>
  <li>Students implement feedback from a code review to improve quality <em>(functional)</em></li>
  <li>Students provide feedback in the form of a code review to improve quality and share knowledge <em>(familiarity)</em></li>
</ul>

<h2 id="core-technical-skills">Core Technical Skills</h2>

<h3 id="architecting-for-scalability">Architecting for Scalability</h3>

<ul>
  <li>Students divide applications into components and domains of responsibilities to facilitate multi-developer teams <em>(functional)</em></li>
  <li>Students abstract external dependencies and services to provide flexibility <em>(familiarity)</em></li>
  <li>Students integrate outside data sources (Files, APIs, databases) <em>(functional)</em></li>
  <li>Students coordinate data and events across applications <em>(functional)</em></li>
  <li>Students build applications that execute in development, test, CI and production environments <em>(functional)</em></li>
  <li>Students securely apply authentication and authorization patterns <em>(functional)</em></li>
  <li>Students apply cacheing patterns to improve application performance <em>(familiarity)</em></li>
</ul>

<h3 id="javascript-essentials">JavaScript Essentials</h3>

<ul>
  <li>Students apply knowledge of Ruby collections to JavaScript arrays <em>(mastery)</em></li>
  <li>Students create and use functions with parameters <em>(mastery)</em></li>
  <li>Students apply good development patterns, like DRY and separation of concerns, to JavaScript functions <em>(mastery)</em></li>
  <li>Students organize functions into classes and objects <em>(functional)</em></li>
  <li>Students make effective use of <code class="highlighter-rouge">this</code> in multiple contexts <em>(functional)</em></li>
  <li>Students differentiate between JavaScript written in ES5 and ES6 <em>(mastery)</em></li>
  <li>Students translate between JavaScript written in ES5 and ES6 <em>(familiarity)</em></li>
  <li>Students unit test JavaScript <em>(functional)</em></li>
</ul>

<h3 id="javascript-in-the-browser">JavaScript in the Browser</h3>

<ul>
  <li>Students use event listeners to attach code to event-element combinations including document-ready and element-click <em>(functional)</em></li>
  <li>Students write precise CSS-style selectors in multiple contexts like DOM manipulation and integration testing <em>(functional)</em></li>
  <li>Students read form content and manipulate DOM via JavaScript <em>(functional)</em></li>
  <li>Students integrate outside data sources in the browser (Fetch, local storage) <em>(functional)</em></li>
  <li>Students use integration testing to verify JavaScript functionality <em>(functional)</em></li>
</ul>

<h3 id="javascript-tools-and-libraries">JavaScript Tools and Libraries</h3>

<ul>
  <li>Students implement a stand-alone web service with Node and Express <em>(functional)</em></li>
  <li>Students use the Node Package Manager to manage dependencies <em>(functional)</em></li>
  <li>Students use WebPack as a build tool for organizing their code into modules <em>(functional)</em></li>
</ul>

<h3 id="postgresql--sql">PostgreSQL &amp; SQL</h3>

<ul>
  <li>Students write basic SQL statements without the assistance of an ORM <em>(functional)</em></li>
  <li>Students use the CLI to understand the structure and data of their database (ex: list databases, tables, table structure) <em>(familiarity)</em></li>
</ul>
:ET