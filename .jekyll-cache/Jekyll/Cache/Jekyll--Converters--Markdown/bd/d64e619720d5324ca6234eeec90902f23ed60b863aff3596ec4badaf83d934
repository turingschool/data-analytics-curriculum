I"R<h2 id="unix-essentials">UNIX Essentials</h2>

<p>If this is your first time using UNIX then you’ll need a few of the most essential pieces to be able to complete your work:</p>

<ul>
  <li>Open Terminal by typing <code class="highlighter-rouge">command-spacebar</code> to open Spotlight, then type <code class="highlighter-rouge">Terminal</code> and hit enter</li>
  <li>You now have a single terminal window. This window can open multiple tabs by typing <code class="highlighter-rouge">command-t</code></li>
  <li>The prompt on the left tells you a bit about what folder you’re currently in. But try typing <code class="highlighter-rouge">pwd</code> in the terminal and hit enter to print out your “present working directory”</li>
</ul>

<h4 id="listing-files">Listing Files</h4>

<ul>
  <li><code class="highlighter-rouge">ls</code> will list the files in the current folder</li>
  <li><code class="highlighter-rouge">ls -lA</code> will list the files in the current folder along with a bunch of info about them</li>
</ul>

<h4 id="working-with-files">Working with Files</h4>

<ul>
  <li>Files that start with a <code class="highlighter-rouge">.</code>, like the <code class="highlighter-rouge">.bash_profile</code> you’ll work with later, are hidden files. If you just use <code class="highlighter-rouge">ls</code> they won’t show up, but <code class="highlighter-rouge">ls -lA</code> will show them.</li>
  <li><code class="highlighter-rouge">touch</code> is used to create blank files. Try <code class="highlighter-rouge">touch sample_file</code> then <code class="highlighter-rouge">ls</code>.</li>
  <li><code class="highlighter-rouge">rm</code> is used to remove files. Remove that sample with <code class="highlighter-rouge">rm sample_file</code></li>
  <li><code class="highlighter-rouge">which</code> tells you where on the file system a program is. Try <code class="highlighter-rouge">which ruby</code> to see the full path to your Ruby executable.</li>
</ul>

<h4 id="working-with-directories">Working with Directories</h4>

<ul>
  <li><code class="highlighter-rouge">mkdir</code> will make a directory. Go ahead and enter <code class="highlighter-rouge">mkdir sample_directory</code> to create a directory</li>
  <li><code class="highlighter-rouge">cd</code> stands for “change directory”. Enter <code class="highlighter-rouge">cd sample_directory</code> to move into your new directory</li>
  <li>The tilde (<code class="highlighter-rouge">~</code>) is a shortcut for your “home” directory. You can enter <code class="highlighter-rouge">cd ~</code> from any folder on the system and you’ll jump back to your home directory.</li>
  <li>The single period (<code class="highlighter-rouge">.</code>) is a reference to the current directory. If you enter <code class="highlighter-rouge">cd .</code> it won’t go anywhere. But the period is useful especially with Git which you’ll see soon.</li>
  <li>The double period (<code class="highlighter-rouge">..</code>) is a reference to the parent directory of the current directory (one step up the tree). Try entering <code class="highlighter-rouge">cd ..</code> then <code class="highlighter-rouge">ls</code> and you should see your user folder. <code class="highlighter-rouge">cd</code> back into that.</li>
  <li>Removing directories is a bit different. Try <code class="highlighter-rouge">rm -rf sample_directory</code> to remove our previously created sample directory.</li>
</ul>

<h2 id="customizing-your-terminal">Customizing Your Terminal</h2>

<p>A little bit of increased efficiency in your use of the Unix environment and your editor can pay significant dividends over time. Let’s experiment with customizing and adding to your terminal and editor.</p>

<ul>
  <li>Open <code class="highlighter-rouge">~/.bash_profile</code> in a text editor (ex: <code class="highlighter-rouge">atom ~/.bash_profile</code>)</li>
  <li>You can check out dotfiles on GitHub to see how serious people get <a href="http://dotfiles.github.com/">here</a></li>
</ul>

<h3 id="the-essentials">The Essentials</h3>

<ul>
  <li><code class="highlighter-rouge">export</code> to set environment variables</li>
  <li><code class="highlighter-rouge">alias</code> for shorthand commands, like I define <code class="highlighter-rouge">e</code> to launch my editor</li>
  <li><code class="highlighter-rouge">source</code> to run scripts of bash commands</li>
</ul>

<h4 id="a-sample-bash_profile">A sample .bash_profile</h4>

<p>Snippets from Jeff’s <code class="highlighter-rouge">.bash_profile</code> are below.
The top three lines setup a yellow lightning bolt as my prompt because, well, it’s awesome.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PS1="\W \[\033[0;33m\]⚡\[\033[0;39m\] "
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

export EDITOR='/usr/local/bin/atom'
export CC=/usr/local/bin/gcc-4.2

# A shortcut for getting back to our "Module 1" directory
alias m1="cd ~/turing/1module"

# Enable git's tab-completion library
source /usr/local/etc/bash_completion.d/git-completion.bash

# shortcuts for git
alias ga="git add"
alias gb="git branch"
alias gd="git diff --patience --ignore-space-change"
alias gh="git log --pretty=format:\"%Cgreen%h%Creset %Cblue%ad%Creset %s%C(yellow)%d%Creset %Cblue[%an]%Creset\" --graph --date=short"
alias gc="git checkout"
alias gs="git status"

# programs that launch editors (e.g. git) will use Atom
export EDITOR="atom -w"
</code></pre></div></div>

<h2 id="customizing-atom">Customizing Atom</h2>

<p>Check out the Atom docs that explain how to start customizing it <a href="https://atom.io/docs/latest/customizing-atom">here</a></p>
:ET