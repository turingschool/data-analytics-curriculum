I"²!<h1 id="testing-sinatra-applications">Testing Sinatra Applications</h1>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Test HTTP responses using <code class="highlighter-rouge">Rack::Test</code></li>
  <li>Set environment variables to differentiate code paths in development/test</li>
  <li>Use Nokogiri to parse HTML responses</li>
</ul>

<h2 id="structure">Structure</h2>

<ul>
  <li>5 - Warmup</li>
  <li>40 - Testing Routes using <code class="highlighter-rouge">Rack::Test::Methods</code> and Minitest</li>
  <li>5 - Break</li>
  <li>40 - Testing Content using Nokogiri</li>
  <li>5 - Wrapup</li>
</ul>

<h2 id="warmup">Warmup</h2>

<p>With a partner, discuss the following questions:</p>

<ul>
  <li>Give what you know from SalesEngine, how would you go about testing a web application built using Sinatra?</li>
  <li>What testing tools do you already know how to use for testing a web app and what tools are you missing?</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://github.com/turingschool-examples/testing-sinatra-applications">Talker</a></li>
</ul>

<h2 id="full-group-instruction-testing-routes">Full Group Instruction: Testing Routes</h2>

<p>In SalesEngine, we tested Ruby objects using Minitest and Rspec. But how do we test a route in Sinatra like the one in <code class="highlighter-rouge">fake_app.rb</code>?</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FakeApp</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">get</span> <span class="s1">'/'</span> <span class="k">do</span>
    <span class="s2">"Today is going to be a wonderful day."</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Rack gives us some tools to make HTTP requests to our Sinatra application and inspect the response and make assertions based on the response.</p>

<p><code class="highlighter-rouge">app_test.rb</code> demonstrates how to send a GET request to a route and inspect the response.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ENV</span><span class="p">[</span><span class="s2">"RACK_ENV"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"test"</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'minitest/spec'</span>
<span class="nb">require</span> <span class="s1">'rack/test'</span>

<span class="nb">require_relative</span> <span class="s1">'../app/fake_app'</span>

<span class="k">class</span> <span class="nc">FakeApp</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="kp">include</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Methods</span>

  <span class="k">def</span> <span class="nf">app</span>
    <span class="no">FakeApp</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_it_tells_you_that_today_will_be_wonderful</span>
    <span class="n">get</span> <span class="s1">'/'</span>
    <span class="n">assert_equal</span> <span class="mi">200</span><span class="p">,</span> <span class="n">last_response</span><span class="p">.</span><span class="nf">status</span>
    <span class="n">assert</span> <span class="n">last_response</span><span class="p">.</span><span class="nf">ok?</span>
    <span class="n">assert_equal</span> <span class="s2">"Today is going to be a wonderful day."</span><span class="p">,</span> <span class="n">last_response</span><span class="p">.</span><span class="nf">body</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can use any of the HTTP methods: <code class="highlighter-rouge">get</code>, <code class="highlighter-rouge">post</code>, <code class="highlighter-rouge">put</code>, <code class="highlighter-rouge">delete</code>, <code class="highlighter-rouge">patch</code>.</p>

<h2 id="key-points">Key Points</h2>

<ul>
  <li>Use the <code class="highlighter-rouge">rack-test</code> gem to test rack applications (e.g. Sinatra, Rails)</li>
  <li>Rack-test hooks in at the level of Rack, so it calls your code the same as a real web request, but with mock objects</li>
  <li>
    <p>Declare an <code class="highlighter-rouge">app</code> method so it knows what Rack app to use</p>
  </li>
  <li>What can you do with Rack::Test?
    <ul>
      <li>get access to the methods by including <code class="highlighter-rouge">include Rack::Test::Methods</code></li>
      <li>make a request: (<code class="highlighter-rouge">get/post/put/patch/delete</code>)</li>
      <li>pass params by providing a params hash as the second argument: <code class="highlighter-rouge">get '/', { title: "My Idea" }</code></li>
      <li>follow a redirect: <code class="highlighter-rouge">follow_redirect!</code></li>
      <li>get the request or response: <code class="highlighter-rouge">last_request</code> or <code class="highlighter-rouge">last_response</code></li>
    </ul>
  </li>
  <li>What to use <code class="highlighter-rouge">last_response</code> for:
    <ul>
      <li>status code: (200, 404, 302, 500, etc) â€“ see all status codes <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">here</a></li>
      <li>human-readable methods for these: (ok?, not_found?)</li>
      <li><code class="highlighter-rouge">body</code></li>
    </ul>
  </li>
  <li>What to use <code class="highlighter-rouge">last_request</code> for:
    <ul>
      <li><code class="highlighter-rouge">url</code> if testing a redirect (<code class="highlighter-rouge">follow_redirect!</code>)</li>
    </ul>
  </li>
  <li>Make assertions about the body
    <ul>
      <li>look for relevant strings using normal string methods like <code class="highlighter-rouge">.include?</code>, etc.</li>
      <li>parse it with Nokogiri</li>
    </ul>
  </li>
  <li>Basic Nokogiri methods
    <ul>
      <li>Parse an html document with Nokogiri: <code class="highlighter-rouge">doc = Nokogiri::HTML(html)</code></li>
      <li>Find all elements that match a CSS selector: <code class="highlighter-rouge">doc.css(selector)</code></li>
      <li>Find the first element that matches a CSS selector: <code class="highlighter-rouge">doc.at_css(selector)</code></li>
      <li>Get the text out of an element: <code class="highlighter-rouge">doc.css(selector).text</code></li>
    </ul>
  </li>
</ul>

<h2 id="to-the-code">To the Code!</h2>

<ul>
  <li>
    <p>Clone <a href="https://github.com/turingschool-examples/testing-sinatra-applications">Talker</a></p>
  </li>
  <li><code class="highlighter-rouge">git checkout 8db90a8</code> Initial Commit</li>
  <li><code class="highlighter-rouge">git checkout 2daab4b</code> Set up minitest and rack-test in Gemfile</li>
  <li><code class="highlighter-rouge">git checkout c27332f</code> Set up test class</li>
  <li><code class="highlighter-rouge">git checkout d4bf3e5</code> Test for hello world</li>
  <li><code class="highlighter-rouge">git checkout 015abc6</code> Example test for a post request</li>
  <li><code class="highlighter-rouge">git checkout e533009</code> Sad path example for 404/not found</li>
  <li><code class="highlighter-rouge">git checkout 5b903d8</code> Test using form parameters</li>
  <li><code class="highlighter-rouge">git checkout e29b074</code> Test using URL parameters</li>
  <li><code class="highlighter-rouge">git checkout 84199b9</code> Test a redirect</li>
  <li><code class="highlighter-rouge">git checkout 05543d4</code> Test using Nokogiri</li>
  <li><code class="highlighter-rouge">git checkout 5aa5901</code> Alternate way to set up requirements using Bundler</li>
</ul>

<h2 id="discussion">Discussion</h2>

<ul>
  <li>What things should we test in IdeaBox?</li>
  <li>What might be some challenges to asserting numbers of ideas when we use one database?</li>
  <li>How can we use <code class="highlighter-rouge">ENV["RACK_TEST"]</code> to avoid this problem?</li>
</ul>

<h2 id="resources-1">Resources</h2>

<ul>
  <li><a href="http://www.sinatrarb.com/testing.html">Testing Sinatra with Rack::Test</a></li>
  <li><a href="https://github.com/sparklemotion/nokogiri/wiki/Cheat-sheet">Nokogiri cheat sheet</a></li>
</ul>
:ET