I"è6<h2 id="goals">Goals</h2>

<p>By the end of this lesson, you will:</p>

<ul>
  <li>Understand when and why to use Express.js in the back-end of an application</li>
  <li>Know how Express.js abstracts difficult server-side logic and makes it easier to write endpoints</li>
  <li>Create a simple Express app that serves static pages</li>
</ul>

<p>An example repository of the completed example can be found <a href="https://github.com/turingschool-examples/intro-to-express">here</a>.</p>

<h2 id="what-is-node">What is Node?</h2>

<p>Node is an open-source, cross platform, runtime environment that allows developers to create all kinds of server side tools and applications in JavaScript. It is intended for use outside of a browser context so the environment omits browser-specific JavaScript APIs and adds support for more traditional OS APIs including HTTP and file system libraries.</p>

<h2 id="what-is-express">What is Express?</h2>

<p>Express is a lightweight, unopinionated web framework built on top of the server functionality provided by Node.js. It helps to simplify and organize the server-side functionality of your application by providing abstractions over the more confusing parts of Node.js, and adding helpful utilities and features. It provides mechanisms to:</p>
<ul>
  <li>Write handlers for requests with different HTTP verbs at different URL paths (routes).</li>
  <li>Integrate with ‚Äúview‚Äù rendering engines in order to generate responses by inserting data into templates.</li>
  <li>Set common web application settings like the port to use for connecting, and the location of templates that are used for rendering the response.</li>
  <li>Add additional request processing ‚Äúmiddleware‚Äù at any point within the request handling pipeline.</li>
</ul>

<h2 id="why-do-we-use-express">Why do we use Express?</h2>

<p>Think about how and why we use jQuery on the front-end. Vanilla JavaScript can be verbose and difficult to read. jQuery came along to give developers a nicer-looking syntax to perform the same operations. It was a library built to abstract the trickier parts of JavaScript and make them easier to write and work with. Express was built for very similar reasons.</p>

<p>Just like browser-based JavaScript, the syntax for using plain Node.js isn‚Äôt the friendliest. Node gives you enough low-level features to build the back-end of an application, but Express is a light layer built on top of Node to make these low-level features a little easier to read and write.</p>

<h2 id="advantages-of-express">Advantages of Express</h2>

<p>While Node.js provides us with all of the functionality we need for our back-ends, writing this logic without Express is more difficult to make sense of and maintain. The two biggest advantages of Express are:</p>

<ol>
  <li>the collection of helpful utilities and conveniences that abstract away the Node.js complexity. (e.g. sending a single image file in raw Node.js is quite complex, but can be done in just one line with express)</li>
  <li>the ability to refactor request handlers into smaller pieces that are more modular and maintainable. (Node.js, by default, requires you to create one large request handler, which makes your logic more rigid and difficult to refactor)</li>
</ol>

<h2 id="request-flow">Request Flow</h2>

<p>When we are just using Node.js, the flow of a single request might look like this:</p>

<p><img src="https://raw.githubusercontent.com/turingschool/front-end-curriculum/gh-pages/assets/images/lessons/express/node-only-flow.png" alt="node only" /></p>

<p>When we add Express, there a couple of additional steps added to the flow of a request:</p>

<p><img src="https://raw.githubusercontent.com/turingschool/front-end-curriculum/gh-pages/assets/images/lessons/express/express-flow.png" alt="express flow" /></p>

<p>While the Express flow might look more complex, it actually makes the developer‚Äôs job a lot easier. In this flow, the developer is only responsible for the ‚ÄòMiddleware‚Äô part of the process. This replaces the single request handler function that you would write without Express. Writing middleware for Express is a lot easier to write and more maintainable because of the ‚ÄòExpress‚Äô step that abstracts the complex logic for us.</p>

<h2 id="routing--middleware">Routing &amp; Middleware</h2>

<p>Earlier we mentioned that with plain Node.js, you would create a single function to handle requests. This single function can get large and unwieldy as your application grows in complexity. Express provides routing methods(<code class="highlighter-rouge">.get</code>, <code class="highlighter-rouge">.post</code>, etc.) that allow you to break this single function into many smaller functions that only handle one thing at a time.</p>

<p>Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls. Our code will be concerned with responding to client requests to different URLs with different methods (GET, POST, etc).</p>

<p>Let‚Äôs pick apart the structure of how we define an Express route:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>In the above example, our express app (denoted by <code class="highlighter-rouge">app</code>), is handling a <code class="highlighter-rouge">GET</code> request to <code class="highlighter-rouge">'/'</code>. The second parameter in this call is our callback that defines how we‚Äôre actually going to handle what happens when a user makes a <code class="highlighter-rouge">GET</code> request to <code class="highlighter-rouge">'/'</code>. The callback takes two parameters: the request (<code class="highlighter-rouge">request</code>) and the response (<code class="highlighter-rouge">response</code>). In this example, our hander is simply sending back a response (<code class="highlighter-rouge">response.send</code>) with the text ‚ÄòHello World!‚Äô.</p>

<p>This pattern is exactly how we can define and handle any routes in an Express application. There are four main pieces to this code:</p>

<ul>
  <li><code class="highlighter-rouge">app</code> - the instance of our Express application</li>
  <li>a METHOD - the method specified when the request is made from the client. (e.g. <code class="highlighter-rouge">GET</code>, <code class="highlighter-rouge">POST</code>, <code class="highlighter-rouge">PUT</code>, <code class="highlighter-rouge">DELETE</code>)</li>
  <li>a PATH - the endpoint that we are requesting</li>
  <li>a HANDLER - the function we write that contains the logic for how the request should be dealt with, and what kind of response it should return</li>
</ul>

<h2 id="getting-started-with-express">Getting Started with Express</h2>

<p>Let‚Äôs go ahead and install some dependencies that we‚Äôll need to get things rolling.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir secret-box
cd secret-box
npm init
npm i express --save
npm i --save-dev mocha chai
touch server.js
</code></pre></div></div>

<p>FYI - running <code class="highlighter-rouge">npm init</code> builds our <code class="highlighter-rouge">package.json</code> file.</p>

<p>Let‚Äôs get a simple server running:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">It</span><span class="se">\'</span><span class="s1">s a secret to everyone.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// set the port for Express to run on</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</code></pre></div></div>

<p>Fire up the server using <code class="highlighter-rouge">node server.js</code> and visit <code class="highlighter-rouge">http://localhost:3000/</code> to enjoy in the fruits of your copy and pasting labor.</p>

<p>That was easy enough. Can we make this simple app a little less simple, though?</p>

<p>Let‚Äôs give our application a name and have our server log to its console a confirmation message that our server is, in fact, running.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Secret Box</span><span class="dl">'</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">It</span><span class="se">\'</span><span class="s1">s a secret to everyone.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2"> is running on port 3000.`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Stop and restart your server. How‚Äôs that look?</p>

<p>Let‚Äôs do one last thing. Let‚Äôs not always assume our application should run locally from port 3000. Environments like Heroku may want to use a different port. We can make this dynamic by switching out our hard-coded listen on port 3000:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Secret Box</span><span class="dl">'</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">It</span><span class="se">\'</span><span class="s1">s a secret to everyone.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2"> is running on </span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">)}</span><span class="s2">.`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>We‚Äôve done it! These are the basic building blocks for creating an Express application. Everything we do from here on will be built upon this or something very similar.</p>

<h2 id="unit-testing-our-server">Unit Testing Our Server</h2>

<p>Alright, we have a server and we can test it by visiting the page manually. But, testing by hand gets old pretty fast. It would be nice if we could have some kind of automated testing, right? Yea, I agree. We are going to need to make some modifications to your existing little application, though.</p>

<p>As it stands, whenever <code class="highlighter-rouge">server.js</code> is run, it fires up the web server. Generally speaking, this is what we want if we‚Äôre just running <code class="highlighter-rouge">node server.js</code>. But it‚Äôs not necessarily what we want if we‚Äôre trying to grab it from our tests to poke at it.</p>

<p>In that scenario, we <em>do not</em> want it to just start up all on it‚Äôs own.</p>

<p>What we need to do is to add some introspection and see if our application is being run directly or being required from another file. We can do this by modifying our server slightly.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2"> is running on </span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">)}</span><span class="s2">.`</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>A Quick Note for Rubyists</strong>: You may have seen something similar in Ruby using <code class="highlighter-rouge">if __FILE__ == $0</code>. Ruby is comparing the current file location to the name of the file being run. If they are the same, then its the file being run, if it‚Äôs different, then the current file is being required by another file.</p>
</blockquote>

<p>If <code class="highlighter-rouge">server.js</code> is being run directly, then it has no parent and we should fire up the server. But, if it‚Äôs being required, then the file requiring <code class="highlighter-rouge">server.js</code> is its parent and we should not spin up the server automatically.</p>

<p>The other thing we need to do is to export the application.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="spinning-up-our-test-server">Spinning Up Our Test Server</h3>

<p>Enough about modules and their parents. Let‚Äôs get our tests set up.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir test
touch test/server-test.js
</code></pre></div></div>

<p>Let‚Äôs run <code class="highlighter-rouge">mocha</code> now to make sure everything is gravy.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm test
</code></pre></div></div>

<p>We‚Äôll go ahead and use Chai as our assertion library. I‚Äôll go ahead and require that along with our application.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// test/server-test.js</span>
<span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Just to keep our spirits up, let‚Äôs start with the simplest possible test.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">assert</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Server</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should exist</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
  <span class="p">});</span>

<span class="p">});</span>
</code></pre></div></div>

<p>Now, we‚Äôll want to start our server up before we run our tests. I don‚Äôt want to worry about my testing version trying to use the same port as my development server. So, I‚Äôll pick another port that makes me happy. (You might also consider reading a port from a environment variable or passing one in as a command line argument. I decided not to in the name of not adding too much complexity to this tutorial.)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Okay, so what‚Äôs going on here? Well, before we run our server tests, we‚Äôre going to tell the server to listen on port 9876. For asynchronous test maneuvers, we can use <code class="highlighter-rouge">done()</code> to let Mocha know when we‚Äôre ready to move on.</p>

<p>In Node, it‚Äôs common for callback functions to take an error object as their first parameter if anything went wrong so that you can deal with it. So, if there is an error, then we‚Äôll end with that error. Otherwise, we‚Äôll move on.</p>

<p><code class="highlighter-rouge">app.listen</code> returns an instance of <code class="highlighter-rouge">http.Server</code> that we‚Äôll store in <code class="highlighter-rouge">this.server</code> so that we can close it in the <code class="highlighter-rouge">after</code> hook.</p>

<p>Let‚Äôs go ahead and run our tests using <code class="highlighter-rouge">npm test</code> to make sure nothing has broken.</p>

<h3 id="making-requests-to-our-server">Making Requests To Our Server</h3>

<p>Now that we have our server running in our tests. We can make requests to it. We could totally do this using the built-in <code class="highlighter-rouge">http</code> module but that‚Äôs pretty low-level. Let‚Äôs use a library called <a href="https://github.com/request/request">Request</a> instead.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i request --save-dev
</code></pre></div></div>

<blockquote>
  <p><strong>Quick Note for Rubyists</strong>: If you‚Äôre familiar with Ruby, Request is a lot like Hurley or Faraday.</p>
</blockquote>

<p>We‚Äôre saving it to our development dependencies but you could also use Request to make requests against external APIs. In that case it would go into our regular dependencies‚Äîusing <code class="highlighter-rouge">--save</code> instead of <code class="highlighter-rouge">--save-dev</code>.</p>

<p>In <code class="highlighter-rouge">test/server-test.js</code>, we‚Äôll require Request.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">request</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Alright, we‚Äôve set everything up. Now, we can write our first test. Our app is pretty simple. So, let‚Äôs start by making sure that we have a <code class="highlighter-rouge">/</code> endpoint and that it returns a 200 response.</p>

<p>Nested in our <code class="highlighter-rouge">describe('Server')</code> section, we‚Äôll add a <code class="highlighter-rouge">describe('GET /')</code> section as well. Our test suite will look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">assert</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">request</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Server</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should exist</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Our tests will go here.</span>
  <span class="p">});</span>

<span class="p">});</span>
</code></pre></div></div>

<p>Now, we‚Äôll write a test that will send a request to the <code class="highlighter-rouge">/</code> endpoint on our server and verify that we did in fact receive a 200.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 200</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:9876</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Again, it‚Äôs a Node convention to pass any errors as the first argument‚Äîand Request is going to go ahead and follow that convention. We can improve the quality of the error messages we get from our test suite if we catch that error.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 200</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:9876</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="quick-experiment">Quick Experiment</h4>

<p>Change the port in the <code class="highlighter-rouge">before</code> hook to another number. Run the test suite and watch it fail. Now, comment out the error handling we just added and watch it fail. Pay attention to the differences between the two error messages. With the error handling, we get back an error describing what happened when we sent a <code class="highlighter-rouge">GET</code> request to the server. Without it, we get an error about reading a property off <code class="highlighter-rouge">undefined</code>. The latter is kind of okay in this exact case, but hopefully you can use your imagination to figure out how it could be less helpful in other contexts.</p>

<h3 id="request-defaults">Request Defaults</h3>

<p>Another problem with this test is that we hard-coded in the port and the server. First off, this is tedious. Secondly, if we did want to read the port from an environment variable or something like that, this wouldn‚Äôt work. But most importantly: this is tedious.</p>

<p>Request allows us to set defaults. <code class="highlighter-rouge">request.defaults()</code> will return a wrapped version of Request with some of the parameters already applied. (Take a moment and note <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">closures</a> and <a href="http://www.sitepoint.com/currying-in-functional-javascript/">currying</a> in JavaScript.)</p>

<p>In this suite, we‚Äôre always going to be hitting our test server. So, let‚Äôs set those as defaults in the <code class="highlighter-rouge">before</code> hook.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="mi">9876</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span>
    <span class="na">baseUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:9876/</span><span class="dl">'</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We‚Äôre storing our special, wrapped version of Request in a shared property called <code class="highlighter-rouge">this.request</code>. Now, we can update our test to use our wrapped version.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 200</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Awesome. Now, let‚Äôs write a test verifying the content of the page located at <code class="highlighter-rouge">/</code>. You may or may not have noticed that we stored a few things as properties on our application instead of local variables in <code class="highlighter-rouge">server.js</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Secret Box</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>If we stored them as local variables, then they would have been trapped in that modules closure. But, as properties on the application, we can access them other places‚Äîlike our tests and our views.</p>

<p>We used <code class="highlighter-rouge">app.set()</code> to set the port. Conversely, we can use <code class="highlighter-rouge">app.get()</code> to fetch the properties. <code class="highlighter-rouge">app.locals</code> and <code class="highlighter-rouge">app.get()</code> have a lot in common, the former is primarily for things we want to share in our templates and/or tests as the properties persist throughout the lifetime of the application and the latter is for configuration details. Check out some of the special values you can set on app <a href="http://expressjs.com/en/api.html#app.settings.table">here</a>.</p>

<p>Right now, our <code class="highlighter-rouge">/</code> endpoint just says ‚ÄúIt‚Äôs a secret to everyone‚Äù. That‚Äôs neat. Let‚Äôs use a little old fashioned TDD to change that to display the name of our application.</p>

<p>Our test will look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should have a body with the name of the application</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">title</span><span class="p">),</span>
           <span class="s2">`"</span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">}</span><span class="s2">" does not include "</span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">".`</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>As in other test runners‚Äîlike Minitest in Ruby ‚Äî <code class="highlighter-rouge">assert</code> takes a second argument that allows you to provide a custom error message. If you don‚Äôt like the error message, you have no one but yourself to blame.</p>

<p>If we run the test, we‚Äôll see that it fails. Our error message should look something like the following.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) Server / should have a body with the name of the application:

    Uncaught AssertionError: "It's a secret to everyone." does not include "Secret Box".
    + expected - actual

    -false
    +true
</code></pre></div></div>

<p>So, let‚Äôs go ahead and make this test pass. We‚Äôll modify <code class="highlighter-rouge">server.js</code> to respond with the name of the application instead of ‚ÄúHello World!‚Äù.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Run your tests and verify that they pass.</p>

<h3 id="making-a-dynamic-route">Making a Dynamic Route</h3>

<p>When we go to view a tweet or a user, we do something special with the URL to identify which tweet or user. We specify it in the URL itself. URLs‚Äîafter all‚Äîstand for universal resource locator.</p>

<p>Consider the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Take that for a spin with a bunch of different words where <code class="highlighter-rouge">:id</code> should go.</p>

<p>Some things to notice:</p>

<ul>
  <li><code class="highlighter-rouge">response.json</code> is just a short hand for setting the response type as <code class="highlighter-rouge">application/json</code>.</li>
  <li>It automatically serializes our object as JSON.</li>
</ul>

<h3 id="storing-secrets">Storing Secrets</h3>

<p>In addition, let‚Äôs add some data structure for keeping track of some kind of arbitrary data.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<p>Let‚Äôs put some fake data in for now.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">wowowow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">I am a banana</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here is the feature we want to implement: when a user has the correct secret, we want to show them message associated with that <code class="highlighter-rouge">id</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Let‚Äôs go ahead and take this for a spin. It kind of works. If they give us the right <code class="highlighter-rouge">id</code>, they‚Äôll get the message. But they don‚Äôt get an error if they give us an invalid <code class="highlighter-rouge">id</code>. It would be preferable to send them a 404 status code, which let‚Äôs the browser now that the resource was not found.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>  <span class="p">}</span>

  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>It appears we‚Äôre successfully making this work - let‚Äôs add a test though to ensure the correct functionality.</p>

<p>First, we‚Äôll verify that it returns a 404 when we ask for a secret that doesn‚Äôt exist.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">wowowow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">I am a banana</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 404 if the resource is not found</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/bahaha</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">}</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="mi">404</span><span class="p">)</span>
      <span class="nx">done</span><span class="p">()</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>

</code></pre></div></div>

<p>Next, let‚Äôs verify that we‚Äôre returning the correct data.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should have the id and message from the resource</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">wowowow</span><span class="dl">'</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="dl">'</span><span class="s1">wowowow</span><span class="dl">'</span><span class="p">];</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/wowowow</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">id</span><span class="p">),</span>
           <span class="s2">`"</span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">}</span><span class="s2">" does not include "</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">".`</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">message</span><span class="p">),</span>
           <span class="s2">`"</span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">}</span><span class="s2">" does not include "</span><span class="p">${</span><span class="nx">message</span><span class="p">}</span><span class="s2">".`</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>

</code></pre></div></div>

<p><strong>Note: since we aren‚Äôt fully TDDing this app, let‚Äôs make sure we‚Äôre testing the correct pieces of info. Be sure to make your tests above fail by changing something in your code before moving on.</strong></p>

<h3 id="sending-data-with-our-post-request">Sending Data With Our Post Request</h3>

<p>It would be cool if we could store secrets in addition to just being able to retreive the prepopulated ones.</p>

<p>Express did this thing a while back, where they took a bunch of stuff out of the core framework. This makes it smaller and means you don‚Äôt have cruft you‚Äôre not using, but it also means that sometimes you have to mix those things back in. One of those components that was pulled out was the ability to parse the body of an HTTP request. That‚Äôs okay, we can just mix it back in.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i body-parser --save
</code></pre></div></div>

<p>We‚Äôll also need to require and use it in our <code class="highlighter-rouge">server.js</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">body-parser</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}))</span>
</code></pre></div></div>

<p>This will add in support for parsing JSON as well as HTML forms. If you only need one of those, you can go ahead and remove the other. (We‚Äôre only going to use urlencoded for now, but I am leaving it here for reference.)</p>

<p>Here is what my server looks like so far.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">body-parser</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}))</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Secret Box</span><span class="dl">'</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">wowowow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">I am a banana</span><span class="dl">'</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">secrets</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span>

  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">secrets</span> <span class="p">})</span>
<span class="p">})</span>


<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>  <span class="p">}</span>

  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
<span class="p">})</span>


<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2"> is running on </span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">)}</span><span class="s2">.`</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-a-post-route">Creating a POST Route</h3>

<p>Before we create a POST route, let‚Äôs write a test. We‚Äôll check to see that the post route exists.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST /api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="p">})</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should not return 404</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">}</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">notEqual</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="mi">404</span><span class="p">)</span>
        <span class="nx">done</span><span class="p">()</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">})</span>

</code></pre></div></div>
<p>Next, do as little as possible to make this test pass, which maybe something like the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Cool - our POST method is defined. Let‚Äôs write another test to build out the functionality we‚Äôd like. We want to send data to this post route and save it to our <code class="highlighter-rouge">app.locals.secrets</code> for now (eventually we‚Äôll save it to a database).</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should receive and store data</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">I like pineapples!</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">form</span><span class="p">:</span> <span class="nx">message</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">secretCount</span>  <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>

    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">secretCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">`Expected 1 secret, found </span><span class="p">${</span><span class="nx">secretCount</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>

</code></pre></div></div>

<p>Next, we‚Äôll use our super secure method of generating random IDs.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">message</span>

  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This approach has a bunch of flaws:</p>

<ul>
  <li>We‚Äôre storing data in memory, which will be wiped out when the server goes down.</li>
  <li>Using the current time is a terrible idea for a number of reasons. Most obviously, it‚Äôs super easy to guess IDs and steal secrets.</li>
</ul>

<h4 id="the-unhappy-path">The Unhappy Path</h4>

<p>What happens if the user doesn‚Äôt give us a message parameter?</p>

<p>We should tell them that we got some bad data.</p>

<p>In our previous example, we simply stored a new message object that we received from the client-side and sent it back as a successful response. When we successfully create a new record in a collection of application data, we can signal this success to our end-user by setting an <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code</a>. There are many different status codes to use in various situations. Upon a successful ‚Äòcreation‚Äô you‚Äôll want to set the status code to <code class="highlighter-rouge">201</code> before sending back the response object.</p>

<p>Take a minute to look through some of the other available status codes that can be used. These are a quick way to determine what happened to our request when it was sent to the server, and are easily viewed in the ‚ÄòNetwork‚Äô panel of your browser developer tools.</p>

<p>Status codes are especially important when handling errors for a request. Let‚Äôs add some error handling to our previous example. We are going to assume that ‚Äòmessage‚Äô is a required property when submitting a new message, and we want to respond with an error if it‚Äôs missing:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/secrets</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">422</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
      <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">No message property provided</span><span class="dl">'</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">secrets</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">message</span>

  <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>If either property is missing, we will see an error in the Network tab of our developer tools where the response is highlighted in red and has a status of <code class="highlighter-rouge">422</code> (client error). The response details will tell us exactly which property we are missing based on the error message we sent along with the 422 response.</p>

<p>It‚Äôs important to handle errors and write descriptive error messages so that others can more easily debug their code and quickly fix whatever problem they are running into. Setting appropriate status codes and being as specific as possible with the response message is the best way to write a user-friendly API.</p>

<p>It would also be nice if we used the correct status code on the successful response.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">message</span> <span class="p">})</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>You‚Äôve built your first Express app!!!</p>

<p>So, we went super deep in testing a few very small pieces of an Express application.</p>

<p>Hopefully, you noticed the following:</p>

<ul>
  <li>Express applications aren‚Äôt anything special, you can pass them around and require them just like any other object in JavaScript.</li>
  <li>Doing stuff by hand can be hard. Typically, we‚Äôre used to having large frameworks like Rails abstract a lot of stuff away from us. It‚Äôs definitely a trade off and there is no right answer. We worked pretty hard on this application, but we don‚Äôt really have much in the way of validation or any abstractions around fetching and persisting models.</li>
  <li>Asynchronous code can be hard, but it has some powerful advantages. For example, Mocha is able to run multiple tests simultaneously while we wait for a given request to come back. This means as our application grows, the test suite will likely be faster than a similar sized Ruby code base.</li>
</ul>

<p>There are frameworks and tools built on top of Express that make it easier to build complicated applications. If this is something you‚Äôre interested in, check out <a href="http://endpointsjs.com/">Endpoints</a>.</p>

<p>If you‚Äôd like another tutorial walk through of using Express, check out the <a href="https://github.com/turingschool/backend-curriculum-site/blob/gh-pages/module4/lessons/express_tutorial.md">Express Train</a></p>
:ET