I"ò'<h2 id="ruby-project-etiquette-gemfiles-bundler--load_path">Ruby Project Etiquette: Gemfiles, Bundler, &amp; LOAD_PATH</h2>

<p>In this session we‚Äôre going to go over some common best practices for organizing and managing code in our Ruby projects. By the end of the lesson, you should be comfortable with the following tasks.</p>

<ul>
  <li>How to build a gemfile and why you‚Äôd want to</li>
  <li>What <code class="highlighter-rouge">$LOAD_PATH</code> is and how it helps you</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Gem</li>
  <li>Gemfile</li>
  <li>$LOAD_PATH</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>How do you manage dependencies in your project?</li>
</ul>

<h2 id="gems--gemfiles">Gems &amp; Gemfiles</h2>

<ul>
  <li>A ‚ÄúGem‚Äù is a packaged up piece of ruby code designed to be shared with others (i.e. a library). <a href="https://rubygems.org/">RubyGems</a> is the community-run repository and website where gems can be published so other users can download and use them easily.</li>
  <li><a href="http://bundler.io/">Bundler</a> is the popular dependency manager rubyists use to download and manage gems. Bundler versions are unique to Ruby versions, if you change Ruby versions you must have that Ruby‚Äôs Bundler version installed also.</li>
  <li>Similar to a <code class="highlighter-rouge">Rakefile</code>, a <code class="highlighter-rouge">Gemfile</code> lives at the <strong>root of your project</strong> and contains a list of the gems that project <em>depends on</em>.</li>
</ul>

<p><strong>Sample Gemfile:</strong></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s2">"https://rubygems.org"</span>

<span class="n">gem</span> <span class="s2">"minitest"</span>
</code></pre></div></div>

<p>To install the dependencies listed in your Gemfileyou would run <code class="highlighter-rouge">bundle</code> (<strong>Can you guess from where?</strong>). Running bundle will also create a special file called <code class="highlighter-rouge">Gemfile.lock</code> in your project root. This file records which version of each gem your project relies upon. You should commit both of these files to source control so that other users of your application use the same gem versions and things don‚Äôt break.</p>

<h3 id="exercise---making-a-gemfile">Exercise - Making A Gemfile</h3>

<ol>
  <li>Use the directory you created in the Rake section of <a href="../ruby_project_ettiquette">Ruby Project Ettiquette Part 1</a></li>
  <li>Add a method <code class="highlighter-rouge">jam</code> to your <code class="highlighter-rouge">Event</code> class.</li>
  <li>In the file, enter the following code to make a request using the Faraday gem:</li>
</ol>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"faraday"</span>

<span class="k">def</span> <span class="nf">jam</span>
  <span class="nb">puts</span> <span class="no">Faraday</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'https://corgiorgy.com/'</span><span class="p">).</span><span class="nf">body</span>
<span class="k">end</span>
</code></pre></div></div>

<ol>
  <li>Create an empty <code class="highlighter-rouge">Gemfile</code> in the directory</li>
  <li>Use GOOGLE to determine what to add to the gemfile to install the <code class="highlighter-rouge">faraday</code> gem</li>
  <li>Then use <code class="highlighter-rouge">bundle</code> to install this gem</li>
  <li>Run your file to see that your code works and how Faraday helps you read webpages</li>
</ol>

<h2 id="load-path-crash-course">Load Path Crash Course</h2>

<p>How does Ruby know where we look when we <code class="highlighter-rouge">require</code> something? Why is it we say <code class="highlighter-rouge">require "minitest"</code> but <code class="highlighter-rouge">require "./lib/enigma"</code> when obviously the <code class="highlighter-rouge">minitest</code> file is not sitting in the root of our project.</p>

<h3 id="what-is-the-load_path">What is the <code class="highlighter-rouge">$LOAD_PATH</code></h3>

<p>$LOAD_PATH is an internal structure (actually an <code class="highlighter-rouge">Array</code>) that Ruby uses to keep track of where it can look to find files it needs (or we ask it to look for).</p>

<p>Open a <code class="highlighter-rouge">pry</code> or <code class="highlighter-rouge">irb</code> session and type in <code class="highlighter-rouge">$LOAD_PATH</code>. You should get a response of something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/gems/did_you_mean-1.0.0/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/gems/executable-hooks-1.3.2/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/extensions/x86_64-darwin-15/2.3.0/executable-hooks-1.3.2"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/gems/bundler-unload-1.0.2/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/gems/rubygems-bundler-1.4.4/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0@global/gems/bundler-1.12.5/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/slop-3.6.0/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/method_source-0.8.2/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/pry-0.10.4/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/coderay-1.1.1/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/byebug-9.0.5/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/extensions/x86_64-darwin-15/2.3.0/byebug-9.0.5"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/pry-byebug-3.4.0/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/gems/ruby-2.3.0/gems/pry-rails-0.3.4/lib"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby/2.3.0/x86_64-darwin15"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/site_ruby"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/vendor_ruby/2.3.0"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/vendor_ruby/2.3.0/x86_64-darwin15"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/vendor_ruby"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0"</span><span class="p">,</span>
 <span class="s2">"/Users/your_username/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/x86_64-darwin15"</span><span class="p">]</span>
</code></pre></div></div>

<p>The default <code class="highlighter-rouge">$LOAD_PATH</code> will contain Ruby itself, files in the standard library (hence we can <code class="highlighter-rouge">require "pry"</code> without a path), <strong>as well as our current directory</strong>. This is why <code class="highlighter-rouge">require</code>, by default, works relative to the place from which you code is <em>being run</em>, and thus why we should try to stick with the habit of running code from project root.</p>

<p>Your OS has a similar construct called <code class="highlighter-rouge">PATH</code> which it uses to find executable commands. Check it out by running <code class="highlighter-rouge">echo $PATH</code> at your terminal. This is how it knows what to execute when we type a simple command like <code class="highlighter-rouge">git</code></p>

<h3 id="exercise-messing-with-load-path">Exercise: Messing with Load Path</h3>

<ol>
  <li>Create a ruby file called <code class="highlighter-rouge">print_stuff.rb</code> in the directory <code class="highlighter-rouge">/tmp</code> on your machine. <code class="highlighter-rouge">/tmp</code> is two levels up from your base user directory (<code class="highlighter-rouge">cd ~../..</code>)</li>
  <li>In that file define a simple method that prints a line of text. Call it <code class="highlighter-rouge">print_stuff</code></li>
  <li>Go to your <strong>Home Directory</strong> (<code class="highlighter-rouge">cd ~</code>) and open a pry or IRB session</li>
  <li>Try to require <code class="highlighter-rouge">print_stuff</code> in irb/pry with <code class="highlighter-rouge">$ require 'print_stuff'</code>. You will get an error.</li>
  <li>Use ruby to ADD the path <code class="highlighter-rouge">../../tmp</code> to your load path (remember, <code class="highlighter-rouge">$LOAD_PATH</code> is just an array so you can use normal Ruby array methods on it)</li>
  <li>Try to require <code class="highlighter-rouge">print_stuff</code> again using the command in 4 (above). It will return true.</li>
</ol>

<h3 id="check-for-understanding">Check for Understanding</h3>

<p>Describe to a neighbor why the exercise above worked.</p>

<h3 id="extension">Extension</h3>

<p>If you finish early, scan this article from Joshua Paling on <a href="http://joshuapaling.com/blog/2015/03/22/ruby-load-path.html">Load Path</a>.</p>

<h2 id="wrap-up">Wrap Up</h2>
<ul>
  <li>What is a gem? Why would you use one?</li>
  <li>What is a Gemfile and a Gemfile.lock? Why would you use one?</li>
  <li>What is a load path? How can you alter your load path?</li>
</ul>
:ET