I"á<h2 id="intro-to-using-fetch">Intro to using Fetch</h2>
<p>Every fetch request we make will return a Promise object that contains our response data. This allows us to easily react to the type of response we get once itâ€™s available.</p>

<p>Handling the response of a fetch request might look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">({</span> <span class="nx">error</span> <span class="p">}))</span>
</code></pre></div></div>

<p>While we wait for the server to return our response, the rest of our application can continue executing other code in the meantime. Once the response object is available, our firstÂ <code class="highlighter-rouge">.then()</code>Â block will fire. The response object returns a lot of extra information that we donâ€™t necessarily need. All we want in this scenario is a JSON object of our discussions data which we can get by callingÂ <code class="highlighter-rouge">response.json()</code>.</p>

<p>Converting the body to a JSON data structure withÂ <code class="highlighter-rouge">response.json()</code>Â actually returns another Promise. (Converting the data to a particular type can take significant time, which is why we have this additional Promise step before we can begin working with out data.) Because weâ€™re getting another Promise object back, we can simply chain anotherÂ <code class="highlighter-rouge">.then()</code>Â block where we actually receive our project data. We can then render it to the DOM with our imaginary <code class="highlighter-rouge">console.log</code> function. Notice how we are using another <code class="highlighter-rouge">.then()</code> statement. This is called <code class="highlighter-rouge">Promise Chaining</code>. We do this because each <code class="highlighter-rouge">.then()</code> results in a new Promise.</p>

<p>If for any reason the request failed, theÂ <code class="highlighter-rouge">.catch()</code>Â block will be fired and we will log the error to the console. In most cases, the <code class="highlighter-rouge">catch</code> will not fire off unless the server returns an error code that denotes complete failure. This usually means the <code class="highlighter-rouge">catch</code> wonâ€™t be reached unless itâ€™s a 500 level error.</p>

<h2 id="hedgehog-party">Hedgehog Party</h2>
<p>Head over to the <a href="https://github.com/turingschool-examples/fetch-hedgehog-party">Hedgehog Party Repo</a> and take a quick look at the README. Once you understand how the API works, weâ€™ll need to do one more thing.</p>

<p>Remember that All your Express base are belong to us <a href="https://github.com/turingschool-examples/all-your-base">All your Express base are belong to us</a> repo? Letâ€™s use that again and clone it down. Weâ€™ll use that repo to understand how fetch works with an external API. Since weâ€™ll be using an Express backend to request information from the Hedgehog Party API, weâ€™ll need to pull in a new NPM package called <code class="highlighter-rouge">node-fetch</code>. You can find how to download this <a href="https://www.npmjs.com/package/node-fetch">right here</a>.</p>

<p>Once you have that setup and ready to go, letâ€™s try to hit the first endpoint from the Hedgehog Party repo and grab all of the invites.</p>
:ET