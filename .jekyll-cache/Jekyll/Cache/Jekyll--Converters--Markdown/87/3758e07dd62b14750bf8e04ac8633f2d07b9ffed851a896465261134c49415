I"m<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>set up relationships between tables at the database level using foreign keys in migrations</li>
  <li>set up relationships between tables at the model level using <code class="highlighter-rouge">has_many</code> and <code class="highlighter-rouge">belongs_to</code></li>
  <li>use rake commands to generate migration files, and migrate the database</li>
  <li>modify a migration in order to create or modify a table</li>
  <li>interpret <code class="highlighter-rouge">schema.rb</code></li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>primary key</li>
  <li>foreign key</li>
  <li>one-to-one</li>
  <li>one-to-many</li>
  <li>many-to-many</li>
</ul>

<h2 id="warmup">Warmup</h2>

<p>Describe the relationship between the following entities. Consider the relationship from both sides.</p>

<ul>
  <li>Person and Social Security number</li>
  <li>Owner and pet</li>
  <li>Student and module</li>
  <li>Film and genre</li>
  <li>Book and author</li>
</ul>

<h2 id="lecture-30-min">Lecture (~30 min)</h2>

<p>Thus far we’ve talked about tables in relational databases, but we haven’t talked about how to create the relationships between those tables. These relationships actually  exist at two levels: 1) the database, 2) the ActiveRecord model.</p>

<h3 id="types-of-relationships">Types of Relationships</h3>

<p>Before we begin talking about how to create relationships at the database level, let’s talk about the types of relationships that could potentially exist:</p>

<ul>
  <li>One-to-One: e.g. person/social security number</li>
  <li>One-to-Many: e.g. student/module</li>
  <li>Many-to-Many: e.g. Book/author</li>
</ul>

<h3 id="one-to-manyone-to-one">One-to-Many/One-to-One</h3>

<h4 id="database-level">Database Level</h4>

<p>How do we create these relationships at the database level? With a column holding foreign keys. A foreign key is a column in a database holding primary keys for other tables in the database.</p>

<p>For example, assume we have tables for students and courses (we’re going to use <code class="highlighter-rouge">course</code> here instead of <code class="highlighter-rouge">module</code> because module has a specific meaning within Ruby).</p>

<p>Our courses table might hold the following attributes:</p>

<ul>
  <li>id</li>
  <li>title</li>
  <li>description</li>
</ul>

<p>Meanwhile, our students table might have the following attributes:</p>

<ul>
  <li>id</li>
  <li>first_name</li>
  <li>last_name</li>
  <li>course_id</li>
</ul>

<p>The <code class="highlighter-rouge">course_id</code> on student indicates that there is a one-to-many relationship between course and student. More specifically, it indicates that a module has many students and a student belongs to a module. How do we know this?</p>

<p>Sample courses table:</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>title</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>BE M1</td>
      <td>OOP with Ruby</td>
    </tr>
    <tr>
      <td>2</td>
      <td>BE M2</td>
      <td>Intro to Rails</td>
    </tr>
    <tr>
      <td>3</td>
      <td>BE M3</td>
      <td>APIs in Rails</td>
    </tr>
    <tr>
      <td>4</td>
      <td>BE M4</td>
      <td>JavaScript</td>
    </tr>
  </tbody>
</table>

<p>Sample students table:</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>first_name</th>
      <th>last_name</th>
      <th>course_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Sal</td>
      <td>Espinosa</td>
      <td>4</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Ian</td>
      <td>Douglas</td>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Josh</td>
      <td>Mejia</td>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Megan</td>
      <td>McMahon</td>
      <td>1</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Dione</td>
      <td>Wilson</td>
      <td>2</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Brian</td>
      <td>Zanti</td>
      <td>1</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Mike</td>
      <td>Dao</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<p>We can use this same pattern to create a one-to-one relationship, though we would need to validate the uniqueness of the foreign key (e.g. <code class="highlighter-rouge">course_id</code>) above.</p>

<h4 id="model-level">Model Level</h4>

<p>We need to provide ActiveRecord with some additional information to use these relationships at the model level.</p>

<p>In the example above, we would need to add the following line to our Course model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">has_many</span> <span class="ss">:students</span>
</code></pre></div></div>

<p>and the following line to our Student model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">belongs_to</span> <span class="ss">:course</span>
</code></pre></div></div>

<p>Notice that <code class="highlighter-rouge">:course</code> is singular, and <code class="highlighter-rouge">:students</code> is plural.</p>

<p>Adding these lines gives us access to additional methods on our models.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Student</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">course</span>
<span class="no">Course</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">students</span>
<span class="n">m2</span> <span class="o">=</span> <span class="no">Course</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">m2</span><span class="p">.</span><span class="nf">students</span>

<span class="n">m4</span> <span class="o">=</span> <span class="no">Course</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">amy</span> <span class="o">=</span> <span class="n">m4</span><span class="p">.</span><span class="nf">students</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Amy"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Holt"</span><span class="p">)</span>

<span class="n">cory</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Cory"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Westerfield"</span><span class="p">)</span>
<span class="n">m4</span><span class="p">.</span><span class="nf">students</span> <span class="o">&lt;&lt;</span> <span class="n">cory</span>
</code></pre></div></div>

<h2 id="practice-30-min">Practice (~30 min)</h2>

<p>We’ll use the <a href="https://github.com/turingschool-examples/set-list">Set List repo</a>.</p>

<p>Let’s add an <code class="highlighter-rouge">playlist</code> table to our app and then create relationships between the existing songs and their playlist.</p>

<h3 id="creating-the-playlist-table">Creating the Playlist Table</h3>

<p>Create a new migration to create the new table.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:create_migration <span class="nv">NAME</span><span class="o">=</span>create_playlists
</code></pre></div></div>

<p>Use <code class="highlighter-rouge">ActiveRecord</code>’s <code class="highlighter-rouge">create_table</code> method to specify what we want to name this table and the fields it will include. For now, a playlist only needs a name.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreatePlaylists</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">5.1</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:playlists</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:name</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake db:migrate</code> to run your migrations against the database.</p>

<p>Inspect the <code class="highlighter-rouge">schema.rb</code> file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20160217022804</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">"songs"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">text</span>     <span class="s2">"title"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"length"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"play_count"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span>
  <span class="k">end</span>

  <span class="n">create_table</span> <span class="s2">"playlists"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">text</span>     <span class="s2">"name"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<h3 id="create-the-playlist-model">Create the Playlist Model</h3>

<p>Add a <code class="highlighter-rouge">playlist</code> model:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch app/models/playlist.rb
</code></pre></div></div>

<p>Inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Playlist</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’ll add some playlists to our database using Tux, an interactive console for your app:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">tux</span>
<span class="n">funky_beats</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Funky Beats 2018"</span><span class="p">)</span>
<span class="n">dance_party</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"1980's Dance Party"</span><span class="p">)</span>
<span class="n">power_ballads</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Power Ballads"</span><span class="p">)</span>
<span class="n">classic_rock</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Classic Rock"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="playlists-and-songs---how-do-they-relate">Playlists and Songs - How do they relate?</h3>

<p>Let’s assume that a song can only belongs to a single playlist, and a playlist has many songs. How will we connect these two tables?</p>

<p>If a playlist has many songs, then we’ll add a foreign key <strong>on the song</strong> model. This allows a song to <strong>belong</strong> to a playlist.</p>

<h4 id="relating-the-data-at-the-database-level-first">Relating the data at the database level first</h4>

<p>Before ActiveRecord can understand the relationship between two tables, we have to do some work in the database first.</p>

<p>We’ll need to add a <code class="highlighter-rouge">playlist_id</code> column to the <code class="highlighter-rouge">songs</code> table. An individual <code class="highlighter-rouge">Song</code> will always have a reference to one <code class="highlighter-rouge">Playlist</code> by using the <code class="highlighter-rouge">playlist_id</code> field.</p>

<p>Let’s add the migration to add a <code class="highlighter-rouge">playlist_id</code> to the <code class="highlighter-rouge">songs</code> table.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:create_migration <span class="nv">NAME</span><span class="o">=</span>add_playlist_id_to_songs
</code></pre></div></div>

<p>Inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AddPlaylistIdToSongs</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">5.1</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">add_column</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">:playlist_id</span><span class="p">,</span> <span class="ss">:integer</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p>Let’s migrate: <code class="highlighter-rouge">rake db:migrate</code> and take a look at <code class="highlighter-rouge">schema.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20160217022905</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">"songs"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">text</span>     <span class="s2">"title"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"length"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"play_count"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"playlist_id"</span>
  <span class="k">end</span>

  <span class="n">create_table</span> <span class="s2">"playlists"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="s2">"name"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<h3 id="associating-the-playlist-and-song-models-in-our-application">Associating the Playlist and Song Models in our Application</h3>

<p>At a database level, we have what we need for now, but our application still isn’t aware that these models are somehow working together.</p>

<p>Let’s add an <code class="highlighter-rouge">ActiveRecord</code> association to our <code class="highlighter-rouge">Playlist</code> to describe the relationship between a playlist and a song. This will make it easy to find all of a specific Playlist’s songs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Playlist</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:songs</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, when we have an <strong>instance</strong> of a single <code class="highlighter-rouge">Playlist</code>, we have access to a method called <code class="highlighter-rouge">songs</code> on that instance.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_playlist</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Funky Beats 2018'</span><span class="p">)</span>
<span class="c1"># let's imagine some songs were added to that playlist</span>
<span class="nb">puts</span> <span class="n">my_playlist</span><span class="p">.</span><span class="nf">songs</span>
<span class="c1"># this would give us the list of all songs associated with that playlist.</span>
</code></pre></div></div>

<p>Behind the scenes, ActiveRecord and the database will go through the <code class="highlighter-rouge">songs</code> table and find all songs where the <code class="highlighter-rouge">playlist_id</code> attribute is the same as the primary key <code class="highlighter-rouge">id</code> of the playlist it’s being called on.</p>

<p>Curious about how this is implemented? Check out <a href="http://callahanchris.github.io/blog/2014/10/08/behind-the-scenes-of-the-has-many-active-record-association/">this blog post</a>.</p>

<p>A song has the opposite relationship with a playlist. Because a song can only have a single <code class="highlighter-rouge">playlist_id</code> value, it “belongs” to that playlist, and only that playlist. <code class="highlighter-rouge">ActiveRecord</code> gives us another association method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Song</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:playlist</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This will allow us to get an instance of a single song, and call <code class="highlighter-rouge">song.playlist</code> to get back the <code class="highlighter-rouge">Playlist</code> object associated with that song. Behind the scenes, this is searching the database for the playlist that has the primary key <code class="highlighter-rouge">id</code> of the <code class="highlighter-rouge">playlist_id</code> column on the <code class="highlighter-rouge">song</code> instance.</p>

<p>If you have a <code class="highlighter-rouge">has_many</code> relationship on a model, it is <strong>not</strong> necessary to have a <code class="highlighter-rouge">belongs_to</code> on another model.</p>

<p>Let’s test it out:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">tux</span>
<span class="n">classic_rock_playlist</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Classic Rock"</span><span class="p">)</span>
<span class="n">classic_rock_playlist</span><span class="p">.</span><span class="nf">songs</span>
<span class="c1"># returns a collection of associated Song objects</span>

</code></pre></div></div>

<p><strong>Why is our result empty?</strong></p>

<p>We’ve added a <code class="highlighter-rouge">playlist_id</code> field to each <code class="highlighter-rouge">Song</code>, but we haven’t given that field a value on any of our existing songs.</p>

<p>There are a few different ways to associate your data. If both objects are already created, but we want to associate them, we could do the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># let's imagine we've already added this song:</span>
<span class="c1"># Song.create(title: "Don't Stop Believin'", length: 251, play_count: 760847)</span>
<span class="n">classic_rock_playlist</span><span class="p">.</span><span class="nf">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Stop Believin'"</span><span class="p">)</span>
<span class="o">...</span><span class="n">and</span> <span class="n">so</span> <span class="n">on</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">&lt;&lt;</code> shovel operator will automatically build the association for us, through ActiveRecord, to populate the song’s <code class="highlighter-rouge">playlist_id</code>. This isn’t super clear, though, so here’s another method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Song</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Stop Belivin'"</span><span class="p">).</span><span class="nf">update</span><span class="p">(</span><span class="ss">playlist_id: </span><span class="n">classic_rock_playlist</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
</code></pre></div></div>

<p>The better way, and our preferred way, is to associate data upon creation:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">classic_rock_playlist</span> <span class="o">=</span> <span class="no">Playlist</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Classic Rock"</span><span class="p">)</span>
<span class="n">classic_rock_playlist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Stop Believin'"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">251</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">760847</span><span class="p">)</span>
</code></pre></div></div>

<p>This will create a new <code class="highlighter-rouge">Song</code> record AND place our playlist’s <code class="highlighter-rouge">id</code> is in the <code class="highlighter-rouge">playlist_id</code> field in the song’s database record.</p>

<h3 id="updating-our-view">Updating our View</h3>

<p>Let’s update our <code class="highlighter-rouge">songs/index.erb</code> view to show all the songs in each playlist:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>All Songs<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"songs"</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@songs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;h3&gt;</span><span class="cp">&lt;%=</span> <span class="n">song</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;p&gt;</span>Song length: <span class="cp">&lt;%=</span> <span class="n">song</span><span class="p">.</span><span class="nf">length</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Playlist: <span class="cp">&lt;%=</span> <span class="n">song</span><span class="p">.</span><span class="nf">playlist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Play Count: $<span class="cp">&lt;%=</span> <span class="n">song</span><span class="p">.</span><span class="nf">play_count</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">shotgun</code> from the command line, then navigate to <code class="highlighter-rouge">localhost:9393/songs</code>. You should see the songs listed along with their respective playlist.</p>

<h3 id="extension">Extension</h3>

<p>What would this look like for a many-to-many relationship? How do you structure the tables in the database? What do the migrations look like to get this done? How are your models impacted? How will this impact data prep in tests or controller methods?</p>

<h2 id="wrapup-30-min">WrapUp (~30 min)</h2>

<ul>
  <li>How do you associate two resources on the database level?</li>
  <li>How do you associate two resources on the model level?</li>
  <li>How do you associate two resources when doing data prep in a test or controller?</li>
  <li>Compare and contrast a primary key and foreign key. Where do each live?</li>
  <li>Write out the steps you took to create the relationship and display the information for playlists and songs.</li>
</ul>
:ET