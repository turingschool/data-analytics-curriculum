I"ö%<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand what a fixture is and how to create one</li>
  <li>Understand what stubbing is, how to stub in Ruby with Minitest, when to use it</li>
  <li>Understand what mocking is, how to mock in Ruby with Minitest, and when to use it</li>
  <li>What‚Äôs the difference between behavior and state testing</li>
</ul>

<h2 id="background-concepts">Background Concepts</h2>

<ul>
  <li>Test Doubles(dummy, fake, stub, spies, mocks). Further reading:</li>
  <li>Basic: Martin Fowler: link <a href="http://www.martinfowler.com/bliki/TestDouble.html">here</a></li>
  <li>Advanced: Gerard Meszaros link <a href="http://xunitpatterns.com/Test%20Double.html">here</a></li>
  <li>Four-phase testing
    <ol>
      <li>Setup - sometimes in test, sometimes separate method</li>
      <li>Exercise</li>
    </ol>
    <ol>
      <li>Verify</li>
      <li>Teardown</li>
    </ol>
  </li>
  <li>System Under Test (SUT) or Object Under Test</li>
</ul>

<h2 id="fixtures">Fixtures</h2>

<h3 id="basics">Basics</h3>

<ul>
  <li>Create smaller copies of files you‚Äôll use in production</li>
  <li>How many lines of data should your fixture include? No hard number. Include the <strong>bare minimum</strong> data you need to test functionality.</li>
  <li>Save to <code class="highlighter-rouge">fixtures</code> folder in your <code class="highlighter-rouge">test</code> folder</li>
</ul>

<h2 id="mocking-versus-stubbing">Mocking versus Stubbing</h2>

<h3 id="whats-the-problem-were-trying-to-correct">What‚Äôs the problem we‚Äôre trying to correct?</h3>

<ul>
  <li>Order/Warehouse example</li>
  <li>Always asking the question: What‚Äôs the system under test (SUT)?</li>
</ul>

<h3 id="test-doubles-to-the-rescue">Test Doubles to the Rescue</h3>

<ul>
  <li><strong>Stubs</strong> provide canned answers to calls made during the test.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">object</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
<span class="n">object</span><span class="p">.</span><span class="nf">stubs</span><span class="p">(</span><span class="ss">:stubbed_method</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">object</span><span class="p">.</span><span class="nf">stubbed_method</span> <span class="c1"># =&gt; 1</span>
<span class="n">object</span><span class="p">.</span><span class="nf">stubbed_method</span> <span class="c1"># =&gt; 2</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>Stubs</strong> Especially helpful to fake state of secondary objects that are auxilary to our test.</p>
  </li>
  <li>
    <p><strong>Stubs</strong> allow you to imitate <em>state</em>.</p>
  </li>
  <li>
    <p><strong>Mocks</strong> allow you to define what calls a method you‚Äôre testing should make. Mocking libraries include extensive list of expectations to verify what you expect to happens happens. Allows you to imitate <em>behavior</em>.</p>
  </li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">object</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
<span class="n">object</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:expected_method</span><span class="p">).</span><span class="nf">at_least_once</span>

<span class="n">object</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
<span class="n">object</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:expected_method</span><span class="p">).</span><span class="nf">never</span>

<span class="n">object</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
<span class="n">object</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:expected_method</span><span class="p">).</span><span class="nf">at_most_once</span>
<span class="n">object</span><span class="p">.</span><span class="nf">expected_method</span> <span class="c1">#=&gt; passes</span>

<span class="n">object</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
<span class="n">object</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:expected_method</span><span class="p">).</span><span class="nf">at_most_once</span>
<span class="mi">2</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">object</span><span class="p">.</span><span class="nf">expected_method</span> <span class="p">}</span> <span class="c1">#=&gt; fails</span>
</code></pre></div></div>

<ul>
  <li><strong>Mocks</strong> especially helpful to test whether SUT is behaving on secondary objects as you expect.</li>
  <li><strong>Mocks</strong> allows you to verify <em>behavior</em>.</li>
  <li>More examples: http://www.rubydoc.info/github/floehopper/mocha/Mocha/Expectation</li>
</ul>

<h3 id="check-for-understanding">Check for Understanding</h3>

<p>With your partners, teach back the difference between stubs and mocks. Check the <a href="https://github.com/freerange/mocha">mocha docs</a> for more details/</p>

<h3 id="setup-mocking-and-stubbing-libraries">Setup: Mocking and Stubbing Libraries</h3>

<p>We‚Äôll be using mocha for these exercises.</p>
<ul>
  <li>Run <code class="highlighter-rouge">gem install mocha</code> from command line</li>
  <li>Require in your file or test_helper</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="n">gem</span> <span class="s1">'mocha'</span>
<span class="nb">require</span> <span class="s1">'mocha/mini_test'</span>
</code></pre></div></div>

<ul>
  <li>Another common library is <a href="https://github.com/jimweirich/flexmock">flexmock</a></li>
</ul>

<h3 id="stubs">Stubs</h3>

<ul>
  <li>Instead of creating a new instance, we just stub it and dictate what state and behavior we want that secondary object to hold.</li>
  <li>It allows us to imitate the <em>state</em> and <em>state-dependent behavior</em> of an actual object.</li>
  <li>Use cases
    <ol>
      <li>Testing across classes</li>
      <li>Isolating a method within a class (example: Order Shipping Costs)</li>
    </ol>
  </li>
  <li>State, state, state</li>
</ul>

<h3 id="check-for-understanding-stubs">Check for Understanding: Stubs</h3>

<p>Working independently, find an opportunity to use stubbing in your last project. Get the test passing.</p>

<h3 id="mocks">Mocks</h3>

<ul>
  <li>Mocks allow us to test whether the SUT exercises the behavior (especially on other objects) we want it to exercise.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DelegatorOfThings</span>
	<span class="k">def</span> <span class="nf">delegate_the_things</span><span class="p">(</span><span class="n">doer_of_things</span><span class="p">)</span>
		<span class="n">doer_of_things</span><span class="p">.</span><span class="nf">do_thing_1</span>
		<span class="n">doer_of_things</span><span class="p">.</span><span class="nf">do_thing_2</span>
	<span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">DelegatorOfThingTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
	<span class="k">def</span> <span class="nf">test_it_does_the_thing</span>
		<span class="n">doer_of_things</span> <span class="o">=</span> <span class="n">mock</span><span class="p">()</span>
		<span class="n">doer_of_things</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:do_thing_1</span><span class="p">).</span><span class="nf">once</span> <span class="c1">#&lt;= This is the verification/expectation. It will _pass_ or _fail_</span>
		<span class="n">doer_of_things</span><span class="p">.</span><span class="nf">expects</span><span class="p">(</span><span class="ss">:do_thing_2</span><span class="p">).</span><span class="nf">once</span> <span class="c1">#&lt;= This is the verification/expectation. It will _pass_ or _fail_</span>

		<span class="n">delegator</span> <span class="o">=</span> <span class="no">DelegatorOfThings</span><span class="p">.</span><span class="nf">new</span>
		<span class="n">delegator</span><span class="p">.</span><span class="nf">delegate_the_things</span><span class="p">(</span><span class="n">doer_of_things</span><span class="p">)</span>
	<span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Example: <code class="highlighter-rouge">mock_example</code> (‚Äúenterprise‚Äù)</li>
</ul>

<h3 id="check-for-understanding-mocks">Check for Understanding: Mocks</h3>

<p>Create an alternate version of the zap test using mocking.</p>

<h2 id="the-ultimate-cfu">The Ultimate CFU</h2>

<ul>
  <li>How will you know you‚Äôre writing a test that might be appropriate for stubbing or mocking?</li>
  <li>What‚Äôs the difference between testing doubles that rely on state versus behavior?</li>
  <li>How many lines of data should you include in your fixture files?</li>
</ul>
:ET