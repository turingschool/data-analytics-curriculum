I"g<h3 id="what-is-iteration">What is iteration?</h3>

<p><strong>Iterating</strong> is doing something several times. In programming, <strong>iteration</strong> is used to describe taking a <strong>collection</strong> of items (like an array) and doing something to each of the items in that collection.</p>

<p>For example, let’s say that we have a collection of names:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Megan"</span><span class="p">,</span> <span class="s2">"Brian"</span><span class="p">,</span> <span class="s2">"Sal"</span><span class="p">]</span>
</code></pre></div></div>

<p>What if we wanted to print out all the names in the collection; we may do something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">print</span> <span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">print</span> <span class="n">names</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="nb">print</span> <span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>And that works, right?</p>

<p>But what are some of the problems inherent to this approach? It wasn’t too terrible to do with just three students in this array, but what if we had ten students? A hundred? A thousand? A million?</p>

<p>When we have a solution that works for a small number of items, but it doesn’t work for a large number of items, we say that <em>it doesn’t scale</em>. We want to design solution that are dynamic, meaning they can work for various inputs.</p>

<h3 id="each">Each</h3>

<p>The scalability issue described above can be solved by using the method <code class="highlighter-rouge">each</code>.  <code class="highlighter-rouge">each</code> is a method that iterates over a collection. This means that <code class="highlighter-rouge">each</code> allows us to do something for every element of an array. An <strong>Iteration</strong> is a single pass over an element. We can use <code class="highlighter-rouge">each</code> to print all the names in our collection like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Megan"</span><span class="p">,</span> <span class="s2">"Brian"</span><span class="p">,</span> <span class="s2">"Sal"</span><span class="p">]</span>
<span class="n">names</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="nb">name</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s break this down. <code class="highlighter-rouge">names</code> is our collection. It is an Array of three strings. <code class="highlighter-rouge">.each</code> is a method that we call on <code class="highlighter-rouge">names</code>.</p>

<p>Everything between the <code class="highlighter-rouge">do</code> and <code class="highlighter-rouge">end</code> is the <strong>Block</strong>. The <strong>Block</strong> is what runs for each element in the Array. Since we have three elements, this block will run a total of three times.</p>

<p><code class="highlighter-rouge">name</code> is the <strong>Block Variable</strong>. For each iteration, this variable will contain the current element we are iterating over. So for the first iteration, <code class="highlighter-rouge">name</code> holds the value <code class="highlighter-rouge">"Megan"</code>, the second time it holds the value <code class="highlighter-rouge">"Brian"</code>, and the third time it holds the value <code class="highlighter-rouge">"Sal"</code>.</p>

<h3 id="syntax">Syntax</h3>

<p>In general, the format for using <code class="highlighter-rouge">.each</code> looks like this.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">collection</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">block_variable</span><span class="o">|</span>
  <span class="c1"># Code here runs for each element</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="single-line-syntax">Single-Line Syntax</h4>

<p>You can replace a <code class="highlighter-rouge">do</code>/<code class="highlighter-rouge">end</code> with <code class="highlighter-rouge">{</code>/<code class="highlighter-rouge">}</code>. This allows you to write <code class="highlighter-rouge">each</code> on a single line. Our example from before could also be written as:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Megan"</span><span class="p">,</span> <span class="s2">"Brian"</span><span class="p">,</span> <span class="s2">"Sal"</span><span class="p">]</span>
<span class="n">names</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="nb">name</span> <span class="p">}</span>
</code></pre></div></div>

<p>Generally, we avoid using single-line syntax unless the operation inside the block is <em>very</em> short. In this example, it is appropriate.</p>

<h3 id="exercises">Exercises</h3>

<p>Use your debugger to work through the following exercises.</p>

<ul>
  <li>If you had an array of numbers, e.g. [1,2,3,4], how do you print out the
doubles of each number? Triples?</li>
  <li>If you had the same array, how would you only print out the even numbers?
What about the odd numbers?</li>
  <li>How could you create a new array which contains each number multipled by 2?</li>
  <li>Given an array of first and last names, e.g. [“Alice Smith”, “Bob Evans”,
“Roy Rogers”],  how would you print out the full names line by line?
    <ul>
      <li>How would you print out only the first name?</li>
      <li>How would you print out only the last name?</li>
      <li>How could you print out only the initials?</li>
      <li>How can you print out the last name and how many characters are in it?</li>
      <li>How can you create an integer which represents the total number of characters in all the names?</li>
    </ul>
  </li>
</ul>
:ET