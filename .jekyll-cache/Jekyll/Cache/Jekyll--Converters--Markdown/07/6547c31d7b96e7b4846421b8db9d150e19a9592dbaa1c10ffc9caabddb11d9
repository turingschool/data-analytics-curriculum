I"=<h1 id="client-side-storage">Client Side Storage</h1>

<h2 id="lesson-goals">Lesson Goals</h2>

<ul>
  <li>Understand the Web Storage API for storing data in browsers</li>
  <li>Know the use cases for local storage vs. session storage</li>
  <li>Implement Client Side storage using local storage</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>Let’s say you’re hired by a client to create a little game using JavaScript, HTML and maybe a little bit of CSS for a client’s marketing campaign.</p>

<p>They plan to have a laptop set up at a booth at a trade show and allow people visiting the booth to play a game.</p>

<p>Your client wants to make the game interesting by allowing the user to keep a high score across everyone who plays the game at the booth.</p>

<p>Your first reaction to this request might be to store the high score in your database for easy persistance - but the client refuses to pay for internet at the conference, and they won’t give you their laptop to set up a local server.</p>

<p><strong>There are several ways to actually store data when you’re not running a server that you can use for this problem - depending on what the client requirements are for a high score.</strong></p>

<h2 id="pairshare">Pair/Share</h2>

<ul>
  <li>Write up what you know, what you can assume, and what you don’t know, about browser based storage</li>
  <li>Discuss with someone sitting next to you</li>
  <li>Research browser based storage</li>
</ul>

<h1 id="html5--the-web-storage-api">HTML5 &amp; the Web Storage API</h1>

<p>HTML5 introduced a <em>storage object</em> to help users store data in the browser.</p>

<p>The Web Storage API provides mechanisms by which browsers can store <strong>key/value pairs</strong>, in a much more intuitive fashion than using cookies.</p>

<h2 id="web-storage-api-mechanisms">Web Storage API mechanisms</h2>

<ul>
  <li><code class="highlighter-rouge">sessionStorage</code>: maintains a separate storage area for each given origin that’s available for the duration of the page session (as long as the browser is open, including page reloads and restores)</li>
  <li><code class="highlighter-rouge">localStorage</code>:  does the same thing, but persists even when the browser is closed and reopened</li>
</ul>

<h2 id="how-do-you-access-localstorage-and-sessionstorage">How do you access <code class="highlighter-rouge">localStorage</code> and <code class="highlighter-rouge">sessionStorage</code>?</h2>

<p>These mechanisms are available via the following properties:</p>

<ul>
  <li><code class="highlighter-rouge">window.sessionStorage</code></li>
  <li><code class="highlighter-rouge">window.localStorage</code></li>
</ul>

<p>Let’s see how we can access these storage mechanisms and how to get/set values in our browser.</p>

<h2 id="limitations-to-the-web-storage-api">Limitations to the Web Storage API</h2>

<ul>
  <li>Storing more than 5MB of data will cause the browser to ask the user if they want to allow the site to store that much data.</li>
  <li><code class="highlighter-rouge">localStorage</code> can be vulnerable to XSS attacks (cross-site scripting) because the data is accessible to JavaScript (i.e. scripts can be run from <code class="highlighter-rouge">localStorage</code>). You need to escape and encode all untrusted data that can be set in <code class="highlighter-rouge">localStorage</code>.</li>
</ul>

<p>For security reasons, the browser limits you to only sharing local or session data with websites of the same domain, you must match for following:</p>

<ul>
  <li>Same domain: <code class="highlighter-rouge">turing.io</code> cannot access data on <code class="highlighter-rouge">github.com/turing</code></li>
  <li>Same subdomain: <code class="highlighter-rouge">today.turing.io</code> cannot access data on <code class="highlighter-rouge">turing.io</code></li>
  <li>Same protocol: no mixing http and https</li>
  <li>Same port: <code class="highlighter-rouge">localhost:3000</code> cannot access data on <code class="highlighter-rouge">localhost:8080</code></li>
</ul>

<h1 id="before-html5-cookies">Before HTML5: Cookies</h1>

<ul>
  <li>Before HTML5 was introduced, the primary mechanism for storing information in the browser was cookies.</li>
  <li>Cookies have some limitations:
    <ul>
      <li>Not able to hold a lot of data (a limit of 4095 bytes)</li>
      <li>Sent to the server every time you request a page from that domain</li>
      <li>Not considered secure. Cookies are vulnerable to cross-site request forgery (CSRF)</li>
    </ul>
  </li>
</ul>

<h1 id="when-to-use-cookies-vs-client-side-storage">When to use cookies vs client side storage</h1>

<p>Cookies and local storage serve pretty different purposes. Cookies are primarily for reading server-side, local storage can only be read client-side. Who needs the data you’re trying to store - the client or the server?</p>

<p>If it’s your client (your JavaScript), then you should probabl use local storage. It’s expensive to send all your data in each HTTP header.</p>

<p>If it’s your server, local storage isn’t so useful because you’d have to forward the data along somehow (probably with AJAX or hidden form fields).</p>

<p>Note: If you want to read the internet’s opinions of cookies vs. web storage you can do so <a href="http://stackoverflow.com/questions/3220660/local-storage-vs-cookies">here</a></p>

<h1 id="lets-store-some-data">Let’s Store Some Data</h1>

<p>Clone this <a href="https://github.com/turingschool-examples/client-side-storage">Example Repo</a></p>

<p>Open the index page and play around with the application.</p>

<p>You’ll notice that the app generates a high score when a button is clicked.</p>

<h2 id="code-along">Code Along</h2>

<p>Using <code class="highlighter-rouge">localStorage</code> or <code class="highlighter-rouge">sessionStorage</code>, update the application so that:</p>

<ul>
  <li>The high scores along with the user’s name persist when the users page is refreshed</li>
  <li>The user can clear all high scores by clicking a button</li>
  <li>BONUS: The user can clear only high scores associated with their name</li>
</ul>

<h2 id="questions">Questions?</h2>
:ET