I"ç<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Can explain the value of testing</li>
  <li>Can put the right test in the right service</li>
  <li>Can determine what needs to be mocked, and what doesn‚Äôt</li>
  <li>Can mock HTTP</li>
  <li>Can read someone else‚Äôs code</li>
  <li>Can adapt someone else‚Äôs code to solve your own problems</li>
</ul>

<h2 id="lets-talk-about-testing">Let‚Äôs talk about Testing</h2>

<ul>
  <li>What do you actually want to be testing?</li>
  <li>How might you determine that?</li>
</ul>

<h3 id="things-to-test">Things to test</h3>

<ul>
  <li>Am I sending the right thing?</li>
  <li>Am I handing the response correctly?</li>
  <li>Can I gracefully handle an error?</li>
</ul>

<h2 id="remember-vcr">Remember VCR?</h2>

<p>Our goal is to be able to test our main application, without needing to spin up another server. We already know how to do that.</p>

<ul>
  <li>Review VCR</li>
  <li>Love/Hate spectrum for VCR</li>
  <li>Discuss pros and cons of VCR</li>
</ul>

<h2 id="using-github-to-learn-how-to-do-a-thing">Using Github to learn how to do a thing</h2>

<p>Someone else is already testing code that depends on Who else has this same problem?</p>

<p><em>API client gem writers</em></p>

<h3 id="what-can-we-learn-from-them">What can we learn from them?</h3>

<ul>
  <li>Do they use VCR?</li>
  <li>What gems are they using? What do they do?</li>
  <li>Is there common pattern in their tests?</li>
  <li>Which tests need HTTP and which don‚Äôt? How can we tell?</li>
</ul>

<p>Take a look at <a href="https://github.com/sferik/twitter/">https://github.com/sferik/twitter/</a></p>

<ul>
  <li>Poke around for 5 minutes. Share with the class what you found. Share with the class what you still don‚Äôt know.</li>
  <li>Do some more poking. Try to break apart the pattern they‚Äôre using for mocking the twitter API</li>
</ul>

<h3 id="the-twitter-gem-mocking-pattern">The twitter gem mocking pattern</h3>

<p>Break down the pattern</p>

<ul>
  <li>helper functions that include the baseurl</li>
  <li>Stubs a whole section (context) with a get or a post</li>
  <li>tests request and response separately</li>
  <li>uses <code class="highlighter-rouge">json</code> files in fixtures to simplify mock responses</li>
</ul>

<h4 id="more-questions">More questions</h4>

<ul>
  <li>Do we need to make any changes to this pattern for our own purposes?</li>
  <li>Is there anything in this pattern that is still magic? Gems? Methods?</li>
</ul>

<h2 id="implementing-the-pattern">Implementing The Pattern</h2>

<ul>
  <li>Add webmock gem</li>
  <li>Copy some of the helper methods</li>
  <li>Do the things</li>
</ul>

<h2 id="integration-testing">Integration testing</h2>

<p>Inspired by omniauth. The interface they have is decent, but I don‚Äôt really like the code</p>

<p>We should use a pattern like factory girl or fixtures, but something that‚Äôs really like that is kind of overkill. What are some features we‚Äôd like in our integration testing?</p>

<ul>
  <li>A ‚Äútest mode‚Äù that will prevent any attempts at an HTTP request</li>
  <li>While in ‚Äútest mode‚Äù, we can still CRUD records</li>
</ul>

<h2 id="next-steps">Next Steps</h2>
<ul>
  <li>Using Sinatra to mock your service
    <ul>
      <li>https://robots.thoughtbot.com/how-to-stub-external-services-in-tests#create-a-fake-hello-sinatra</li>
      <li>http://asquera.de/blog/2015-03-30/testing-external-apis-in-ruby/</li>
    </ul>
  </li>
  <li>Try only mocking in development. Expect a service in staging. How can you modify your tests based on environment?</li>
  <li>Sad path testing. What if you ask for something that doesn‚Äôt exist? What if you try to create something that‚Äôs invalid.</li>
</ul>
:ET