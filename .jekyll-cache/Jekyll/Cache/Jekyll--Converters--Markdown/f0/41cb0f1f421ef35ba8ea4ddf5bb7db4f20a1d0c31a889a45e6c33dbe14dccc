I"U3<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>differentiate between feature tests and model tests</li>
  <li>write user stories</li>
  <li>translate user stories into feature tests using Capybara</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>feature test</li>
  <li>user story</li>
  <li>“top-down” design</li>
  <li>DSL (Domain Specific Language)</li>
</ul>

<h2 id="repository">Repository</h2>

<p>You should be able to use the <code class="highlighter-rouge">Set List</code> repository that we have been using this week.</p>
<ul>
  <li>https://github.com/turingschool-examples/set-list</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What are we testing so far in our SetList app?</li>
  <li>What aren’t we testing?</li>
  <li>Assuming that our tests will have some setup, execution, assertions, and teardown, what might be included in each phase?</li>
</ul>

<h2 id="lecture">Lecture</h2>

<h2 id="what-are-feature-tests">What are Feature Tests?</h2>

<ul>
  <li>Feature tests mimic the behavior of the user: In the case of web apps, this behavior will be clicking, filling in forms, visiting new pages, etc.</li>
  <li>Just like a user, the feature test should not need to know about underlying code</li>
  <li>Based on user stories</li>
</ul>

<h2 id="what-are-user-stories">What are User Stories?</h2>

<ul>
  <li>A tool used to communicate user needs to software developers.</li>
  <li>They are used in Agile Development, and it was first introduced in 1998 by proponents of Extreme Programming.</li>
  <li>They describe what a user needs to do in order to fulfill a function.</li>
  <li>They are part of our “top-down” design.</li>
</ul>

<pre><code class="language-txt">As a user
When I visit the home page
  And I fill in title
  And I fill in description
  And I click submit
Then my task is saved
</code></pre>

<p>We can generalize this pattern as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a [user/user-type]
When I [action]
And I [action]
And I [action]
...
Then [expected result]
</code></pre></div></div>

<p>Depending on how encompassing a user story is, you may want to break a single user story into multiple, smaller user stories.</p>

<h3 id="exercise-create-user-stories">Exercise: Create User Stories</h3>

<p>Open a blank file and write user stories for the four situations below with a partner:</p>

<ul>
  <li>Adding a Horse to HorsesApp</li>
  <li>Signing up for a new account</li>
  <li>Logging into an account</li>
  <li>Viewing only the Horses associated with a specific Jockey</li>
</ul>

<h2 id="creating-our-feature-test">Creating Our Feature Test</h2>

<p><a href="https://github.com/teamcapybara/capybara#using-capybara-with-rspec">Capybara</a></p>

<p>Capybara is a Ruby test framework that allows you to feature test any RACK-based app.</p>

<p>It provides a DSL (domain specific language) to help you query and interact with the DOM.</p>

<p>For example, the following methods are included in the Capybara DSL:</p>

<ul>
  <li><code class="highlighter-rouge">visit '/path'</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_content("Content")</code></li>
  <li><code class="highlighter-rouge">within ".css-class"  { Assertions here }</code></li>
  <li><code class="highlighter-rouge">within "#css-id"  { Assertions here }</code></li>
  <li><code class="highlighter-rouge">fill_in "identifier", with: "Content"</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_link("Click here")</code></li>
  <li><code class="highlighter-rouge">click_link "Click Here"</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_button("Submit")</code></li>
  <li><code class="highlighter-rouge">click_button "Submit"</code></li>
  <li><code class="highlighter-rouge">click_on "identifier"</code></li>
  <li><code class="highlighter-rouge">expect(current_path).to eq('/')</code></li>
</ul>

<h3 id="important-setup-things">Important Setup Things</h3>

<p>Ensure the following lines are present in your <code class="highlighter-rouge">Gemfile</code> in the <code class="highlighter-rouge">:development, :test</code> group:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'capybara'</span>
<span class="n">gem</span> <span class="s1">'launchy'</span>
<span class="n">gem</span> <span class="s1">'simplecov'</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">bundle install</code></p>

<p>Update your <code class="highlighter-rouge">spec/spec_helper.rb</code> file to include the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># other required items here</span>

<span class="c1"># SimpleCov will help us see which lines of code we've tested or not</span>
<span class="nb">require</span> <span class="s1">'simplecov'</span>
<span class="no">SimpleCov</span><span class="p">.</span><span class="nf">start</span>

<span class="nb">require</span> <span class="s1">'capybara/dsl'</span>
<span class="no">Capybara</span><span class="p">.</span><span class="nf">app</span> <span class="o">=</span> <span class="no">SetList</span>
<span class="no">Capybara</span><span class="p">.</span><span class="nf">save_path</span> <span class="o">=</span> <span class="s1">'tmp/capybara'</span>

<span class="c1"># within the RSpec configuration (this is the same place you have your database cleaner options set):</span>

  <span class="n">c</span><span class="p">.</span><span class="nf">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>
</code></pre></div></div>
<p>NOTE: If you do not have a <code class="highlighter-rouge">spec/spec_helper.rb</code> follow the set up directions found <a href="http://backend.turing.io/module2/lessons/model_testing_in_rspec_for_sinatra_app">here</a></p>

<h3 id="writing-the-test">Writing the Test</h3>

<p>Based on the following user story, let’s learn how to write a feature test:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As an unauthenticated user
When I visit the home page of the site
Then I see a "welcome" message
</code></pre></div></div>

<p>Since we’re going to be creating a new type of test, let’s add a new folder to separate them from our model tests. The test that we’re about to create is probably <em>not</em> a test you’d actually write in your project, but it’s a simple example to show how Capybara works.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>spec/features/
<span class="nv">$ </span><span class="nb">touch </span>spec/features/user_sees_welcome_message_spec.rb
</code></pre></div></div>

<p>In that new file add the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"an unauthenticated user visiting welcome page"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"should see a welcome message"</span> <span class="k">do</span>
    <span class="c1"># Your code here.</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, our user story is something along the lines of the following:</p>

<ul>
  <li>As an unauthenticated user</li>
  <li>When I visit the root page</li>
  <li>I should see a welcome message</li>
</ul>

<p>Let’s turn that user story into a test using the Capybara methods from above and make it pass.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"an unauthenticated user visits welcome page"</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"they visit /"</span> <span class="k">do</span>
    <span class="n">scenario</span> <span class="s2">"they see a welcome message"</span> <span class="k">do</span>
      <span class="n">visit</span> <span class="s1">'/'</span>

      <span class="n">within</span> <span class="s2">"#greeting"</span> <span class="k">do</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Welcome!"</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="debugging-tools">Debugging tools</h3>

<ul>
  <li>use ‘binding.pry’ in your controller code, model code, tests</li>
  <li>use <code class="highlighter-rouge">save_and_open_page</code> to debug a view</li>
</ul>

<h3 id="what-about-all-of-those-html-files-from-save_and_open_page">What about all of those html files from save_and_open_page?</h3>

<p>If you used <code class="highlighter-rouge">save_and_open_page</code> in your test as you were trying to determine what should be included in your view, Launchy will have generated a number of files and saved them. They should be living in your <code class="highlighter-rouge">tmp/capybara</code> directory since you used this line in your spec_helper: <code class="highlighter-rouge">Capybara.save_path = 'tmp/capybara'</code></p>

<p>However, they will still be watched by git unless you make a <code class="highlighter-rouge">.gitignore</code> file at the root of your project:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch</span> .gitignore
</code></pre></div></div>

<p>Then, inside that file, add:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tmp/
</code></pre></div></div>

<p>This will tell git to ignore everything inside of the <code class="highlighter-rouge">tmp</code> directory.</p>

<p>Do the same for the <code class="highlighter-rouge">coverage/</code> folder to avoid saving SimpleCov coverage files to Git.</p>

<h2 id="notes-about-feature-test-file-organization">Notes about feature test file organization</h2>

<p>The names of the files you create for feature testing MUST end in <code class="highlighter-rouge">_spec.rb</code>. Without that ‘spec’ part of the filename, RSpec will completely ignore the file.</p>

<p>How many tests should go in one file? It’s totally up to you, but having multiple tests in a file is marginally faster than putting a single test in a single file. Also, grouping lots of tests into one file allows you to share the setup across your tests.</p>

<p>You can group your test files into subfolders to organize them in a similar format to your <code class="highlighter-rouge">/app/views</code> folder, and can help with strong organization. Every team you work on, every job you have, could have a completely different organizational method for test files, so keep that ‘growth mindset’ and be flexible!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/spec
/spec/features
/spec/features/songs
/spec/features/songs/index_spec.rb # all tests about the index page
/spec/features/songs/show_spec.rb  # all tests about the show page
etc
</code></pre></div></div>

<h2 id="wrap-up">Wrap Up</h2>

<ul>
  <li>What is the difference between a model and feature test?</li>
  <li>What are the 4 main methods (blocks) for a test? Why/when would you use each one?</li>
  <li>What is the general structure of a user story?</li>
</ul>

<h2 id="workshop">Workshop</h2>

<p>Since we’ve built a LOT of code in our previous lessons WITHOUT feature tests, let’s back-fill some tests to make sure all of our functionality works for our users. Write tests for the following user stories:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor to the web site
When I visit '/songs/new'
And I fill in the form completely and click the Submit button
Then I return to the index page
And I see my new song on the page
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a visitor to the web site
When I visit '/songs'
Then I see all songs in the database
Each song shows its title, length, and play count
</code></pre></div></div>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://gist.github.com/zhengjia/428105">Capybara cheat sheet</a></li>
  <li><a href="http://cheatrags.com/capybara">Another cheat sheet</a></li>
  <li><a href="https://thoughtbot.com/upcase/test-driven-rails-resources/capybara.pdf">Yet another cheat sheet</a></li>
  <li><a href="http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests">Simple Tricks for Capybara</a></li>
</ul>
:ET