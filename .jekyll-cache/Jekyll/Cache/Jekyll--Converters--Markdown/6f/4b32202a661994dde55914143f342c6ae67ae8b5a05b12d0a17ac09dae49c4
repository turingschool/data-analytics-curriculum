I"Ê<p>Now that our virtual server, operating system, and required tooling are setup, let‚Äôs deploy a Rails application.</p>

<h2 id="deploy-a-rails-application">Deploy a Rails Application</h2>

<p>For this exercise you can use any project you‚Äôre comfortable with. We‚Äôll use a small sample project  called <code class="highlighter-rouge">platform_validator</code>, but you‚Äôre welcome to substitute in any one of your projects and follow all the same steps.</p>

<p>Note that this project uses Ruby 2.1. If the project you use needs a different version of Ruby, install it with RVM like you did before in Part 2.</p>

<h3 id="clone-the-project">Clone the Project</h3>

<p>Within your virtual server:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /vagrant
$ git clone https://github.com/JumpstartLab/platform_validator.git
$ cd platform_validator
</code></pre></div></div>

<h3 id="rails-setup">Rails Setup</h3>

<p>Next we need to install dependencies and setup the database:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle
$ rake db:create db:migrate db:seed
</code></pre></div></div>

<h3 id="rails-console">Rails Console</h3>

<p>Check that the console is working properly:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails console
2.1.1 :001 &gt; Person.count
   (0.3ms)  SELECT COUNT(*) FROM "people"
 =&gt; 6
2.1.1 :002 &gt; Person.all
  Person Load (0.6ms)  SELECT "people".* FROM "people"
</code></pre></div></div>

<h3 id="run-the-server">Run the Server</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails server
=&gt; Booting Thin
=&gt; Rails 4.0.4 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
Thin web server (v1.6.2 codename Doc Brown)
Maximum connections set to 1024
Listening on 0.0.0.0:3000, CTRL+C to stop
</code></pre></div></div>

<p>Then, in your host operating system, open <a href="http://localhost:3000">http://localhost:3000</a> in a browser. You should see the <em>Welcome aboard</em> page ‚Äì you‚Äôre done!</p>

<h2 id="cloning-the-virtual-machine">Cloning the Virtual Machine</h2>

<p>Now it gets really cool. Because a VM is essentially a file, you can treat it like a file: copy it, back it up, share it, version it, etc.</p>

<p>Let‚Äôs create a copy of the virtual machine and run <em>two</em> instances at once ‚Äì effectively two different servers running the same application.</p>

<h3 id="stopping">Stopping</h3>

<ul>
  <li><code class="highlighter-rouge">ctrl-c</code> your running Rails app</li>
  <li>run <code class="highlighter-rouge">sudo shutdown now</code> to shutdown the VM and exit automatically</li>
</ul>

<h3 id="creating-the-image">Creating the Image</h3>

<p>Start within the same folder as the <code class="highlighter-rouge">Vagrantfile</code> and:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant package
</code></pre></div></div>

<p>It‚Äôll shutdown the VM if it‚Äôs running, then export a movable image named <code class="highlighter-rouge">package.box</code> which is about 650mb.</p>

<p>Move that <code class="highlighter-rouge">package.box</code> to another folder on your machine (like <code class="highlighter-rouge">~/projects/vagrant_2/</code>). Then switch to that second folder for the rest of these steps.</p>

<h3 id="setup-the-box">Setup the Box</h3>

<p>In a terminal from the same directory where the <code class="highlighter-rouge">package.box</code> file is, run the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant box add package.box --name rails_box
</code></pre></div></div>

<p>That will ‚Äúdownload‚Äù the box file to the local Vagrant install‚Äôs set of known boxes.</p>

<h3 id="provision-the-box">Provision the Box</h3>

<p>Now move to the project directory where the <code class="highlighter-rouge">Vagrantfile</code> and your application code will live. Then:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant init rails_box
</code></pre></div></div>

<h3 id="setup-the-network">Setup the Network</h3>

<p>The box you create will have the same settings as the original. But let‚Äôs set it up so the network ports don‚Äôt overlap.</p>

<p>Open the <code class="highlighter-rouge">Vagrantfile</code> of this new copy in a text editor and modify line 22 so it looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config.vm.network "forwarded_port", guest: 3000, host: 3001
</code></pre></div></div>

<p>So that way port 3001 on our MacOS will map to port 3000 of the image.</p>

<h3 id="boot--access">Boot &amp; Access</h3>

<p>Start the server, ssh in, and start the Rails app:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant up
$ vagrant ssh
$ git clone https://github.com/JumpstartLab/platform_validator.git
$ cd platform_validator
$ rails server
</code></pre></div></div>

<h3 id="double-vision">Double Vision</h3>

<p>Open another terminal tab, switch to the directory of your first <code class="highlighter-rouge">Vagrantfile</code> then do the same:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant up
$ vagrant ssh
$ cd platform_validator
$ rails server
</code></pre></div></div>

<p>Now each of your two tabs is running unique copies of the same VM with the same app.</p>

<p>Visit <code class="highlighter-rouge">http://localhost:3000</code> and <code class="highlighter-rouge">http://localhost:3001</code> in different tabs ‚Äì each one running on a different server.</p>
:ET