I"Ò%<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Review ActiveRecord concepts</li>
  <li>Introduce specific ActiveRecord methods</li>
  <li>Practice combining ActiveRecord methods</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="https://github.com/turingschool/backend-curriculum-site/blob/gh-pages/module2/slides/intermediate_active_record.md">here</a></p>

<h2 id="setup">Setup</h2>

<p>We will be using <a href="https://github.com/turingschool-examples/election">this repository</a>. Clone it down and follow the setup instructions included in the readme.</p>

<h2 id="warmup">Warmup</h2>

<p>Assume a Rails app that has owners and horses.</p>

<p>How would you find the following in ActiveRecord?</p>

<ul>
  <li>Average age of all horses</li>
  <li>Average age of horses belonging to an owner with an id of 1</li>
  <li>Total winnings of all horses (assume a <code class="highlighter-rouge">winnings</code> column on horses)</li>
  <li>Total winnings of all horses belonging to an owner with an id of 4</li>
</ul>

<h2 id="lesson">Lesson</h2>

<h3 id="background">Background</h3>

<h4 id="activerecord-is-about-objects">ActiveRecord is About Objects</h4>

<p>In the Election repository, drop into a Rails console session and run the following commands.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; rails c
&gt; Candidate.all
&gt; Candidate.find(1)
&gt; Party.find(1)
&gt; Candidate.find(1).party
&gt; Candidate.joins(:party)
</code></pre></div></div>

<p>Each of them returns either an object or a collection of objects.</p>

<p>However, frequently it can help to remember that these queries are generating SQL queries.</p>

<p>SQL queries generate <em>tables</em>. Each row in a table becomes an instance of the class weâ€™re using to generate the query. Each column becomes a method on that instance.</p>

<p>For example:</p>

<ul>
  <li>Assuming a candidates table with the following columns:
    <ul>
      <li><code class="highlighter-rouge">id</code></li>
      <li><code class="highlighter-rouge">name</code></li>
      <li><code class="highlighter-rouge">party_id</code></li>
    </ul>
  </li>
  <li>The ActiveRecord model Candidate will generate instances that have the following methods:
    <ul>
      <li><code class="highlighter-rouge">#id</code></li>
      <li><code class="highlighter-rouge">#name</code></li>
      <li><code class="highlighter-rouge">#party_id</code></li>
    </ul>
  </li>
</ul>

<h4 id="working-with-ids">Working with IDs</h4>

<p>Weâ€™ll be working with a lot of code snippets in the coming sections. Many of the new methods that we introduce will return collections with IDs for keys and calculations for values instead of objects. Ideally, we want to work with objects.</p>

<p>Later in the lesson, weâ€™ll explore how to get similar results with objects instead of just IDs and values.</p>

<h4 id="activerecord-arguments">ActiveRecord Arguments</h4>

<p>In most cases we can use symbols/hashes. However, we can also use strings to pass raw SQL. Donâ€™t be afraid of raw SQL - itâ€™s your friend.</p>

<h4 id="exploration">Exploration</h4>

<p>With a partner, review the existing Election schema.</p>

<h3 id="new-methods">New Methods</h3>

<h4 id="select">Select</h4>

<p>Select tells the query what columns to select.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On Candidate</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">no_dates</span>
  <span class="nb">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:party_id</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="joins">Joins</h4>

<p>Joins is a class method. It allows us to pull information from more than one table. This will frequently result in multiple rows with duplicate information.</p>

<p>The results will only include records where related records exist.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On the Candidate model</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">candidates_with_primary_results</span>
  <span class="n">joins</span><span class="p">(</span><span class="ss">:primary_results</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>The symbol argument above uses the <code class="highlighter-rouge">has_many</code> that exists in the Candidate model.</li>
</ul>

<h4 id="group">Group</h4>

<p>Group is used to group by a characteristic. It needs an aggregate function to replace those columns that are <em>not</em> being grouped by. For example:</p>

<ul>
  <li>AVG</li>
  <li>COUNT</li>
  <li>MIN</li>
  <li>MAX</li>
  <li>SUM</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On County model</span>
<span class="c1"># Returns a hash with IDs for keys</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_by_state_id</span>
  <span class="n">group</span><span class="p">(</span><span class="ss">:state_id</span><span class="p">).</span><span class="nf">count</span>
<span class="k">end</span>

<span class="c1"># OR #</span>

<span class="c1"># On State model</span>
<span class="c1"># Returns a hash with State names for keys</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_of_counties</span>
  <span class="n">joins</span><span class="p">(</span><span class="ss">:counties</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="ss">:name</span><span class="p">).</span><span class="nf">count</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You can also use calculations as aggregate functions:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On State</span>
<span class="c1"># Returns a hash with State names for keys</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">votes_by_state</span>
  <span class="n">joins</span><span class="p">(</span><span class="ss">:primary_results</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="ss">:name</span><span class="p">).</span><span class="nf">sum</span><span class="p">(</span><span class="ss">:votes</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="group-with-order">Group With Order</h4>

<p>Order will allow us to specify the order in which our records are returned. This is especially great with <code class="highlighter-rouge">group</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On State</span>
<span class="c1"># Returns a hash with State names for keys</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">ordered_votes_by_state</span>
  <span class="n">joins</span><span class="p">(</span><span class="ss">:primary_results</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="s2">"sum_votes DESC"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="ss">:votes</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="getting-back-to-select-so-what">Getting Back to Select (So what?)</h4>

<p>We can use <code class="highlighter-rouge">.select</code> to help us return objects instead of hashes. The key to this is moving the calculation into the <code class="highlighter-rouge">.select</code> portion of the query.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On State</span>
<span class="c1"># Returns a collection of *objects*</span>
<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">with_votes</span>
  <span class="n">joins</span><span class="p">(</span><span class="ss">:primary_results</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="s1">'states.id,
             states.name,
             states.abbreviation,
             SUM(primary_results.votes) AS sum_of_votes'</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="s1">'states.id'</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="exercise">Exercise</h2>

<p>Can you create an array of democratic candidates ordered by the number of results they received that also responds to <code class="highlighter-rouge">total_votes</code>?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># rails c
&gt; candidates = YOUR QUERY HERE
&gt; candidates.first.name
&gt; "Hillary Clinton"
&gt; candidates.first.total_votes
# =&gt; 15692452
</code></pre></div></div>

<ul>
  <li>How would you make this into a method on your Candidate model?</li>
</ul>

:ET