I"J<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand how callbacks work</li>
  <li>Know some common callbacks</li>
  <li>Use callbacks to your advantage</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/callbacks_and_refactoring.md">here</a></p>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>callback</li>
  <li>DRY</li>
  <li>slug</li>
</ul>

<h2 id="warmup">WarmUp</h2>

<p>Using the internet:</p>

<ul>
  <li>In your own words, what is a Rails callback?</li>
  <li>Why do people seem to hate them so much?</li>
  <li>Why might we teach you about them even though people seem to hate them?</li>
</ul>

<h2 id="background">Background</h2>

<h3 id="what-is-a-callback">What is a Callback</h3>

<p>From the <a href="http://guides.rubyonrails.org/active_record_callbacks.html">Rails Guides</a>:</p>

<blockquote>
  <p>Methods that get called at certain moments of an object‚Äôs life cycle. With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.</p>
</blockquote>

<h3 id="railsactiverecord-callbacks"><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">Rails/ActiveRecord Callbacks</a></h3>

<ol>
  <li>Creating an Object
    <ul>
      <li><code class="highlighter-rouge">before_validation</code></li>
      <li><code class="highlighter-rouge">after_validation</code></li>
      <li><code class="highlighter-rouge">before_save</code></li>
      <li><code class="highlighter-rouge">around_save</code></li>
      <li><code class="highlighter-rouge">before_create</code></li>
      <li><code class="highlighter-rouge">after_create</code></li>
      <li><code class="highlighter-rouge">after_save</code></li>
      <li><code class="highlighter-rouge">after_commit</code>/<code class="highlighter-rouge">after_rollback</code></li>
    </ul>
  </li>
  <li>Updating an Object
    <ul>
      <li><code class="highlighter-rouge">before_validation</code></li>
      <li><code class="highlighter-rouge">after_validation</code></li>
      <li><code class="highlighter-rouge">before_save</code></li>
      <li><code class="highlighter-rouge">around_save</code></li>
      <li><code class="highlighter-rouge">before_update</code></li>
      <li><code class="highlighter-rouge">after_update</code></li>
      <li><code class="highlighter-rouge">after_save</code></li>
      <li><code class="highlighter-rouge">after_commit</code>/<code class="highlighter-rouge">after_rollback</code></li>
    </ul>
  </li>
  <li>Destroying an Object
    <ul>
      <li><code class="highlighter-rouge">before_destroy</code></li>
      <li><code class="highlighter-rouge">after_destroy</code></li>
      <li><code class="highlighter-rouge">after_commit</code>/<code class="highlighter-rouge">after_rollback</code></li>
    </ul>
  </li>
</ol>

<p><strong>Note:</strong> Some of these are called both when an object is created and when it is updated since in both cases the object is saved.</p>

<h3 id="when-to-use-a-callback">When to Use a Callback</h3>

<p>Almost never. ‚ÄúAfter‚Äù callbacks can get messy. A PORO is a better option, most of the time.</p>

<h3 id="callbacks-are-often-code-smells">Callbacks Are Often Code Smells</h3>

<p>What do we mean by Code Smell? 
Typically this means the code is a symptom that is pointing to a deeper issue.
Thinking of this metophorically, if we have a leak in our roof and simply use a bucket to catch the water rather than repairing the roof.
Our bucket solution would be the ‚Äòcode smell‚Äô that is pointing to the deeper issue of a leak in the roof.</p>

<p>Callbacks are super powerful, but why should we use them with care?</p>

<p>Let‚Äôs break up into 4 groups to research this.</p>

<p>Try to be diligent with your research and come to your own conclusions. This practice will come in handy when navigating opinionated developers in your career.</p>

<h2 id="exploration">Exploration</h2>

<h3 id="setup">Setup</h3>

<p>We are going to continue to use <code class="highlighter-rouge">music_box</code>.</p>

<h3 id="use-case">Use Case</h3>

<p>We want to access our songs by title in the url. for example <code class="highlighter-rouge">/songs/my-heart-will-go-on</code>. Right now, we have access to our song show page by <code class="highlighter-rouge">/songs/:id</code>. How do we create this new url?</p>

<p>Current Rails Routes</p>

<p><img src="../misc/images/songs_routes_with_id.png" alt="Songs Routes With :id" /></p>

<h3 id="write-our-test">Write Our Test</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#spec/features/user_can_see_show_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"user sees one song"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"on song show page with song attributes"</span> <span class="k">do</span>
    <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Celine Dion'</span><span class="p">)</span>
    <span class="n">song_1</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"My Heart Will Go On"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">233</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">8790</span><span class="p">)</span>
    <span class="n">song_2</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Beauty and the Beast"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">342</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">7980</span><span class="p">)</span>

    <span class="n">visit</span> <span class="n">song_path</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">slug</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/songs/</span><span class="si">#{</span><span class="n">song_1</span><span class="p">.</span><span class="nf">slug</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">length</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">play_count</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">length</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">play_count</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>But what is a slug??? A slug is a piece of the URL‚Äôs path that is typically a hyphenated version of the title or main piece of a webpage you‚Äôre on.</p>

<h3 id="creating-a-slug-column">Creating a Slug Column</h3>

<p>We run into an issue when we run the tests that <code class="highlighter-rouge">slug</code> does not exist for <code class="highlighter-rouge">song</code>. Lets add that migration:</p>

<p><img src="../misc/images/undefined_method_slug.png" alt="Undefined Method" /></p>

<p><code class="highlighter-rouge">rails g migration AddSlugToSongs slug:string</code></p>

<p>Check our migration and <code class="highlighter-rouge">rails db:migrate</code></p>

<h3 id="updating-song-with-slug">Updating Song with Slug</h3>

<ul>
  <li>
    <p>The reality is that we want to create our slug and then save our song with the slug we generated. How can we handle this? What type of callback could we use?</p>
  </li>
  <li>
    <p>How do we create a hyphenated title. Research for a few minutes. Any suggestions? <code class="highlighter-rouge">parameterize</code></p>
  </li>
</ul>

<p>Running our test we should get an error:</p>

<p><img src="../misc/images/unmatched_constraints.png" alt="Unmatched Constraints" /></p>

<p>Step 1: In Our Routes Add</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">shallow: </span><span class="kp">true</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">param: :slug</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our routes should now look like this:
<img src="../misc/images/songs_routes_with_slug.png" alt="Routes with Slug" /></p>

<p>Step 2: In Our Model</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/song.rb</span>
<span class="n">before_save</span> <span class="ss">:generate_slug</span>

<span class="kp">private</span> 
 <span class="k">def</span> <span class="nf">generate_slug</span>
   <span class="nb">self</span><span class="p">.</span><span class="nf">slug</span> <span class="o">=</span> <span class="n">title</span><span class="p">.</span><span class="nf">parameterize</span>
 <span class="k">end</span>
</code></pre></div></div>

<h3 id="adding-show-to-songs-controller">Adding Show to Songs Controller</h3>

<p>Next Error:
<img src="../misc/images/missing_show_action.png" alt="Missing Show Action" /></p>

<p>Let‚Äôs throw in a pry to see what our params are.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/songs_controller.rb</span>
<span class="k">def</span> <span class="nf">show</span>
  <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Since we are now going to use the slug to access the show page, will we need to use find or find_by?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/controllers/songs_controller.rb</span>
<span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">slug: </span><span class="n">params</span><span class="p">[</span><span class="ss">:slug</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="adding-our-show-view">Adding our Show View</h3>

<p>Run our test we see this error:</p>

<p><img src="../misc/images/missing_show_view.png" alt="Missing Show Template" /></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/views/songs/show.html.erb</span>
<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%=@song.title %&gt;&lt;/h1&gt;
&lt;p&gt;Lenght: &lt;%=</span><span class="vi">@song</span><span class="p">.</span><span class="nf">length</span><span class="o">%&gt;&lt;</span><span class="sr">/p&gt;
&lt;p&gt;Play Count: &lt;%=@song.play_count%&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>We know have passing tests!!!</p>

<p>Let‚Äôs add a small refactor.</p>

<p>Open our test file and in the path helper remove <code class="highlighter-rouge">.slug</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#spec/features/user_can_see_show_spec.rb</span>

<span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="n">describe</span> <span class="s2">"user sees one song"</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"on song show page with song attributes"</span> <span class="k">do</span>
    <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Celine Dion'</span><span class="p">)</span>
    <span class="n">song_1</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"My Heart Will Go On"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">233</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">8790</span><span class="p">)</span>
    <span class="n">song_2</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="nf">songs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Beauty and the Beast"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">342</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">7980</span><span class="p">)</span>

    <span class="n">visit</span> <span class="n">song_path</span><span class="p">(</span><span class="n">song_1</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">current_path</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"/songs/</span><span class="si">#{</span><span class="n">song_1</span><span class="p">.</span><span class="nf">slug</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">length</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">play_count</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">length</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">play_count</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now open our Song model and add the following</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/song.rb</span>
<span class="n">before_save</span> <span class="ss">:generate_slug</span>

<span class="k">def</span> <span class="nf">to_param</span>
 <span class="n">slug</span>
<span class="k">end</span>

<span class="kp">private</span> 
 <span class="k">def</span> <span class="nf">generate_slug</span>
   <span class="nb">self</span><span class="p">.</span><span class="nf">slug</span> <span class="o">=</span> <span class="n">title</span><span class="p">.</span><span class="nf">parameterize</span>
 <span class="k">end</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">to_param</code> method is allowing us to overwrite the default return value of id to now be slug.
This allows us to pass just the song object to our path helper instead of <code class="highlighter-rouge">song_path(song_1.slug</code>.
To read more about <code class="highlighter-rouge">to_param</code> go <a href="https://guides.rubyonrails.org/active_support_core_extensions.html#to-param">here</a></p>

<h2 id="wrapup">WrapUp</h2>

<ul>
  <li>What is a callback? Name 5 of them.</li>
  <li>When should you use a callback?</li>
</ul>
:ET