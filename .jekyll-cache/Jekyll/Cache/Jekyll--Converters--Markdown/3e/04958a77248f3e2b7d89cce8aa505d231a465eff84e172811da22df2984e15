I"A<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Create multiple instances of a new class.</li>
  <li>Create methods that take arguments.</li>
  <li>Use parameters inside of methods.</li>
  <li>Call methods on objects that are passed as parameters.</li>
</ul>

<h2 id="overview">Overview</h2>

<ul>
  <li>Warmup</li>
  <li>Create a Dog class.</li>
  <li>Create a person class</li>
  <li>Add methods to allow a person to buy/own dogs.</li>
  <li>Create methods to allow a person to feed their dogs.</li>
</ul>

<h2 id="warm-up">Warm-up</h2>

<p>Assume that you have a <code class="highlighter-rouge">Person</code> and a <code class="highlighter-rouge">Dog</code> class.</p>

<ul>
  <li>What might some attributes of a dog be?</li>
  <li>Write a sample <code class="highlighter-rouge">initialize</code> method for the <code class="highlighter-rouge">Dog</code> class.</li>
  <li>What might some attributes of a person be?</li>
  <li>Write a sample <code class="highlighter-rouge">initialize</code> method for the <code class="highlighter-rouge">Person</code> class.</li>
  <li>How would you create an instance of <code class="highlighter-rouge">Dog</code>?</li>
  <li>How would you create an instance of <code class="highlighter-rouge">Person</code>?</li>
</ul>

<h2 id="share">Share</h2>

<p>Discuss your answers with a partner then share with the larger group.</p>

<h2 id="create-a-dog-class">Create a Dog Class</h2>

<h3 id="lets-start-with-some-attributes">Let’s Start with Some Attributes</h3>

<p>Let’s assume that we want instances of our <code class="highlighter-rouge">Dog</code> class to have a name, age, breed, and breed. Additionally we want to track whether the dog is hungry or not (all dogs start as hungry). As a group let’s create a <code class="highlighter-rouge">Dog</code> class that does these things.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/dog.rb</span>
<span class="k">class</span> <span class="nc">Dog</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span><span class="p">,</span>
              <span class="ss">:breed</span><span class="p">,</span>
              <span class="ss">:hungry</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">breed</span><span class="p">)</span>
    <span class="vi">@name</span>   <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>    <span class="o">=</span> <span class="n">age</span>
    <span class="vi">@breed</span>  <span class="o">=</span> <span class="n">breed</span>
    <span class="vi">@hungry</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s check briefly to see if this class does what we expect. For now, we’ll use a runner file to check to to see what we can do with this class that we built.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./dog'</span>

<span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Fido"</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s2">"Poodle"</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">name</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">age</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">breed</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">hungry</span>
</code></pre></div></div>

<p>Run this file by typing <code class="highlighter-rouge">ruby runner.rb</code> at your terminal. Does it do what you expect? Great! We’re on our way!</p>

<h3 id="add-some-behaviors">Add Some Behaviors</h3>

<p>In addition to the attributes that our dog has, we want to see if we can add some behaviors. In this particular case, let’s see if we can make it so that our dogs can bark and eat. <code class="highlighter-rouge">#bark</code> will print a message to the terminal, while <code class="highlighter-rouge">#eat</code> will make it so that our dog is no longer hungry. We might implement it by adding the following methods to our <code class="highlighter-rouge">Dog</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/dog.rb</span>
<span class="k">class</span> <span class="nc">Dog</span>
  <span class="c1"># Existing attr_readers and initialize.</span>

  <span class="k">def</span> <span class="nf">bark</span>
    <span class="nb">puts</span> <span class="s2">"Woof!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">eat</span>
    <span class="vi">@hungry</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s add to our existing runner file to see how these new methods work.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./dog'</span>

<span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Fido"</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s2">"Poodle"</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">name</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">age</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">breed</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">hungry</span>
<span class="n">dog</span><span class="p">.</span><span class="nf">bark</span>
<span class="n">dog</span><span class="p">.</span><span class="nf">eat</span>
<span class="nb">puts</span> <span class="n">dog</span><span class="p">.</span><span class="nf">hungry</span>
</code></pre></div></div>

<p>Is our output what we expected? Yes? Great!</p>

<h2 id="create-a-person-class">Create a Person Class</h2>

<p>Now, let’s try to get our <code class="highlighter-rouge">Person</code> class started. Update the runner file to include the following code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./lib/dog'</span>
<span class="nb">require</span> <span class="s1">'./lib/person'</span>

<span class="c1"># existing dog method calls</span>

<span class="n">jonah</span> <span class="o">=</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Jonah"</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">jonah</span><span class="p">.</span><span class="nf">name</span>
<span class="nb">puts</span> <span class="n">jonah</span><span class="p">.</span><span class="nf">age</span>
<span class="n">jonah</span><span class="p">.</span><span class="nf">say</span><span class="p">(</span><span class="s2">"Hello!"</span><span class="p">)</span>
</code></pre></div></div>

<p>What happens now when you run your runner file? Everything still good? No? Well, let’s go create that <code class="highlighter-rouge">Person</code> class!</p>

<p>With a partner, create a <code class="highlighter-rouge">Person</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/person.rb</span>

<span class="c1"># YOUR CODE HERE!</span>
</code></pre></div></div>

<p>How did it go? Let’s share!</p>

<h2 id="allow-people-to-own-dogs">Allow People to Own Dogs</h2>

<p>Let’s add to our runner file to make it so that a person can own some dogs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./lib/dog'</span>
<span class="nb">require</span> <span class="s1">'./lib/person'</span>

<span class="c1"># Existing `Dog` and `Person` method calls.</span>

<span class="n">jonah</span><span class="p">.</span><span class="nf">buy</span><span class="p">(</span><span class="n">fido</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">jonah</span><span class="p">.</span><span class="nf">dogs</span>
</code></pre></div></div>

<p>As a whole group, let’s walk through what we need to change in our code to allow this to happen.</p>

<p>1) Add a collection of dogs to our <code class="highlighter-rouge">Person</code> class. Add a method <code class="highlighter-rouge">#buy</code> that takes an <em>instance</em> of dog as an argument and adds that dog to the collection of dogs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/person.rb</span>
<span class="k">class</span> <span class="nc">Person</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span><span class="p">,</span>
              <span class="ss">:dogs</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
    <span class="vi">@dogs</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">phrase</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">buy</span><span class="p">(</span><span class="n">dog</span><span class="p">)</span>
    <span class="vi">@dogs</span> <span class="o">&lt;&lt;</span> <span class="n">dog</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="allow-people-to-feed-their-dogs">Allow People to Feed their Dogs</h2>

<p>Now let’s see if we can make it so that people can feed their dogs.</p>

<p>Add the following lines to your runner file.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># runner.rb</span>
<span class="nb">require</span> <span class="s1">'./lib/dog'</span>
<span class="nb">require</span> <span class="s1">'./lib/person'</span>

<span class="c1"># Existing dog and person method calls.</span>

<span class="n">jonah</span><span class="p">.</span><span class="nf">dogs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">dog</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> is hungry? </span><span class="si">#{</span><span class="n">dog</span><span class="p">.</span><span class="nf">hungry</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="n">jonah</span><span class="p">.</span><span class="nf">feed_dogs</span>
<span class="nb">puts</span> <span class="s2">"Fed the dogs."</span>

<span class="n">jonah</span><span class="p">.</span><span class="nf">dogs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">dog</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> is hungry? </span><span class="si">#{</span><span class="n">dog</span><span class="p">.</span><span class="nf">hungry</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With a partner, see if you can implement the code to make the runner file run successfully with the output you would expect.</p>

<h2 id="change-runner-file-to-test-file-if-time-allows">Change Runner File to Test File (if time allows)</h2>

<p>Isn’t it a pain to keep running this file to make sure it’s outputting what we expect? What could we do instead? That’s right, test!</p>

<h3 id="minitest-setup">Minitest Setup</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test/dog_test.rb</span>
<span class="nb">require</span> <span class="s1">'minitest'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'./lib/dog'</span>

<span class="k">class</span> <span class="nc">DogTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_exists</span>
    <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Missy"</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s2">"Chihuahua"</span><span class="p">)</span>

    <span class="n">assert_instance_of</span> <span class="no">Dog</span><span class="p">,</span> <span class="n">dog</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_it_has_a_name</span>
    <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Missy"</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s2">"Chihuahua"</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="s2">"Missy"</span><span class="p">,</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_it_has_an_age</span>
    <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Missy"</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s2">"Chihuahua"</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="mi">14</span><span class="p">,</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">age</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_it_has_a_breed</span>
    <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Missy"</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s2">"Chihuahua"</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="s2">"Chihuahua"</span><span class="p">,</span> <span class="no">Dog</span><span class="p">.</span><span class="nf">breed</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Can you implement tests for our Person class?</p>

<h2 id="share-1">Share</h2>
:ET