I"œ)<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand how an API works at a conceptual level</li>
  <li>Use request specs to TDD an API</li>
  <li>Understand what makes a valid JSON data structure</li>
  <li>Learn how to parse and create JSON in Ruby</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What is an API in the context of web development?</li>
  <li>Why might we decide to expose information in a database we control through an API?</li>
  <li>What do we need to test in an API?</li>
  <li>How will our tests be different from feature tests we have implemented in the past?</li>
  <li>What is REST and why do we need it?</li>
</ul>

<hr />

<h2 id="reviewing-rest">Reviewing REST</h2>

<blockquote>
  <p>It‚Äôs a Concept, not a Law</p>
</blockquote>

<p>We want to practice REST as much as possible, but we should consider it a ‚Äúvery strongly encouraged guideline‚Äù and not a strict immovable law of how to develop software.</p>

<p>REST, as a concept, came from the need to mimic some amount of ‚Äústate‚Äù between HTTP requests and responses, since HTTP is a stateless protocol. It ties together the idea of HTTP verbs and URI paths/routes into a uniform interface by which we can state ‚ÄúI want to create a new resource‚Äù or ‚ÄúI want to change something about a specific resource‚Äù.</p>

<h4 id="rails-likes-restful-things">Rails likes RESTful things</h4>

<p>Rails makes it very easy to build CRUD interfaces for resources, and doesn‚Äôt care if our response to a user is HTML, JSON, XML, plaintext, or something else.</p>

<p>The controller actions (create, destroy, update, etc) aren‚Äôt exactly the same as the HTTP verbs specified with a URI path, but it‚Äôs easy to draw the comparison.</p>

<p>In the end, though, as developers we have a choice to make around our development interface (sometimes called Developer Experience, similar to User Experience for UI), and making our code easy to maintain.</p>

<h4 id="restful-wrap-up">RESTful Wrap-Up</h4>

<p>REST is language-agnostics, and is a standard we should continue to build, but we ARE allowed some flexibility.</p>

<hr />

<h2 id="apis">APIs</h2>

<p>API = Application Programming Interface</p>

<p>An API is effectively a ‚Äúdomain specific language‚Äù (DSL) between a system which can perform an instruction, and a user who wants to perform that instruction.</p>

<p>Ruby, as a language, has APIs. These are the Ruby methods like <code class="highlighter-rouge">.each</code> or <code class="highlighter-rouge">.new</code> or <code class="highlighter-rouge">def</code> to make methods. In this case, the ‚Äúuser‚Äù is you as a human, entering instructions for the Ruby interpreter to perform a task.</p>

<p>There are also ‚Äúexternal‚Äù APIs, which is the more common use of the ‚ÄúAPI‚Äù term, and pertains to Internet-based information systems, such as GitHub, Google, Yelp, and so on, from whom we can send/retrieve data to perform a task. In this case, a tool like Faraday is the ‚Äúuser‚Äù, asking an external service to do an instruction like ‚Äúfetch a list of public repos for the <code class="highlighter-rouge">turingschool</code> account‚Äù</p>

<p>The rest of this lesson will discuss APIs in the context of these external Internet-based ‚Äúservices‚Äù.</p>

<h2 id="why-use-external-internet-based-apis">Why use (external, Internet-based) APIs?</h2>

<p>APIs provide a means for us to transmit data between web-based applications without worrying about all the overhead associated with HTML.</p>

<ul>
  <li>Create an application that uses client-side JavaScript to update a page without a full-page refresh.
    <ul>
      <li>eg, the front-end developer only needs to fetch a little bit of data, not a whole HTML page</li>
    </ul>
  </li>
  <li>Provide a means for developers at other companies to use a service that we provide.</li>
  <li>Split the work of our application service into smaller application services that are each deployed separately (service-oriented architecture)</li>
</ul>

<hr />

<h2 id="background-json">Background: JSON</h2>

<h4 id="exploration">Exploration</h4>

<p>Discuss the examples of JSON linked below with a partner and describe what you notice.</p>

<ul>
  <li><a href="https://developer.github.com/v3/git/commits">Example 1</a></li>
  <li><a href="https://birdeck-api.herokuapp.com/api/v1/posts/2">Example 2</a>.</li>
</ul>

<h4 id="more-notes-to-read-later">More Notes To Read Later</h4>

<p><a href="/module3/notes/json_for_api_development.html">Here are more notes about JSON for API Development</a></p>

<h2 id="new-tools">New Tools</h2>

<p>Before we begin, let‚Äôs take a look at some of the new tools you‚Äôll be using.</p>

<h4 id="json-and-ruby">JSON and Ruby</h4>

<p>Let‚Äôs play around with it in our <code class="highlighter-rouge">pry</code> consoles.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'json'</span>
<span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">hello: </span><span class="s2">"goodbye"</span> <span class="p">}</span>
<span class="nb">puts</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="n">my_hash</span><span class="p">)</span> <span class="c1">#=&gt; "{"hello":"goodbye"}"</span>
<span class="nb">puts</span>  <span class="n">my_hash</span><span class="p">.</span><span class="nf">to_json</span> <span class="c1">#=&gt; "{"hello":"goodbye"}"</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">person</span> <span class="o">=</span> <span class="s1">'{"name":"Jennifer Lopez","street":"641 Pine St.","phone":true,"age":50,"pets":["cat","dog","fish"]}'</span>
<span class="n">parsed_person</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="c1">#=&gt; {"name"=&gt;"Jennifer Lopez", "street"=&gt;"641 Pine St.", "phone"=&gt;true, "age"=&gt;50, "pets"=&gt;["cat", "dog", "fish"]}</span>
<span class="nb">puts</span> <span class="n">parsed_person</span>
<span class="nb">puts</span> <span class="n">parsed_person</span><span class="p">[</span><span class="s1">'pets'</span><span class="p">]</span>
</code></pre></div></div>

<hr />

<h1 id="building-an-api-in-rails--what-we-really-came-here-for">Building an API in Rails ‚Äì what we really came here for!</h1>

<p>We will start by using a new <code class="highlighter-rouge">--api</code> flag when we call ‚Äúrails new‚Äù.</p>

<p><strong>WE WILL REQUIRE THAT YOU USE ‚Äìapi FOR MOD 3 API PROJECTS ‚Äì DO NOT FORGET TO USE THIS FLAG!</strong></p>

<p>This flag should only create the following paths inside <code class="highlighter-rouge">/app/</code>:</p>
<ul>
  <li>channels</li>
  <li>controllers</li>
  <li>jobs</li>
  <li>mailers</li>
  <li>models</li>
  <li>views</li>
</ul>

<p>If you see /app/assets and /app/helpers in your project then you did not use the <code class="highlighter-rouge">--api</code> flag. You may get asked to start over!</p>

<h2 id="think-about-testing-and-tdd-at-a-high-level">Think about testing and TDD at a high level</h2>

<ul>
  <li>Can more of our code be tested in a way that feels more like unit testing?</li>
  <li>What kinds of Capybara syntax will we no longer need to use?</li>
</ul>

<h4 id="using-json-in-rails-testing">Using JSON in Rails Testing</h4>

<ul>
  <li><code class="highlighter-rouge">get 'api/v1/items'</code>: submits a get request to your application (like <code class="highlighter-rouge">visit</code>, but without all of the Capybara bells and whistles)</li>
  <li><code class="highlighter-rouge">response</code>: captures the response to a given request (like <code class="highlighter-rouge">page</code> when using Capybara)</li>
  <li><code class="highlighter-rouge">JSON.parse(response)</code>: parses a JSON response</li>
</ul>

<p>PLEASE PLEASE PLEASE use Faker and FactoryBot for your testing!</p>

<h2 id="namespacing-and-routing-will-be-extra-important">Namespacing and Routing will be extra important!</h2>

<p>You‚Äôll be building lots of ‚Äúversioning‚Äù into your routes, to make URI paths like ‚Äú/api/v1/something‚Äù</p>

<h2 id="our-controllers-will-be-very-different-now-too">Our controllers will be very different now, too</h2>

<p>Our controllers will no longer be calling a view which builds HTML, and we can no longer rely on the ‚Äúmagic‚Äù of Rails finding a ‚Äúview‚Äù path named after our controller, and an ERB file named after our action.</p>

<h4 id="using-json-in-the-controller">Using JSON in the Controller</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyController</span> <span class="o">&lt;&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">render</span> <span class="ss">json: </span><span class="no">Item</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<hr />

<h1 id="oop-principles-at-play">OOP Principles at Play</h1>

<p>Aim to have very ‚Äúthin‚Äù controllers ‚Äì very little code. Any ‚Äúhelper‚Äù methods should be put into a ‚ÄúFacade‚Äù, named after the controller, like a WeatherController would have a WeatherFacade.</p>

<p>The Facade will be in charge of fetching data for the controller. The controller doesn‚Äôt need to know where or how, we‚Äôre going to ‚Äúabstract‚Äù that away.</p>

<p>The Facade may get data from a Model using ActiveRecord, or call a service using Faraday, for example a ‚ÄúWeatherService‚Äù.</p>

<p>The Facade‚Äôs job, then, is to make sure the controller ONLY gets object data back. No JSON, no hashes. Just Objects, or arrays of Objects.</p>

<p>The controller, then, will hand off that data to a Serializer, which can be appropriately-named for the data it contains like RoadTripWeatherSerializer or something like that, and given the Object data from</p>

<hr />

<h2 id="practice">Practice</h2>

<p>Complete the exercise <a href="./exercises/building_an_api">here</a></p>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What are some reasons you‚Äôd want to create an API?</li>
  <li>At its core, what is JSON?</li>
  <li>What are the main differences between creating a traditional Rails application and creating an API?</li>
</ul>
:ET