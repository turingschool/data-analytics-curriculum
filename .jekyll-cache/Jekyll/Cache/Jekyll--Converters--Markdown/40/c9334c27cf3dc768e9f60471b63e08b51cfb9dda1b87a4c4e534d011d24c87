I"'C<h1 id="intro-to-test-driven-development-tdd">Intro to Test-Driven Development (TDD)</h1>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Explain and demonstrate the TDD workflow</li>
  <li>Create and run a <code class="highlighter-rouge">minitest</code> test suite (including assertions)</li>
  <li>Interpret error messages &amp; stack trace; adjust implementation code to fix error messages</li>
  <li>Interpret test failures &amp; fix implementation accordingly</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>TDD</li>
  <li>Test Error/Failure</li>
  <li>Stack Trace</li>
  <li>minitest assertion</li>
</ul>

<h2 id="warm-up">Warm-up</h2>

<ul>
  <li>What are some things we need for the setup of tests?</li>
  <li>Name a few assertion methods.</li>
  <li>Where should we run our tests from?</li>
  <li>What do error messages tell us?</li>
</ul>

<h2 id="test-driven-development-tdd-overview">Test-Driven Development (TDD) Overview</h2>

<p>As we write increasingly complex applications, we’ll need more sophisticated testing approaches to secure the same level of confidence.</p>

<h3 id="advantages">Advantages</h3>

<p>TDD is a process for writing code that helps:</p>

<ul>
  <li>Drive your development! (Intentional coding)</li>
  <li>Ensure your code works the way you intend</li>
  <li>Create code that is understandable to others</li>
  <li>Create code that is cheap and easy to change</li>
</ul>

<h3 id="difficulties">Difficulties</h3>

<ul>
  <li>Learning a Domain Specific Language (DSL; a computer language specialized to a particular application domain)</li>
  <li>Planning what we want to happen</li>
  <li>Taking bite sized chunks</li>
</ul>

<h3 id="using-tdd">Using TDD</h3>

<ul>
  <li>Write tests before you write code (radical, we know)</li>
  <li>Use a testing framework such as <code class="highlighter-rouge">minitest</code> to structure your testing suite</li>
  <li><strong>Red-Green-Refactor</strong> process to implement complexity to your application</li>
</ul>

<h2 id="tdd-cycle-red-green-refactor">TDD Cycle: Red, Green, Refactor</h2>

<p>Red-green-refactor is a process for writing code that involves three steps.</p>

<ol>
  <li>Write a failing test (red)</li>
  <li>Write implementation code to make the test pass (green)</li>
  <li>Clean up your code if necessary (refactor)</li>
</ol>

<h2 id="write-tests-first">Write Tests First</h2>

<ul>
  <li>Shapes design</li>
  <li>Helps break problem into small pieces</li>
  <li>Removes fear of programming</li>
  <li>Communicates what your code <em>should</em> do</li>
  <li>Tells you basically exactly what to do</li>
</ul>

<h2 id="tdd-code-along-with-minitest">TDD Code-Along with <code class="highlighter-rouge">minitest</code></h2>

<h3 id="scenario-specifications">Scenario Specifications</h3>

<ul>
  <li>Products have a name</li>
  <li>Products have a description</li>
  <li>Products have a price</li>
  <li>Products start with a total stock number available</li>
  <li>You can calculate the cost of the total inventory</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># product_test.rb</span>
<span class="nb">require</span> <span class="s1">'minitest'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>

<span class="k">class</span> <span class="nc">ProductTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_exists</span>
    <span class="n">doomproof_vest</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Doomproof platinum vest'</span><span class="p">,</span> <span class="s1">'A radiation-absorbing tunic that allows the wearer to survive exposure to doom radiation.'</span><span class="p">,</span> <span class="mf">1200.00</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
    
    <span class="n">assert_instance_of</span> <span class="no">Product</span><span class="p">,</span> <span class="n">doomproof_vest</span>
  <span class="k">end</span>
  <span class="c1"># test it has a name</span>
  <span class="c1"># test it has a description</span>
  <span class="c1"># test it has a price</span>
  <span class="c1"># test it has an initial stock number</span>
  <span class="c1"># test you can calculate the cost of the total inventory</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="learn-to-love-the-error-learn-to-love-the-failure">Learn to Love the Error, Learn to Love the Failure</h3>

<p>They’re your friends, seriously. Take time to understand each error and failure you encounter. You’ll be seeing those same error messages over and over again, so the sooner you connect what they mean to what you need to fix, the smoother you’ll be sailing.</p>

<ul>
  <li>Errors usually indicate your code is broken somewhere</li>
  <li>Failures usually indicate that your code isn’t functioning the way you expect it to</li>
</ul>

<h3 id="solving-an-error-or-a-failure">Solving an Error or a Failure</h3>

<ol>
  <li>Run the test</li>
  <li>Read the error/failure message, including stack trace
    <ul>
      <li>stacks are LIFO (last-in, first-out like a stack of dishes)</li>
      <li>call stack is a stack that stores information about the active subroutines of a computer program (often referred to as ‘the stack’)</li>
      <li>stack trace is a report of the active stack frames at a certain point in time during the execution of a program</li>
      <li>fun-fact: queues are FIFO (first-in, first-out, like a European line-up)</li>
    </ul>
  </li>
  <li>Write implementation code to make the test pass</li>
</ol>

<ul>
  <li>Lets write some implementation code to solve our errors, one step at a time.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E

Error:
ProductTest#test_it_exists:
NameError: uninitialized constant ProductTest::Product
Did you mean?  ProductTest
    product_test.rb:8:in `test_it_exists'
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># product_test.rb</span>
<span class="nb">require</span> <span class="s1">'minitest'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require</span> <span class="s1">'minitest/pride'</span>
<span class="nb">require</span> <span class="s1">'./lib/product'</span>

<span class="k">class</span> <span class="nc">ProductTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_exists</span>
    <span class="n">doomproof_vest</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Doomproof platinum vest'</span><span class="p">,</span> <span class="s1">'A radiation-absorbing tunic that allows the wearer to survive exposure to doom radiation.'</span><span class="p">,</span> <span class="mf">1200.00</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
    
    <span class="n">assert_instance_of</span> <span class="no">Product</span><span class="p">,</span> <span class="n">doomproof_vest</span>
  <span class="k">end</span>
  <span class="c1"># test it has a name</span>
  <span class="c1"># test it has a description</span>
  <span class="c1"># test it has a price</span>
  <span class="c1"># test it has an initial stock number</span>
  <span class="c1"># test you can calculate the cost of the total inventory</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Product</span>
  
<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error:
ProductTest#test_it_exists:
ArgumentError: wrong number of arguments (given 4, expected 0)
    product_test.rb:9:in `initialize'
    product_test.rb:9:in `new'
    product_test.rb:9:in `test_it_exists'
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
    <span class="c1">#code</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Refactor</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">unit_price</span><span class="p">,</span> <span class="n">amount_available</span><span class="p">)</span>
    <span class="c1">#code</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_it_has_a_name_product_price_and_amount_available</span>
  <span class="n">doomproof_vest</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Doomproof platinum vest'</span><span class="p">,</span> <span class="s1">'A radiation-absorbing tunic that allows the wearer to survive exposure to doom radiation.'</span><span class="p">,</span> <span class="mf">1200.00</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
  
  <span class="n">assert_equal</span> <span class="s1">'Doomproof platinum vest'</span><span class="p">,</span> <span class="n">doomproof_vest</span><span class="p">.</span><span class="nf">name</span>
  <span class="n">assert_equal</span> <span class="s1">'A radiation-absorbing tunic that allows the wearer to survive exposure to doom radiation.'</span><span class="p">,</span> <span class="n">doomproof_vest</span><span class="p">.</span><span class="nf">description</span>
  <span class="n">assert_equal</span> <span class="mf">1200.00</span><span class="p">,</span> <span class="n">doomproof_vest</span><span class="p">.</span><span class="nf">unit_price</span>
  <span class="n">assert_equal</span> <span class="mi">20</span><span class="p">,</span> <span class="n">doomproof_vest</span><span class="p">.</span><span class="nf">amount_available</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.E

Error:
ProductTest#test_it_has_a_name_product_price_and_amount_available:
NoMethodError: undefined method `name' for #&lt;Product:0x007fd15901b698&gt;
    product_test.rb:17:in `test_it_has_a_name_product_price_and_amount_available'
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  
  <span class="nb">attr_reader</span> <span class="ss">:name</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">unit_price</span><span class="p">,</span> <span class="n">amount_available</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Continue the TDD cycle to make the current test pass</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:unit_price</span><span class="p">,</span> <span class="ss">:amount_available</span>
  
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">unit_price</span><span class="p">,</span> <span class="n">amount_available</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@description</span> <span class="o">=</span> <span class="n">description</span>
    <span class="vi">@unit_price</span> <span class="o">=</span> <span class="n">unit_price</span>
    <span class="vi">@amount_available</span> <span class="o">=</span> <span class="n">amount_available</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Then dream up how you want your total inventory cost calculation to behave</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_total_inventory_cost_calculates_total_cost</span>
  <span class="n">doomproof_vest</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'Doomproof platinum vest'</span><span class="p">,</span> <span class="s1">'A radiation-absorbing tunic that allows the wearer to survive exposure to doom radiation.'</span><span class="p">,</span> <span class="mf">1200.00</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
  
  <span class="n">assert_equal</span> <span class="mf">24_000.00</span><span class="p">,</span> <span class="n">doomproof_vest</span><span class="p">.</span><span class="nf">total_inventory_cost</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..E

Error:
ProductTest#test_total_inventory_cost_calculates_total_cost:
NoMethodError: undefined method `total_inventory_cost' for #&lt;Product:0x007fc93f143308&gt;
    product_test.rb:26:in `test_total_inventory_cost_calculates_total_cost'
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  <span class="o">...</span>
  
  <span class="k">def</span> <span class="nf">total_inventory_cost</span>
    <span class="c1">#code</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..F

Failure:
ProductTest#test_total_inventory_cost_calculates_total_cost [product_test.rb:26]:
Expected: 24000.0
  Actual: nil
</code></pre></div></div>

<ul>
  <li>Draw the %$&amp;@ing owl</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span>
  <span class="o">...</span>
  
  <span class="k">def</span> <span class="nf">total_inventory_cost</span>
    <span class="n">unit_price</span> <span class="o">*</span> <span class="n">amount_available</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<h3 id="turn--talk">Turn &amp; Talk</h3>

<ul>
  <li>What made sense? What was easy?</li>
  <li>What do you need more practice with?</li>
</ul>

<h2 id="tdd-practice">TDD Practice</h2>

<ul>
  <li>Repeat TDD process for remaining <code class="highlighter-rouge">Student</code> specifications
OR</li>
  <li>Practice TDD with this UNICORN <a href="http://tutorials.jumpstartlab.com/topics/testing/intro-to-tdd.html">tutorial</a></li>
</ul>

<h2 id="recap">Recap</h2>

<ul>
  <li>What is the color-related catchphrase for TDD workflow?</li>
  <li>What are some reasons for writing tests before implementation code?</li>
  <li>What’s the main difference between an error and a failure?</li>
  <li>What are 3 things an error message tells us?</li>
  <li>How do you read a stack trace?</li>
</ul>

<h2 id="resources">Resources</h2>
<ul>
  <li>Blog post: <a href="http://derekbarber.ca/blog/2012/03/27/why-test-driven-development/">Why Test Driven Development?</a></li>
</ul>
:ET