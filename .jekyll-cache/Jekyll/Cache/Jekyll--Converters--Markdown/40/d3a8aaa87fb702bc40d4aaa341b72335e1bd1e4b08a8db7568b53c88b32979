I"?C<p>Let’s experiment with accessing an API! In this tutorial, you’ll be working with the OpenWeatherMap API.</p>

<h3 id="what-is-an-api">What is an API?</h3>

<p>An Application Programming Interface (API) allows one piece of software to interact with another piece of software.</p>

<p><strong>Consuming</strong> an API means you ask another application for some information or service.</p>

<p><strong>Providing</strong> an API means that others can ask you for some information or service.</p>

<h3 id="popular-apis">Popular APIs</h3>

<ul>
  <li>Twitter</li>
  <li>Instagram</li>
  <li>Facebook</li>
  <li>Google Maps</li>
  <li>YouTube</li>
  <li>Yelp</li>
  <li>AccuWeather</li>
  <li>Pinterest</li>
</ul>

<h3 id="examples-of-student-projects-that-use-apis">Examples of Student Projects that use APIs</h3>

<ul>
  <li>Tom Leskin: http://burritofinder.herokuapp.com/ (Google Maps)</li>
  <li>David Shim: http://medicosts.herokuapp.com/ (Medicare Inpatient Payment System)</li>
  <li>Rose Kohn: https://podlist.herokuapp.com/ (audiosear.ch)</li>
  <li>Kristina Brown: http://park-finder.herokuapp.com/ (YouTube, Yelp, and Mapbox)</li>
  <li>Max Tedford: https://road-tripper.herokuapp.com (Google Maps)</li>
  <li>Emily Dowdle: https://lactationstation.herokuapp.com/ (Twitter, Open FDA)</li>
  <li>Adam Jensen: https://sodata.herokuapp.com (Socrata and Google Maps)</li>
  <li>Lori Culberson, Mihir Parikh, Tracey Caruso: http://marvel-us.herokuapp.com/ (ComicVine and Twitter)</li>
  <li>Pat Wey: http://corkboard-patwey.herokuapp.com/ (Github)</li>
  <li>Jhun de Andres: http://ratinganimals.herokuapp.com/ (Trelora, OpenWeatherMap)</li>
</ul>

<h3 id="using-ruby-to-access-an-api">Using Ruby to access an API</h3>

<p><a href="https://github.com/lostisland/faraday">Faraday</a> is a Ruby Gem (you can think of a gem as a collection of code that someone else has written) that can be used to make HTTP requests.</p>

<p>To install a gem in Ruby, we type <code class="highlighter-rouge">gem install faraday</code> on the command line. This will put the source code on our machine.</p>

<p>Next, we’ll access the interactive Ruby shell (“irb”). IRB is like a playground where we can try out things in Ruby.</p>

<p>From the command line, type <code class="highlighter-rouge">irb</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ irb
</code></pre></div></div>

<p>Once we’re inside of irb, we’ll bring in the Faraday library, then send a request to <code class="highlighter-rouge">example.com</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'faraday'</span>
<span class="no">Faraday</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'http://www.example.com'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="working-with-the-openweathermap-api">Working with the OpenWeatherMap API</h3>

<p>Faraday is helpful when fetching API data, too.</p>

<p>Most APIs require that you have a key in order to access data. I’ve already registered for a key with OpenWeatherMap. If you’d like to register your own key, you can get one by <a href="http://home.openweathermap.org/users/sign_up">creating an OpenWeatherMap account</a>.</p>

<p>The key I was given was <code class="highlighter-rouge">442eba5b3e3a3ae8ead5698479bcdaa8</code>. Notice that I’ve appended <code class="highlighter-rouge">APPID=442eba5b3e3a3ae8ead5698479bcdaa8</code> to the end of the URL. This will allow OpenWeatherMap to identify me and approve my request.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'faraday'</span>
<span class="n">response</span> <span class="o">=</span> <span class="no">Faraday</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'http://api.openweathermap.org/data/2.5/weather?q=Denver,us&amp;units=imperial&amp;APPID=442eba5b3e3a3ae8ead5698479bcdaa8'</span><span class="p">)</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">body</span>
</code></pre></div></div>

<p>The data we get back is JSON data (JavaScript Object Notation). This is a machine-readable format that is easy for many programming languages to process. You can find the format of the JSON response on the <a href="http://openweathermap.org/forecast5">OpenWeatherMap Forecast Documentation</a>.</p>

<p>In order to parse JSON with Ruby, we’ll do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'json'</span>
<span class="n">data</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">raw_data</span><span class="p">)</span>
</code></pre></div></div>

<p>It’s still not easy to read, so let’s pretty-print it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'pp'</span>
<span class="n">pp</span> <span class="n">data</span>
</code></pre></div></div>

<p>We get back a result that looks like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="s2">"coord"</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">"lon"</span><span class="o">=&gt;-</span><span class="mf">104.98</span><span class="p">,</span> <span class="s2">"lat"</span><span class="o">=&gt;</span><span class="mf">39.74</span><span class="p">},</span>
 <span class="s2">"weather"</span><span class="o">=&gt;</span>
  <span class="p">[{</span><span class="s2">"id"</span><span class="o">=&gt;</span><span class="mi">800</span><span class="p">,</span> <span class="s2">"main"</span><span class="o">=&gt;</span><span class="s2">"Clear"</span><span class="p">,</span> <span class="s2">"description"</span><span class="o">=&gt;</span><span class="s2">"Sky is Clear"</span><span class="p">,</span> <span class="s2">"icon"</span><span class="o">=&gt;</span><span class="s2">"01d"</span><span class="p">}],</span>
 <span class="s2">"base"</span><span class="o">=&gt;</span><span class="s2">"cmc stations"</span><span class="p">,</span>
 <span class="s2">"main"</span><span class="o">=&gt;</span>
  <span class="p">{</span><span class="s2">"temp"</span><span class="o">=&gt;</span><span class="mf">48.5</span><span class="p">,</span>
   <span class="s2">"pressure"</span><span class="o">=&gt;</span><span class="mf">823.46</span><span class="p">,</span>
   <span class="s2">"humidity"</span><span class="o">=&gt;</span><span class="mi">70</span><span class="p">,</span>
   <span class="s2">"temp_min"</span><span class="o">=&gt;</span><span class="mf">48.5</span><span class="p">,</span>
   <span class="s2">"temp_max"</span><span class="o">=&gt;</span><span class="mf">48.5</span><span class="p">,</span>
   <span class="s2">"sea_level"</span><span class="o">=&gt;</span><span class="mf">1037.81</span><span class="p">,</span>
   <span class="s2">"grnd_level"</span><span class="o">=&gt;</span><span class="mf">823.46</span><span class="p">},</span>
 <span class="s2">"wind"</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">"speed"</span><span class="o">=&gt;</span><span class="mf">5.53</span><span class="p">,</span> <span class="s2">"deg"</span><span class="o">=&gt;</span><span class="mi">345</span><span class="p">},</span>
 <span class="s2">"clouds"</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">"all"</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">},</span>
 <span class="s2">"dt"</span><span class="o">=&gt;</span><span class="mi">1455054295</span><span class="p">,</span>
 <span class="s2">"sys"</span><span class="o">=&gt;</span>
  <span class="p">{</span><span class="s2">"message"</span><span class="o">=&gt;</span><span class="mf">0.0078</span><span class="p">,</span>
   <span class="s2">"country"</span><span class="o">=&gt;</span><span class="s2">"US"</span><span class="p">,</span>
   <span class="s2">"sunrise"</span><span class="o">=&gt;</span><span class="mi">1455026341</span><span class="p">,</span>
   <span class="s2">"sunset"</span><span class="o">=&gt;</span><span class="mi">1455064187</span><span class="p">},</span>
 <span class="s2">"id"</span><span class="o">=&gt;</span><span class="mi">5419384</span><span class="p">,</span>
 <span class="s2">"name"</span><span class="o">=&gt;</span><span class="s2">"Denver"</span><span class="p">,</span>
 <span class="s2">"cod"</span><span class="o">=&gt;</span><span class="mi">200</span><span class="p">}</span>
</code></pre></div></div>

<p>We can scope into this data object by using the levels of indentation. So everything at the outside level, we can access like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="s2">"coord"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"base"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"main"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"wind"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"clouds"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"dt"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"sys"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"id"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"name"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"cod"</span><span class="p">]</span>
</code></pre></div></div>

<p>To get anything at the secondary level, we need to access the initial level (or “key” in Ruby-speak), and then the secondary level:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">[</span><span class="s2">"main"</span><span class="p">][</span><span class="s2">"temp"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"main"</span><span class="p">][</span><span class="s2">"pressure"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"main"</span><span class="p">][</span><span class="s2">"humidity"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"wind"</span><span class="p">][</span><span class="s2">"speed"</span><span class="p">]</span>
<span class="n">data</span><span class="p">[</span><span class="s2">"sys"</span><span class="p">][</span><span class="s2">"sunrise"</span><span class="p">]</span>
</code></pre></div></div>

<p>Another thing we can do is use an OpenStruct in order to access the data with dot notation. To do this, we’ll need to parse the JSON slightly differently:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">,</span> <span class="ss">object_class: </span><span class="no">OpenStruct</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="nf">name</span>
</code></pre></div></div>

<h3 id="workshop">Workshop</h3>

<p>Now that you know how to make a call to an API and parse JSON that you get back, you’ll use the NYTimes API in order to build a program that can grab the top stories of the day. You’ll need to register for your own account in order to get keys. <strong>DO NOT PUSH YOUR API KEYS TO GITHUB.</strong></p>

<p>Use the <a href="http://developer.nytimes.com/docs/top_stories_api/">NYTimes Top Stories API</a> to create an interface where a user enters the following command…</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ruby top_stories.rb sports
</code></pre></div></div>

<p>…where the argument represents the section. The program should print out the article title, author name, date published, abstract, and the URL for the article.</p>

<h3 id="extension-playing-with-twilio">Extension: Playing with Twilio</h3>

<p>You can use Twilio to send and receive text messages, in addition to other fun telephone-related stuff.</p>

<p>Make a directory for your project. <code class="highlighter-rouge">cd</code> into that directory.</p>

<p>Create a <code class="highlighter-rouge">Gemfile</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s1">'twilio-ruby'</span>
</code></pre></div></div>

<p>Next, you’ll need to register for Twilio:</p>

<p>1) Sign up for account: https://www.twilio.com/try-twilio and select “SMS alerts” under “What are you building”
2) Verify your phone number
3) Click “Get your first Twilio Number” and select a phone number
4) Click “Show API Credentials” in small red text in the upper right-hand side of the page.</p>

<p>Once you see the credentials, export them in your terminal:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export ACCOUNT_SID=pasteyouridhere
$ export AUTH_TOKEN=pasteyourtokenhere
</code></pre></div></div>

<p>NOTE: These environment variables are <em>only</em> valid in the terminal window where you export them. Therefore, you’ll need to run the program in the same terminal window. Also, make sure to not have spaces inbetween!</p>

<p>Now, let’s make our program:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch message_sender.rb
</code></pre></div></div>

<p>Then inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="nb">require</span> <span class="s1">'twilio-ruby'</span>

<span class="n">account_sid</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"ACCOUNT_SID"</span><span class="p">]</span>
<span class="n">auth_token</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"AUTH_TOKEN"</span><span class="p">]</span>

<span class="n">client</span> <span class="o">=</span> <span class="no">Twilio</span><span class="o">::</span><span class="no">REST</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">account_sid</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">)</span>
<span class="n">from</span>   <span class="o">=</span> <span class="s2">"+18127270809"</span> <span class="c1"># Your Twilio number</span>
<span class="n">data</span>   <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="n">from</span><span class="p">,</span>
  <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">"+13334447777"</span><span class="p">,</span> <span class="c1"># format of this number needs to be "+1" at the beginning of the area code and phone number</span>
  <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="s2">"I'm using an API!"</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">client</span><span class="p">.</span><span class="nf">account</span><span class="p">.</span><span class="nf">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"Sent message!."</span>
</code></pre></div></div>

<h3 id="extension-to-the-extension">Extension to the Extension</h3>

<p>Incorporate SMS messaging in your ToolChest so that an admin gets a text every time someone creates a new tool.</p>

<h3 id="extension-to-the-extensions-extension">Extension to the Extension’s Extension</h3>

<p>Replace the SMS with a phone call. Create functionality so that the admin hears the name and price of the tool was created and can press a button to approve or deny the tool’s existence.</p>
:ET