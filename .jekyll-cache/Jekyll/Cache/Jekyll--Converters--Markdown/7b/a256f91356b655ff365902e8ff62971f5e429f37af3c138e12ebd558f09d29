I"È(<h2 id="overview">Overview</h2>

<p>Fork and clone <a href="https://github.com/turingschool/activerecord_exploration">this repository</a>.</p>

<p>In it, you will find that we have a table of <code class="highlighter-rouge">horses</code>. An individual <code class="highlighter-rouge">Horse</code> has a <code class="highlighter-rouge">name</code>, <code class="highlighter-rouge">age</code>, and <code class="highlighter-rouge">total_winnings</code>.</p>

<p>Your job is to start exploring ActiveRecord methods. If you open <code class="highlighter-rouge">app/models/horse.rb</code>, you‚Äôll notice that our <code class="highlighter-rouge">Horse</code> class inherits from <code class="highlighter-rouge">ActiveRecord::Base</code>. This is how we have access to all of ActiveRecord‚Äôs methods.</p>

<h2 id="setup">Setup</h2>
<p>In order to get started, you‚Äôll need to run the following commands from the command line:</p>

<p><code class="highlighter-rouge">bundle install</code></p>

<p><code class="highlighter-rouge">rake db:create</code></p>

<p><code class="highlighter-rouge">rake db:migrate</code></p>

<p><code class="highlighter-rouge">rake db:seed</code></p>

<p>Once you‚Äôve run these commands, if you run <code class="highlighter-rouge">tux</code> from the command line, you‚Äôll enter a console with your code loaded (pretty sweet, right?!).</p>

<h3 id="exploration">Exploration</h3>

<h4 id="attributes">attributes</h4>
<p>ActiveRecord gives you reader and setter methods for each field in your database. In this example, a <code class="highlighter-rouge">Horse</code> has a <code class="highlighter-rouge">name</code>, <code class="highlighter-rouge">age</code>, and <code class="highlighter-rouge">total_winnings</code>. So, if we have an instance of <code class="highlighter-rouge">Horse</code>, we can access each of these pieces of data like so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">horse</span> <span class="o">=</span> <span class="no">Horse</span><span class="p">.</span><span class="nf">first</span>
<span class="n">horse</span><span class="p">.</span><span class="nf">name</span>
<span class="c1"># Penelope</span>
<span class="n">horse</span><span class="p">.</span><span class="nf">age</span>
<span class="c1"># 29</span>
<span class="n">horse</span><span class="p">.</span><span class="nf">total_winnings</span>
<span class="c1"># 34000</span>
</code></pre></div></div>

<h4 id="find">#find</h4>

<p>ActiveRecord‚Äôs <code class="highlighter-rouge">#find</code> takes an integer as an argument (the id of the record you‚Äôre looking for). It returns the record if it finds it; if it doesn‚Äôt find it - it returns an <code class="highlighter-rouge">ActiveRecord::RecordNotFound</code> error.</p>

<p>If I was looking for the horse with id 90, I would run <code class="highlighter-rouge">Horse.find(90)</code></p>

<p>Practice using <code class="highlighter-rouge">#find</code>. See if you can find the following:</p>

<ul>
  <li>The Horse with id 3</li>
  <li>The Horse with id 1</li>
  <li>The Horse with id 7</li>
</ul>

<h4 id="find_by">#find_by</h4>

<p>Similar to <code class="highlighter-rouge">find</code>, <code class="highlighter-rouge">find_by</code> will run a SQL query to find the specific record based on the data you pass it. The difference between <code class="highlighter-rouge">find</code> and <code class="highlighter-rouge">find_by</code> is that <code class="highlighter-rouge">find</code> only accepts the <code class="highlighter-rouge">id</code>, but with <code class="highlighter-rouge">find_by</code>, we can pass it the attribute we want to lookup by.</p>

<p>For example, if I wanted to find the horse with the name ‚ÄúPenelope‚Äù, I‚Äôd run <code class="highlighter-rouge">Horse.find_by(name: "Penelope")</code>. You can also pass <code class="highlighter-rouge">find_by</code> more than one argument. If I wanted to find the horse with the name ‚ÄúPenelope‚Äù and age 29, I could run <code class="highlighter-rouge">Horse.find_by(name: "Penelope", age: 29)</code>. Notice that I‚Äôm passing in key/value pairs to <code class="highlighter-rouge">find_by</code>.</p>

<p>Another important note is if we pass <code class="highlighter-rouge">find_by</code> a value that our database doesn‚Äôt have (for example: <code class="highlighter-rouge">Horse.find_by(name: "Hola")</code>), the return value with be <code class="highlighter-rouge">nil</code>. ActiveRecord will not through an error, but rather return <code class="highlighter-rouge">nil</code>.
Practice using <code class="highlighter-rouge">#find_by</code>.</p>

<p>See if you can write and execute (in <code class="highlighter-rouge">tux</code>) ActiveRecord queries to accomplish the following:</p>

<ul>
  <li>Find the Horse with age 95.</li>
  <li>Find the Horse with total winnings of 4000 and age 55</li>
  <li>Find the Horse with name ‚ÄúPaulo‚Äù and total winnings of 45000</li>
</ul>

<p><strong>What happens if we have more than one record in our database that satisfies the conditions we pass to our <code class="highlighter-rouge">#find_by</code> method?</strong></p>

<h4 id="where">#where</h4>

<p>Similar to <code class="highlighter-rouge">#find_by</code>, <code class="highlighter-rouge">#where</code> accepts arguments in key/value pairs and queries our database accordingly. We can pass <code class="highlighter-rouge">#where</code> as many key/value pairs as we‚Äôd like and it will return every record that it finds that matches our query.</p>

<p>The difference between <code class="highlighter-rouge">#find_by</code> and <code class="highlighter-rouge">#where</code> is that <code class="highlighter-rouge">#find_by</code> will always return the <strong>first</strong> match from the database. <code class="highlighter-rouge">#where</code> returns every match that it can find in an Array. If it only finds one match, it will still return the findings in an Array.</p>

<p>If I wanted to find all the horses who are named ‚ÄúPenelope‚Äù, I‚Äôd execute <code class="highlighter-rouge">Horse.where(name: "Penelope")</code>.</p>

<p>Practice using <code class="highlighter-rouge">#where</code>. See if you can write and execute (in <code class="highlighter-rouge">tux</code>) ActiveRecord queries to accomplish the following:</p>

<ul>
  <li>Find all horses that are 39 years old.</li>
  <li>Find all horses that have total winnings of 78000.</li>
  <li>Find all horses that are named Patricia and 49.</li>
</ul>

<h4 id="new">#new</h4>

<p>In order to create a new horse, we can use the <code class="highlighter-rouge">#new</code> method. Similar to the method we created previously, this will take a Hash of arguments. This method can be a bit deceving though. When you execute <code class="highlighter-rouge">Horse.new(name: "Patty")</code> in your <code class="highlighter-rouge">tux</code> console, what is the return value? Do you see that any SQL was executed?</p>

<p>The answer is no because this <code class="highlighter-rouge">Horse</code> was not actually sent to the database. <code class="highlighter-rouge">#new</code> simply creates a new instance of Horse. In order to save this in the database, we need to call <code class="highlighter-rouge">#save</code> on the instance of <code class="highlighter-rouge">Horse</code>. You should see an <code class="highlighter-rouge">INSERT INTO</code> statement in the console after you call this method.</p>

<p>Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Horse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Piper"</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">total_winnings: </span><span class="mi">134203</span><span class="p">)</span>
<span class="c1"># &lt;Horse id: nil, name: "Piper", age: 10, total_winnings: 134203, created_at: nil, updated_at: nil&gt;</span>
</code></pre></div></div>

<p>Notice that the id this specific <code class="highlighter-rouge">Horse</code> is <code class="highlighter-rouge">nil</code> along with <code class="highlighter-rouge">created_at</code> and <code class="highlighter-rouge">updated_at</code>. We need to <code class="highlighter-rouge">save</code> this instance if we want it to persist in our database.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">horse</span> <span class="o">=</span> <span class="no">Horse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Piper"</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">total_winnings: </span><span class="mi">134203</span><span class="p">)</span>
<span class="c1"># &lt;Horse id: nil, name: "Piper", age: 10, total_winnings: 134203, created_at: nil, updated_at: nil&gt;</span>
<span class="n">horse</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># true</span>
</code></pre></div></div>

<p>Practice using <code class="highlighter-rouge">#new</code> and <code class="highlighter-rouge">#save</code> in <code class="highlighter-rouge">tux</code>. Pay attention to the return values of both methods.</p>

<h4 id="create">#create</h4>

<p>Wouldn‚Äôt it be nice if there was a method that did both <code class="highlighter-rouge">#new</code> and <code class="highlighter-rouge">#save</code> in one go? ActiveRecord helps us out with this! It‚Äôs called <code class="highlighter-rouge">#create</code>. This method will create the new instance AND save it to the database. It takes the same arguments as <code class="highlighter-rouge">#new</code> does, but it‚Äôs return value is different.</p>

<p>Practice using <code class="highlighter-rouge">#create</code> by creating at least 3 new horses. Pay special attention to what calling <code class="highlighter-rouge">#create</code> returns.</p>

<h3 id="recap">Recap</h3>
<p>ActiveRecord is very powerful. This is just a brief introduction to the methods that ActiveRecord gives us access to. If you have time and want to dive deeper, start by reading some documentation <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.</p>
:ET