I"˛N<h2 id="lecture">Lecture</h2>

<h3 id="getting-started">Getting Started</h3>

<p>For starters, just go the <code class="highlighter-rouge">/test</code> directory.</p>

<p>By default you‚Äôll see your JSHint validations in the test suite.</p>

<p>Any file that ends with <code class="highlighter-rouge">-test.js</code> will get executed.</p>

<p>Generators also create some tests on your behalf.</p>

<h4 id="building-and-tearing-down-your-application">Building and Tearing Down Your Application</h4>

<p>So, we actually want to build up and tear down the entire application between tests.</p>

<p>If you comment out your <code class="highlighter-rouge">teardown</code> method. QUnit will leave you in your app‚Äîalbeit, a tiny little version of your application.</p>

<p>Ember gives QUnit some additional super methods that allow you to navigate around your Ember application.</p>

<ul>
  <li><code class="highlighter-rouge">visit('/')</code></li>
  <li><code class="highlighter-rouge">find()</code></li>
  <li><code class="highlighter-rouge">fillIn()</code></li>
  <li><code class="highlighter-rouge">andThen()</code></li>
</ul>

<p>The first three should be relatively straight forward and somewhat familiar.</p>

<p>But let‚Äôs take a moment to talk about <code class="highlighter-rouge">andThen()</code>: It‚Äôs sole purpose is to try to take the pain out of testing asynchronous code. <code class="highlighter-rouge">andThen()</code> checks to see if there are any unresolved promises (e.g. AJAX) or anything currently pending in the Ember run loop. Once the cost is clear, it then execute the callback you handed it.</p>

<h3 id="hooking-into-your-application">Hooking Into Your Application</h3>

<ul>
  <li><code class="highlighter-rouge">moduleFor</code> (allows you to pass something like ‚Äúcontroller:application‚Äù or ‚Äúroute:index‚Äù)</li>
  <li><code class="highlighter-rouge">moduleForComponent</code></li>
  <li><code class="highlighter-rouge">moduleForModel</code></li>
</ul>

<h2 id="code-along">Code Along</h2>

<h3 id="unit-testing">Unit Testing</h3>

<p>Let‚Äôs generate a new project called <code class="highlighter-rouge">social-butterfly</code> for keeping track of the people we meet at, umm, meetups.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ember new social-butterfly
</code></pre></div></div>

<p>Let Ember CLI do it‚Äôs thing, then <code class="highlighter-rouge">cd</code> into the directory.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ember generate model contact
</code></pre></div></div>

<p>Ember made two files for us.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>installing
  create app/models/contact.js
installing
  create tests/unit/models/contact-test.js
</code></pre></div></div>

<p>Alright, let‚Äôs start simple. Unless we‚Äôve been palling around with Cher, Bono, or Madonna. Your contacts probably have first and last names. Let‚Äôs also work under the assumption that we‚Äôll want to get their full names from time to time.</p>

<p>So, we want to make sure that our contacts are Ember Data models. Some boilerplate test code has been written for us, but we‚Äôll need to add one or two things for our purposes.</p>

<p>In <code class="highlighter-rouge">tests/unit/models/contact-test.js</code>, let‚Äôs pull in Ember Data itself.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">DS</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ember-data</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>We‚Äôll put that up near the top where we import stuff from <code class="highlighter-rouge">ember-qunit</code>. Down at the bottom, let‚Äôs add our test.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">it is an Ember Data model</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">ok</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">()</span> <span class="k">instanceof</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>If all went well, the test should pass and we now know that our contact is an Ember Data model and not just a normal Ember Object.</p>

<p>You probably noticed that we have this very special <code class="highlighter-rouge">this.subject()</code>. It‚Äôs pretty much shorthand for creating a new model and then calling <code class="highlighter-rouge">createRecord()</code> on it.</p>

<p>We also have some questions about the Contact class itself that we‚Äôre going to want answered. Is <code class="highlighter-rouge">firstName</code> a normal property or it is an attribute that is being synced with the database? I don‚Äôt know. Let‚Äôs write a test.</p>

<p>We need access to <code class="highlighter-rouge">Contact</code>, so let‚Äôs import it.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Contact</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">social-butterfly/models/contact</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Take a look at that convention. Commit it to memory. The Ember Resolver will make sense of that string and pull in the right file. The basic gist is that it‚Äôs your application name (what you used when you called <code class="highlighter-rouge">ember new</code>).</p>

<p>Let‚Äôs write our test and then we‚Äôll talk about it a bit.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">it has a first name property</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">property</span> <span class="o">=</span> <span class="nx">Contact</span><span class="p">.</span><span class="nx">metaForProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">strictEqual</span><span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">ok</span><span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">isAttribute</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let‚Äôs talk about <code class="highlighter-rouge">metaForProperty</code>.</p>

<p>This should fail. We have to implement the attribute, right?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let‚Äôs run our tests again and watch everything pass.</p>

<h4 id="quick-practice">Quick Practice</h4>

<p>Can you implement a check for <code class="highlighter-rouge">lastName</code>?</p>

<h4 id="testing-a-computed-property">Testing a Computed Property</h4>

<p>So, we can test some attributes. Now, let‚Äôs test a computed property.</p>

<p>Luckily, this is a lot more straightforward than the previous two tests that we wrote.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">it can compute a full name</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">({</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Steve</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kinney</span><span class="dl">"</span>
  <span class="p">});</span>
  <span class="nx">strictEqual</span><span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">),</span> <span class="dl">'</span><span class="s1">Steve Kinney</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Okay, so now we have a failing test. Let‚Äôs write an implementation.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">DS</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ember-data</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">),</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">),</span>

  <span class="na">fullName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">)</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Alright, let‚Äôs say we wanted to keep track of how many times we met a contact at a party. If we‚Äôve added them to our application we can assume that we‚Äôve met them at least once. We can also level them up meet them again.</p>

<p>So, the first piece of this user story is having a <code class="highlighter-rouge">meetingCount</code> that defaults to one.</p>

<p>Writing a test for this one should be pretty straight-forward.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">it has a meetingCount with a default of 1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
  <span class="nx">strictEqual</span><span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">meetingCount</span><span class="dl">'</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let‚Äôs look at our implementation.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">DS</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ember-data</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">),</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">),</span>
  <span class="na">meetingCount</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">defaultValue</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}),</span>

  <span class="na">fullName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">)</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">),</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="integration-testing">Integration Testing</h3>

<p>Super great, we have a model with tests. But we also have client-side application with no client-side.</p>

<p>Ember CLI didn‚Äôt make any files for us by default. Ember CLI will run any file that ends in <code class="highlighter-rouge">*-test.js</code>. So, let‚Äôs make a <code class="highlighter-rouge">integration</code> folder next to our <code class="highlighter-rouge">unit</code> folder. Let‚Äôs also pop in a file called <code class="highlighter-rouge">add-contact-test.js</code> in that folder.</p>

<p>So now we have a blank file. That‚Äôs great, but we‚Äôre going to need some boilerplate in order to get our suite up and running.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Ember</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ember</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ember-qunit</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">startApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../helpers/start-app</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">App</span><span class="p">;</span>

<span class="nx">module</span><span class="p">(</span><span class="dl">'</span><span class="s1">Integration - Add Contact</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">setup</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">App</span> <span class="o">=</span> <span class="nx">startApp</span><span class="p">();</span>
  <span class="p">},</span>
  <span class="na">teardown</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">destroy</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>So, what‚Äôs going on here. Well, we‚Äôre importing Ember, we‚Äôre pulling in our test library, and we‚Äôre also grabbing a fun little helper called <code class="highlighter-rouge">startApp</code>. This will basically allow us to build up a separate and isolated Ember application from the ground up before each test. We also destroy it at the end of the test.</p>

<p>So, let‚Äôs write a failing test.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">it has an unordered list of contacts</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">visit</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">ok</span><span class="p">(</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">.contacts</span><span class="dl">'</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="pair-practice">Pair Practice</h2>

<ul>
  <li>Make the test above pass</li>
  <li>Write a test that fills in a form with a new contacts first and last name and attds them to <code class="highlighter-rouge">.contacts</code></li>
  <li>Write a test that clicks a ‚ÄúMeet‚Äù button on the contact to increment the number of meetings</li>
</ul>
:ET