I"`<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>Refactor views to remove database queries</li>
  <li>Use partials to tidy up repeated code</li>
  <li>Use built-in Rails Helper methods</li>
  <li>Use custom helper methods</li>
</ul>

<h3 id="hook">Hook</h3>
<ul>
  <li>Today we are going to talk about views techniques that will make sure you are writing clean code.</li>
</ul>

<h2 id="repository">Repository</h2>
<ul>
  <li><a href="https://github.com/mikedao/i-really-like-you">Repo for lesson</a></li>
</ul>

<h3 id="opening">Opening</h3>
<ul>
  <li>Today we are going to talk about three big ideas.</li>
  <li>One: Refactor your views to remove database queries from your views.</li>
  <li>Two: You can use partials to handle repeated code - always keep things DRY.</li>
  <li>Three: Helper methods are there to help you.</li>
</ul>

<h3 id="one---removing-database-queries-from-your-views">One - Removing Database Queries from your Views</h3>
<ul>
  <li>Views should <strong>not</strong> contain database queries.</li>
  <li>Data should be prepared in the controller and model.</li>
  <li>Logic should be <em>absolutely</em> minimal in views.</li>
  <li>Let’s look at our repo. Checkout the idea_one branch.</li>
  <li>Look at the albums#index view.</li>
  <li>How do we refactor that?</li>
  <li>Now, on your own, refactor the album#show view.</li>
</ul>

<h3 id="two---partials-can-be-used-to-tidy-up-and-reuse-pieces-of-code">Two - Partials Can Be Used to Tidy Up and Reuse Pieces of Code</h3>
<ul>
  <li>When we are writing ruby and we have some repeated code, what do we do?</li>
  <li>We refactor by pulling it out to another method.</li>
  <li>We can do sort of the same things in our views.</li>
</ul>

<h3 id="what-is-a-partial">What is a partial?</h3>
<ul>
  <li>It’s a file that contains code that will be reused.</li>
  <li><code class="highlighter-rouge">_filename.html.erb</code> - the covention for naming partials is to begin the name with an underscore.</li>
  <li>A good example is think about a basic CRUD app. Isn’t the same code in both the new and edit views?</li>
  <li>Let’s pull that out into a form.</li>
</ul>

<h3 id="other-things-to-know-about-partials">Other things to know about partials.</h3>
<ul>
  <li>You could render a partial like so &lt;%= ‘albums’ %&gt;</li>
  <li>That line looks for <code class="highlighter-rouge">_albums.html.erb</code> and renders that file.</li>
  <li>Instance variables are automatically shared by both views and partials.</li>
  <li>You need to pass local variables explicitly.</li>
  <li><code class="highlighter-rouge">&lt;%= render partial: ‘filename’, locals: { person: @child } %&gt;</code></li>
  <li><strong>Notice</strong>- there’s no underscore for filename when calling render <code class="highlighter-rouge">&lt;=% render 'filename' %&gt;</code></li>
  <li>You must specify the partial you are rendering if you’re going to use locals.</li>
  <li>You might want by default use partial - it’s more readable.</li>
  <li>Partials can be shared if you put it in the <code class="highlighter-rouge">app/views/shared</code> folder</li>
  <li>You render a shared partial like so: <code class="highlighter-rouge">&lt;%= render partial: 'shared/filename' %&gt;</code></li>
  <li>Let’s pull out the @albums together.</li>
  <li>Now, you make an edit, and pull out that form.</li>
</ul>

<h3 id="three-helper-methods-are-available-within-views-and-sometimes-controllers">Three: Helper methods are available within views and sometimes controllers.</h3>
<ul>
  <li>There are some built in ones, but, you can also make your own!</li>
  <li>Example: <code class="highlighter-rouge">current_user</code> defined in <code class="highlighter-rouge">ApplicationController</code> and <code class="highlighter-rouge">helper_method :current_user</code></li>
  <li>Helpers are useful when they hide complexity that isn’t relevant to the template (this is the majority of the time).</li>
  <li>You’ve been using them already! <code class="highlighter-rouge">link_to</code> <code class="highlighter-rouge">text_field</code> <code class="highlighter-rouge">form_for</code> are all built in helpers</li>
</ul>

<h3 id="built-in-rails-view-helpers">Built In Rails View Helpers</h3>
<ul>
  <li><code class="highlighter-rouge">number_to_currency(1234567890.50) # =&gt; $1,234,567,890.50</code></li>
  <li><code class="highlighter-rouge">number_to_percentage(100, precision: 0)        # =&gt; 100%</code></li>
  <li><code class="highlighter-rouge">time_ago_in_words(3.minutes.from_now)  # =&gt; 3 minutes</code></li>
  <li><code class="highlighter-rouge">distance_of_time_in_words(Time.now, Time.now + 15.seconds)        # =&gt; less than a minute</code></li>
</ul>

<p>Together, we’re going to give album names SPARKLES. Then, let’s look at some other examples of when you need to create custom view helpers. On your own, find some helper to implement.</p>

<h3 id="resources">Resources</h3>
<ul>
  <li><a href="http://guides.rubyonrails.org/form_helpers.html">Rails Form Helpers</a></li>
  <li><a href="http://www.oreillynet.com/pub/a/ruby/excerpts/ruby-learning-rails/ruby-catalog-helper-methods.html">Rails Helper Method Catalog</a></li>
  <li><a href="http://www.rails-dev.com/custom-view-helpers-in-rails-4">Custom View Helpers in Rails</a></li>
  <li><a href="http://mixandgo.com/blog/the-beginner-s-guide-to-rails-helpers">The Beginner’s Guide to Rails Helpers</a></li>
</ul>
:ET