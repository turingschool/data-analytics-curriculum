I"K<h2 id="building-an-api">Building an API</h2>

<h3 id="discussion--being-an-api-provider">Discussion – Being an API Provider</h3>

<ul>
  <li>Where is the real “value” in an average web app?</li>
  <li>Ultimately many web apps are just a layer on top of putting data
into a database and taking it out again</li>
  <li>APIs are a tool for exposing this data more directly than we do
in a typical (HTML) user interface</li>
  <li>What differentiates an API from a UI – Machine readability</li>
</ul>

<p><strong>Questions to Consider when Providing an API</strong></p>

<ul>
  <li>Which formats you will accept and return?</li>
  <li>Parameter inputs you will accept – are any required?</li>
  <li>Will you use authentication or authorization?</li>
</ul>

<p>More Sophisticated:</p>

<ul>
  <li>Rate Limiting / Usage Tracking</li>
  <li>Caching</li>
</ul>

<h2 id="workshop--adding-an-api-to-storedom">Workshop – Adding an API to storedom</h2>

<h3 id="setup">Setup</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone -b building_api https://github.com/turingschool-examples/storedom.git building_api
$ rake db:{drop,create,migrate,seed}
</code></pre></div></div>

<h3 id="background">Background</h3>

<p>As with most things in programming there are multiple ways to serve an API. In this lesson, we’ll approach it using a basic approach and get into namespacing and versioning your API. This lesson does not cover JBuilder or ActiveModel::Serializer. If you are interested in that, check out this <a href="serving_up_an_api.md">lesson plan</a>.</p>

<h3 id="iteration-1-setup-the-existing-itemscontroller-to-serve-json">Iteration 1: Setup the existing <code class="highlighter-rouge">ItemsController</code> to serve JSON</h3>

<p>Rails makes serving multiple formats from a controller mostly easy. Let’s first set up our <code class="highlighter-rouge">index</code> action. Here we are using the <code class="highlighter-rouge">respond_to</code> block to serve <code class="highlighter-rouge">HTML</code>, <code class="highlighter-rouge">JSON</code>, and (<em>gasp!</em>) <code class="highlighter-rouge">XML</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">all</span>
  <span class="err"> </span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="vi">@items</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@items</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="vi">@items</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now we should be able to navigate to <code class="highlighter-rouge">/items</code>, <code class="highlighter-rouge">/items.json</code>, and <code class="highlighter-rouge">/items.xml</code>.</p>

<p>Try the same technique for the <code class="highlighter-rouge">show</code> action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">id: </span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="err"> </span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="vi">@item</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@item</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="vi">@item</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p><em>Think About It</em></p>

<ol>
  <li>Why does it make sense to start with <code class="highlighter-rouge">index</code> and <code class="highlighter-rouge">show</code> instead of something like <code class="highlighter-rouge">create</code>?</li>
  <li>Which actions shouldn’t we add this functionality to? Why?</li>
  <li>What do you dislike about this approach so far?</li>
</ol>

<p>Let’s clean up some of that repetition. Right now we are creating a <code class="highlighter-rouge">respond_to</code> block for each action. We can actually use <code class="highlighter-rouge">respond_to</code> at the class level to cut down on our lines of code. We will also need to use the <code class="highlighter-rouge">respond_with</code> method in each action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span><span class="p">,</span> <span class="ss">:xml</span>
<span class="err"> </span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">all</span>
<span class="err"> </span>
    <span class="n">respond_with</span> <span class="vi">@items</span>
  <span class="k">end</span>
<span class="err"> </span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">id: </span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="err"> </span>
    <span class="n">respond_with</span> <span class="vi">@item</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="workshop-1">Workshop 1</h3>

<ol>
  <li>Modify the orders controller so that it accepts json and xml requests using respond_to in the index and show actions.</li>
  <li>Refactor your implementation so that it uses respond_to at the class level and respond_with at the action level.</li>
</ol>

<h3 id="iteration-2-add-create-and-update">Iteration 2: Add <code class="highlighter-rouge">create</code> and <code class="highlighter-rouge">update</code></h3>

<p>This is where things start to get messy. <code class="highlighter-rouge">respond_with</code> has limitations. If we want to customize messages or add redirects then we will need to fall back to <code class="highlighter-rouge">respond_to</code>.</p>

<p><em>Think About It</em></p>

<ol>
  <li>What should happen if we successfully save using HTML? What about JSON and XML? How do they differ?</li>
  <li>What should happen if we the save fails in HTML? What about JSON and XML? How do they differ?</li>
</ol>

<p>Here is some code to get this to work.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">item_params</span><span class="p">)</span>

  <span class="k">if</span> <span class="vi">@item</span><span class="p">.</span><span class="nf">save</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">items_path</span><span class="p">,</span> <span class="ss">notice: </span><span class="s2">"The item was created."</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@item</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="vi">@item</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">else</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="k">do</span>
        <span class="n">flash</span><span class="p">.</span><span class="nf">now</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"The item was not created."</span>
        <span class="n">render</span> <span class="ss">:new</span>
      <span class="k">end</span>

      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="p">{</span> <span class="ss">messages: </span><span class="vi">@item</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">messages</span><span class="p">},</span> <span class="ss">status: </span><span class="mi">400</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="p">{</span> <span class="ss">messages: </span><span class="vi">@item</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">messages</span><span class="p">},</span> <span class="ss">status: </span><span class="mi">400</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is starting to get messy, but let’s go with it for now. We can refactor after we get it working.</p>

<p>It’s important to confirm that your code is doing what you think it should. Let’s send a POST request to <code class="highlighter-rouge">/items.json</code> using cURL, Postman, or a similar app.</p>

<p><em>Think About It</em></p>

<ol>
  <li>What params do we need to send over?</li>
</ol>

<p>What was the response after sending your request? I received a <code class="highlighter-rouge">422 Unprocessable Entity</code>. Read the error message to determine why this is.</p>

<p>So what’s the fix? Go read the commented out code inside of your <code class="highlighter-rouge">ApplicationController</code>. Can you get it to work?</p>

<p><em>Think About It</em></p>

<ol>
  <li>Why does this “fix” our error?</li>
  <li>What do you suspect are the downsides of this approach?</li>
</ol>

<p>Let’s do something similar for our <code class="highlighter-rouge">update</code> action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">update</span>
  <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>

  <span class="k">if</span> <span class="vi">@item</span><span class="p">.</span><span class="nf">update_attributes</span><span class="p">(</span><span class="n">item_params</span><span class="p">)</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">items_path</span><span class="p">,</span> <span class="ss">notice: </span><span class="s2">"The item was updated."</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@item</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="vi">@item</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">else</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="k">do</span>
        <span class="n">flash</span><span class="p">.</span><span class="nf">now</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"The item was not updated."</span>
        <span class="n">render</span> <span class="ss">:edit</span>
      <span class="k">end</span>

      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="p">{</span> <span class="ss">messages: </span><span class="vi">@item</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">messages</span><span class="p">},</span> <span class="ss">status: </span><span class="mi">400</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml:  </span><span class="p">{</span> <span class="ss">messages: </span><span class="vi">@item</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">messages</span><span class="p">},</span> <span class="ss">status: </span><span class="mi">400</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="iteration-3-separating-responsibilities">Iteration 3: Separating Responsibilities</h4>

<p>Combining machine and human controllers is a bad idea due to the complexity that arises. As it stands we need to write our actions in a way that accounts for both HTML, JSON, and XML. The actions above would be much cleaner if split out.</p>

<p>We can split out responsibilities using namespacing and creating separate controllers.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># routes.rb</span>

<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">except: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Why did we exclude <code class="highlighter-rouge">new</code> and <code class="highlighter-rouge">edit</code>? Would we ever want a JSON view for them?</p>

<p>This will create endpoints for <code class="highlighter-rouge">/items</code> nested under <code class="highlighter-rouge">/api/v1</code>. e.g. <code class="highlighter-rouge">GET /api/v1/items.json</code>. Specifying <code class="highlighter-rouge">.json</code> every time is a bit cumbersome. We can specify that we want to default to JSON instead of HTML.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:api</span><span class="p">,</span> <span class="ss">defaults: </span><span class="p">{</span> <span class="ss">format: :json</span> <span class="p">}</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">except: </span><span class="p">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Create a versioned single responsibility controller for items.
Add the supporting routes.
Add the index, show, create, update and delete actions.
Explain why you don’t need new and edit.
Show that it works via Postman.</p>

<ul>
  <li><a href="https://www.dropbox.com/s/13amb27emariz2q/Turing%20-%20Building%20an%20API%20%28Notes%29.pages?dl=0">notes</a></li>
</ul>

<p>Topics:</p>

<ul>
  <li>code-a-long adding an API to storedom</li>
  <li>using <code class="highlighter-rouge">respond_to</code> to handle multiple request formats</li>
  <li>using ActiveRecord default <code class="highlighter-rouge">to_json</code> / <code class="highlighter-rouge">to_xml</code> to handle serialization</li>
  <li>Using routing namespaces to version and partition dedicated API controllers</li>
</ul>
:ET