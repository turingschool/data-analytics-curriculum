I"k><p><em><a href="./index">Back to Battleship Home</a></em>
<em><a href="./requirements">Back to Requirements</a></em></p>

<h2 id="test-driven-development">Test Driven Development</h2>

<p>In this iteration, you are required to use TDD to create your classes. Use the interaction pattern to determine what a method should do and write one or more tests to verify that expected behavior. Then you can implement the method. You should always write code with the purpose of making a test pass.</p>

<h2 id="ship">Ship</h2>

<p>A Ship object will represent a single ship on the board. It will be able to keep track of how much health it has, take hits, and report if it is sunk or not. A ship should start off with health equal to it’s length.</p>

<p>The Ship class should follow this interaction pattern:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/ship'</span>
<span class="c1">#=&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span> <span class="o">=</span> <span class="no">Ship</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Cruiser"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1">#=&gt; #&lt;Ship:0x00007feb05112d10...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">name</span>
<span class="c1">#=&gt; "Cruiser"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">length</span>
<span class="c1">#=&gt; 3</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">health</span>
<span class="c1">#=&gt; 3</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">sunk?</span>
<span class="c1">#=&gt; false</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">hit</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">health</span>
<span class="c1">#=&gt; 2</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">hit</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">health</span>
<span class="c1">#=&gt; 1</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">sunk?</span>
<span class="c1">#=&gt; false</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">hit</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">sunk?</span>
<span class="c1">#=&gt; true</span>
</code></pre></div></div>

<h2 id="cell">Cell</h2>

<p>A Cell object is a single cell on our board. A Cell can either contain a Ship or nothing.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/ship'</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/cell'</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span> <span class="o">=</span> <span class="no">Cell</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"B4"</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Cell:0x00007f84f0ad4720...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">coordinate</span>
<span class="c1"># =&gt; "B4"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">ship</span>
<span class="c1"># =&gt; nil</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">empty?</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span> <span class="o">=</span> <span class="no">Ship</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Cruiser"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Ship:0x00007f84f0891238...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">place_ship</span><span class="p">(</span><span class="n">cruiser</span><span class="p">)</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">ship</span>
<span class="c1"># =&gt; #&lt;Ship:0x00007f84f0891238...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">empty?</span>
<span class="c1"># =&gt; false</span>
</code></pre></div></div>

<p>Additionally, a cell knows when it has been fired upon. When it is fired upon, the cell’s ship should be damaged if it has one:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/ship'</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/cell'</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span> <span class="o">=</span> <span class="no">Cell</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"B4"</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Cell:0x00007f84f0ad4720...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span> <span class="o">=</span> <span class="no">Ship</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Cruiser"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Ship:0x00007f84f0891238...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">place_ship</span><span class="p">(</span><span class="n">cruiser</span><span class="p">)</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">fired_upon?</span>
<span class="c1"># =&gt; false</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">fire_upon</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">health</span>
<span class="c1"># =&gt; 2</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="nf">fired_upon?</span>
<span class="c1"># =&gt; true</span>
</code></pre></div></div>

<p>Finally, a Cell will have a method called <code class="highlighter-rouge">render</code> which returns a String representation of the Cell for when we need to print the board. A cell can potentially be rendered as:</p>

<ul>
  <li>”.” if the cell has not been fired upon.</li>
  <li>“M” if the cell has been fired upon and it does not contain a ship (the shot was a miss).</li>
  <li>“H” if the cell has been fired upon and it contains a ship (the shot was a hit).</li>
  <li>“X” if the cell has been fired upon and its ship has been sunk.</li>
</ul>

<p>Additionally, we will include an optional boolean argument to indicate if we want to reveal a ship in the cell even if it has not been fired upon. This should render a cell that has not been fired upon and contains a ship as an “S”. This will be useful for showing the user where they placed their ships and for debugging.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_1</span> <span class="o">=</span> <span class="no">Cell</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"B4"</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Cell:0x00007f84f11df920...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_1</span><span class="p">.</span><span class="nf">render</span>
<span class="c1"># =&gt; "."</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_1</span><span class="p">.</span><span class="nf">fire_upon</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_1</span><span class="p">.</span><span class="nf">render</span>
<span class="c1"># =&gt; "M"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span> <span class="o">=</span> <span class="no">Cell</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"C3"</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Cell:0x00007f84f0b29d10...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span> <span class="o">=</span> <span class="no">Ship</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Cruiser"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Ship:0x00007f84f0ad4fb8...&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">place_ship</span><span class="p">(</span><span class="n">cruiser</span><span class="p">)</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">render</span>
<span class="c1"># =&gt; "."</span>

<span class="c1"># Indicate that we want to show a ship with the optional argument</span>
<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
<span class="c1"># =&gt; "S"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">fire_upon</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">render</span>
<span class="c1"># =&gt; "H"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">sunk?</span>
<span class="c1"># =&gt; false</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">hit</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">hit</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cruiser</span><span class="p">.</span><span class="nf">sunk?</span>
<span class="c1"># =&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cell_2</span><span class="p">.</span><span class="nf">render</span>
<span class="c1"># =&gt; "X"</span>
</code></pre></div></div>
:ET