I"ú.<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Students are comfortable using AJAX to make RESTful requests</li>
</ul>

<h2 id="ajaxwhats-that-again">AJAXâ€¦Whatâ€™s That Again?</h2>

<p><code class="highlighter-rouge">AJAX</code> == Asynchronous JavaScript and XML. This should probably be renamed to <code class="highlighter-rouge">AJAJ</code> (Async JS and JSON), though.</p>

<p>Essentially, AJAX allows us to <em>asynchronously</em> interact with most anything, but predominantly other servers (think APIs). The asynchronous bit here means that we could make a request and not need to wait for its response before moving on to execute other lines of code. The request will come back and be handled when itâ€™s ready without needing to halt our program waiting for it.</p>

<p>Weâ€™ll learn more about asynchronicity in JavaScript later in the module, but for now, letâ€™s think of AJAX as the tool that will allow us to make client-side requests to a different server (API).</p>

<h2 id="get-example">GET Example</h2>

<p><a href="https://api.jquery.com/category/ajax/">jQuery AJAX</a> requests come in all shapes and sizes, but for reference, hereâ€™s a common structure:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// make a GET request</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:3000/api/v1/posts</span><span class="dl">"</span>
<span class="p">})</span>
<span class="c1">// if successful, request is handled by `.then`</span>
<span class="c1">// JSON response, here named `posts`, is passed to anonymous function</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">posts</span><span class="p">){</span>
  <span class="c1">// we're within this block if things went well,</span>
  <span class="c1">// so do something with the data!</span>
<span class="p">})</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
  <span class="c1">// only here if there was an error,</span>
  <span class="c1">// so handle error if there is one</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Hereâ€™s a very similar structure, using a bit of jQuery AJAXâ€™s syntactic sugar:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/api/v1/posts</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">posts</span><span class="p">){</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
  <span class="p">})</span>
</code></pre></div></div>

<p>jQuery AJAX comes with many built-in and readable methods similar to <code class="highlighter-rouge">$.get()</code> for POST, DELETE, etc requests. Make sure to read their <a href="https://api.jquery.com/category/ajax/">docs</a> to learn how to use them correctly.</p>

<h2 id="organizing-ajax-requests">Organizing AJAX Requests</h2>

<p>In the examples above, the success or failure of our AJAX requests are handled by anonymous functions. By changing these, we can start to organize and DRY up our code.</p>

<p>Iâ€™d suggest grouping all of these to-be-named functions together (â€¦hint, hintâ€¦in a fileâ€¦).</p>

<p>Letâ€™s refactor this example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/api/v1/posts</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">posts</span><span class="p">){</span>
    <span class="nx">posts</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">){</span>
      <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">.posts-box</span><span class="dl">"</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">})</span>
</code></pre></div></div>

<p>Say we created one function responsible for appending posts and another to log our error to the console:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">appendPosts</span> <span class="o">=</span> <span class="p">(</span><span class="nx">posts</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">posts</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">){</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">.posts-box</span><span class="dl">"</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">errorLog</span> <span class="o">=</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We could then slim down our AJAX call to just this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/api/v1/posts</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">appendPosts</span><span class="p">)</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLog</span><span class="p">)</span>
</code></pre></div></div>

<p>Notice how we still need to handle the call with <code class="highlighter-rouge">.then()</code> and <code class="highlighter-rouge">.catch().</code></p>

<h3 id="going-further---organizing-requests-as-event-handlers">Going Further - Organizing Requests as Event Handlers</h3>

<p>Itâ€™s very likely youâ€™ll be using AJAX requests as event handlers.</p>

<p>For example, on submit of a form, we make a POST request with the form data.</p>

<p>Just like we organized our AJAX handlers above, we can organize our event handlers similarly.</p>

<p>If we were working with form data like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">submit</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://example.com/articles</span><span class="dl">'</span><span class="p">,</span> <span class="dl">"</span><span class="s2">article</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">appendArticle</span><span class="p">)</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLog</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>We can refactor that so our event bindings live together, our AJAX calls live together, and our AJAX handlers live together.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// event bindings live nicely as one liners</span>
<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">submit</span><span class="dl">'</span><span class="p">,</span> <span class="nx">postArticle</span><span class="p">)</span>

<span class="c1">// AJAX call is nice and tidy on its own</span>
<span class="kd">const</span> <span class="nx">postArticle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://example.com/articles</span><span class="dl">'</span><span class="p">,</span> <span class="dl">"</span><span class="s2">article</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">appendPost</span><span class="p">)</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLog</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="work-time">Work Time</h2>

<p>Pair up with your Quantified Self partner and discuss the following:</p>

<ul>
  <li>What are some use cases for AJAX? Name some cards from your project that will require an AJAX request to complete.</li>
  <li>What information do you need before you can make an AJAX request?</li>
  <li>How do you access the response from the request?</li>
</ul>

<p>Once youâ€™ve answered those, work to implement the variety of AJAX requests necessary to GET, POST, DELETE, etc. to the Quantified Self API.</p>
:ET