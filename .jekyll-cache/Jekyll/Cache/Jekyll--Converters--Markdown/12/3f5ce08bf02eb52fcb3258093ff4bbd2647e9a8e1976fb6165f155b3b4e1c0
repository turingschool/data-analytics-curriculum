I"<h3 id="learning-goals">Learning Goals</h3>
<ul>
  <li>break a problem into logical components</li>
  <li>implement appropriate Ruby syntax</li>
  <li>utilize methods and classes</li>
</ul>

<p>Letâ€™s write a program that can detect mistakes in a credit card number.</p>

<h2 id="background-luhn-algorithm">Background: Luhn Algorithm</h2>

<p>The Luhn algorithm is a check-summing algorithm best known for checking the validity of credit card numbers.</p>

<p>You can checkout the full description on Wikipedia: http://en.wikipedia.org/wiki/Luhn_algorithm</p>

<h3 id="description">Description</h3>

<p>(adapted from Wikipedia)</p>

<p>The formula verifies a number against its included check digit, which is usually appended to a partial account number to generate the full account number. This full account number must pass the following test:</p>

<ul>
  <li>starting with the first digit, double the value of every other digit</li>
  <li>if product of this doubling operation is greater than 9 (e.g., 7 * 2 = 14), then sum the digits of the products (e.g., 10: 1 + 0 = 1, 14: 1 + 4 = 5).</li>
  <li>take the sum of all the digits</li>
  <li>if the sum is divisible by ten, the number is valid</li>
</ul>

<h3 id="example">Example</h3>

<h4 id="validating-an-account-number">Validating an Account Number</h4>

<p>Using <code class="highlighter-rouge">5541808923795240</code> as our sample input:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Account number:        5    5    4    1    8    0    8    9    2    3    7    9    5    2    4    0
2x every other digit:  10   5    8    1    16   0    16   9    4    3    14   9    10   2    8    0
Summed digits over 10: 1    5    8    1    7    0    7    9    4    3    5    9    1    2    8    0
Results summed:        70
Divisible by 10?:      70 % 10 == 0
</code></pre></div></div>

<p>Since the summed results modulo 10 is zero, the account number is valid according to the algorithm.</p>

<h2 id="assignment">Assignment</h2>

<h3 id="setup">Setup</h3>

<ol>
  <li>Fork <a href="https://github.com/turingschool-examples/credit_check">this Repository</a></li>
  <li>Clone your forked repo to your machine with <code class="highlighter-rouge">git clone &lt;ssh key for your repo&gt;</code></li>
</ol>

<h3 id="iteration-1---the-luhn-algorithm">Iteration 1 - The Luhn Algorithm</h3>

<p>Open <code class="highlighter-rouge">credit_check.rb</code> in your <code class="highlighter-rouge">lib</code> directory. You should should this template:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">card_number</span> <span class="o">=</span> <span class="s2">"5541808923795240"</span>

<span class="c1"># Your Luhn Algorithm Here</span>

<span class="c1"># Output</span>
<span class="c1">## If it is valid, print "The number [card number] is valid!"</span>
<span class="c1">## If it is invalid, print "The number [card number] is invalid!"</span>
</code></pre></div></div>

<p>Fill out the file so that it will print out the validity of the given card_number. The number included in the template is a valid example.</p>

<h4 id="sample-data">Sample Data</h4>

<p>If helpful, you can use the following sample data:</p>

<ul>
  <li><em>Valid</em>: 5541808923795240, 4024007136512380, 6011797668867828</li>
  <li><em>Invalid</em>: 5541801923795240, 4024007106512380, 6011797668868728</li>
</ul>

<h3 id="iteration-2---credit-card-class">Iteration 2 - Credit Card Class</h3>

<p>Create a <code class="highlighter-rouge">CreditCard</code> class based on the following criteria:</p>

<ul>
  <li>A <code class="highlighter-rouge">CreditCard</code> is passed two arguments upon initialization
    <ul>
      <li>The first argument is a String representing the card number</li>
      <li>The second argument is an Integer representing the <code class="highlighter-rouge">CreditCard</code>â€™s limit</li>
    </ul>
  </li>
  <li>A <code class="highlighter-rouge">CreditCard</code> has getter methods called <code class="highlighter-rouge">card_number</code> and <code class="highlighter-rouge">limit</code> for reading the card number and limit</li>
  <li>A <code class="highlighter-rouge">CreditCard</code> has a method called <code class="highlighter-rouge">is_valid?</code> that takes no arguments and returns either true or false based on whether or not the card number is valid.</li>
  <li>A <code class="highlighter-rouge">CreditCard</code> has a method called <code class="highlighter-rouge">last_four</code> that returns a String of the last four digits of the card number</li>
</ul>

<p>If the previous criteria are met, you should be able to interact with the <code class="highlighter-rouge">CreditCard</code> class from a Pry session like so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'./lib/credit_card'</span>
<span class="c1">#=&gt; true</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">credit_card</span> <span class="o">=</span> <span class="no">CreditCard</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"5541808923795240"</span><span class="p">,</span> <span class="mi">15000</span><span class="p">)</span>
<span class="c1">#=&gt; #&lt;CreditCard:0x00007fbb1ca5f698 @card_number="5541808923795240", @limit=15000&gt;</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">credit_card</span><span class="p">.</span><span class="nf">card_number</span>
<span class="c1">#=&gt; "5541808923795240"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">credit_card</span><span class="p">.</span><span class="nf">limit</span>
<span class="c1">#=&gt; 15000</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">credit_card</span><span class="p">.</span><span class="nf">last_four</span>
<span class="c1">#=&gt; "5240"</span>

<span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">credit_card</span><span class="p">.</span><span class="nf">is_valid?</span>
<span class="c1">#=&gt; true</span>
</code></pre></div></div>

<h3 id="iteration-3---testing">Iteration 3 - Testing</h3>

<p>Write tests for your <code class="highlighter-rouge">CreditCard</code> class that cover that expected behavior described in the previous iteration. If done correctly, the <code class="highlighter-rouge">bank_test.rb</code> test should also pass.</p>

<h3 id="iteration-4---extensions">Iteration 4 - Extensions</h3>

<ul>
  <li>
    <p>Create a command line interface that allows the user to validate a number</p>
  </li>
  <li>
    <p>Add functionality to calculate the check sum digit.</p>
  </li>
  <li>
    <p>Can you make it work for American Express numbers? 342804633855673 is valid but 342801633855673 is invalid</p>
  </li>
</ul>
:ET