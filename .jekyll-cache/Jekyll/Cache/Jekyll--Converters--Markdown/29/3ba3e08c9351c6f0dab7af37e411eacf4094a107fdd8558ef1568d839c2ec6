I"à8<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Students understand refactor techniques using presenters and decorators</li>
  <li>Students understand the theory and purpose of a presenter object vs a decorator object</li>
  <li>Students understand the benefits of <code class="highlighter-rouge">SimpleDelegator</code></li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/refactoring_api_curious_presenters_decorators">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What new uses of Rails were you exposed to during API Curious?
    <ul>
      <li>What specifically was beyond the traditional scope of MVC?</li>
    </ul>
  </li>
  <li>Did any of our controllers or models have more than one responsibility?</li>
  <li>How many instance variables were we using to send information to our views?</li>
</ul>

<h2 id="setup">Setup</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:turingschool-examples/apicurious_to_refactor.git
<span class="nb">cd </span>apicurious_to_refactor
bundle
bundle <span class="nb">exec </span>rake db:<span class="o">{</span>create,migrate<span class="o">}</span>
bundle <span class="nb">exec </span>figaro <span class="nb">install</span>
</code></pre></div></div>

<p>Within <code class="highlighter-rouge">config/application.yml</code>, paste:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">GITHUB_KEY</span><span class="p">:</span> <span class="o">&lt;</span><span class="no">YOUR</span> <span class="no">GITHUB</span> <span class="no">CLIENT</span> <span class="no">ID</span><span class="o">&gt;</span>
<span class="no">GITHUB_SECRET</span><span class="p">:</span> <span class="o">&lt;</span><span class="no">YOUR</span> <span class="no">GITHUB</span> <span class="no">CLIENT</span> <span class="no">SECRET</span><span class="o">&gt;</span>
</code></pre></div></div>

<h2 id="intro-to-presenters">Intro to Presenters</h2>

<h3 id="presenter-basics">Presenter Basics</h3>

<p>Consider these 4 rules from Sandi Metz for practicing good Rails
hygiene:</p>

<ol>
  <li>Your class can be no longer than 100 lines of code.</li>
  <li>Your methods can be no longer than five lines of code.</li>
  <li>You can pass no more than four parameters and you can‚Äôt just make it one big hash.</li>
  <li>When a call comes into your Rails controller, you can only instantiate one
object to do whatever it is that needs to be done. And your view can only know about one instance variable.</li>
</ol>

<p>The first 3 are probably familiar to us at this point (even if we
grumble about them), but what about that last one?</p>

<p>We‚Äôve certainly seen Rails controllers and views that utilized more
than one object. So how can we reconcile the need to get things done
with this outline for code cleanliness?</p>

<p>Presenters are a technique for solving this problem.</p>

<ul>
  <li>Presenters are a pattern for abstracting complexity in our view/presentation layer</li>
  <li>Presenters combine functionality across <em>multiple objects</em> into a single interface</li>
  <li>No library needed ‚Äì just POROs!</li>
</ul>

<h3 id="workshop--refactor-api-curious-with-presenters">Workshop:  Refactor API Curious with Presenters</h3>

<p>Go ahead and spin up your Rails server. Log into the application through GitHub and check out what information shows up on your user show page.</p>

<p>Looks like a lot of the data we‚Äôd want, right?</p>

<p>Let‚Äôs check out our <code class="highlighter-rouge">UsersController</code> now.</p>

<p>What do we see that conflicts with the advice we read from Sandi Metz above?</p>

<p>Let‚Äôs think through how a Presenter object could clean this up for us.</p>

<h4 id="our-goal-one-instance-variable-sent-to-view">Our Goal: One Instance Variable Sent to View</h4>

<blockquote>
  <p>PORO == Plain Old Ruby Object</p>
</blockquote>

<p>Think back to life before ActiveRecord - we modeled our data in regular old Ruby classes. We‚Äôre going to bring this concept back as we implement presenter objects. These objects will allow us to fully remove hashes from our view, as well as remove all but one instance variable being sent to the view.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>app/presenters
<span class="nb">touch </span>app/presenters/dashboard_presenter.rb
</code></pre></div></div>

<p>Within <code class="highlighter-rouge">dashboard_presenter.rb</code>, let‚Äôs define our PORO:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DasboardPresenter</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We‚Äôll likely want to initialize this with some information about the current user.</p>

<p>Let‚Äôs go ahead and begin moving instance variables defined in our controller over to our presenter.</p>

<p>Our end goal should leave us with one instance variable in our controller method whose value points to an instance of <code class="highlighter-rouge">DashboardPresenter</code>.</p>

<h2 id="intro-to-decorators">Intro to Decorators</h2>

<p>You may be thinking our code looks pretty good now. You‚Äôre right!</p>

<p>As always, though, there‚Äôs room to go further.</p>

<p>We‚Äôre going to look into the concept of <strong>decorators</strong>. These will feel similar to presenters, but often are used to add extra functionality to objects.</p>

<h3 id="decorator-basics">Decorator Basics</h3>

<ul>
  <li>Decorators are a Software Pattern for applying object-oriented techniques to handling
application presentation logic</li>
  <li>Decorators are often used to solve similar problems as <code class="highlighter-rouge">Helpers</code> in Rails, but rather than mixing the helper methods into our view template, we will create an object that provides the desired behavior</li>
  <li>Most implementations of the Decorator pattern are built around ‚Äúwrapping‚Äù and ‚Äúdelegation‚Äù</li>
  <li>Decorators are a good demonstration of
the <a href="https://en.wikipedia.org/wiki/Open/closed_principle">Open/Closed Principle</a> ‚Äì
we are able to add functionality to the wrapped object without
modifying it directly</li>
  <li>Decorators in Ruby also exploit Ruby‚Äôs use of duck typing ‚Äì since
they delegate unknown methods to the internal/wrapped object, they
effectively preserve the same interface and can be used
interchangeably.</li>
</ul>

<h4 id="our-goal-add-functionality-to-user-objects-without-modifying-them-directly">Our Goal: Add Functionality to User Objects (Without Modifying them Directly)</h4>

<p>Let‚Äôs take a moment to think of our <code class="highlighter-rouge">User</code> objects within API Curious.</p>

<p>We‚Äôve purposefully not saved many attributes for a user single to the database.
As far as single responsibility goes, this makes sense.</p>

<p>In the context of our application, however, we know that there are attributes of each user that we do frequently want to access.</p>

<p>Let‚Äôs take, for example, users‚Äô repositories. When cloning GitHub, it makes sense that we‚Äôd want to <code class="highlighter-rouge">GET</code> repositories for each user, but we know that it wouldn‚Äôt make sense to create a <code class="highlighter-rouge">respositories</code> column on the <code class="highlighter-rouge">users</code> table.</p>

<p>What we can do here is <strong>decorate</strong> the <code class="highlighter-rouge">User</code> object.</p>

<p>For this, we‚Äôll be creating a <code class="highlighter-rouge">GithubUser</code> decorator object.  It‚Äôll allow us to keep the sanctity and single responsibility of the <code class="highlighter-rouge">User</code> class as-is, while adding additional functionality on top - such as a <code class="highlighter-rouge">#repositories</code> method.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>app/decorators
<span class="nb">touch </span>app/decorators/github_user.rb
</code></pre></div></div>

<p>Within <code class="highlighter-rouge">github_user.rb</code>, let‚Äôs define our decorator PORO:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GithubUser</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We‚Äôre going to want to initialize instances of <code class="highlighter-rouge">GithubUser</code> with a <code class="highlighter-rouge">User</code> object.</p>

<p>By doing this, we‚Äôll keep all access to data within the <code class="highlighter-rouge">User</code> object, but we‚Äôll also be able to customize that data as needed <strong>AND</strong> add functionality via methods on the <code class="highlighter-rouge">GithubUser</code> object.</p>

<h3 id="understanding-simpledelegator">Understanding <code class="highlighter-rouge">SimpleDelegator</code></h3>

<p>Ruby‚Äôs got a built-in class to help with decorating objects.</p>

<p>Take a few minutes to read up on this: <a href="https://ruby-doc.org/stdlib-2.4.2/libdoc/delegate/rdoc/SimpleDelegator.html">https://ruby-doc.org/stdlib-2.4.2/libdoc/delegate/rdoc/SimpleDelegator.html</a></p>

<p>Let‚Äôs look at the Ruby doc‚Äôs <code class="highlighter-rouge">SimpleDelegator</code> usage. Pop the following code into <code class="highlighter-rouge">pry</code> and play around.</p>

<p>What does this help with? What advantages does <code class="highlighter-rouge">SimpleDelegator</code> have for us?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span>
  <span class="k">def</span> <span class="nf">born_on</span>
    <span class="no">Date</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">1989</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">UserDecorator</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
  <span class="k">def</span> <span class="nf">birth_year</span>
    <span class="n">born_on</span><span class="p">.</span><span class="nf">year</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">decorated_user</span> <span class="o">=</span> <span class="no">UserDecorator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>
<span class="n">decorated_user</span><span class="p">.</span><span class="nf">birth_year</span>  <span class="c1">#=&gt; 1989</span>
<span class="n">decorated_user</span><span class="p">.</span><span class="nf">born_on</span>  <span class="c1">#=&gt; #&lt;Date: 1989-09-10 ((2447780j,0s,0n),+0s,2299161j)&gt;</span>
</code></pre></div></div>

<p>Essentially, we‚Äôre able to remove the extra layer our <code class="highlighter-rouge">Decorator</code> class was adding on top of the <code class="highlighter-rouge">User</code> class.</p>

<p>Knowing this, let‚Äôs refactor once more for our <code class="highlighter-rouge">GithubUser</code> decorator to inherit from <code class="highlighter-rouge">SimpleDelegator</code>.</p>

<h4 id="what-about-initialize">What About <code class="highlighter-rouge">initialize</code>?</h4>

<p>Notice how our decorator can be initialized without an <code class="highlighter-rouge">initialize</code> method defined.</p>

<p>So long as the object you‚Äôre decorating is the <strong>only</strong> argument that needs to be passed to the decorator, <code class="highlighter-rouge">initialize</code> is not needed.</p>

<p>If additional information (besides the object) must be passed to the decorator, you <strong>will</strong> need to define <code class="highlighter-rouge">initialize</code>.</p>

<p>Let‚Äôs try that out:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span>
  <span class="k">def</span> <span class="nf">born_on</span>
    <span class="no">Date</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">1989</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">UserDecorator</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
  <span class="nb">attr_reader</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:extra_info</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">extra_info</span><span class="p">)</span>
    <span class="vi">@extra_info</span> <span class="o">=</span> <span class="n">extra_info</span>
    <span class="k">super</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">birth_year</span>
    <span class="n">born_on</span><span class="p">.</span><span class="nf">year</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">decorated_user</span> <span class="o">=</span> <span class="no">UserDecorator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">,</span> <span class="s2">"some info!"</span><span class="p">)</span>
<span class="n">decorated_user</span><span class="p">.</span><span class="nf">birth_year</span>  <span class="c1">#=&gt; 1989</span>
<span class="n">decorated_user</span><span class="p">.</span><span class="nf">born_on</span>  <span class="c1">#=&gt; Sun, 10 Sep 1989</span>
</code></pre></div></div>

<p>Now knowing this, let‚Äôs add functionality to our application‚Äôs users with the <code class="highlighter-rouge">GithubUser</code> decorator we created.</p>
:ET