I""<h2 id="iteration-3---customizing-site-design-with-layouts-and-css">Iteration 3 - Customizing site design with layouts and CSS</h2>

<p>After completing iterations 0-2, we should have a basic Hyde blog system that can handle the following workflow:</p>

<ol>
  <li>Create a new Hyde project with <code class="highlighter-rouge">bin/hyde new ~/my-blog</code></li>
  <li>Generate a new blog post with <code class="highlighter-rouge">bin/hyde post ~/my-blog Pizza Rules</code></li>
  <li>Build the project source into output HTML and CSS files with <code class="highlighter-rouge">bin/hyde build ~/my-blog</code></li>
</ol>

<p>However if we look at the content we’re generating so far, we’ll see something is missing. The default post content we generated should look like:</p>

<pre><code class="language-plain"># Pizza Rules

Your content here
</code></pre>

<p>And when we process this content with kramdown, we’ll get the equivalent HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"pizza-rules"</span><span class="nt">&gt;</span>Pizza Rules<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;p&gt;</span>Your content here<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>But we know that a valid HTML document requires a bit more structure – specifically it should include the standard <code class="highlighter-rouge"><span class="nt">&lt;html&gt;</span></code>, <code class="highlighter-rouge">&lt;head&gt;</code>, <code class="highlighter-rouge">&lt;title&gt;</code>, and <code class="highlighter-rouge">&lt;body&gt;</code> tags.</p>

<p>Additionally, we so far haven’t made any use of the starting CSS files we generated with our new project. We’d ideally like to use some additional html tags to link these files into our pages. Finally, we’d prefer to set this up <em>once</em> so that it applies to all our pages and posts.</p>

<h3 id="layouts">Layouts</h3>

<p>In the context of web design a “layout” is a special template that extracts some of the common formatting for a document or collection of documents. The point of a layout is to pull out commonly repeated markup so that we don’t have to directly copy it into all of our files. For example many sites will put all of the common content for their header, sidebar, and footer into a layout, since these contents appear the same on every page.</p>

<p>For Hyde, we’d like to define a standard layout file which contains all of the “boilerplate” markup for our pages. Then, when we build the site, each individual page (or post) should have its rendered content injected into the appropriate place in the layout.</p>

<h3 id="supporting-layouts-in-hyde">Supporting Layouts in Hyde</h3>

<p>For this iteration you need to do several things</p>

<ol>
  <li>Add an additional <code class="highlighter-rouge">source/layouts/</code> directory to the Hyde project generator</li>
  <li>Update the generator to include a standard layout <code class="highlighter-rouge">source/layouts/default.html.erb</code> when generating a new project</li>
  <li>Update your <code class="highlighter-rouge">build</code> process so that each page gets its content injected into the layout (more on this below)</li>
</ol>

<h3 id="dynamic-templating-with-erb">Dynamic Templating with ERB</h3>

<p>Ruby ships with a built-in templating system called <a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/erb/rdoc/ERB.html">ERB</a>. You can think of ERB as string interpolation on steroids – it allows us to take pre-defined template strings and then make them dynamic by inserting ruby code.</p>

<p>Nothing about ERB makes it specific to HTML, however that is a common use case. Especially in the context of web applications (e.g. Rails) you’ll frequently see ERB used to make HTML templates dynamic.</p>

<h3 id="erb-template-crash-course">ERB Template Crash Course</h3>

<p>ERB is part of Ruby’s standard library, so we can access it simply by requiring it. To make an ERB template, we simply pass it a string (this could be defined in code, or read from a file). Within an ERB template string, we use 2 special templating tags: <code class="highlighter-rouge">&lt;% %&gt;</code> to indicate ruby code that should be evaluated but not output into the template, and <code class="highlighter-rouge">&lt;%= %&gt;</code> to indicate ruby code that should be evaluated <em>and</em> printed to the template.</p>

<p>For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"erb"</span>
<span class="n">template_string</span> <span class="o">=</span> <span class="s2">"No equal sign (not printed): &lt;% 'ruby code -- not printed to the template' %&gt; -- Equal sign (printed): &lt;%= 1 + 1 %&gt;"</span>
<span class="no">ERB</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">template_string</span><span class="p">).</span><span class="nf">result</span>
<span class="s2">"No equal sign (not printed):  -- Equal sign (printed): 2"</span>
</code></pre></div></div>

<h4 id="erb-with-local-bindings">ERB With Local Bindings</h4>

<p>Sometimes we’d like to inject specifically named variables into our ERB when we render it. For example rendering a template string that uses a variable <code class="highlighter-rouge">pizza_toppings</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Your 'Za features: &lt;%= pizza_toppings %&gt;"
</code></pre></div></div>

<p>ERB supports this by allowing us to provide a <code class="highlighter-rouge">binding</code> value when generating a <code class="highlighter-rouge">result</code>. The <code class="highlighter-rouge">binding</code> conveys local variable references that can be accessed inside of the template string when it gets evaluated.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"erb"</span>

<span class="n">template_string</span> <span class="o">=</span> <span class="s2">"Your 'Za features: &lt;%= pizza_toppings %&gt;"</span>
<span class="n">pizza_toppings</span> <span class="o">=</span> <span class="s2">"anchovies, mushrooms, and salami"</span>

<span class="no">ERB</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">template_string</span><span class="p">).</span><span class="nf">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
<span class="s2">"Your 'Za features: anchovies, mushrooms, and salami"</span>
</code></pre></div></div>

<h3 id="layouts-with-erb">Layouts with ERB</h3>

<p>With this tool at our disposal, we should be able to define a simple HTML layout that can house the surrounding document structure for our pages, but allow the actual page “body” to be injected in dynamically. A simple structure might look like:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;&lt;title&gt;</span>Our Site<span class="nt">&lt;/title&gt;&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">content_goes_here</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Note that ERB files always end with <code class="highlighter-rouge">.erb</code> but can also have the file extension they would have had anyway. So HTML files with ERB tags added to them often end with <code class="highlighter-rouge">.html.erb</code>. After they get processed, it’s common to name the resulting file with just <code class="highlighter-rouge">.html</code>.</p>

<h2 id="requirements">Requirements</h2>

<p>For this iteration, update Hyde to allow user-defined layouts:</p>

<ol>
  <li>Add an additional <code class="highlighter-rouge">source/layouts/</code> directory to the Hyde project generator</li>
  <li>Update the generator to include a standard layout <code class="highlighter-rouge">source/layouts/default.html.erb</code> when generating a new project</li>
  <li>Update your <code class="highlighter-rouge">build</code> process so that each page gets its content injected into the layout using ERB. Note that you will probably first need to translate the page content from markdown to html and <em>then</em> inject it into the layout.</li>
</ol>
:ET