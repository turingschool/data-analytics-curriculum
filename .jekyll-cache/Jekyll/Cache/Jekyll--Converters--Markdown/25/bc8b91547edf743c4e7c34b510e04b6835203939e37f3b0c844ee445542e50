I"Ï<h2 id="iteration-4-merge-sort">Iteration 4: Merge Sort</h2>

<p>Weâ€™re doing the same here, but with a different sorting algorithm, merge sort. As you implement this, think about why we might need different algorithms. How many swaps does your sort from iteration 3 make in the best case scenario? Worst case? How does this compare to Merge Sort?</p>

<p>The interaction pattern will look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">card_1</span> <span class="o">=</span> <span class="no">Card</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"4"</span><span class="p">,</span><span class="s2">"Hearts"</span><span class="p">)</span>
<span class="n">card_2</span> <span class="o">=</span> <span class="no">Card</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Ace"</span><span class="p">,</span> <span class="s2">"Spades"</span><span class="p">)</span>
<span class="n">card_3</span> <span class="o">=</span> <span class="no">Card</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"5"</span><span class="p">,</span> <span class="s2">"Diamonds"</span><span class="p">)</span>
<span class="n">card_4</span> <span class="o">=</span> <span class="no">Card</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Jack"</span><span class="p">,</span> <span class="s2">"Clubs"</span><span class="p">)</span>
<span class="n">card_5</span> <span class="o">=</span> <span class="no">Card</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Ace"</span><span class="p">,</span> <span class="s2">"Diamonds"</span><span class="p">)</span>
<span class="n">deck</span> <span class="o">=</span> <span class="no">Deck</span><span class="p">.</span><span class="nf">new</span><span class="p">([</span><span class="n">card_1</span><span class="p">,</span> <span class="n">card_2</span><span class="p">,</span> <span class="n">card_3</span><span class="p">,</span> <span class="n">card_4</span><span class="p">,</span> <span class="n">card_5</span><span class="p">])</span>

<span class="n">deck</span><span class="p">.</span><span class="nf">merge_sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="n">card_1</span><span class="p">,</span> <span class="n">card_3</span><span class="p">,</span> <span class="n">card_4</span><span class="p">,</span> <span class="n">card_5</span><span class="p">,</span> <span class="n">card_2</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="merge-sort-resources">Merge Sort Resources</h3>

<ul>
  <li><a href="https://youtu.be/Pr2Jf83_kG0">Youtube CS50</a></li>
  <li><a href="https://www.youtube.com/watch?v=ZRPoEKHXTJg">Merge Sort Visualization</a></li>
  <li><a href="https://www.youtube.com/watch?v=XaqR3G_NVoo">Folk Dance</a></li>
</ul>

:ET