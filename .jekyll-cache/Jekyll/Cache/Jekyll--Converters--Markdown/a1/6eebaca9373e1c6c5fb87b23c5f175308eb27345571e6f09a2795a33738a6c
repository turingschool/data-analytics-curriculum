I"<h1 id="intro-to-the-asset-pipeline">Intro to the Asset Pipeline</h1>

<h2 id="goals">Goals</h2>

<p>By the end of this lesson, you will know/be able to:</p>

<ul>
  <li>Explain the purpose of the asset pipeline</li>
  <li>Explain how Heroku works with the asset pipeline</li>
  <li>Run your app in a production environment locally</li>
  <li>Be comfortable using <code class="highlighter-rouge">figaro</code> to set environment variables</li>
</ul>

<h2 id="slides">Slides</h2>

<ul>
  <li>Available <a href="../slides/asset_pipeline_plus_heroku/asset_pipeline">here</a></li>
</ul>

<!-- * Find the slides [here](https://www.dropbox.com/s/910ifbqmy22l7ua/intro-asset-pipeline.pdf?dl=0)! -->

<h2 id="asset-pipeline-overview">Asset Pipeline Overview</h2>

<ul>
  <li>What are assets?</li>
  <li>Where do assets live? (<code class="highlighter-rouge">app/</code>, <code class="highlighter-rouge">lib/</code>, <code class="highlighter-rouge">vendor/</code>)</li>
  <li>Why do we have the asset pipeline?</li>
  <li>What is Sprockets?</li>
</ul>

<h3 id="asset-pipeline-scavenger-hunt">Asset Pipeline Scavenger Hunt</h3>

<p>Work with a neighbor to research and answer these questions.</p>

<ul>
  <li>What does it mean to <strong>precompile</strong> files? What does this have to do with Coffeescript and Sass files? Does it only have to do with Coffeescript and Sass files?</li>
  <li>What does it mean to <strong>minify</strong> files? Why would we want to minify files?</li>
  <li>What does <a href="https://github.com/rails/sprockets">Sprockets</a> do and how does it fit into the precompile / minify puzzle?</li>
</ul>

<p>Clone down, set up and start up the server for <a href="https://github.com/turingschool-examples/rails_asset_pipeline_scavenger_hunt">Catch ‚Äòem All</a> (<code class="highlighter-rouge">rails s</code>) and navigate to <a href="http://localhost:3000/assets/application.js">http://localhost:3000/assets/application.js</a>. Then open up the code for <code class="highlighter-rouge">application.js</code> in your text editor.</p>

<ul>
  <li>Why are these <em>not</em> the same?</li>
  <li>What is a <strong>manifest</strong> (in terms of the asset pipeline)? Where can you find <em>two</em> manifests in Catch ‚Äòem All?</li>
  <li>In regular HTML files, we import CSS files with <code class="highlighter-rouge">&lt;link rel="stylesheet" href="application.css"&gt;</code>. How is this done in a Rails project? Where do you see this line in Catch ‚Äòem All?</li>
  <li>How is a <strong>digest</strong> or <strong>fingerprint</strong> used on assets for caching purposes?</li>
</ul>

<p>Done? Take a look at <a href="http://guides.rubyonrails.org/asset_pipeline.html">RailsGuides: The Asset Pipeline</a>.</p>

<h2 id="heroku--the-asset-pipeline">Heroku &amp; the Asset Pipeline</h2>

<p>Heroku does some extra work for you with regards to the asset pipeline. In other environments, you may need to compile your assets yourself or use other tools to automate that process.</p>

<h2 id="running-production-locally">Running Production Locally</h2>

<ul>
  <li>Why would we want to see if something will work in production mode without pushing to Heroku?</li>
  <li>What are the <code class="highlighter-rouge">development.rb</code>, <code class="highlighter-rouge">test.rb</code>, and <code class="highlighter-rouge">production.rb</code> files?</li>
</ul>

<p>Catch ‚Äòem All looks fine when running in development mode (<code class="highlighter-rouge">rails s</code>).</p>

<p>Our challenge now is to get it running locally using the production environment AND for our assets to look the same.</p>

<p>Let‚Äôs start off by spinning up our server in a production environment.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails s <span class="nt">-e</span> production
</code></pre></div></div>

<p>What problem do we see first? How can we see our production errors?</p>

<p><em>Our logs!</em></p>

<p>We need to set our secret key.</p>

<p>We‚Äôre going to use the Figaro gem to set our environment variables. Add <code class="highlighter-rouge">gem 'figaro'</code> to your Gemfile.</p>

<p>With the <code class="highlighter-rouge">figaro</code> gem, we can run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>figaro <span class="nb">install</span>
</code></pre></div></div>

<p>which will give us <code class="highlighter-rouge">config/application.yml</code>. This file will allow us to set variables environment-wide. This file is also <code class="highlighter-rouge">.gitignore</code>d, so it‚Äôs safe to keep sensitive information there, including API keys.</p>

<p>Enter the following into your newly created <code class="highlighter-rouge">config/application.yml</code> file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># /config/application.yml

procution:
  SECRET_KEY_BASE: long_string_from_rake_secret
</code></pre></div></div>

<p>Check your server, and it looks like we‚Äôre in better shape, but maybe not all the way there. If we inspect the page we see that some of our assets are still not loading.</p>

<p>Check out <code class="highlighter-rouge">config/environments/production.rb</code>. What is:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">config</span><span class="p">.</span><span class="nf">public_file_server</span><span class="p">.</span><span class="nf">enabled</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RAILS_SERVE_STATIC_FILES'</span><span class="p">].</span><span class="nf">present?</span>
</code></pre></div></div>

<p>Things won‚Äôt work in ‚Äúproduction‚Äù unless <code class="highlighter-rouge">RAILS_SERVE_STATIC_FILES</code> is returning <code class="highlighter-rouge">true</code>.</p>

<p>Let‚Äôs set an environment variable for <code class="highlighter-rouge">RAILS_SERVE_STATIC_FILES</code> to <code class="highlighter-rouge">true</code>. Update your <code class="highlighter-rouge">config/application.yml</code> file to the following.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># /config/application.yml

procution:
  SECRET_KEY_BASE: long_string_from_rake_secret
  RAILS_SERVE_STATIC_FILES: true
</code></pre></div></div>

<p>We then want to manually precompile. Why do you <em>not</em> need to do this on Heroku?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rake assets:precompile
</code></pre></div></div>

<p>Check out your Rails‚Äô <code class="highlighter-rouge">public</code> folder. Anything different now?</p>

<blockquote>
  <p>Know that <code class="highlighter-rouge">rake assets:precompile</code> generates an <code class="highlighter-rouge">assets</code> directory that does not update when changes are made to your codebase. Know that <code class="highlighter-rouge">rake assets:clobber</code> will remove that directory of precompiled assets so that you can regenerate.</p>
</blockquote>

<h2 id="coding-links-to-assets">Coding Links to Assets</h2>

<p>Check out the section on <strong>Coding Links to Assets</strong> <a href="http://guides.rubyonrails.org/asset_pipeline.html#coding-links-to-assets">here</a>.</p>

<p>In your gist from earlier, research and answer why we‚Äôd want to be sure we‚Äôre properly using the following tags:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;%= stylesheet_link_tag "application" %&gt;
&lt;%= javascript_include_tag "application" %&gt;
&lt;%= image_tag "rails.png" %&gt;
</code></pre></div></div>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="http://guides.rubyonrails.org/asset_pipeline.html">RailsGuides: The Asset Pipeline</a></li>
  <li><a href="https://devcenter.heroku.com/articles/rails-4-asset-pipeline">Rails 4 Asset Pipeline on Heroku</a></li>
  <li><a href="https://devcenter.heroku.com/articles/rails-asset-pipeline">Rails Asset Pipeline on Heroku Cedar</a></li>
</ul>
:ET