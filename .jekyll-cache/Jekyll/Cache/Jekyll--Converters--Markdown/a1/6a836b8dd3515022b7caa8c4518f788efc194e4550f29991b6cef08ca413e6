I"<h2 id="part-1-your-expectations-project-selection-and-protocol">Part 1: Your Expectations, Project Selection, and Protocol</h2>

<h4 id="oss-project-expectations">OSS Project Expectations</h4>

<p>You’ve published a lot of code but it’s time to become real contributors. You will work solo to contribute to a single public open-source project by doing <strong>all</strong> of the following:</p>

<ol>
  <li>Produce, reproduce and confirm, or contradict one bug report</li>
  <li>Submit one sizable or two smaller code-centric pull requests (bug fix, test coverage, feature)</li>
  <li>Submit one documentation patch (README, CONTRIBUTING, code documentation, etc)</li>
  <li>Write a single blog post that explains the whole process and your takeaways.</li>
</ol>

<h4 id="finding-a-just-right-project">Finding a Just-Right Project</h4>

<p>How do you find a good project to work on?</p>

<ul>
  <li>Small (fewer than 50 contributors)</li>
  <li>Active Development (last merge to master within 60 days)</li>
  <li>Responsive/Maintained (issues/PRs aren’t piling up “stale”, show conversation)</li>
  <li>Approachable (small libraries are better than big frameworks)</li>
</ul>

<h4 id="a-general-protocol">A General Protocol</h4>

<p>Once you’ve selected a project:</p>

<ul>
  <li>Read the <code class="highlighter-rouge">README.md</code> and the <code class="highlighter-rouge">CONTRIBUTING.md</code> if there is one</li>
  <li>Read at least five issue threads</li>
  <li>Keep track of your steps while you get the project running locally. Anything need updating in the README?</li>
  <li><em>Start by trying to reproduce a reported bug</em></li>
  <li>Join the conversation first – you don’t want your first post to be “here’s a pile of code!”</li>
  <li>Avoid introducing new dependencies to a project (i.e. gems, node modules, etc)</li>
  <li>Work on a branch that is well named</li>
  <li>Be conscious and clean with your git commits, consider squashing them down into one</li>
  <li>Look for tools they use (CI, code style review with Code Climate, etc) and use them yourself to highlight any issues</li>
</ul>

<h4 id="submitting-a-pr">Submitting A PR</h4>

<ul>
  <li>Once work is done, make sure to get the latest master from the repo and merge it into your branch and rerun tests and manual QA</li>
  <li>Ask a peer or mentor to review your work</li>
  <li>Submit a pull request with your changes.
    <ul>
      <li>Reference the issue if there is one related.</li>
      <li>Make sure your pull request comment includes what the change is, why you made it. Give the repo owner any information they need to merge the pull request up front.</li>
      <li>Consider @-tagging the mentor you had review your work in the PR so they can leave feedback</li>
    </ul>
  </li>
  <li>Brace yourself to receive PR comments and suggestions</li>
  <li>Make changes as they are requested
    <ul>
      <li>make sure newest master is merged into your local branch, rerun tests, manual QA</li>
      <li>push the changes to your remote branch</li>
      <li>tag the person who requested the changes to review them.</li>
    </ul>
  </li>
</ul>

<h2 id="part-2-research--pitches">Part 2: Research &amp; Pitches</h2>

<p>It’s time to find a project and write up three pitches.</p>

<h4 id="finding-a-project">Finding a Project</h4>

<p>Need some ideas? Generate a shuffled list of the gems you have installed on your system by running this code in IRB:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; puts `gem list`.lines.reject{|x| x.include?('rails')}.shuffle
</code></pre></div></div>

<p>Here are other places to find ideas:</p>

<ul>
  <li><a href="https://www.codetriage.com/">CodeTriage</a></li>
  <li><a href="http://issuehub.io/?label%5B%5D=help+wanted&amp;language=ruby">Issue Hub</a></li>
  <li><a href="https://github.com/rubyforgood/2017">Ruby for Good</a></li>
</ul>

<p>And here are a few concrete ideas:</p>

<ul>
  <li><a href="https://github.com/vcr/vcr">VCR Gem</a></li>
  <li><a href="https://github.com/laserlemon/figaro">Figaro</a></li>
  <li><a href="https://github.com/slack-ruby/slack-ruby-client">Slack-Ruby-Client</a></li>
  <li><a href="https://github.com/lostisland/faraday">Faraday</a></li>
  <li><a href="https://github.com/copiousfreetime/launchy">Launchy</a></li>
  <li><a href="https://github.com/JoshCheek/mrspec">MrSpec</a></li>
  <li><a href="http://documenting-ruby.org/">Adding to / Improving Ruby’s Documentation</a> (harder than you think)</li>
</ul>

<h4 id="highlighted-prs">Highlighted PRs</h4>

<ul>
  <li><a href="https://github.com/stympy/faker/pull/938">Max’s Chinese Faker Documentation</a></li>
  <li><a href="https://github.com/boulder-food-rescue/food-rescue-robot/pull/82">Laszlo’s Boulder Food Bank Contribution</a></li>
  <li><a href="https://github.com/lostisland/faraday/pull/678">David’s Faraday Documentation</a></li>
  <li><a href="https://github.com/rubyforgood/habitat_humanity/pull/126">Ali’s Habitat for Humanity Contribution</a></li>
</ul>

<h4 id="finding-an-issueidea">Finding an Issue/Idea</h4>

<ul>
  <li>You’re <em>not</em> expected to be dreaming up new features</li>
  <li>Fixing and refactoring are generally better than adding new functionality when you first start contributing to a repo</li>
  <li>Read through the posted Issues and you’ll likely find feature requests/ideas. Take note of any tags used by the repo maintainers</li>
  <li>Non-Code contributions are always appreciated - documentation is hard. Update the README with any set up instructions that you went through that weren’t in it already, make spelling and grammar fixes.</li>
</ul>

<h4 id="project-pitches">Project Pitches</h4>

<p>Put together three pitches and we’ll help you pick the best one.</p>

<p>Each pitch should contain the following information:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Contributing to VCR

* Why: I use VCR regularly in projects, am interested in HTTP details, and would like to dig in deeper.
* What: I found a feature request at http://github.com/vcr/vcr/issues/1 that sounds approachable. It asks for VCR requests to add support for the X-AUTH header.
* I Need: to dig into VCR and get the dev setup running locally. I need to read about X-AUTH to understand more about how it's used and the format.
* When I'm Done: In the original GitHub issue it sounds like the developers are in favor of the feature, so I think I can get this accepted for the next version of the library.
</code></pre></div></div>

<p><strong>You’re expected to create a PR updating your individual markdown file <a href="https://github.com/turingschool/ruby-submissions/tree/master/1701-b/4module/open_source_proposals">here</a> to submit your proposals by 9 AM day one of week two.</strong></p>

<p>You’re encouraged to talk with each other for ideas, inspiration, and collaboration opportunities.</p>

<h2 id="additional-resources">Additional Resources</h2>
<ul>
  <li>Reading: The origins of “OSS” terminology and culture in <a href="https://en.wikipedia.org/wiki/Open-source_software_movement#Brief_history">1998</a></li>
  <li>Book: <a href="http://www.oreilly.com/openbook/opensources/book/">Open Sources: Voices from the Revolution (1999)</a></li>
  <li><a href="../slides/open_source/contributing_to_open_source_slides.pdf">Slides</a></li>
</ul>

:ET