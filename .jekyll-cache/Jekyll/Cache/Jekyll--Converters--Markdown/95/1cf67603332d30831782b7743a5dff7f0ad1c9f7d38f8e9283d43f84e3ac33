I":D<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Define methods in Ruby</li>
  <li>Explain why we use methods</li>
  <li>Define methods that take arguments</li>
  <li>Define methods that do not take arguments</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Method</li>
  <li>Argument</li>
  <li>Parameter</li>
  <li>Return</li>
  <li>Abstraction</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/intro_to_methods">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What do you know about methods from your prework?</li>
  <li>How have you organized your code up to this point?</li>
  <li>What tools have you used if you wanted to perform the same action multiple times?</li>
</ul>

<h2 id="lesson">Lesson</h2>

<h3 id="defining-methods-without-parameters">Defining Methods without Parameters</h3>

<p>Assume that we want to create a simple program to convert Fahrenheit to Celsius. One way that we could do this would be to create a file called <code class="highlighter-rouge">converter.rb</code>, include the following line of code, and then run <code class="highlighter-rouge">ruby converter.rb</code> from the command line.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>
<span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
</code></pre></div></div>

<p>A method allows us to reuse that same snippet of code. We define a method using the keyword <code class="highlighter-rouge">def</code>, followed by the name of the method, some set of instructions, followed by the keyword <code class="highlighter-rouge">end</code>.<br />
Now assume that we want to make it so that we can reuse this code. We could define a method <code class="highlighter-rouge">print_welcome</code> that would allow us to print this statement many times.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>
<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
<span class="n">print_welcome</span>
<span class="n">print_welcome</span>
</code></pre></div></div>

<p><strong>Try it!</strong><br />
With a partner, create a method <code class="highlighter-rouge">print_welcome</code> in a new file <code class="highlighter-rouge">doubler.rb</code> that prints the message <code class="highlighter-rouge">Welcome to Doubler!</code></p>

<h3 id="defining-methods-with-parameters">Defining Methods with Parameters</h3>

<p>Frequently, methods take an input and return some output.</p>

<p>Continuing with our example that will convert a temperature in Fahrenheit and convert it to Celsius. In this case, our inputs/outputs are as follows:</p>

<ul>
  <li>Input: temperature in Fahrenheit</li>
  <li>Output: temperature in Celsius</li>
</ul>

<p>The formula for converting F to C is this:</p>

<p>(F - 32) * 5/9</p>

<p>We can define a <code class="highlighter-rouge">convert_to_celsius</code> method that will take the temperature in Fahrenheit as a <strong>parameter</strong> and <strong>returns</strong> the temperature in Celsius.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the above method, we define a <strong>parameter</strong> temperature and <strong>return</strong> a float rounded to two decimal places. How do we know what is being returned in the method above? Ruby always returns the last line run in a method.</p>

<p>We could add lines above the last line if we wanted, and, as long as they didn’t change the <code class="highlighter-rouge">temperature</code> variable, the method would still return the same value:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="mi">1</span><span class="o">+</span><span class="mi">1</span>
  <span class="p">[</span><span class="s2">"piglet"</span><span class="p">,</span> <span class="s2">"kitten"</span><span class="p">,</span> <span class="s2">"baby gorilla"</span><span class="p">]</span>
  <span class="mi">99</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If we save this method in a file, we can then call it multiple times with different <strong>arguments</strong>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>Once you have saved the code above, run it using the command <code class="highlighter-rouge">ruby converter.rb</code> in your terminal. Be sure you are in the same directory as the <code class="highlighter-rouge">converter.rb</code> file.</p>

<p>What happens? Is it what you expected? Why or why not?</p>

<p>It may look like nothing happened, but in the background this program ran and did everything we told it to. We didn’t see anything because we never explicitly told it to print values to the screen.</p>

<p>Let’s change the program so that we can see some output.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">celsius_1</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">celsius_2</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">celsius_3</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

<span class="n">print_welcome</span>
<span class="nb">puts</span> <span class="n">celsius_1</span>
<span class="nb">puts</span> <span class="n">celsius_2</span>
<span class="nb">puts</span> <span class="n">celsius_3</span>
</code></pre></div></div>
<p><strong>Turn &amp; Talk</strong><br />
How is this program working? Talk with your partner about what each line is in charge of. Try to point out where the following are taking place: parameter, argument, return, assign to a variable.</p>

<p>In the code snippet above we define a method <code class="highlighter-rouge">convert_to_celsius</code> that uses the <strong>parameter</strong> <code class="highlighter-rouge">temperature</code> to calculate the equivalent temperature in Celsius. We then call the method three times and pass it 32, 35, and 100 as <strong>arguments</strong>. Each time we call it, we <strong>assign</strong> the value that the method <strong>returns</strong> to a variable <code class="highlighter-rouge">celsius_1</code>, <code class="highlighter-rouge">celsius_2</code>, and <code class="highlighter-rouge">celsius_3</code>. We then print the values stored in those three variables to the screen.</p>

<p><strong>TRY IT</strong>: With your pair, define a method <code class="highlighter-rouge">doubler</code> that takes a single argument, doubles it (multiply by two) and returns it. Similar to what we’ve done above, call that method three times and save the return values to variables. Then print those values to the screen.</p>

<h3 id="calling-methods-from-other-methods">Calling Methods from Other Methods</h3>

<p>We can also call methods from within other methods that are in the same scope. Let’s add a function that takes a number and then prints a more robust message.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_converted</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="n">converted</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">temperature</span><span class="si">}</span><span class="s2"> degrees Fahrenheit is equal to </span><span class="si">#{</span><span class="n">converted</span><span class="si">}</span><span class="s2"> degrees Celsius"</span>
<span class="k">end</span>

<span class="n">print_welcome</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="n">print_converted</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>With a partner, add another method to your <code class="highlighter-rouge">doubler.rb</code> file <code class="highlighter-rouge">print_double</code> which accepts an argument and prints a phrase in the form <code class="highlighter-rouge">3 doubled is 6</code></p>

<p>Once you’ve completed that, see if you can determine what the <code class="highlighter-rouge">print_converted</code> or your <code class="highlighter-rouge">print_double</code> method <strong>returns</strong>. Why might that be?</p>

<h3 id="layers-of-abstraction">Layers of Abstraction</h3>

<p>One of the advantages of using methods is that we can build methods that operate at higher levels of abstraction than other methods. Abstraction is a practice where less complex functionality is exposed in an interface and more complex functionality is suppressed. In some ways, this is like a pyramid where higher level methods rely on lower level methods to take care of the details.</p>

<p><img src="https://camo.githubusercontent.com/07f5ef4748c194ee893c18089a2b6513d473ac37/687474703a2f2f6d696e6573662e636f6d2f7265736f75726365732f6363612f77702d636f6e74656e742f75706c6f6164732f323031302f30312f61627374726163742d6f2d6d65746572312e6a7067" alt="" /></p>

<p>If we look at our <code class="highlighter-rouge">converter.rb</code> file, what we really want to do is take three numbers, print a welcome, and then print a message for each of those numbers. We can create a method that does exactly that. Bundling these more detailed methods into more abstract methods can help us to create more complex programs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converter.rb</span>

<span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">third</span><span class="p">)</span>
  <span class="n">print_welcome</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">first</span><span class="p">)</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">second</span><span class="p">)</span>
  <span class="n">print_converted</span><span class="p">(</span><span class="n">third</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_welcome</span>
  <span class="nb">puts</span> <span class="s1">'Welcome to Converter!'</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="p">((</span><span class="n">temperature</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mf">5.0</span> <span class="o">/</span> <span class="mf">9.0</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">print_converted</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="n">converted</span> <span class="o">=</span> <span class="n">convert_to_celsius</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">temperature</span><span class="si">}</span><span class="s2"> degrees Fahrenheit is equal to </span><span class="si">#{</span><span class="n">converted</span><span class="si">}</span><span class="s2"> degrees Celsius"</span>
<span class="k">end</span>

<span class="n">convert</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">convert</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">65</span><span class="p">)</span>
</code></pre></div></div>
<p><strong>Turng &amp; Talk</strong>
Talk with your partner about the flow of this program. Where does it start, how does each method get called?</p>

<p>With a partner, create a method that provides similar functionality for <code class="highlighter-rouge">doubler.rb</code>. If you finish that, see if you can change your method so that it accepts an array as an argument and prints a message for each element of the array.</p>

<h2 id="wrapup">WrapUp</h2>

<ul>
  <li>How do we define methods in Ruby?</li>
  <li>What is the difference in how we define a method that takes arguments from one that does not?</li>
  <li>How do you call one method from within another method?</li>
  <li>Why do we use methods?</li>
</ul>
:ET