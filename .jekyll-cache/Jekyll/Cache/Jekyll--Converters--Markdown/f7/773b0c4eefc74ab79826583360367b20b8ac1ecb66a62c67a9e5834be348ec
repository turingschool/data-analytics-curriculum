I"Ÿh<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Explain the difference between arrays and hashes, and determine when to use which</li>
  <li>Use common hash methods to access and update data in a hash</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/introducing_hashes">here</a></p>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>Hash</li>
  <li>Key</li>
  <li>Value</li>
  <li>Symbol</li>
  <li>Accessing Values</li>
  <li>Assigning Values</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>What‚Äôs problematic about using <code class="highlighter-rouge">fridge_items_1</code> as a grocery list? How would you prefer to structure a grocery list? Discuss with your partner.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fridge_items_1 = ["milk", "eggs", "eggs", "eggs", "eggs", "eggs", "eggs", "avocado", "avocado", "tortilla", "tortilla", "tortilla", "tortilla", "tortilla", "tortilla", "tortilla", "tortilla", "tortilla"]
</code></pre></div></div>

<h2 id="intro---hash-properties">Intro - Hash Properties</h2>

<p>Like an Array, a Hash is a data structure used for representing a <em>collection</em> of things. But whereas an Array generally represents a list of ordered, indexed values, <strong>a Hash represents a collection of <em>named</em> values</strong>. These names are called <strong>keys</strong>, and each key has a corresponding <strong>value</strong>. In a Hash, we can insert data by assigning it to a name and later retrieving it using the same name.</p>

<p>Some languages call their Hashes <em>dictionaries</em> for this reason ‚Äì you look up a word (the label) to retrieve its definition (the data or value with which the label was associated).</p>

<h2 id="working-with-a-hash">Working with a Hash</h2>

<ul>
  <li>A hash is enclosed in curly braces { }, key/value pairs are separated by commas, and keys and values are separated by either a rocket or a colon.</li>
  <li>Each key in a hash must be unique
    <ul>
      <li>If you attempt to have duplicate keys when you first create a hash, you will get a <code class="highlighter-rouge">warning: key :key_name is duplicated and overwritten on line X</code> error</li>
      <li>If you try to add a new key/value pair using a key that already exists, that new key/value pair will overwrite the previous one - dangerous.</li>
    </ul>
  </li>
  <li>Keys and values can be any type of object:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  example = {
      "string_value" =&gt; "this value is a string",
      "array_value" =&gt; ["this", "value", "is", "an", "array"],
      3 =&gt; "this values' key is an integer",
      "boolean_value" =&gt; true
  }
</code></pre></div>    </div>
  </li>
  <li>Values can be accessed with bracket notation:
    <ul>
      <li>given <code class="highlighter-rouge">shih_tzu = { "name" =&gt; "Sodie" }</code></li>
      <li><code class="highlighter-rouge">shih_tzu["name"]</code> <em>returns</em><code class="highlighter-rouge">"Sodie"</code></li>
    </ul>
  </li>
</ul>

<p>Let‚Äôs say we are making a list of items to pack for a trip. Why is a hash a good choice for storing this information?</p>

<p><strong>THINK ABOUT IT</strong>: With your partner, brainstorm another collection of data that could be stored in a hash. Be able to justify why a hash is a better option than an array.</p>

<p><strong>WRITE:</strong> What is <strong>your</strong> definition of a hash?</p>

<h3 id="creating-a-hash">Creating a Hash</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_hash</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<p><em>or</em></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span>
</code></pre></div></div>

<p>When using the <code class="highlighter-rouge">Hash.new</code>, syntax, we‚Äôre able to pass a default hash value in as a parameter to <code class="highlighter-rouge">new</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>In the above declaration, the default value of any key created for <code class="highlighter-rouge">new_hash</code> has a default value of 0. Keep this in mind for the future - you may find it helpful down the roadüçï.</p>

<p>We can also create a hash with some initial key/value pairs. Let‚Äôs use this syntax to create our stew hash:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"socks"</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span>
  <span class="s2">"jeans"</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">=&gt;</code> is called a hash rocket.</p>

<h3 id="hashes-vs-arrays">Hashes vs. Arrays</h3>

<p>Let‚Äôs take a few minutes to document the similarities and differences between arrays and hashes.</p>

<h3 id="explore">Explore</h3>

<p>With your partner, explore the following challenges. One partner should be typing <em>in a file</em> (make sure the other can see the screen) and the other should talk. This is a paired programming technique called driver/navigator.</p>

<ul>
  <li>Start with the hash: suitcase = { ‚Äúsocks‚Äù =&gt; 4, ‚Äújeans‚Äù =&gt; 1 }</li>
  <li>Add 3 shirts to your suitcase</li>
  <li>Add a key value pair of swimsuit/true to your suitcase</li>
  <li>Take the socks out of your suitcase</li>
  <li>Check for how many jackets you have in your suitcase</li>
  <li>Check how many shirts (and only shirts) are in your suitcase</li>
  <li>Call <code class="highlighter-rouge">.keys</code> and <code class="highlighter-rouge">.values</code> on your hash - what is returned? Why might this be useful?</li>
</ul>

<h3 id="accessing-the-hash">Accessing the Hash</h3>

<p>We use brackets <code class="highlighter-rouge">[]</code> to access the hash just like arrays, only we don‚Äôt use indexes, we use keys.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"socks"</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="mi">4</span>
</code></pre></div></div>

<p>We can create a new key/value pair like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"shirts"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"swimsuit"</span><span class="p">]</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div></div>

<p>Did we put any jackets on our list? Let‚Äôs check:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"jackets"</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<p>Oops, we forget that we added one day to our trip, so should probably bring an extra shirt.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"shirts"</span><span class="p">]</span> <span class="o">=</span> <span class="n">suitcase</span><span class="p">[</span><span class="s2">"shirts"</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>
<p>or</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="s2">"shirts"</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Remember, keys/values can be any type of object.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"this value is a string"</span>
<span class="o">=&gt;</span> <span class="s2">"this value is a string"</span>
<span class="n">suitcase</span><span class="p">[</span><span class="kp">true</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.5</span>
<span class="o">=&gt;</span> <span class="mf">1.5</span>
<span class="n">suitcase</span>
<span class="o">=&gt;</span> <span class="p">{</span>
  <span class="s2">"socks"</span><span class="o">=&gt;</span><span class="mi">4</span><span class="p">,</span>
  <span class="s2">"jeans"</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span>
  <span class="s2">"shirts"</span><span class="o">=&gt;</span><span class="mi">4</span><span class="p">,</span>
  <span class="mi">8</span><span class="o">=&gt;</span><span class="s2">"this value is a string"</span><span class="p">,</span>
  <span class="kp">true</span><span class="o">=&gt;</span><span class="mf">1.5</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this code, we created a key with the Integer 8 with a value of the String ‚Äúthis value is a string‚Äù. We also created a key with <code class="highlighter-rouge">true</code> with a value of the Float 1.5.</p>

<p>We don‚Äôt want these pairs in our hash, so let‚Äôs get rid of them:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"this value is a string"</span>
<span class="n">suitcase</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mf">1.5</span>
<span class="n">suitcase</span>
<span class="o">=&gt;</span> <span class="p">{</span>
  <span class="s2">"socks"</span><span class="o">=&gt;</span><span class="mi">4</span><span class="p">,</span>
  <span class="s2">"jeans"</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span>
  <span class="s2">"shirts"</span><span class="o">=&gt;</span><span class="mi">4</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Access all the keys or all the values from a hash:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">.</span><span class="nf">keys</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"socks"</span><span class="p">,</span> <span class="s2">"jeans"</span><span class="p">,</span> <span class="s2">"shirts"</span><span class="p">]</span>

<span class="n">suitcase</span><span class="p">.</span><span class="nf">values</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">.keys</code> and <code class="highlighter-rouge">.values</code> methods return an array of all the keys and values, respectively, of the hash.</p>

<h2 id="iterating-over-a-hash">Iterating Over a Hash</h2>

<p>Turn and talk to the person next to you, if we had the following array - <code class="highlighter-rouge">clothes = ['jeans', 'socks', 'shirts']</code>, how would you print each value to the terminal?  Would your answer change if this array had 100 items of clothing in it?</p>

<p>Often we will want to iterate over a Hash to do something with each key/value pair.  This works a lot like iterating over an Array, with one small exception.  Take a look at the code snippet below and see if you can identify the difference between iterating over a Hash vs over an Array:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">clothing_item</span><span class="p">,</span> <span class="n">quantity</span><span class="o">|</span>
	<span class="nb">p</span> <span class="s2">"I need </span><span class="si">#{</span><span class="n">quantity</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">clothing_item</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, instead of having one block variable to work with, we have 2!  The first represents the key, and the second represents the value.</p>

<h4 id="check-for-understanding">Check for Understanding</h4>

<ul>
  <li>What is a Hash?</li>
  <li>What type of Objects can Hashes hold?</li>
  <li>How can you create a Hash?</li>
  <li>How can you add/change/remove a key/value pair?</li>
</ul>

<h2 id="symbols">Symbols</h2>

<p>In Ruby, symbols are basically Strings that can‚Äôt change. You can recognize a symbol because it starts with a colon <code class="highlighter-rouge">:</code>. All of the following are symbols:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">:name</span>   
<span class="ss">:symbols_can_have_underscores</span>
<span class="ss">:"symbols can be in quotes"</span>
</code></pre></div></div>

<p>Symbols are more efficient than strings because Ruby creates only one Object for each unique symbol. Two strings with the same value are still two separate Objects. This is illustrated in the following pry session:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sym_1</span> <span class="o">=</span> <span class="ss">:this_is_a_symbol</span>
<span class="o">=&gt;</span> <span class="ss">:this_is_a_symbol</span>
<span class="n">sym_2</span> <span class="o">=</span> <span class="ss">:this_is_a_symbol</span>
<span class="o">=&gt;</span> <span class="ss">:this_is_a_symbol</span>
<span class="n">sym_1</span><span class="p">.</span><span class="nf">object_id</span>
<span class="o">=&gt;</span> <span class="mi">2166748</span>
<span class="n">sym_2</span><span class="p">.</span><span class="nf">object_id</span>
<span class="o">=&gt;</span> <span class="mi">2166748</span>
<span class="n">string_1</span> <span class="o">=</span> <span class="s2">"this is a string"</span>
<span class="o">=&gt;</span> <span class="s2">"this is a string"</span>
<span class="n">string_2</span> <span class="o">=</span> <span class="s2">"this is a string"</span>
<span class="o">=&gt;</span> <span class="s2">"this is a string"</span>
<span class="n">string_1</span><span class="p">.</span><span class="nf">object_id</span>
<span class="o">=&gt;</span> <span class="mi">70099504860860</span>
<span class="n">string_2</span><span class="p">.</span><span class="nf">object_id</span>
<span class="o">=&gt;</span> <span class="mi">70099508726060</span>
</code></pre></div></div>

<p>Symbols are also faster than strings because Ruby can determine if two symbols are equal by checking their object_id. Strings have to be compared character by character.</p>

<p>So if symbols are faster and more efficient than strings, why would we use strings? Because a string‚Äôs value can change, making them useful as variables. Strings are <em>mutable</em>, whereas symbols are <em>immutable</em>.</p>

<p>Don‚Äôt worry if this doesn‚Äôt quite make sense yet. The important thing to understand is that strings are useful as variables. Symbols are useful as names. <strong>This makes symbols perfect for keys in hashes.</strong></p>

<h2 id="working-with-hashes-and-symbols">Working with Hashes and Symbols</h2>

<p>Let‚Äôs recreate our suitcase hash using symbols instead of strings.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:socks</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span>
  <span class="ss">:jeans</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Ruby gives us a handy shortcut for creating a hash with symbol keys:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">socks: </span><span class="mi">4</span><span class="p">,</span>
  <span class="ss">jeans: </span><span class="mi">1</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>These two definitions for our suitcase hash produce the exact same hash, however the second is the preferred syntax. Be careful‚Ä¶ The colon must <em>immediately</em> follow the name of the key without any spaces in between.</p>

<h3 id="solidify">Solidify</h3>

<p>Switch driver/navigator and complete the following (same as our last pairing exploration) using this hash: <code class="highlighter-rouge">suitcase = { socks: 4, jeans: 1 }</code></p>

<p>For each bullet point, pay close attention to the <em>return value</em> as well as the impact on the original hash (ie be ready to share out with the class!)</p>

<ul>
  <li>Add 3 shirts to your suitcase</li>
  <li>Add a key value pair of swimsuit/true to your suitcase</li>
  <li>Take the socks out of your suitcase</li>
  <li>Check for how many jackets you have in your suitcase</li>
  <li>Check how many shirts (and only shirts) are in your suitcase</li>
  <li>Call <code class="highlighter-rouge">.keys</code> and <code class="highlighter-rouge">.values</code> on your hash - what is returned? Why might this be useful?</li>
</ul>

<p>Add new key/value pair:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="ss">:shirts</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">suitcase</span><span class="p">[</span><span class="ss">:swimsuit</span><span class="p">]</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div></div>

<p>Remove key/value pair:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:socks</span><span class="p">)</span>
</code></pre></div></div>

<p>Access value of a specific key:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">[</span><span class="ss">:jackets</span><span class="p">]</span>
<span class="n">suitcase</span><span class="p">[</span><span class="ss">:shirts</span><span class="p">]</span>
</code></pre></div></div>

<p>Check keys/values:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">suitcase</span><span class="p">.</span><span class="nf">keys</span>
<span class="n">suitcase</span><span class="p">.</span><span class="nf">values</span>
</code></pre></div></div>

<h4 id="check-for-understanding-1">Check for Understanding</h4>

<ul>
  <li>What is a symbol? How is it different than a String?</li>
  <li>What is the advantage of using a String? What is the advantage of using a Symbol? Which is better for Hashes?</li>
  <li>What is different about using symbols in Hashes?</li>
  <li>Describe some useful Hash methods. Where can you look to find more Hash methods?</li>
</ul>

<h2 id="pair-exercise">Pair Exercise</h2>

<ul>
  <li>Person <code class="highlighter-rouge">A</code> is in charge of reading the instructions</li>
  <li>Person <code class="highlighter-rouge">B</code> is in charge of working in a file (in such a way that their partner can see)</li>
  <li>You should be using symbols for the keys in this exercise</li>
</ul>

<h3 id="steps">Steps</h3>

<ol>
  <li>Create a hash called <code class="highlighter-rouge">new_band</code>.</li>
  <li>Add a bassist to your <code class="highlighter-rouge">new_band</code> hash.</li>
  <li>Find the name of your bassist by accessing the <code class="highlighter-rouge">:bassist</code> key in the <code class="highlighter-rouge">new_band</code> hash.</li>
  <li>Find the value attached to <code class="highlighter-rouge">:vocalist</code> in your hash.</li>
  <li>Add a vocalist to your hash.</li>
  <li>Add a drummer to your hash.</li>
  <li>Get all the keys in your Hash. What kind of object does that method return?</li>
  <li>Get all the values in your Hash. What kind of object does that method return?</li>
  <li>Assign a new value to the <code class="highlighter-rouge">:vocalist</code> key of your hash.</li>
  <li>How has <code class="highlighter-rouge">keys</code> changed after the last step? How has <code class="highlighter-rouge">values</code> changed?</li>
</ol>

<h2 id="extension-practice">Extension Practice</h2>

<p>Finally let‚Äôs break up for some independent work with Hashes and Arrays.</p>

<h3 id="hash-and-array-nesting">Hash and Array Nesting</h3>

<p>Remember, keys/values can be any type of object, including Hashes and Arrays!</p>

<p>As our programs get more complex, we‚Äôll encounter more sophisticated combinations of these structures. Make a prediction about each scenario, then run in a pry session to verify:</p>

<h4 id="array-within-an-array">Array within an Array</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
</code></pre></div></div>

<ul>
  <li>what is <code class="highlighter-rouge">a.count</code>?</li>
  <li>what is <code class="highlighter-rouge">a.first.count</code>?</li>
  <li>how can I access the element <code class="highlighter-rouge">5</code>?</li>
</ul>

<h4 id="hash-within-an-array">Hash within an Array</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">italian</span> <span class="o">=</span> <span class="p">[{</span> <span class="ss">pizza: </span><span class="s2">"tasty"</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">calzone: </span><span class="s2">"also tasty"</span> <span class="p">}]</span>
</code></pre></div></div>

<ul>
  <li>what is <code class="highlighter-rouge">italian.count</code>?</li>
  <li>what is <code class="highlighter-rouge">italian.first.count</code>?</li>
  <li>how can I access the value <code class="highlighter-rouge">"also tasty"</code>?</li>
</ul>

<h4 id="hash-within-a-hash">Hash within a Hash</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pets</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">dog: </span><span class="p">{</span>
    <span class="ss">name: </span><span class="s2">"Sodie"</span><span class="p">,</span>
    <span class="ss">weight: </span><span class="s2">"10 pounds"</span>
  <span class="p">},</span>
  <span class="ss">cat: </span><span class="p">{</span>
    <span class="ss">name: </span><span class="s2">"Sunshine"</span><span class="p">,</span>
    <span class="ss">weight: </span><span class="s2">"15 pounds"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>what is <code class="highlighter-rouge">pets.count</code>?</li>
  <li>what is <code class="highlighter-rouge">pets.keys</code>?</li>
  <li>what is <code class="highlighter-rouge">pets.values</code>?</li>
  <li>how can I access the value <code class="highlighter-rouge">"15 pounds"</code>?</li>
</ul>

<h2 id="exit-ticket">Exit Ticket</h2>

<p>You‚Äôll have 10 minutes to complete the exit ticket independently.</p>

<!-- print out to ensure this is closed book
- In your own words, define a hash
- Venn Diagram of arrays and hashes
- Write a hash with 3 key/value pairs (assign to a new variable)
- Access the value of the first key/value pair
- Show how you would add a new key/value pair
- Delete any key/value pair of your choosing
- What is a symbol?
- for all of your examples, did you use symbols? If you did - re-write your original hash without symbols. If you didn't, re-write your original hash with symbols.
-  -->

<h2 id="further-practiceresources">Further Practice/Resources</h2>

<h3 id="ruby-docs">Ruby Docs</h3>

<p>Get familiar with the Ruby Docs on <a href="https://ruby-doc.org/core-2.4.0/Hash.html">Hashes</a></p>

<h3 id="practicing-with-hashes-and-nesting">Practicing with Hashes and Nesting</h3>

<p>Now that we‚Äôve worked through the basics, complete <a href="https://github.com/turingschool/challenges/blob/master/collections.markdown#2-state-capitals">Challenge 2 from the Collections Challenges</a></p>

<h3 id="from-the-top">From the Top</h3>

<p>Now you‚Äôve got a decent understanding of hashes. Let‚Äôs go at it from the
beginning and try to fill a few of the gaps: work through the <a href="http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html#8.-hashes">Hashes section of Ruby in 100 Minutes</a> to pick up a bit more.</p>
:ET