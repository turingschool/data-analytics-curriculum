I"Nè<h2 id="lets-talk-about-javascript">Let‚Äôs Talk about JavaScript</h2>

<p>Traditionally JavaScript is executed client-side, or in the browser on the consumer‚Äôs own computer. This is made possible by a browsers JavaScript Engine. Firefox‚Äôs engine is called SpiderMonkey, and Chrome‚Äôs is called V8.</p>

<h3 id="what-is-nodejs">What is node.js?</h3>

<p>According to <a href="https://nodejs.org">nodejs.org</a> node, in it‚Äôs most basic form, ‚Äúis a JavaScript runtime built on Chrome‚Äôs V8 JavaScript engine.‚Äù</p>

<h3 id="installing-node">Installing Node:</h3>

<ul>
  <li>Jump over to <a href="https://nodejs.org/en/">node</a> and download the <em>Recommended for Most Users</em> version of node.</li>
  <li>Pat yourself on the back you‚Äôve completed installation :smile:</li>
</ul>

<p>Also, when you download node - you also get npm</p>

<h5 id="a-side-note-about-npm">A Side Note about NPM</h5>

<p>NPM (Node Package Manger) allows for organization of outside packages much like Ruby Gems. We‚Äôll cover it in more depth later on.</p>

<h3 id="a-little-about-express">A little about Express</h3>

<p>Express is a small framework built on top of the web server functionality provided by Node.js. It helps to simplify and organize the server-side functionality of your application by providing abstractions over the more confusing parts of node.js, and adding helpful utilities and features.</p>

<h3 id="sequelize-what-is-it-good-for">Sequelize: What is it good for?</h3>

<p>Sequelize is a ‚ÄúPromise‚Äù based ORM that we will be using in our Express app.
If you would like to explore the documentation for Sequelize, it can be found <a href="http://docs.sequelizejs.com/">here</a></p>

<h2 id="moving-on-to-building-an-express-app">Moving on to building an Express App</h2>

<p>Alright, now that you have been introduced at a high level to node.js, Express, and Sequelize, let‚Äôs use them to build out a simple CRUD app. <em>Don‚Äôt worry we are going to dive deeper into these topics in class.</em> The intros above are just meant to give you some context.</p>

<h3 id="where-to-begin">Where to begin</h3>

<p>First, let‚Äôs talk about what we are going to do and our goals. Today we are going to build a simple Express API that can CRUD a single resource. Let‚Äôs call our project <code class="highlighter-rouge">arcade</code> and our resource will be games.</p>

<h4 id="learning-goals">Learning Goals</h4>

<ul>
  <li>command to generate our Express app</li>
  <li>use Sequelize to create our database</li>
  <li>use Sequelize to generate and run migrations</li>
  <li>set-up the <code class="highlighter-rouge">create</code>, <code class="highlighter-rouge">read</code>, <code class="highlighter-rouge">update</code>, and <code class="highlighter-rouge">delete</code> routes</li>
  <li>interact with the database to <code class="highlighter-rouge">create</code>, <code class="highlighter-rouge">read</code>, <code class="highlighter-rouge">update</code>, and <code class="highlighter-rouge">delete</code> resources</li>
  <li>create a seed file</li>
</ul>

<h4 id="installing-express-generator">Installing Express Generator</h4>

<p>Now let‚Äôs install the express-generator. In the command line type:</p>

<p><code class="highlighter-rouge">npm install express-generator -g</code></p>

<p>This will allow us to quickly create the start to an Express app. Now, similar to how we could use <code class="highlighter-rouge">rails create</code>, we can use <code class="highlighter-rouge">express --no-view appName</code> to start our project. First navigate to the directory you want your project to be in and then type:</p>

<p><code class="highlighter-rouge">express --no-view arcade</code></p>

<p>The <code class="highlighter-rouge">--no-view</code> is an option that is used so that there isn‚Äôt a <code class="highlighter-rouge">views</code> folder within our app.</p>

<p>Now <code class="highlighter-rouge">cd arcade</code> and open the app in your text editor. Run <code class="highlighter-rouge">npm install</code> and then take a moment and look around.</p>

<p>:tada:We have successfully started our Express app!:tada:</p>

<h4 id="making-some-changes-and-setup">Making Some Changes and Setup</h4>

<p>Currently the structure of our app should look like this:</p>

<p><img src="./assets/server_side_js_images/express_app_directories.png" alt="express_app_directories" /></p>

<p>We won‚Äôt need <code class="highlighter-rouge">users.js</code> so go ahead and delete it.</p>

<p>Next open up the <code class="highlighter-rouge">app.js</code> file and remove these two lines:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//line 7</span>
<span class="kd">var</span> <span class="nx">usersRouter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/users</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">//line 17</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">usersRouter</span><span class="p">);</span>
</code></pre></div></div>

<p>Okay, now we can start adding to our app. To do some run the following commands.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save</span> sequelize sequelize-cli pg

<span class="c"># yes that should be npx, it is not a typo</span>
npx sequelize init
</code></pre></div></div>

<p>The first command is installing the necessary dependencies for our app so that our app can use sequelize and interact with a postgres database. After you run it, you should see a <code class="highlighter-rouge">package-lock.json</code> file and if you open <code class="highlighter-rouge">package.json</code> it should look similar to this:</p>

<p><img src="./assets/server_side_js_images/express_app_package_json.png" alt="package_json" /></p>

<p>The second command will add some folders and files so that our file structure should look similar to this:</p>

<p><img src="./assets/server_side_js_images/express_app_after_sequelize_init.png" alt="after_sequelize" /></p>

<p>Next open up <code class="highlighter-rouge">config/config.json</code>. We are going to update <code class="highlighter-rouge">username</code>, <code class="highlighter-rouge">database</code> and <code class="highlighter-rouge">dialect</code> in the development, test and production sections.</p>

<p>Change:</p>
<ul>
  <li>username to your postgres username</li>
  <li>database to be <code class="highlighter-rouge">arcade_</code>environment name</li>
  <li>dialect to <code class="highlighter-rouge">"postgres"</code></li>
</ul>

<p><em>If you do not know what your postgres username is, in the command line type <code class="highlighter-rouge">psql</code>. Likely the name that shows up before the <code class="highlighter-rouge">=#</code>is your username or you can type <code class="highlighter-rouge">\du</code> to get a list of users. To exit type <code class="highlighter-rouge">\q</code>.</em></p>

<p>If you get an error that a ‚Äúrole‚Äù is not known with your laptop username, if you installed PostgreSQL using Homebrew, it‚Äôs possible that the username you use below will be <code class="highlighter-rouge">null</code> like the password.</p>

<p>When you are done making changes <code class="highlighter-rouge">config.js</code> should look like:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//config/config.js</span>
<span class="p">{</span>
	<span class="dl">"</span><span class="s2">development</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
		<span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_postgres_username</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">database</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arcade_development</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">127.0.0.1</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">dialect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span>
	<span class="p">},</span>
	<span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
		<span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_postgres_username</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">database</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arcade_test</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">127.0.0.1</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">dialect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span>
	<span class="p">},</span>
	<span class="dl">"</span><span class="s2">production</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
		<span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_postgres_username</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">database</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arcade_production</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">127.0.0.1</span><span class="dl">"</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">dialect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The last piece of our set-up is going to be including git in our app. Run <code class="highlighter-rouge">git init</code>. Add <code class="highlighter-rouge">node_modules</code> to your <code class="highlighter-rouge">.gitignore</code>. Stage your changes and complete your initial commit.</p>

<p><strong>If you have not taken a break since you‚Äôve started, now is a great opportunity for a POM</strong></p>

<h4 id="creating-our-game-model">Creating our Game Model</h4>

<p>Welcome back from you break! :sunglasses: We‚Äôve gotten our setup out of the way and now we can get to some of the good stuff.</p>

<p>First, create and checkout a branch named <code class="highlighter-rouge">game_model</code>.</p>

<p>Next, we are going to actually create our database by running</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx sequelize db:create
</code></pre></div></div>
<p>After that is done, generate your model by running</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx sequelize model:generate <span class="nt">--name</span> Game <span class="nt">--attributes</span> title:string,price:integer,releaseYear:integer,active:boolean
</code></pre></div></div>

<p>This has created two new files for us. In the <code class="highlighter-rouge">models</code> folder we now have a <code class="highlighter-rouge">game.js</code> file and in the <code class="highlighter-rouge">migrations</code> folder we <code class="highlighter-rouge">timestamp-create-game.js</code> file. Go ahead and take a look at both of these to see if you can guess what is going on. <em>We will talk about these during week 1 for now keep moving forward.</em></p>

<p>We have generated our first migration, so let‚Äôs celebrate by actually applying it to our database. To do so use the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx sequelize db:migrate
</code></pre></div></div>

<p>What if we made a typo or need to undo this migration?!? Fortunately, Sequelize has this covered and you can revert the migration with</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx sequelize db:migrate:undo
</code></pre></div></div>
<p>If you don‚Äôt believe me, give it a try. Be sure to run the <code class="highlighter-rouge">db:migrate</code> command again to re-apply the changes.</p>

<p>Alright that completes our <code class="highlighter-rouge">game_model</code> branch. Merge into master and then we will move on to the next step.</p>

<h4 id="seeds">Seeds</h4>

<p>Continuing with the good git workflow, checkout a new branch <code class="highlighter-rouge">seeds</code>.</p>

<p>We need to have some data to work with when we start creating end-points, so we are going make up some seeds for our games table.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx sequelize seed:generate <span class="nt">--name</span> game_seed
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">seeders</code> folder you should now have a new file with a bare bones structure like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">up</span><span class="p">:</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/*
      Add altering commands here.
      Return a promise to correctly handle asynchronicity.

      Example:
      return queryInterface.bulkInsert('People', [{
        name: 'John Doe',
        isBetaMember: false
      }], {});
    */</span>
  <span class="p">},</span>

  <span class="na">down</span><span class="p">:</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/*
      Add reverting commands here.
      Return a promise to correctly handle asynchronicity.

      Example:
      return queryInterface.bulkDelete('People', null, {});
    */</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>In the ‚Äúup‚Äù section, we are going to provide information to insert into our games table. The ‚Äúdown‚Äù section is where we will write the code necessary to delete all our game seeds from the table. Up and down should balance one another by being equal and opposite of one another.</p>

<p>Within up we are going to do the following:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">bulkInsert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Games</span><span class="dl">'</span><span class="p">,</span> <span class="p">[{...}])</span>
</code></pre></div></div>
<p>We are calling the function <code class="highlighter-rouge">bulkInsert</code> on <code class="highlighter-rouge">queryInterface</code>.</p>

<p><code class="highlighter-rouge">bulkInsert</code> is expecting two arguments. The first is the table that we are inserting into and the second is an array with objects containing the information that we are adding.</p>

<p>To balance our up, our down will be</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">bulkDelete</span><span class="p">(</span><span class="dl">'</span><span class="s1">Games</span><span class="dl">'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">{})</span>
</code></pre></div></div>

<p>Below is a completed up and down example.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">up</span><span class="p">:</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="k">return</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">bulkInsert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Games</span><span class="dl">'</span><span class="p">,</span> <span class="p">[{</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Fix it Felix Jr.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">price</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
      <span class="na">releaseYear</span><span class="p">:</span> <span class="mi">1982</span><span class="p">,</span>
      <span class="na">active</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
      <span class="na">updatedAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ms. Pac Man</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
      <span class="na">releaseYear</span><span class="p">:</span> <span class="mi">1981</span><span class="p">,</span>
      <span class="na">active</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
      <span class="na">updatedAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Dig Dug</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">price</span><span class="p">:</span> <span class="mi">75</span><span class="p">,</span>
      <span class="na">releaseYear</span><span class="p">:</span> <span class="mi">1982</span><span class="p">,</span>
      <span class="na">active</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
      <span class="na">updatedAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Galaga</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">price</span><span class="p">:</span> <span class="mi">125</span><span class="p">,</span>
      <span class="na">releaseYear</span><span class="p">:</span> <span class="mi">1981</span><span class="p">,</span>
      <span class="na">active</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
      <span class="na">updatedAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="p">],</span> <span class="p">{});</span>
  <span class="p">},</span>

  <span class="na">down</span><span class="p">:</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">bulkDelete</span><span class="p">(</span><span class="dl">'</span><span class="s1">Games</span><span class="dl">'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">{});</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><em>Go find some documentation on how to seed the data!</em></p>

<p>Awesome job! The <code class="highlighter-rouge">seeds</code> branch is complete. Merge it into <code class="highlighter-rouge">master</code>.</p>

<h4 id="games-routes">Games Routes</h4>

<h5 id="read-routes">Read Routes</h5>

<p>Alright it‚Äôs time to code our CRUD routes. We are going to start by creating our read routes first.</p>

<p>Create a new branch <code class="highlighter-rouge">read_routes</code>.</p>

<hr />

<p><em>Pop Quiz</em></p>

<p>Take a moment and think about what our paths should look like for retrieving all games and retrieving one game.</p>

<details><summary>Answer</summary>
  <ul>
    <li> /api/v1/games </li>
    <li> /api/v1/games/:id </li>
  </ul>
</details>

<hr />

<p>Knowing how we want our paths, structure the directories within the <code class="highlighter-rouge">routes</code> folder to match and create a <code class="highlighter-rouge">games.js</code> file.</p>

<p><img src="./assets/server_side_js_images/games_routes_file_structure.png" alt="games_routes" /></p>

<p>Open up <code class="highlighter-rouge">app.js</code> and add the following</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// add on line 7</span>
<span class="kd">var</span> <span class="nx">gamesRouter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/api/v1/games</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// add on line 18</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/games</span><span class="dl">'</span><span class="p">,</span> <span class="nx">gamesRouter</span><span class="p">);</span>
</code></pre></div></div>

<p>The first line is setting the variable <code class="highlighter-rouge">gamesRouter</code> as a connection to the new <code class="highlighter-rouge">games.js</code> file.
The second is directing any requests that have <code class="highlighter-rouge">/api/v1/games</code> as it‚Äôs path to use the gamesRouter.</p>

<p>Next, open up <code class="highlighter-rouge">routes/api/v1/games.js</code>
At the top of the file add:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">Game</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../../../models</span><span class="dl">'</span><span class="p">).</span><span class="nx">Game</span><span class="p">;</span>
</code></pre></div></div>
<p>This makes all the necessary connections we will need so we can talk to the database and receive and respond to requests appropriately.</p>

<p>Now we can write a function to handle a request to retrieve all games. That function should look like</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* GET all games */</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Game</span><span class="p">.</span><span class="nx">findAll</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">games</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">games</span><span class="p">));</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span><span class="nx">error</span><span class="p">})</span>
    <span class="p">});</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span> <span class="c1">//this should stay at the bottom of the file</span>
</code></pre></div></div>

<p>Take a minute and see if you can read the code and figure out what is going on here.</p>

<details><summary>Breakdown</summary>
  <p>
 <i>get</i> is a function that is being called on router and takes two arguments. The first is the path that it is "handling" and the second is a function which tells it what to do once it has received a request. <i>get</i> handles an HTTP <b>GET</b> request. Notice the first argument is <i>/</i>. This does not mean the "root" path though, it is actually any path that is <i>/api/v1/games</i>. Why? If you look back at <i>app.js</i> you see that the base path that you are telling <i>app.use</i> to use is <i>/api/v1/games</i>, so the <i>/</i> is really referencing the base path that was defined in <i>app.js</i>.

 <i>Game</i> is the variable that we defined at the top of the file that is accessing our model. <i>findAll</i> is the function that Sequelize has defined for us to retrieve all instance in our games table.

What's with then and catch? These are related to promises. Will talk abou that during week one. For now, then is the code that will execute if the database successfully returned the information that we want. We are calling that information <i>games</i> here and formatting our response. The catch is what will happen if it fails. Calling the information error and formatting that error response.
  </p>
</details>

<p>Spin up the server with <code class="highlighter-rouge">npm start</code></p>

<p>Using Postman visit <code class="highlighter-rouge">http://localhost:3000/api/v1/games</code> and you should see the games from our seed file.</p>

<p>See if you can write the function to handle a request to retrieve a single games.</p>

<details><summary>Answer</summary>
 <img src="./assets/server_side_js_images/single_game.png" />
	
You can also substitute `findOne` instead of `findAll` to avoid having an array of only one element.
</details>

<p>Awesome job! You‚Äôve finished the read routes. Merge that branch into master. <strong>Now might be another good opportunity to let that sink in and take a POM.</strong></p>

<h5 id="create-route">Create Route</h5>

<p>By now you know the deal, create a new branch <code class="highlighter-rouge">create_route</code>. Our post route is where we will be able to add a new game to our arcade. We are still working in the <code class="highlighter-rouge">routes/api/v1/games.js</code> file.</p>

<p>Add the following code:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*POST new game*/</span>
<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Game</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
          <span class="na">title</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
          <span class="na">price</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
          <span class="na">releaseYear</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">releaseYear</span><span class="p">,</span>
          <span class="na">active</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">active</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">game</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">game</span><span class="p">));</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span> <span class="p">});</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">npm start</code> to start your server and use Postman to make a POST request. Feel free to come up with your own info or you can use:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Frogger</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">price</span><span class="p">:</span> <span class="mi">150</span><span class="p">,</span>
  <span class="nx">releaseYear</span><span class="p">:</span> <span class="mi">1981</span><span class="p">,</span>
  <span class="nx">active</span><span class="p">:</span> <span class="kc">true</span>
</code></pre></div></div>

<p><strong>Be sure to pass this information in the body and to have x-www-form-urlencoded selected before you hit send on your request.</strong></p>

<p>The <code class="highlighter-rouge">create_route</code> is complete! Merge it into <code class="highlighter-rouge">master</code>.</p>

<h5 id="remaining-routes">Remaining Routes</h5>

<p>There are two final routes to think about, Update and Delete. See if you can implement these on your own. <a href="http://docs.sequelizejs.com/">Here</a> is the Sequelize docs. If you get stuck don‚Äôt struggle for too long. The answers can be found below.</p>

<details><summary>Update Route Answer</summary>
  <img src="./assets/server_side_js_images/update_game.png" />
</details>

<details><summary>Delete Route Answer</summary>
  *Warning* if you're viewing this and you type this out, there's an intentional bug in the code that you'll need to fix before this will work correctly.
	
  <img src="./assets/server_side_js_images/delete_game.png" />
</details>
:ET