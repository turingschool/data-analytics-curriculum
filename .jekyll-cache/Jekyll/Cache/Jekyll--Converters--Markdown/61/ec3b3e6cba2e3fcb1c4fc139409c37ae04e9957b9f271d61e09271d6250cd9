I"te<h2 id="learning-goals">Learning Goals</h2>
<ul>
  <li>Understand how to set-up Jest in an Express app</li>
  <li>Be able to write an integration test using Jest</li>
</ul>

<h2 id="warm-up">Warm Up</h2>
<ul>
  <li>What are the steps necessary to writing a good test?</li>
  <li>What is the difference between an integration test and a unit test?</li>
</ul>

<h2 id="testing-with-jest">Testing with Jest</h2>

<p>Today we are going to be working with our <code class="highlighter-rouge">publications</code> app to set-up Jest.</p>

<p>First, make a new branch:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git checkout branch jest-testing
</code></pre></div></div>

<p>Next we want to ensure that the server is not within the <code class="highlighter-rouge">index.js</code> or <code class="highlighter-rouge">app.js</code> file. <em>If you are using the express generator it should be within <code class="highlighter-rouge">bin/www</code>.</em> If the server is within <code class="highlighter-rouge">index.js</code> or <code class="highlighter-rouge">app.js</code> you will need to make a separate file, such as <code class="highlighter-rouge">server.js</code>. We do this because if it is left in the file that we are testing, then our project will try to start the server each time we run our tests and we do not want that to happen.</p>

<p>Below is an example of separating out <code class="highlighter-rouge">server.js</code> and <code class="highlighter-rouge">index.js</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//server.js</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./index.js</span><span class="dl">'</span><span class="p">)</span>


<span class="c1">//This is the code that is removed from index.js or app.js</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3000</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">),</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`App is running on http://localhost:</span><span class="p">${</span><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">)}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//index.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">body-parser</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>


<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">port</span><span class="dl">'</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Publications</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// All endpoints are here</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</code></pre></div></div>

<p>Once the server has been split from the <code class="highlighter-rouge">index</code> or <code class="highlighter-rouge">app</code> file, the start script in the <code class="highlighter-rouge">package.json</code> file will need to be updated. It should now look like this:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"scripts": {
  "start": "node server.js",
</code></pre></div></div>
<p><em>Check your Server</em>
To make sure we can still get the server up and running type <code class="highlighter-rouge">npm start</code> in the command line. You should see somthing like <code class="highlighter-rouge">Publications is running on 3000</code> and the server should be listening.</p>

<h3 id="testing-database-set-up">Testing Database Set-up</h3>

<p>It is also good practice to have a separate database for testing, so that we are not affecting are development database. To do that we will first need to create the test database is <code class="highlighter-rouge">psql</code>.</p>

<p>From the command line run the following commands:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql
CREATE DATABASE publications_test<span class="p">;</span>
<span class="se">\q</span>
</code></pre></div></div>

<p>Next in the <code class="highlighter-rouge">knexfile.js</code> we will want to update the config settings. Add the test environment so that it points to the <code class="highlighter-rouge">publications_test</code> database. Once you are done the file should look like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//knexfile.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>

  <span class="na">development</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">connection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">postgres://localhost/publications_dev</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/dev</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="na">test</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">client</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pg</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">connection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">postgres://localhost/publications_test</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">migrations</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/migrations</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">seeds</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">directory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./db/seeds/dev</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Next run the migrations for your test environment with the following command:
<code class="highlighter-rouge">knex migrate:latest --env test</code></p>

<h3 id="setting-up-for-jest">Setting up for Jest</h3>

<p>First, globally install jest: <code class="highlighter-rouge">npm install jest -g</code>. Now, we can install the packages we want to use in our project.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>babel-jest supertest <span class="nt">-D</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">babel-jest</code> is used to compile our JavaScript. <code class="highlighter-rouge">supertest</code> is a testing library which allows us to make requests to our API within our test files.</p>

<p>After that has successfully installed, let’s add a test script to the <code class="highlighter-rouge">package.json</code> file, so that we can simply run our tests with <code class="highlighter-rouge">npm test</code>,</p>

<p>It should look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//package.json</span>
<span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node ./bin/www</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --config ./jest.config.js --forceExit --coverage --runInBand</span><span class="dl">"</span>
<span class="p">},</span>
</code></pre></div></div>

<p>Lastly create a <code class="highlighter-rouge">jest.config.js</code> file at the root of the project. In this file include the following:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module.exports = {
    testEnvironment: "node"
}
</code></pre></div></div>

<p>Yay! Our set-up is complete and we can now write our tests!</p>

<h3 id="writing-tests-with-jest">Writing Tests with Jest</h3>

<p>Create a <code class="highlighter-rouge">test</code> directory and a file named <code class="highlighter-rouge">index.spec.js</code> to put our tests in. We are going to write a simple test to test our root path first.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//index.spec.js</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">supertest</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../index</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test the root path</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">It should respond to the GET method</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">);</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

</code></pre></div></div>

<p>This test should pass. Let’s write another test for the papers index endpoint <code class="highlighter-rouge">/api/v1/papers</code>. This endpoint interacts with out database, so we need to think about how we can interact with the testing database. To do this we are going to include a <code class="highlighter-rouge">beforeEach</code>, and an <code class="highlighter-rouge">afterEach</code> inside our test file. These should be within a <code class="highlighter-rouge">describe</code> block that will wrap our tests. We will also need to include connection to our database.</p>

<p>The <code class="highlighter-rouge">beforeEach</code> is responsible for inserting a paper into the papers table. The <code class="highlighter-rouge">afterEach</code> is responsible for clearing out the data in the papers table. We do this so that each test will begin with the same information and each test will not be affected by any other test. The <code class="highlighter-rouge">index.spec.js</code> file should now look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.spec.js</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">supertest</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./app</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">//Database connection</span>
<span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../knexfile</span><span class="dl">'</span><span class="p">)[</span><span class="nx">environment</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">knex</span><span class="dl">'</span><span class="p">)(</span><span class="nx">configuration</span><span class="p">);</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">api</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">await</span> <span class="nx">database</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="dl">'</span><span class="s1">truncate table papers cascade</span><span class="dl">'</span><span class="p">);</span>

     <span class="kd">let</span> <span class="nx">paper</span> <span class="o">=</span> <span class="p">{</span>
       <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Alternate Endings for Game of Thrones, Season 8</span><span class="dl">'</span><span class="p">,</span>
       <span class="na">author</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Literally Anyone</span><span class="dl">'</span><span class="p">,</span>
       <span class="na">publisher</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Not George R. R. Martin</span><span class="dl">'</span>
     <span class="p">};</span>
     <span class="k">await</span> <span class="nx">database</span><span class="p">(</span><span class="dl">'</span><span class="s1">papers</span><span class="dl">'</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">paper</span><span class="p">,</span> <span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">database</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="dl">'</span><span class="s1">truncate table papers cascade</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test the root path</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a 200</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
      <span class="p">})</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let’s add our test for <code class="highlighter-rouge">/api/v1/papers</code>. This is going to be similar to our root path test, but not only do we want to check the response status, we also want to check that we are getting an array of paper objects as well as the keys and the values on the object. So our test should look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test GET /api/v1/papers path</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">happy path</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api/v1/papers</span><span class="dl">"</span><span class="p">);</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">toHaveProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">title</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Alternate Endings for Game of Thrones, Season 8</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">toHaveProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">author</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">author</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Literally Anyone</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">toHaveProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">publisher</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">publisher</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Not George R. R. Martin</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
</code></pre></div></div>

<p><em>On your Own:</em> Try writing tests for the remainder of the <code class="highlighter-rouge">api</code> endpoints.</p>
:ET