I"ç<h3 id="iterations">Iterations:</h3>

<ul>
  <li><a href="1_getting_started.markdown">1 Getting Started</a></li>
  <li><a href="2_implementing_artists.markdown">2 Implementing artists</a></li>
  <li><a href="3_implementing_songs.markdown">3 Implementing songs</a></li>
  <li><a href="3_optional_additional_song_features.markdown">3.1 Optional Additional Song Features</a></li>
  <li><a href="4_implementing_playlists.markdown">4 Implementing Playlists</a></li>
  <li><a href="5_refactoring.markdown">5 Refactoring</a></li>
  <li><a href="6_controller_tests.markdown">6 Controller Tests</a></li>
  <li><a href="7_implementing_users.markdown">7 Implementing users</a></li>
  <li><a href="wip-image-upload.markdown">7.1 Extensions</a></li>
</ul>

<p>Check out a new branch:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -b 2_implement-artists
</code></pre></div></div>

<p>Like all effective developers, we‚Äôll start by writing a feature test. First, we‚Äôll need to set up Capybara in order to mimic an end-user. In the Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'capybara'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You may also want to add <code class="highlighter-rouge">gem 'launchy'</code> so that you can <code class="highlighter-rouge">save_and_open_page</code> for debugging purposes.</p>

<p>Then <code class="highlighter-rouge">bundle</code>.</p>

<p>Next, add the dependency to the <code class="highlighter-rouge">rails_helper.rb</code> file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'capybara/rails'</span>
</code></pre></div></div>

<p>Time to write the test! We‚Äôll use a red-green-refactor approach:</p>

<p><em>RED</em>: Write a test for some piece of functionality that your app should have. Obviously, since we haven‚Äôt implemented any code, the test should fail. That‚Äôs what we want!</p>

<p><em>GREEN</em>: Use the error messages and failures to drive your development. Implement the smallest possible piece of code to fix the error. Keep repeating this cycle until you get a passing test.</p>

<p><em>REFACTOR</em>: Now is the time to go back and refactor your code. This means cleaning up variable names, method names, duplication, and implementation.</p>

<p>We‚Äôll start with a feature test, which is a type of acceptance test. An acceptance test tests functionality that the end user will need. We‚Äôll use this feature test to drive out the creation and functionality of certain routes, controllers, models, and views. As we touch those pieces, we may drop down to a lower level (for example, a model test) in order to test edge cases.</p>

<p>Let‚Äôs start with a user story for creating a artist:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
When I visit the artists index
And I click "New artist"
And I fill in the name
And I fill in an image path
And I click "Create Artist"
Then I should see the artist name and image on the page
</code></pre></div></div>

<p>Make a folder for features: <code class="highlighter-rouge">mkdir spec/features</code> and then create a test: <code class="highlighter-rouge">touch spec/features/user_creates_an_artist_spec.rb</code></p>

<p><strong>If you want more of a challenge, stop right here and create this test on your own.</strong></p>

<p>Inside of that file, we‚Äôll use our user story to flesh out a feature test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">feature</span> <span class="s2">"User submits a new artist"</span> <span class="k">do</span>
  <span class="n">scenario</span> <span class="s2">"they enter data to create a new artist"</span> <span class="k">do</span>
    <span class="n">artist_name</span>       <span class="o">=</span> <span class="s2">"Bob Marley"</span>
    <span class="n">artist_image_path</span> <span class="o">=</span> <span class="s2">"http://cps-static.rovicorp.com/3/JPG_400/MI0003/146/MI0003146038.jpg"</span>

    <span class="n">visit</span> <span class="s1">'/artists'</span>
    <span class="n">click_on</span> <span class="s2">"New artist"</span>
    <span class="n">fill_in</span> <span class="s2">"artist_name"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">artist_name</span>
    <span class="n">fill_in</span> <span class="s2">"artist_image_path"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">artist_image_path</span>
    <span class="n">click_on</span> <span class="s2">"Create Artist"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span> <span class="n">artist_name</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">"img[src=</span><span class="se">\"</span><span class="si">#{</span><span class="n">artist_image_path</span><span class="si">}</span><span class="se">\"</span><span class="s2">]"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Again, if you want more of a challenge, stop right here and implement the code to get this test to pass on your own.</strong></p>

<p>Let‚Äôs run the spec and see what happens. From your command line, type <code class="highlighter-rouge">rspec</code>.</p>

<p>You should see this error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/rvm/gems/ruby-2.2.2/gems/activerecord-4.2.5/lib/active_record/connection_adapters/postgresql_adapter.rb:661:in `rescue in connect': FATAL:  database "mix_master_test" does not exist (ActiveRecord::NoDatabaseError)
</code></pre></div></div>

<p>This means that we haven‚Äôt created our database yet. We need to run <code class="highlighter-rouge">rake db:create</code>. Now run the test again.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/rwarbelow/Desktop/Coding/Turing/mix_master/db/schema.rb doesn't exist yet. Run `rake db:migrate` to create it, then try again. If you do not intend to use a database, you should instead alter /Users/rwarbelow/Desktop/Coding/Turing/mix_master/config/application.rb to limit the frameworks that will be loaded.
F

Failures:

  1) User submits a new artist they see the page for the individual artist
      Failure/Error: visit '/artists'

      ActionController::RoutingError:
        No route matches [GET] "/artists"
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/railties-4.2.6/lib/rails/rack/logger.rb:38:in `call_app'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/railties-4.2.6/lib/rails/rack/logger.rb:20:in `block in call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/railties-4.2.6/lib/rails/rack/logger.rb:20:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/methodoverride.rb:22:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/runtime.rb:18:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/lock.rb:17:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/sendfile.rb:113:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/railties-4.2.6/lib/rails/engine.rb:518:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/railties-4.2.6/lib/rails/application.rb:165:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/urlmap.rb:66:in `block in call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/urlmap.rb:50:in `each'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-1.6.4/lib/rack/urlmap.rb:50:in `call'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-test-0.6.3/lib/rack/mock_session.rb:30:in `request'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-test-0.6.3/lib/rack/test.rb:244:in `process_request'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0@global/gems/rack-test-0.6.3/lib/rack/test.rb:58:in `get'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/rack_test/browser.rb:61:in `process'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/rack_test/browser.rb:36:in `process_and_follow_redirects'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/rack_test/browser.rb:22:in `visit'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/rack_test/driver.rb:43:in `visit'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/session.rb:240:in `visit'
      # /Users/rwarbelow/.rvm/gems/ruby-2.3.0/gems/capybara-2.8.0/lib/capybara/dsl.rb:52:in `block (2 levels) in &lt;module:DSL&gt;'
      # ./spec/features/user_creates_an_artist_spec.rb:8:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.00376 seconds (files took 5.88 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/features/user_creates_a_song_spec.rb:4 # User submits a new artist they see the page for the individual artist
</code></pre></div></div>

<p>The first bit tells us that we don‚Äôt have a <code class="highlighter-rouge">schema.rb</code>. Run <code class="highlighter-rouge">rake db:migrate</code> as it says, and then rerun your test with <code class="highlighter-rouge">rspec</code>. You should still have the same failure, but this time without the note at the top. Let‚Äôs use the errors and failures to guide our development. We‚Äôll focus in on this line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::RoutingError:
  No route matches [GET] "/artists"
</code></pre></div></div>

<p>This tells us that we don‚Äôt have an route to get <code class="highlighter-rouge">/artists</code> (which will be the index of all artists), so we‚Äôll define that in our <code class="highlighter-rouge">config/routes.rb</code> file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run <code class="highlighter-rouge">rake routes</code>, we‚Äôll see this output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix Verb URI Pattern        Controller#Action
artists GET  /artists(.:format) artists#index
</code></pre></div></div>

<p>The URI Pattern column tells us that we now have a route available for <code class="highlighter-rouge">/artists</code>. Run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: visit artists_path

     ActionController::RoutingError:
       uninitialized constant ArtistsController
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/conditionalget.rb:25:in `call'
     ...
</code></pre></div></div>

<p>That <code class="highlighter-rouge">uninitialized constant ArtistsController</code> line tells us that we‚Äôll need to create an ArtistsController. That should be easy enough. Let‚Äôs do it now:</p>

<p><code class="highlighter-rouge">$ touch app/controllers/artists_controller.rb</code></p>

<p>And inside of that file, we‚Äôll define the controller:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: visit artists_path

     AbstractController::ActionNotFound:
       The action 'index' could not be found for ArtistsController
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>If we look at the last column of the output of <code class="highlighter-rouge">rake routes</code>, we‚Äôll see that <code class="highlighter-rouge">artists_path</code> should be going to the <code class="highlighter-rouge">index</code> action in the <code class="highlighter-rouge">artists</code> controller:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix  Verb URI Pattern        Controller#Action
artists GET  /artists(.:format) artists#index
</code></pre></div></div>

<p>We haven‚Äôt defined the index action, so let‚Äôs do that inside of the controller:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ArtistsController &lt; ApplicationController
  def index
  end
end
</code></pre></div></div>

<p>Run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: visit artists_path

     ActionView::MissingTemplate:
       Missing template artists/index, application/index with {:locale=&gt;[:en], :formats=&gt;[:html], :variants=&gt;[], :handlers=&gt;[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
         * "/Users/rwarbelow/Desktop/Coding/Turing/mix_master/app/views"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>Our failure is telling us that we‚Äôre missing a template. Rails is attempting to find <code class="highlighter-rouge">artists/index</code> inside of our views folder, but it doesn‚Äôt see it (because we haven‚Äôt created it. Good job, Rails!). Let‚Äôs make that:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir app/views/artists
$ touch app/views/artists/index.html.erb
</code></pre></div></div>

<p>We could potentially try to put something in that template, but let‚Äôs have faith in our test and the errors that it‚Äôs giving us. All the current failure told us was that it couldn‚Äôt find a template. We‚Äôve created the template. Let‚Äôs see what our test has to tell us now. Run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "New artist"

     Capybara::ElementNotFound:
       Unable to find link or button "New artist"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/capybara-2.5.0/lib/capybara/node/finders.rb:43:in `block in find'
     ...
</code></pre></div></div>

<p>It‚Äôs not seeing a link or button to click for new artist. We‚Äôll need to add that in the view. Let‚Äôs use a link helper with the prefix that <code class="highlighter-rouge">rake routes</code> gives us:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>All Artists<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"New artist"</span><span class="p">,</span> <span class="n">new_artist_path</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: &lt;%= link_to "New artist", new_artist_path %&gt;

     ActionView::Template::Error:
       undefined local variable or method `new_artist_path' for #&lt;#&lt;Class:0x007fee98ab17e0&gt;:0x007fee98aa1188&gt;
     # ./app/views/artists/index.html.erb:3:in `_app_views_artists_index_html_erb__160270083333517601_70331334416800'
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>We‚Äôve used the <code class="highlighter-rouge">new_artist_path</code> helper, but that doesn‚Äôt exist yet. It should return a path of <code class="highlighter-rouge">'/artists/new'</code>, so we‚Äôll need to add this to our <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:new</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake routes</code> to see the new route:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix Verb URI Pattern            Controller#Action
artists GET  /artists(.:format)     artists#index
new_artist GET  /artists/new(.:format) artists#new
</code></pre></div></div>

<p>Now that we have the <code class="highlighter-rouge">new_artist_path</code>, we‚Äôll run the spec again. Can you predict what the error will be?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "New artist"

     AbstractController::ActionNotFound:
       The action 'new' could not be found for ArtistsController
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>This error tells us that Rails is looking for a <code class="highlighter-rouge">new</code> action on our <code class="highlighter-rouge">ArtistsController</code>. This is consistent with the last column in the output from <code class="highlighter-rouge">rake routes</code>, but we haven‚Äôt defined that action yet:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let‚Äôs run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "New artist"

     ActionView::MissingTemplate:
       Missing template artists/new, application/new with {:locale=&gt;[:en], :formats=&gt;[:html], :variants=&gt;[], :handlers=&gt;[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
         * "/Users/rwarbelow/Desktop/Coding/Turing/mix_master/app/views"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>Again, the test is looking for a view that we don‚Äôt have: <code class="highlighter-rouge">artists/new</code>. We‚Äôll make that view:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch app/views/artists/new.html.erb
</code></pre></div></div>

<p>Run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: fill_in "artist_name", with: artist_name

     Capybara::ElementNotFound:
       Unable to find field "artist_name"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/capybara-2.5.0/lib/capybara/node/finders.rb:43:in `block in find'
     ...
</code></pre></div></div>

<p><code class="highlighter-rouge">Capybara::ElementNotFound: Unable to find field "artist_name"</code> means that it‚Äôs looking for a field to fill in, but there‚Äôs nothing on this page. We‚Äôll need to make a form for this new artist. In the <code class="highlighter-rouge">new.html.erb</code> view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="no">Artist</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Notice that we only added one field, even though we know the artist will also have an <code class="highlighter-rouge">image_path</code>. That‚Äôs because we don‚Äôt know if this bit of code will work, or if there is something else we need to do before continuing on the form. Let‚Äôs run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F

Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: &lt;%= form_for(Artist.new) do |f| %&gt;

     ActionView::Template::Error:
       uninitialized constant ActionView::CompiledTemplates::Artist
     # ./app/views/artists/new.html.erb:1:in `_app_views_artists_new_html_erb___2323050576229746218_70261753554780'
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
    ...
</code></pre></div></div>

<p>Ah! So we have an uninitialized constant <code class="highlighter-rouge">Artist</code>. In the form, we said <code class="highlighter-rouge">form_for(Artist.new)</code>, but Rails does not know what <code class="highlighter-rouge">Artist</code> is. This means we‚Äôll need to create the model since we‚Äôre planning to store this in the database:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model Artist name image_path
</code></pre></div></div>

<p>If we don‚Äôt specify the data type from the command line, then the default will be a string. That sounds ok to me. This command will give us a migration, a model, and a model test.</p>

<p>Go ahead and run the spec again:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/rvm/gems/ruby-2.2.2/gems/activerecord-4.2.5/lib/active_record/migration.rb:392:in `check_pending!':  (ActiveRecord::PendingMigrationError)

Migrations are pending. To resolve this issue, run:

  bin/rake db:migrate RAILS_ENV=test

  from /usr/local/rvm/gems/ruby-2.2.2/gems/activerecord-4.2.5/lib/active_record/migration.rb:405:in `load_schema_if_pending!'
  ...
</code></pre></div></div>

<p>Let‚Äôs follow the error and run <code class="highlighter-rouge">rake db:migrate</code>, then try to run our spec again. We could specify the environment (consistent with the error), and limit ourselves to only migrating only our <code class="highlighter-rouge">test</code> database, but it seems like this is as good a time as ever to run our migrations for <code class="highlighter-rouge">development</code> as well.</p>

<p>This will generate our schema that will then be loaded into our test database when we run our specs. Run them, and you‚Äôll see this message:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F*

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Artist add some examples to (or delete) /Users/rwarbelow/Desktop/Coding/Turing/mix_master/spec/models/artist_spec.rb
     # Not yet implemented
     # ./spec/models/artist_spec.rb:4


Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: fill_in "artist_image_path", with: artist_image_path

     Capybara::ElementNotFound:
       Unable to find field "artist_image_path"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/capybara-2.5.0/lib/capybara/node/finders.rb:43:in `block in find'
     ...
</code></pre></div></div>

<p>Here we have a <code class="highlighter-rouge">Pending</code> spec: inside of our <code class="highlighter-rouge">artist_spec.rb</code> file (which was generated when we typed <code class="highlighter-rouge">rails g model Artist</code>), it stubs out the beginning of a spec to be implemented later. That‚Äôs ok. We‚Äôll leave it for now.</p>

<p>We‚Äôre failing for a different reason now: <code class="highlighter-rouge">Capybara::ElementNotFound: Unable to find field "artist_image_path"</code>. What does this mean? Well, we‚Äôre no longer failing on the <code class="highlighter-rouge">fill_in "artist_name"</code> line. So we‚Äôll need to add another field to our form:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="no">Artist</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Run the spec again (I‚Äôll leave out the pending example):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     Capybara::ElementNotFound:
       Unable to find link or button "Create Artist"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/capybara-2.5.0/lib/capybara/node/finders.rb:43:in `block in find'
     ...
</code></pre></div></div>

<p>Cool. The <code class="highlighter-rouge">image_path</code> field is working. Now it can‚Äôt find a link or button to create the artist. Let‚Äôs add a submit button to our form:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="no">Artist</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>By default, the Rails <code class="highlighter-rouge">form_for</code> will put text on the submit button that says ‚ÄúCreate Artist‚Äù since the form is for an <code class="highlighter-rouge">Artist.new</code>. If this form were for an existing artist, then the default text would be ‚ÄúUpdate Artist‚Äù. You can override the default value of the button by doing something like <code class="highlighter-rouge">&lt;%= f.submit "Save this artist!" %&gt;</code>. We won‚Äôt worry about overriding the default today.</p>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     ActionController::RoutingError:
       No route matches [POST] "/artists"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/railties-4.2.5/lib/rails/rack/logger.rb:38:in `call_app'
     ...
</code></pre></div></div>

<p>Great! Our submit button was found, and now it‚Äôs trying to find the route for <code class="highlighter-rouge">[POST] "/artists"</code>. When we look at our routes, we see this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Prefix Verb URI Pattern            Controller#Action
   artists GET  /artists(.:format)     artists#index
new_artist GET  /artists/new(.:format) artists#new
</code></pre></div></div>

<p>Do you see a <code class="highlighter-rouge">POST</code> for <code class="highlighter-rouge">'/artists'</code>? Because I don‚Äôt. This means we‚Äôll need to modify our <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now the output of <code class="highlighter-rouge">rake routes</code> looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Prefix Verb URI Pattern            Controller#Action
   artists GET  /artists(.:format)     artists#index
           POST /artists(.:format)     artists#create
new_artist GET  /artists/new(.:format) artists#new
</code></pre></div></div>

<p>Ok, now our <code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">'/artists'</code> exists. Run the spec and predict what the error will be before you look below!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     AbstractController::ActionNotFound:
       The action 'create' could not be found for ArtistsController
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>That route is trying to go to the <code class="highlighter-rouge">create</code> action in our controller. Let‚Äôs make that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And try our spec again‚Ä¶</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     ActionView::MissingTemplate:
       Missing template artists/create, application/create with {:locale=&gt;[:en], :formats=&gt;[:html], :variants=&gt;[], :handlers=&gt;[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
         * "/Users/rwarbelow/Desktop/Coding/Turing/mix_master/app/views"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>This tells us that we‚Äôre missing the template <code class="highlighter-rouge">artists/create</code>, but we don‚Äôt really want a template. What we want is to create the artist, then redirect to it‚Äôs <code class="highlighter-rouge">show</code> page probably. So in our controller, let‚Äôs go ahead and implement the creation of this artist:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="vi">@artist</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">artist_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:artist</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:image_path</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The private <code class="highlighter-rouge">artist_params</code> method is an example of <a href="http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters">strong parameters</a>. We‚Äôll pass these permitted params into <code class="highlighter-rouge">Artist.create</code> in the <code class="highlighter-rouge">def create</code> method, then redirect to <code class="highlighter-rouge">artist</code>. This gives us the same behavior as saying <code class="highlighter-rouge">redirect_to artist_path(artist)</code>.</p>

<p>Run the spec and predict the output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: redirect_to artist

     NoMethodError:
       undefined method `artist_url' for #&lt;ArtistsController:0x007fabd7e2fb28&gt;
     # ./app/controllers/artists_controller.rb:10:in `create'
     ...
</code></pre></div></div>

<p>The error, <code class="highlighter-rouge">NoMethodError: undefined method 'artist_url'</code> indicates that we don‚Äôt have that route helper yet. Remember to check plural vs. singular when looking at these route helpers. Since this is the <code class="highlighter-rouge">show</code> route (for an individual artist), we‚Äôll add it to our <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:artists</span><span class="p">,</span> <span class="ss">only: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:show</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This produces the following routes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Prefix Verb URI Pattern            Controller#Action
   artists GET  /artists(.:format)     artists#index
           POST /artists(.:format)     artists#create
new_artist GET  /artists/new(.:format) artists#new
    artist GET  /artists/:id(.:format) artists#show
</code></pre></div></div>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     AbstractController::ActionNotFound:
       The action 'show' could not be found for ArtistsController
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>Again, we‚Äôve specified a route but we haven‚Äôt defined the <code class="highlighter-rouge">show</code> action in the <code class="highlighter-rouge">ArtistsController</code>. Go do that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtistsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="vi">@artist</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">artist_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:artist</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:image_path</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: click_on "Create Artist"

     ActionView::MissingTemplate:
       Missing template artists/show, application/show with {:locale=&gt;[:en], :formats=&gt;[:html], :variants=&gt;[], :handlers=&gt;[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
         * "/Users/rwarbelow/Desktop/Coding/Turing/mix_master/app/views"
     # /usr/local/rvm/gems/ruby-2.2.2/gems/rack-1.6.4/lib/rack/etag.rb:24:in `call'
     ...
</code></pre></div></div>

<p>Missing template <code class="highlighter-rouge">artists/show</code> of course. Make it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch app/views/artists/show.html.erb
</code></pre></div></div>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: expect(page).to have_content artist_name
       expected to find text "Bob Marley" in ""
     # ./spec/features/user_creates_an_artist_spec.rb:14:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.29334 seconds (files took 2.87 seconds to load)
2 examples, 1 failure, 1 pending

Failed examples:

rspec ./spec/features/user_creates_an_artist_spec.rb:4 # User submits a new artist they see the page for the individual artist
</code></pre></div></div>

<p>YAY! A true failure. RSpec cannot find the text ‚ÄúBob Marley‚Äù on that page. That‚Äôs good, because we don‚Äôt have anything on the page yet.</p>

<p>We could hardcode ‚ÄúBob Marley‚Äù right onto the view, but we know this is not the implementation that we‚Äôll ultimately want, so let‚Äôs think of other things we could do.</p>

<p>What we want to happen is that we have some artist object that we can call <code class="highlighter-rouge">#name</code> on. I suppose we could do <code class="highlighter-rouge">Artist.first.name</code>, but that will only ever allow us to see the first artist on the page. Instead, let‚Äôs prepare an instance variable in the controller, then access it in the view. How will we grab the correct artist? Well, let‚Äôs put a <code class="highlighter-rouge">byebug</code> in the <code class="highlighter-rouge">show</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">show</span>
    <span class="n">byebug</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Now when you run your tests, you should see it stop on the <code class="highlighter-rouge">byebug</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[10, 19] in /Users/rwarbelow/mix_master/app/controllers/artists_controller.rb
   10:     redirect_to artist
   11:   end
   12:
   13:   def show
   14:     byebug
=&gt; 15:   end
   16:
   17: private
   18:
   19:   def artist_params
</code></pre></div></div>

<p>Type <code class="highlighter-rouge">request.path</code> and you‚Äôll see that it returns something like <code class="highlighter-rouge">"/artists/5"</code> (your id number may be different). We can grab this id out of the URL using our params. <code class="highlighter-rouge">params</code> returns <code class="highlighter-rouge">{"controller"=&gt;"artists", "action"=&gt;"show", "id"=&gt;"5"}</code>, so <code class="highlighter-rouge">params[:id]</code> should return <code class="highlighter-rouge">5</code>. We can then use this to access the correct artist: <code class="highlighter-rouge">Artist.find(params[:id])</code>. Try it!</p>

<p>Let‚Äôs add that code to our controller:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Nice. But the spec failure is going to say the same thing since we haven‚Äôt done anything to use that variable. Go back to your view, and add:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>Run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist they see the page for the individual artist
     Failure/Error: expect(page).to have_css("img[src=\"#{artist_image_path}\"]")
       expected to find css "img[src=\"http://cps-static.rovicorp.com/3/JPG_400/MI0003/146/MI0003146038.jpg\"]" but there were no matches
     # ./spec/features/user_creates_an_artist_spec.rb:15:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.26541 seconds (files took 3.01 seconds to load)
2 examples, 1 failure, 1 pending

Failed examples:

rspec ./spec/features/user_creates_an_artist_spec.rb:4 # User submits a new artist they see the page for the individual artist
</code></pre></div></div>

<p>Now the test sees ‚ÄúBob Marley‚Äù, but we don‚Äôt see the image source in the html. Let‚Äôs add an image tag in the <code class="highlighter-rouge">show</code> view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">image_path</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Run the spec, and you‚Äôll see that our first feature is passing! (Ignore the pending example)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 0.23294 seconds (files took 2.66 seconds to load)
2 examples, 0 failures, 1 pending
</code></pre></div></div>

<p>Now that we‚Äôre <em>green</em>, let‚Äôs do a bit of refactoring. First, in our <code class="highlighter-rouge">new.html.erb</code> view, let‚Äôs not make an object directly in the view. Instead, let‚Äôs use an instance variable:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;%= form_for(@artist) do |f| %&gt;
  &lt;%= f.label :name %&gt;
  &lt;%= f.text_field :name %&gt;

  &lt;%= f.label :image_path %&gt;
  &lt;%= f.text_field :image_path %&gt;

  &lt;%= f.submit %&gt;
&lt;% end %&gt;
</code></pre></div></div>

<p>And then we can define that instance variable in our controller:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def new
    @artist = Artist.new
  end
</code></pre></div></div>

<p>This will allow us to use this <code class="highlighter-rouge">form_for</code> code snippet in a partial for the edit view later on in addition to allowing us to do some neat things with error messages on the <code class="highlighter-rouge">@artist</code> object.</p>

<p>Run <code class="highlighter-rouge">rspec</code> to check to make sure that your test is still passing.</p>

<h4 id="sad-path">Sad Path</h4>

<p>What should happen if a user forgets to put in a name? Should an artist be created still? In this case, probably not. Sometimes you‚Äôll choose to test your sad path cases at the feature level, and sometimes you will test those validations at the model level. How do you decide? Well, if you care about the error that the user should see, then we probably want to make a feature test. Feature tests are expensive and slow, so if we‚Äôre going to test a sad path, we only need one. The rest of our validations will be tested at the model level. Let‚Äôs go.</p>

<p>Here‚Äôs our sad path user story:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
When I visit the artists index
And I click "New artist"
And I fill in an image path
And I click "Create Artist"
Then I should see "Name cannot be blank" on the page
</code></pre></div></div>

<p>Let‚Äôs add a new context to our existing spec file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">feature</span> <span class="s2">"User submits a new artist"</span> <span class="k">do</span>
  <span class="n">scenario</span> <span class="s2">"they see the page for the individual artist"</span> <span class="k">do</span>
    <span class="n">artist_name</span>       <span class="o">=</span> <span class="s2">"Bob Marley"</span>
    <span class="n">artist_image_path</span> <span class="o">=</span> <span class="s2">"http://cps-static.rovicorp.com/3/JPG_400/MI0003/146/MI0003146038.jpg"</span>

    <span class="n">visit</span> <span class="n">artists_path</span>
    <span class="n">click_on</span> <span class="s2">"New artist"</span>
    <span class="n">fill_in</span> <span class="s2">"artist_name"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">artist_name</span>
    <span class="n">fill_in</span> <span class="s2">"artist_image_path"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">artist_image_path</span>
    <span class="n">click_on</span> <span class="s2">"Create Artist"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span> <span class="n">artist_name</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">"img[src=</span><span class="se">\"</span><span class="si">#{</span><span class="n">artist_image_path</span><span class="si">}</span><span class="se">\"</span><span class="s2">]"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"the submitted data is invalid"</span> <span class="k">do</span>
    <span class="n">scenario</span> <span class="s2">"they see an error message"</span> <span class="k">do</span>
      <span class="n">artist_image_path</span> <span class="o">=</span> <span class="s2">"http://cps-static.rovicorp.com/3/JPG_400/MI0003/146/MI0003146038.jpg"</span>

      <span class="n">visit</span> <span class="n">artists_path</span>
      <span class="n">click_on</span> <span class="s2">"New artist"</span>
      <span class="n">fill_in</span> <span class="s2">"artist_image_path"</span><span class="p">,</span> <span class="ss">with: </span><span class="n">artist_image_path</span>
      <span class="n">click_on</span> <span class="s2">"Create Artist"</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span> <span class="s2">"Name can't be blank"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Notice that we wrap this <code class="highlighter-rouge">scenario</code> in a <code class="highlighter-rouge">context</code> block. Context blocks can be used to add additional information that makes it easier to read what the test should be doing.</p>

<p>Let‚Äôs run the spec:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) User submits a new artist the submitted data is invalid they see an error message
     Failure/Error: expect(page).to have_content "Name can't be blank"
       expected to find text "Name can't be blank" in ""
     # ./spec/features/user_creates_an_artist_spec.rb:27:in `block (3 levels) in &lt;top (required)&gt;'

Finished in 0.48679 seconds (files took 4.44 seconds to load)
3 examples, 1 failure, 1 pending

Failed examples:

rspec ./spec/features/user_creates_an_artist_spec.rb:19 # User submits a new artist the submitted data is invalid they see an error message
</code></pre></div></div>

<p>So what‚Äôs happening here? Well, Capybara is looking for the text ‚ÄúName can‚Äôt be blank‚Äù, but it‚Äôs not seeing <em>anything</em> on the page. That‚Äôs because the only thing that‚Äôs printing out to the page right now is <code class="highlighter-rouge">@artist.name</code>. And if we didn‚Äôt enter a name, then of course nothing is on the page.</p>

<p>If you don‚Äôt understand that, I‚Äôd suggest using a <code class="highlighter-rouge">save_and_open_page</code> in your test to see what Capybara is seeing. Perhaps you can also put a <code class="highlighter-rouge">byebug</code> in the controller after the instance variable <code class="highlighter-rouge">@artist</code> is assigned.</p>

<p>This means that the artist is being created regardless of the fact that a name was not submitted. Let‚Äôs pause on the feature test for a moment and drop down to the model level in order to validate the presence of a name. Add the word <code class="highlighter-rouge">pending</code> right below <code class="highlighter-rouge">scenario "they see an error message" do</code>.</p>

<h4 id="validations-at-the-model-level">Validations at the Model Level</h4>

<p>We can use the <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> gem in order to test validations easily with one line. First, add the gem to your Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'byebug'</span>
  <span class="n">gem</span> <span class="s1">'rspec-rails'</span>
  <span class="n">gem</span> <span class="s1">'capybara'</span>
  <span class="n">gem</span> <span class="s1">'launchy'</span>
  <span class="n">gem</span> <span class="s1">'shoulda-matchers'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Note: You may need to add <code class="highlighter-rouge">gem 'shoulda-matchers', github: 'thoughtbot/shoulda-matchers'</code> per <a href="https://github.com/thoughtbot/shoulda-matchers/issues/703">this bug report</a> if you get a <code class="highlighter-rouge">NoMethodError</code> when trying to run rspec after bundling.</p>

<p>And <code class="highlighter-rouge">bundle</code>. Next, we‚Äôll configure shoulda matchers to work with RSpec in <code class="highlighter-rouge">rails_helper.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This file is copied to spec/ when you run 'rails generate rspec:install'</span>
<span class="no">ENV</span><span class="p">[</span><span class="s1">'RAILS_ENV'</span><span class="p">]</span> <span class="o">||=</span> <span class="s1">'test'</span>
<span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../../config/environment'</span><span class="p">,</span> <span class="kp">__FILE__</span><span class="p">)</span>
<span class="c1"># Prevent database truncation if the environment is production</span>
<span class="nb">abort</span><span class="p">(</span><span class="s2">"The Rails environment is running in production mode!"</span><span class="p">)</span> <span class="k">if</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">env</span><span class="p">.</span><span class="nf">production?</span>
<span class="nb">require</span> <span class="s1">'spec_helper'</span>
<span class="nb">require</span> <span class="s1">'rspec/rails'</span>
<span class="nb">require</span> <span class="s1">'capybara/rails'</span>

<span class="no">Shoulda</span><span class="o">::</span><span class="no">Matchers</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">integrate</span> <span class="k">do</span> <span class="o">|</span><span class="n">with</span><span class="o">|</span>
    <span class="n">with</span><span class="p">.</span><span class="nf">test_framework</span> <span class="ss">:rspec</span>
    <span class="n">with</span><span class="p">.</span><span class="nf">library</span> <span class="ss">:rails</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="o">...</span><span class="n">etc</span><span class="o">...</span>
</code></pre></div></div>

<p>Now let‚Äôs add some model-level validation tests in <code class="highlighter-rouge">artist_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Artist</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"validations"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="p">.</span><span class="nf">to</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="p">.</span><span class="nf">to</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:image_path</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="p">.</span><span class="nf">to</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Even though we don‚Äôt have a feature test to drive out these validations, we know that the <code class="highlighter-rouge">create artist</code> feature should act the same way (ie - show an error message) if any of these things are wrong. Run <code class="highlighter-rouge">rpsec</code> and let‚Äôs see what happens.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) Artist should require name to be set
     Failure/Error: it { is_expected.to validate_presence_of(:name) }

       Expected errors to include "can't be blank" when name is set to nil,
       got no errors
     # ./spec/models/artist_spec.rb:5:in `block (2 levels) in &lt;top (required)&gt;'

  2) Artist should require image_path to be set
     Failure/Error: it { is_expected.to validate_presence_of(:image_path) }

       Expected errors to include "can't be blank" when image_path is set to nil,
       got no errors
     # ./spec/models/artist_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'

  3) Artist should require case sensitive unique value for name
     Failure/Error: it { is_expected.to validate_uniqueness_of(:name) }

       Expected errors to include "has already been taken" when name is set to "a",
       got no errors
     # ./spec/models/artist_spec.rb:7:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.94621 seconds (files took 4.57 seconds to load)
5 examples, 3 failures, 1 pending

Failed examples:

rspec ./spec/models/artist_spec.rb:5 # Artist should require name to be set
rspec ./spec/models/artist_spec.rb:6 # Artist should require image_path to be set
rspec ./spec/models/artist_spec.rb:7 # Artist should require case sensitive unique value for name
</code></pre></div></div>

<p>Lot‚Äôs of failures. Let‚Äôs focus on that first one. RSpec is looking for errors when a name is nil. We don‚Äôt have a validation for this in our model, so let‚Äôs go add that in <code class="highlighter-rouge">artist.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Artist</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When we run the specs again, we see that spec passes now. To make the other two pass, we add similar validations:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Artist</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness: </span><span class="kp">true</span>
  <span class="n">validates</span> <span class="ss">:image_path</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If you haven‚Äôt already, you should probably read about <a href="http://guides.rubyonrails.org/active_record_validations.html">other things you can validate using ActiveRecord</a>.</p>

<p>All of our model specs are now passing, so let‚Äôs go back up to the feature test level and remove <code class="highlighter-rouge">pending</code>. This spec will still fail since we‚Äôre not handling what happens if a artist is not successfully saved into the database. So let‚Äôs modify our controller <code class="highlighter-rouge">create</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">artist_params</span><span class="p">)</span>
  <span class="k">if</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">save</span>
    <span class="n">redirect_to</span> <span class="vi">@artist</span>
  <span class="k">else</span>
    <span class="n">render</span> <span class="ss">:new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now whenever the artist cannot successfully be saved due to failing validations, it will render the <code class="highlighter-rouge">new</code> view. We‚Äôll need to add a bit of code in <code class="highlighter-rouge">new.html.erb</code> in order to check whether or not errors exist on the <code class="highlighter-rouge">@artist</code> object:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@artist</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@artist</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span> <span class="cp">%&gt;</span> prohibited this record from being saved:<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="cp">&lt;%</span> <span class="vi">@artist</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">message</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:image_path</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<h4 id="your-turn">Your turn</h4>

<p>Write and implement a feature test for viewing all artists (<code class="highlighter-rouge">spec/features/user_views_all_artists_spec.rb</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
Given that artists exist in the database
When I visit the artists index
Then I should see each artist's name
And each name should link to that artist's individual page
</code></pre></div></div>

<p>Write and implement a feature test for editing an artist (<code class="highlighter-rouge">spec/features/user_edits_an_artist_spec.rb</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
Given that an artist exists in the database
When I visit that artist's show page
And I click on "Edit"
And I fill in a new name
And I click on "Update Artist"
Then I should see the artist's updated name
Then I should see the existing image
</code></pre></div></div>

<p>Write and implement a feature test for deleting an artist (<code class="highlighter-rouge">spec/features/user_deletes_an_artist_spec.rb</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
Given that an artist exists in the database
When I visit that artist's show page
And I click on "Delete"
Then I should be back on the artist index page
Then I should not see the artist's name
</code></pre></div></div>

<p>All tests should be passing. Go ahead and add and commit your work to this branch. Before you commit, read <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this post</a> to learn about proper commit messages and conventional format. Check out master, and merge the branch back into master. Push to Heroku, and migrate on Heroku.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
$ git commit
$ git checkout master
$ git merge 2_implement-artists
$ git push heroku master
$ heroku run rake db:migrate
</code></pre></div></div>

<p>Now you can visit <code class="highlighter-rouge">https://your-herokuapp-number.herokuapp.com/artists</code> and test out this functionality! Send it to all your friends!!</p>

<h3 id="on-to-mix-master-part-3-implementing-songs">On to <a href="3_implementing_songs.markdown">Mix Master Part 3: Implementing Songs</a></h3>
:ET