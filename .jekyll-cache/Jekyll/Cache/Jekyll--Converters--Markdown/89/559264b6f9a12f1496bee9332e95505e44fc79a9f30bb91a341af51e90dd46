I"°b<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Be able to use <code class="highlighter-rouge">max</code>, <code class="highlighter-rouge">max_by,</code> their opposites, and <code class="highlighter-rouge">sort_by</code> appropriately.</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/intermediate_enumerables">here</a></p>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Enumerable</li>
  <li>Iterate</li>
  <li>Return Value</li>
  <li>Block</li>
  <li>max, max_by, min, min_by, sort_by</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>Given the array <code class="highlighter-rouge">kardashians = ["Khloe", "Kim", "Kris", "Kourtney"]</code></p>

<ul>
  <li>Find all the Kardashians with 3 or more letters</li>
  <li>Find <code class="highlighter-rouge">"Kris"</code></li>
  <li>Create a new array with all the names upcased</li>
</ul>

<h1 id="lesson">Lesson</h1>

<p>We‚Äôve got a handle on the beginner enumerables, and you‚Äôve probably discovered some more on your own. In class so far, we‚Äôve learned how to create a new collection, and how to search in the selection returning us either a single item or multiple items.</p>

<h2 id="min--max">min / max</h2>

<p>What would we do if we wanted to get the largest thing out of an array?</p>

<p>Let‚Äôs think about how we would do that with .each.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">greatest</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="nf">first</span>
<span class="n">nums</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="n">greatest</span>
    <span class="n">greatest</span> <span class="o">=</span> <span class="n">num</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">greatest</span>
</code></pre></div></div>

<p>That‚Äôs cool. But there‚Äôs a much easier way - we can make Ruby do the work for us.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nb">puts</span> <span class="n">nums</span><span class="p">.</span><span class="nf">max</span>
</code></pre></div></div>

<p>And what if we wanted to take the smallest? You‚Äôd just use <code class="highlighter-rouge">.min</code> instead.</p>

<p><strong>TURN &amp; TALK:</strong> All the other enumerables have a do block; these don‚Äôt but are still considered enumerables - why?</p>

<h2 id="comparing-strings">Comparing Strings</h2>

<p>You can use these methods for strings as well as numbers. Letters have a sort of intrinsic values on their own.</p>

<p>What do I mean? open up a pry session in your terminal and type in,
<code class="highlighter-rouge">"a" &gt; "b"</code></p>

<p>We can see that the string, <code class="highlighter-rouge">"a"</code> is in fact, less than the string <code class="highlighter-rouge">"b"</code>.</p>

<p>Knowing this we can do some cool things like grabbing the ‚Äúlowest‚Äù alphabetical string within an array.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">[</span><span class="s2">"Brian"</span><span class="p">,</span> <span class="s2">"Mike"</span><span class="p">,</span> <span class="s2">"Amy"</span><span class="p">].</span><span class="nf">min</span>
</code></pre></div></div>

<p>This code, here, it‚Äôll return us <code class="highlighter-rouge">"Amy"</code>. Be careful - this is NOT straight up comparing the length of the strings - it‚Äôs comparing the value of each string! Try running this: <code class="highlighter-rouge">["hello", "hi", "hey"].min</code></p>

<pre><code class="language-Ruby">"zzz" &gt; "aaaa"
true
</code></pre>

<p>If we swap out the min for a max, what will we get?</p>

<p>This is normally where we would have you try this on your own, but I‚Äôm not going to insult your intelligence.</p>

<h2 id="min_by--max_by">min_by / max_by</h2>

<p>Let‚Äôs go back to our code to find the largest value using <code class="highlighter-rouge">each</code>. This time we‚Äôll use an array of Strings as the example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="s2">"Kim"</span><span class="p">,</span> <span class="s2">"Kris"</span><span class="p">,</span> <span class="s2">"Kourtney"</span><span class="p">]</span>
<span class="n">greatest</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="nf">first</span>
<span class="n">names</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="k">if</span> <span class="nb">name</span> <span class="o">&gt;</span> <span class="n">greatest</span>
    <span class="n">greatest</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">greatest</span>
</code></pre></div></div>

<p>In this example, we use the greater than operator <code class="highlighter-rouge">&gt;</code> to compare our Strings. We just saw that by default Ruby compares Strings by the letter value. What if we want it to do something different, for example, compare by the length of the String? We‚Äôd have to do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="s2">"Kim"</span><span class="p">,</span> <span class="s2">"Kris"</span><span class="p">,</span> <span class="s2">"Kourtney"</span><span class="p">]</span>
<span class="n">greatest</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="nf">first</span>
<span class="n">names</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="k">if</span> <span class="nb">name</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="n">greatest</span><span class="p">.</span><span class="nf">length</span>
    <span class="n">greatest</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">greatest</span>
</code></pre></div></div>

<p>The idea here is that we are overriding how we are comparing the elements in the array. We can do this even easier with <code class="highlighter-rouge">max_by</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="s2">"Kim"</span><span class="p">,</span> <span class="s2">"Kris"</span><span class="p">,</span> <span class="s2">"Kourtney"</span><span class="p">]</span>
<span class="n">greatest</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="nf">max_by</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="nb">name</span><span class="p">.</span><span class="nf">length</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">max_by</code> takes whatever the last line of code executed in the block is and uses that to find the max element. In this case, it uses the length of each String to determine what the max should be.</p>

<p>This is quite handy when we make our own objects and we want to find the max/min based on some criteria. Imagine we have a class <code class="highlighter-rouge">Person</code> that stores a name and age:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Person</span>

    <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
                <span class="ss">:age</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
      <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
    <span class="k">end</span>

  <span class="k">end</span>
</code></pre></div></div>

<p>And let‚Äôs store some instances of <code class="highlighter-rouge">Person</code> in an Array:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">people</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Sofia"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Scarlett"</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="n">people</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Stella"</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<p>What if we wanted to get the max Person by age? If you call <code class="highlighter-rouge">people.max</code>, Ruby will tell you it doesn‚Äôt know how to compare two <code class="highlighter-rouge">Person</code> objects.</p>

<p>So let‚Äôs walk this process out and look at how we would do this with .each. It‚Äôs a lot like how we would implement .max or .min.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">max_by</span><span class="p">(</span><span class="n">people</span><span class="p">)</span>
    <span class="n">oldest</span> <span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="nf">first</span>

    <span class="n">people</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
      <span class="k">if</span> <span class="n">person</span><span class="p">.</span><span class="nf">age</span> <span class="o">&gt;</span> <span class="n">oldest</span><span class="p">.</span><span class="nf">age</span>
        <span class="n">oldest</span> <span class="o">=</span> <span class="n">person</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">oldest</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This is very similar to our original implementation. The main difference is that instead of comparing the objects and determining which is ‚Äúgreater or lesser‚Äù, we are comparing <em>their attributes</em> to each other.</p>

<p>And so, the max_by enumerable works similarly.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">greatest</span> <span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="nf">max_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>   <span class="c1"># use the max_by enumerable to iterate</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">age</span>                <span class="c1"># max_by will return the greatest person.age</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>We are iterating over the array, looking at each item in the array, looking at the attribute and then returning the entire object that has the largest value that we want.</p>

<p>Another way to see it, to use this enumerable, we list our criteria for searching in the block, and the enumerable will simply give us the matching object.</p>

<p>We can also grab the first alphabetically here.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">people</span><span class="p">.</span><span class="nf">min_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">name</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>It doesn‚Äôt have to be an array of objects, it can be an array of arrays. We‚Äôre talking about a collection of things that might hold more than one piece of data.</p>

<p>So let‚Äôs simplify the problem.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s2">"Sofie"</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">"Scarlett"</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">"Stella"</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
  <span class="p">]</span>

  <span class="n">people</span><span class="p">.</span><span class="nf">max_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
    <span class="n">person</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>                <span class="c1"># index 1 is the integer/age</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>To find the youngest person, I would use the <code class="highlighter-rouge">min_by</code> method.</p>

<h4 id="now-you-try">Now you try:</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">kardashians</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kourtney"</span><span class="p">,</span> <span class="mi">39</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kim"</span><span class="p">,</span> <span class="mi">37</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kris"</span><span class="p">,</span> <span class="mi">62</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="mi">33</span><span class="p">)</span>
</code></pre></div></div>

<p>Write code to:</p>

<ul>
  <li>Get the youngest member</li>
  <li>Get the person with the shortest name</li>
</ul>

<h2 id="sort">Sort</h2>

<p>We‚Äôve worked on grabbing the largest thing or smallest thing out of a
collection, and that‚Äôs great. But the next logical step is to sort them.</p>

<p>Essentially, it works very similarly to the enumerable methods that we‚Äôve
been talking about so far. The main difference is that instead of
returning a single object, it returns an array of sorted objects, sorted
by the criteria that you select IN ASCENDING ORDER.</p>

<p>Just like with <code class="highlighter-rouge">max</code>, ruby Arrays have a method <code class="highlighter-rouge">sort</code> that will sort based on the default comparison. For Integers, this is simply sorting based on value:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>For Strings, it will sort alphabetically:</p>

<pre><code class="language-Ruby">["Brian", "Mike", "Amy"].sort
=&gt; ["Amy", "Brian", "Mike"]
</code></pre>

<h2 id="sort_by">sort_by</h2>

<p>Just like with <code class="highlighter-rouge">max</code> and <code class="highlighter-rouge">min</code>, sometimes the default comparison isn‚Äôt good enough, and we want to override how ruby will compare our objects. For instance, if we want to sort Strings based on their length:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="s2">"Kim"</span><span class="p">,</span> <span class="s2">"Kris"</span><span class="p">,</span> <span class="s2">"Kourtney"</span><span class="p">]</span>
<span class="n">sorted</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="nf">sort_by</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="nb">name</span><span class="p">.</span><span class="nf">length</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That‚Äôs a simple array, we can take it to the next level by using
our previous example.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span><span class="p">,</span>
              <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@age</span>  <span class="o">=</span> <span class="n">age</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">kardashians</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kourtney"</span><span class="p">,</span> <span class="mi">39</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kim"</span><span class="p">,</span> <span class="mi">37</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Kris"</span><span class="p">,</span> <span class="mi">62</span><span class="p">)</span>
<span class="n">kardashians</span> <span class="o">&lt;&lt;</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Khloe"</span><span class="p">,</span> <span class="mi">33</span><span class="p">)</span>
</code></pre></div></div>

<p>Using this, how do you think we can sort by their names alphabetically?
Do this on paper. Check your work with your BFF.</p>

<p>Extension: How could you create a list of names going in the opposite order?</p>

<p><strong>CFU:</strong> What is the return value of <code class="highlighter-rouge">sort_by</code>?</p>

<h2 id="all">all?</h2>

<p>And now, for something completely different.</p>

<p>We‚Äôre going to look at one of the enumerables that returns a simple true or false. This is  indicated by the method ending with a ‚Äò?‚Äô.</p>

<p>Let‚Äôs look at the name of this enumerable, <code class="highlighter-rouge">all?</code>. Under the hood, it‚Äôs an enumerable with a conditional in the block. If <strong>every</strong> item in a collection returns <code class="highlighter-rouge">true</code> when going through the block, the entire method returns <code class="highlighter-rouge">true</code>. Otherwise, it will return <code class="highlighter-rouge">false</code>.</p>

<p>Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">all?</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
  <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This returns <code class="highlighter-rouge">true</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="s2">"dog"</span><span class="p">,</span><span class="s2">"cat"</span><span class="p">,</span><span class="s2">"pig"</span><span class="p">,</span><span class="s2">"hippopotamus"</span><span class="p">].</span><span class="nf">all?</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
  <span class="n">word</span><span class="p">.</span><span class="nf">length</span> <span class="o">==</span> <span class="mi">3</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This would return false.</p>

<p>Given what you just learned about <code class="highlighter-rouge">all?</code> - can make an educated guess about what <code class="highlighter-rouge">any?</code>, <code class="highlighter-rouge">none?</code>, and <code class="highlighter-rouge">one?</code> do/return?</p>

<h2 id="wrap-up">Wrap Up</h2>

<ul>
  <li>Name all the enumerables you know. What do they each return?</li>
</ul>

<h3 id="for-homework">For Homework:</h3>
<p>In the enums-exercises, complete the following:</p>

<ul>
  <li>find_using_max_by_test.rb</li>
  <li>sort_by_test.rb</li>
  <li>all_pattern_test.rb</li>
  <li>all_test.rb</li>
  <li>any_pattern_test.rb</li>
  <li>any_test.rb</li>
  <li>none_pattern_test.rb</li>
  <li>none_test.rb</li>
  <li>one_pattern_test.rb</li>
  <li>one_test.rb</li>
</ul>
:ET