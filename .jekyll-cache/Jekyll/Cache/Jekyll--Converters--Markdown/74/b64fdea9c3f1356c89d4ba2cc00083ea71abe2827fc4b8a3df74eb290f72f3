I"&<h3 id="learning-goals">Learning Goals</h3>

<ul>
  <li>Understand that modules fill various roles in Ruby.</li>
  <li>Understand what a namespace is and how to create one with a module.</li>
</ul>

<h3 id="vocabulary">Vocabulary</h3>

<ul>
  <li>Namespacing</li>
  <li>Scope Resolution Operator</li>
</ul>

<h3 id="slides">Slides</h3>

<p>Available <a href="../slides/intro_to_namespacing">here</a></p>

<h3 id="warm-up">Warm Up</h3>

<p>Spend the first five minutes writing answers to the following questions:</p>

<ul>
  <li>What are some defining characteristics of modules?</li>
  <li>Name one type of module we’ve already discussed.</li>
</ul>

<h3 id="namespacing">Namespacing</h3>

<ul>
  <li>Namespacers act as containers for our classes; they allow us to organize our code &amp; implement different types of classes with the same name</li>
  <li>Namespacers can be either classes or modules. We’ll be implementing namespacing with modules today.</li>
</ul>

<p>Let’s look at some code.
Slytherin Type 1</p>

<p><code class="highlighter-rouge">touch slytherin1.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Slytherin</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@teachers</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Slytherin Type 2</p>

<p><code class="highlighter-rouge">touch slytherin2.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Slytherin</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@teachers</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="vi">@students</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_student</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
    <span class="vi">@students</span> <span class="o">&lt;&lt;</span> <span class="n">student</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_teacher</span><span class="p">(</span><span class="n">teacher</span><span class="p">)</span>
    <span class="vi">@teachers</span> <span class="o">&lt;&lt;</span> <span class="n">teacher</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>
<p>Turn &amp; Talk:
What is the same/different about these two classes?</p>

<p>Create a runner:</p>

<p><code class="highlighter-rouge">touch slytherin_runner.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"./slytherin1.rb"</span>
<span class="nb">require</span> <span class="s2">"./slytherin2.rb"</span>

<span class="n">house</span> <span class="o">=</span> <span class="no">Slytherin</span><span class="p">.</span><span class="nf">new</span>
<span class="n">student</span> <span class="o">=</span> <span class="no">Slytherin</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Malfoy"</span><span class="p">)</span>

<span class="n">house</span><span class="p">.</span><span class="nf">add_student</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
</code></pre></div></div>

<p>Agree/Disagree:
If I run my runner, what will I get? Why?</p>

<p><code class="highlighter-rouge">ruby slytherin_runner.rb</code></p>

<p>We can use namespacing, where we wrap each Student in a module like so:
A Slytherin Student:</p>

<p><code class="highlighter-rouge">slytherin1.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Student</span>
  <span class="k">class</span> <span class="nc">Slytherin</span>
    
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
      <span class="vi">@teachers</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>A Slytherin house:</p>

<p><code class="highlighter-rouge">slytherin2.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">House</span>
  <span class="k">class</span> <span class="nc">Slytherin</span>
    
    <span class="nb">attr_reader</span> <span class="ss">:students</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@teachers</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="vi">@students</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add_student</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
      <span class="vi">@students</span> <span class="o">&lt;&lt;</span> <span class="n">student</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add_teacher</span><span class="p">(</span><span class="n">teacher</span><span class="p">)</span>
      <span class="vi">@teachers</span> <span class="o">&lt;&lt;</span> <span class="n">teacher</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is how we would instantiate with modules and then call the appropriate method:
Back in our runner:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">student</span> <span class="o">=</span> <span class="no">Student</span><span class="o">::</span><span class="no">Slytherin</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Malfoy"</span><span class="p">)</span>
<span class="n">house</span> <span class="o">=</span> <span class="no">House</span><span class="o">::</span><span class="no">Slytherin</span><span class="p">.</span><span class="nf">new</span>
</code></pre></div></div>

<p>Agree/Disagree:
When I run the runner file what will I get? Why?</p>

<p>I might also nest them in folders to fix out file naming problem.</p>

<p>` mkdir house student<code class="highlighter-rouge">
</code> mv slytherin1.rb student/slytherin.rb<code class="highlighter-rouge">
</code> mv slytherin2.rb house/slytherin.rb`</p>

<p>Turn &amp; Talk:
Have we seen a double colon like that before? What have you seen it do?</p>

<p>The double colon is a <strong>scope resolution operator</strong>. It allows you to change/direct your scope. It allows access to items in modules or class-level items in classes.</p>

<h3 id="exercise-namespacing">Exercise: Namespacing</h3>

<p>So now you try.
Make a Car Class:</p>

<p><code class="highlighter-rouge">touch car_1.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span>
  <span class="k">def</span> <span class="nf">start</span>
    <span class="nb">puts</span> <span class="s2">"Engine on!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">drive</span>
    <span class="nb">puts</span> <span class="s2">"All wheels go!"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Make a second Car Class:</p>

<p><code class="highlighter-rouge">touch car_2.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span>
  <span class="k">def</span> <span class="nf">start</span>
    <span class="nb">puts</span> <span class="s2">"Engine on!"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">drive</span>
    <span class="nb">puts</span> <span class="s2">"Rear wheels go!"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>Start with the code above</li>
  <li>Wrap the first <code class="highlighter-rouge">Car</code> with a module to create a <code class="highlighter-rouge">AWD::Car</code></li>
  <li>Wrap the second <code class="highlighter-rouge">Car</code> with a module to create a <code class="highlighter-rouge">RWD::Car</code></li>
  <li>Create an instance of <code class="highlighter-rouge">RWD::Car</code> and prove that you can access both
the expected methods</li>
  <li>Create an instance of <code class="highlighter-rouge">AWD::Car</code> and prove that you can access both
the expected methods</li>
</ul>

<h3 id="wrapup">WrapUp</h3>
<ul>
  <li>How do you namespace a class?</li>
  <li>What is the syntax of calling a namespaced class?</li>
  <li>What are some scenarios where you have seen namespacing? Where might you use it?</li>
</ul>

<h3 id="additional-resources">Additional Resources</h3>
<ul>
  <li>Launch School’s OOP “book” <a href="https://launchschool.com/books/oo_ruby/read/inheritance#moremodules">Inheritance “chapter”</a></li>
</ul>
:ET