I"Q"<h1 id="measuring-and-improving-test-coverage">Measuring and Improving Test Coverage</h1>

<h2 id="objectives">Objectives</h2>

<ul>
  <li>measure test coverage using the SimpleCov gem</li>
  <li>interpret the results generated by <code class="highlighter-rouge">SimpleCov.start</code></li>
</ul>

<h2 id="materials">Materials</h2>

<ul>
  <li>Repo <a href="https://github.com/rwarbelow/measuring_and_improving_test_coverage">here</a>.</li>
</ul>

<h2 id="what-is-code-coverage">What is code coverage?</h2>

<p>Code coverage is the measure of how many lines of code are executed by your test suite. Generally, you should strive for close to 100%.</p>

<h2 id="what-code-coverage-is-not">What code coverage is not</h2>

<p>Being purely “did this line get hit?”, coverage does not show that the line was hit <em>meaningfully</em>. You still need to think about your tests. It is a <em>supplementary</em> tool; it doesn’t compensate for your brain.</p>

<h2 id="simplecov">SimpleCov</h2>

<h3 id="what-is-simplecov">What is SimpleCov?</h3>

<p><a href="https://github.com/colszowka/simplecov/">SimpleCov</a> is a tool that records which lines of code were executed while a program is running. It then generates a report so that the developer can look at it and infer information about what code is active/dead, or in our case, how much of our code the test suite covers.</p>

<h3 id="try-it-out">Try it out</h3>

<p>First, install simplecov with <code class="highlighter-rouge">gem install simplecov</code>.</p>

<p>Now, check out <code class="highlighter-rouge">speeding_ticket_example/speeding_ticket_test.rb</code>.</p>

<ul>
  <li>Which lines would you expect to get covered in the <code class="highlighter-rouge">speeding_ticket_example/speeding_ticket</code> file based on the test?</li>
  <li>Run the test with <code class="highlighter-rouge">ruby speeding_ticket_test.rb</code> to generate the report. Make sure you are running the test from within the test directory. Notice the “Coverage report generated…” message at the bottom of the output.</li>
  <li>Open the coverage report <code class="highlighter-rouge">open coverage/index.html</code>, notice it tells you some information on this page, including the filename and its percentage covered.</li>
  <li>Now click the filename, “speeding_ticket.rb”, to see the report. Was your guess correct?</li>
</ul>

<h2 id="what-it-looks-like-for-a-given-method">What it looks like for a given method</h2>

<ul>
  <li>What does the percentage refer to?</li>
  <li>What are relevant lines vs. all lines?</li>
  <li>What lines were covered?</li>
  <li>What lines were missed?</li>
  <li>How many times was each line hit?</li>
</ul>

<p>From this, we can see we should add a test for when speed is 4 or more times the speed limit.</p>

<p>But we can’t see that we should consider adding a test for when none of the conditions hit. SimpleCov won’t tell us what tests are missing; it will only tell us which lines of our code are covered and not covered by our current tests.</p>

<h3 id="how-it-works">How it works</h3>

<p>Start SimpleCov at the beginning of your test file (or wherever you want to start recording coverage).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'simplecov'</span>
<span class="no">SimpleCov</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<p>It then uses Ruby’s <a href="http://rdoc.info/stdlib/coverage/Coverage">Coverage API</a> to identify which lines were executed.</p>

<p>When we finish running, Simplecov hooks into Ruby’s exit event (https://github.com/colszowka/simplecov/blob/fee9dcf1f990a57503b0d518d9844a7209db4734/lib/simplecov/defaults.rb#L42)
and writes the data it recorded to an html file we can open in our browser to see the results.</p>

<p>We can see the data that it generated by looking at coverage/.resultset.json</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"MiniTest"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"coverage"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"/Users/rwarbelow/speeding_ticket_example/speeding_ticket.rb"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="kc">null</span><span class="p">,</span><span class="w">
        </span><span class="kc">null</span><span class="p">,</span><span class="w">
        </span><span class="kc">null</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1416323649</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>SimpleCov takes this information and matches it up to the source file,
adding the coverage information to each line and displaying them
in a static html page.</p>

<h3 id="when-to-load-it">When to load it</h3>

<p>SimpleCov cannot see files that were loaded before it started.
This means that it needs to be the first thing required (it ignores files required before its definition).
Typically, we would put it in a test helper file, and have every test file
require the helper first.</p>

<h3 id="where-is-the-report">Where is the report?</h3>

<p>The report that SimpleCov generates is in the “coverage” folder.
You can view it by looking at “index.html” in that folder.</p>

<h3 id="gitignore">Gitignore</h3>

<p>Don’t commit your coverage folder. Add it to your <code class="highlighter-rouge">.gitignore</code>.</p>

<h3 id="where-are-the-docs">Where are the docs?</h3>

<p>Want to know more about SimpleCov than we covered today? Documentation is on the <a href="https://github.com/colszowka/simplecov/">github page</a>.</p>

<p>There is information about how files are filtered (ie - filter additional files/folders),
omitting code from the report, declaring profiles (you get a default one that
scopes the report to only code in your project root, but it also sees code
that is executed in gems and Ruby Core and more)! It shows you how you can
have it fail the running program if your code coverage doesn’t hit some minimum
threshold (e.g. 90%).</p>

<h3 id="what-about-when-it-gets-all-messed-up">What about when it gets all messed up?</h3>

<p>Sometimes, while trying to aggregate results (e.g. if you have more than one test suite)
it can get messed up. When this happens <code class="highlighter-rouge">rm -r coverage</code> and run again.</p>

<h2 id="questions">Questions:</h2>

<ul>
  <li>We’ve talked about what it means if a line is not executed.
But what might we conclude if a line gets hit a whole bunch of times?</li>
  <li>Should you put your coverage directory in git?</li>
</ul>

<h2 id="how-seriously-should-you-take-this">How seriously should you take this?</h2>

<p>Not <strong>too</strong> seriously. It’s just a metric you can use to get some information,
it doesn’t define what good coverage is, as you saw, we still need to use our brains.
In the end, you need to make the right decision for your project based on the context
that you have, and this is one way to get information about the context.</p>

<h2 id="your-turn">Your turn!</h2>

<p>With your pair, decide on one of the options below:</p>

<p>1) Take a previous project (either from Turing or on your own) and add SimpleCov. Look at your code coverage and add tests for parts that are not covered.</p>

<p>2) Implement a passenger class and a bus class that interact with each other (this interaction is up to you). As you’re building out tests and features, run SimpleCov to make sure you have tests to cover your functionality.</p>
:ET