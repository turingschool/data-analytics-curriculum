I"(<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Why/when do we namespace our routes?</li>
  <li>What is the difference between Namespacing and Scoping?</li>
  <li>When would we use one over the other?</li>
  <li>In what case should you use Nested Resources?</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<p>How confident are you that you can create all 8 prefixes, http-verbs, URI-patterns, and controller actions that Rails gives you when you have the following?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>

<span class="n">resources</span> <span class="ss">:cats</span>
</code></pre></div></div>

<h2 id="setup">Setup</h2>

<p>Let’s create an app for CRUDding some cats. Yes, it sounds weird. Yes, it is weird. Weird is good.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails new cats <span class="nt">-T</span> <span class="nt">-d</span><span class="o">=</span>postgresql
</code></pre></div></div>

<h3 id="resource-routes-recap">Resource Routes Recap:</h3>

<p>Let’s add some resource routes to our <code class="highlighter-rouge">routes.rb</code> for <code class="highlighter-rouge">cats</code>.</p>

<p><img src="http://i.imgur.com/efXfyNW.png" alt="Resources Cats" /></p>

<h3 id="distinguishing-routes">Distinguishing Routes</h3>

<p>Let’s say we have:</p>

<ul>
  <li><code class="highlighter-rouge">cats</code></li>
  <li><code class="highlighter-rouge">administrators</code></li>
</ul>

<p>We want a way to distinguish your routes so an admin has additional functionality/control over your application.</p>

<p>For example, say we want <code class="highlighter-rouge">http://localhost:3000/admin/cats</code> to show <code class="highlighter-rouge">edit</code>/<code class="highlighter-rouge">delete</code> buttons for each individual cat and only admins can get here.</p>

<p>We also want <code class="highlighter-rouge">http://localhost:3000/cats</code> to show a list of cats (and anyone visiting our application can get here).</p>

<p>What can we do?</p>

<h3 id="scope">Scope</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># config/routes.rb</span>
	<span class="n">scope</span> <span class="ss">:admin</span> <span class="k">do</span>
	 <span class="n">resources</span> <span class="ss">:cats</span>
	<span class="k">end</span>
</code></pre></div></div>

<p>Adding <code class="highlighter-rouge">scope</code> to our routes gives us the following when we run <code class="highlighter-rouge">rake routes</code>:</p>

<p><img src="http://i.imgur.com/O10zMLa.png" alt="Scope 150%" /></p>

<h3 id="potential-problems-with-scope">Potential Problems with <strong>scope</strong></h3>

<p>We’re going to need a way to <strong>differentiate</strong> our controllers. We want what we already have (the url prefix) <strong>AND</strong> a separate controller to encapsulate the different functionality.</p>

<p>We want both <code class="highlighter-rouge">/admin/cats</code> and <code class="highlighter-rouge">/cats</code> to be handled by our controllers in different ways.</p>

<h3 id="scope-and-module">Scope and Module</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">scope</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">module: :admin</span> <span class="k">do</span>
	 <span class="n">resources</span> <span class="ss">:cats</span>
	<span class="k">end</span>
</code></pre></div></div>

<p>If we have <code class="highlighter-rouge">scope</code> with <code class="highlighter-rouge">module</code> in our routes, we will get the following <code class="highlighter-rouge">rake routes</code> output:</p>

<p><img src="http://i.imgur.com/GvKOhiv.png" alt="Scope-Module 150%" /></p>

<p>By using <code class="highlighter-rouge">module</code>, Rails looks for our controller in a different place.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># When we hit "http://localhost3000/admin/cats"</span>

	<span class="c1"># app/controllers/admin/cats_controller.rb</span>
	<span class="k">class</span> <span class="nc">Admin::CatsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
 	 <span class="k">def</span> <span class="nf">index</span>
	  <span class="vi">@cats</span> <span class="o">=</span> <span class="no">Cat</span><span class="p">.</span><span class="nf">all</span>
	 <span class="k">end</span>
	<span class="k">end</span>

</code></pre></div></div>

<p>What does that <code class="highlighter-rouge">::</code> (scope resolution operator) remind us of?</p>

<p><strong>Note:</strong> Where do you think Rails will look for this view template? It will look in the <code class="highlighter-rouge">views/admin/cats</code> folder.</p>

<h3 id="recap">Recap</h3>

<ul>
  <li>What have we done so far to our routes?</li>
  <li>What did <code class="highlighter-rouge">module</code> change for us?</li>
  <li>Do you notice anything missing when you run <code class="highlighter-rouge">rake routes</code>?</li>
</ul>

<p>As you may have noticed, we don’t have any path helpers that are specific to this “special” <code class="highlighter-rouge">admin</code> prefix. Again, Rails can help us out with this.</p>

<h3 id="scope-module-and-as"><code class="highlighter-rouge">scope</code>, <code class="highlighter-rouge">module</code> and <code class="highlighter-rouge">as</code></h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">scope</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">module: :admin</span><span class="p">,</span> <span class="ss">as: :admin</span> <span class="k">do</span>
	 <span class="n">resources</span> <span class="ss">:cats</span>
	<span class="k">end</span>
</code></pre></div></div>

<p>Let’s run <code class="highlighter-rouge">rake routes</code> once again!</p>

<p><img src="http://i.imgur.com/eY5o0wx.png" alt="Scope-Module-As 150%" /></p>

<p>So what does using <code class="highlighter-rouge">scope</code>, <code class="highlighter-rouge">module</code>, and <code class="highlighter-rouge">as</code> provide for us?</p>

<ul>
  <li>path helpers via the prefix (<code class="highlighter-rouge">admin_cats_path</code>)</li>
  <li>controller prefix (<code class="highlighter-rouge">Admin::CatsController</code>) for more organization</li>
  <li>url prefix for user’s to see in their browser (<code class="highlighter-rouge">http://localhost:3000/admin/cats</code>)</li>
</ul>

<p>As you may have expected, this seems like a lot of work for something that’s used quite often. Rails actually makes this even easier for us.</p>

<h3 id="namespace">Namespace</h3>

<p><code class="highlighter-rouge">namespace</code> <strong>=</strong> <code class="highlighter-rouge">scope</code> + <code class="highlighter-rouge">module</code> + <code class="highlighter-rouge">as</code></p>

<p><em>Rad!</em></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
	 <span class="n">resources</span> <span class="ss">:cats</span>
	<span class="k">end</span>
</code></pre></div></div>

<p>vs</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">scope</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">module: :admin</span><span class="p">,</span> <span class="ss">as: :admin</span> <span class="k">do</span>
	 <span class="n">resources</span> <span class="ss">:cats</span>
	<span class="k">end</span>
</code></pre></div></div>

<h3 id="why-should-we-use-namespace-scope-module-or-as">Why should we use <code class="highlighter-rouge">namespace</code>, <code class="highlighter-rouge">scope</code>, <code class="highlighter-rouge">module</code>, or <code class="highlighter-rouge">as</code>?</h3>

<ul>
  <li>readability</li>
  <li>organization</li>
  <li>specificity</li>
</ul>

<p>Can you imagine what happens when you have 400 lines in your routes file?! You’ll be thankful these route blocks exist for organization alone.</p>

<h3 id="nested-resources">Nested Resources</h3>

<p>Imagine we have these relationships:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">class</span> <span class="nc">Owner</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
	 <span class="n">has_many</span> <span class="ss">:cats</span>
	<span class="k">end</span>

	<span class="k">class</span> <span class="nc">Cat</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
	 <span class="n">belongs_to</span> <span class="ss">:owner</span>
	<span class="k">end</span>

</code></pre></div></div>

<p>Let’s set up our resource routes as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:owners</span> <span class="k">do</span>
 <span class="n">resources</span> <span class="ss">:cats</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake routes</code> now. Why might we want this setup for our routes?</p>

<h3 id="recap-1">Recap</h3>

<p>Turn and talk to your neighbor and discuss:</p>

<ul>
  <li>What are differences between using <strong>namespace</strong> and <strong>nested resources</strong>?</li>
  <li>What are use cases for one or the other? Could you think of use cases for both?</li>
</ul>

<h3 id="closing">Closing</h3>

<p>Can you answer these questions?</p>

<ul>
  <li>Why do we namespace things?</li>
  <li>What is the difference between namespacing and scoping?</li>
  <li>When would we use one over the other?</li>
  <li>When should you use nested resources?</li>
</ul>
:ET