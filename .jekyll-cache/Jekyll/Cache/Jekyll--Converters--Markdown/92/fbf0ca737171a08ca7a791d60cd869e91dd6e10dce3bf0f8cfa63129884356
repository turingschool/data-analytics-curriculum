I"›<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Define and demonstrate a testing cycle</li>
  <li>Use error messages to drive development</li>
  <li>Implement new assertion methods</li>
  <li>Identify best testing practices</li>
</ul>

<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>Whatâ€™s the phrase for summing up the TDD cycle?</li>
  <li>What are 3 things an error message tells us?</li>
  <li>What are some reasons for writing tests before implementation code?</li>
  <li>What are some things we need for the setup of tests?</li>
</ul>

<h2 id="more-assertion-methods">More Assertion Methods</h2>

<h3 id="turn--talk">Turn &amp; Talk</h3>
<p>What do you think the following assertion methods do?</p>

<ul>
  <li><code class="highlighter-rouge">assert_instance_of</code></li>
  <li><code class="highlighter-rouge">assert_equal</code></li>
  <li><code class="highlighter-rouge">assert</code></li>
  <li><code class="highlighter-rouge">assert_nil</code></li>
  <li><code class="highlighter-rouge">refute</code></li>
  <li><code class="highlighter-rouge">refute_equal</code></li>
</ul>

<h2 id="tdd-write-tests-first">TDD: Write Tests First</h2>

<ul>
  <li>Shapes design</li>
  <li>Helps break problem into small pieces</li>
  <li>Removes fear of programming</li>
  <li>Communicates what your code <em>should</em> do</li>
  <li>Tells you basically exactly what to do</li>
</ul>

<h2 id="test-etiquette">Test Etiquette</h2>

<h3 id="file-structure-for-multiple-tests">File Structure for Multiple Tests</h3>
<ul>
  <li>Test files live in their own <code class="highlighter-rouge">test</code> directory</li>
  <li>Implementation code files live in a sibling <code class="highlighter-rouge">lib</code> directory</li>
  <li>Test files should reflect the class theyâ€™re testing with <code class="highlighter-rouge">_test</code> appended to the file name, e.g. <code class="highlighter-rouge">test/name_of_class_test.rb</code></li>
  <li>In your test, youâ€™ll now <code class="highlighter-rouge">require "./lib/name_of_class.rb"</code></li>
</ul>

<h3 id="other-convention--things-to-keep-in-mind">Other Convention &amp; Things to Keep in Mind</h3>
<ul>
  <li>Shy away from running your program directly; instead, run your  test files that will invoke your program by running <code class="highlighter-rouge">ruby test/name_of_class_test.rb</code></li>
  <li>Test Class Name: <code class="highlighter-rouge">class NameOfClassTest &lt; Minitest::Test</code></li>
  <li><code class="highlighter-rouge">def test_something</code> for names of methods in test file â€“ <strong>MUST start with <code class="highlighter-rouge">test_</code></strong></li>
  <li>Itâ€™s generally good practice to reference your method in the test name <code class="highlighter-rouge">test_method_name_does_what_I_want_it_to</code></li>
  <li>Tests will overwrite previous tests with the same name; <strong>give each test a new name</strong></li>
  <li>Each test is independent of the next; <strong>donâ€™t depend on tests to run in order</strong> of how theyâ€™re written
    <ul>
      <li>It clarifies your code to other humans to write in order of complexity; aim to start from most basic to most complex functionality and keep tests grouped by method</li>
    </ul>
  </li>
  <li>You can create a setup method</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LinkedListClass</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="nb">attr_reader</span> <span class="ss">:list</span>
  
  <span class="k">def</span> <span class="nf">setup</span>
    <span class="vi">@list</span> <span class="o">=</span> <span class="no">LinkedList</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="practice">Practice</h3>

<p>Letâ€™s explore how our code breaks when we donâ€™t follow the Test Etiquette rules from above.</p>

<h2 id="exercise-tdd-calculator">Exercise: TDD Calculator</h2>

<ul>
  <li>Build a calculator class from scratch using TDD</li>
  <li>Start with whiteboarding and pseudocode</li>
  <li>Write pseudocode in the test file first for a few methods</li>
  <li>Your calculator should be able to handle the following methods:
    <ul>
      <li>.new</li>
      <li>#total</li>
      <li>#add</li>
      <li>#clear</li>
      <li>#subtract</li>
    </ul>
  </li>
</ul>

<h2 id="recap">Recap</h2>

<ul>
  <li>What are some reasons for writing tests before implementation code?</li>
  <li>Name 3 new assertion methods you learned about today.</li>
  <li>What 2 directories should we have within our project directory?</li>
  <li>What <strong>must</strong> a test file include? Whatâ€™s the best name for a test?</li>
  <li>Do tests need unique names? Should they be written in a particular order? Do they necessarily run in that order?</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li>Blog post: <a href="http://derekbarber.ca/blog/2012/03/27/why-test-driven-development/">Why Test Driven Development?</a></li>
  <li>Want a written-out tutorial on TDD with Minitest? <a href="http://tutorials.jumpstartlab.com/topics/testing/intro-to-tdd.html">Check here</a>.</li>
  <li>If youâ€™d like additional practice with testing, take a look at this <a href="https://github.com/JoshCheek/how-to-test">calculator challenge</a></li>
</ul>
:ET