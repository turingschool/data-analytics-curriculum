I"¡<h1 id="activerecord-and-database-design">ActiveRecord and Database Design</h1>

<h3 id="1-filmfile-and-activerecord-1-2-hours">1) FilmFile and ActiveRecord (~1-2 hours)</h3>

<p>1) Using a migration, add a new table to Film File for directors. The only attribute of a director is a <code class="highlighter-rouge">name</code>. A film belongs to a director and a director can have many films. Donâ€™t forget to add a foreign key of director_id to the films table.</p>

<p>2) Run your migration. Check to see that <code class="highlighter-rouge">schema.rb</code> was updated properly.</p>

<p>3) From the command line, start Tux:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tux
</code></pre></div></div>

<p>Tux gives you an interactive console for your app. Go ahead and add some data to your database:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>james = Director.create(name: "James Cameron")
colin = Director.create(name: "Colin Trevorrow")
joss = Director.create(name: "Joss Whedon")
christopher = Director.create(name: "Christopher Nolan")
george = Director.create(name: "George Lucas")
lee = Director.create(name: "Lee Unkrich")
</code></pre></div></div>

<p>Associate the existing films in your database with their respective directors. If you donâ€™t know any movie directors (like me), check out <a href="http://www.imdb.com/boxoffice/alltimegross">IMDB All-Time Box Office: USA</a>.</p>

<h4 id="experimenting-with-built-in-activerecord-methods">Experimenting with Built-in ActiveRecord Methods</h4>

<p>What does this do? What table is affected?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; genre = Genre.find(2)
&gt;&gt; genre.films.create(title: "Avengers: Age of Ultron", year: 2015, box_office_sales: 458991599, director_id: 3)
</code></pre></div></div>

<p>What about this?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; director = Director.first
&gt;&gt; film = Film.create(title: "Terminator 2: Judgment Day", year: 1991, box_office_sales: 204843350, genre_id: 2)
&gt;&gt; director.films &lt;&lt; film
</code></pre></div></div>

<ul>
  <li>
    <p>Whatâ€™s the difference between <code class="highlighter-rouge">Genre.new(name: "Anime")</code> and <code class="highlighter-rouge">Genre.create(name: "Anime")</code>? Play around with Tux and your development environment (use shotgun to see your web interface) to investigate the difference. How does the <code class="highlighter-rouge">save</code> method play into the relationship between <code class="highlighter-rouge">new</code> and <code class="highlighter-rouge">create</code>? What about the <code class="highlighter-rouge">new_record?</code> method? You may also want to do some Googling.</p>
  </li>
  <li>What kind of object does <code class="highlighter-rouge">Genre.all</code> return?</li>
  <li>How can you get a count of all of the Directors?</li>
  <li>How do you grab the first Film? What about the last?</li>
  <li>Can you select all films where the director_id is 3? Try <code class="highlighter-rouge">Film.where(...</code> or <code class="highlighter-rouge">Director.find(...</code></li>
  <li>Whatâ€™s the difference between the query above and <code class="highlighter-rouge">Film.find_by(director_id: 3)</code>?</li>
  <li>Can you select the genre with a specific id? Try <code class="highlighter-rouge">Genre.find(...</code></li>
  <li>What does <code class="highlighter-rouge">Director.find_or_create_by(name: "James Cameron")</code> do? What about <code class="highlighter-rouge">Director.find_or_create_by(name: "Mel Gibson")</code>?</li>
  <li>Try calling <code class="highlighter-rouge">.to_sql</code> on the end of the query <code class="highlighter-rouge">Genre.where(name: "Romance").to_sql</code>. What happens?</li>
  <li>What does <code class="highlighter-rouge">Film.pluck(:title)</code> do? Can you generate a query to return only the task titles?</li>
  <li>Go through the <a href="http://guides.rubyonrails.org/active_record_querying.html">ActiveRecord docs</a> and find three other methods to try out.</li>
</ul>

<h4 id="calculations">Calculations</h4>

<ul>
  <li>Create a route in your controller for <code class="highlighter-rouge">/directors/:id</code>. This should prepare an instance variable for the director <code class="highlighter-rouge">@director = Director.find(id)</code> and render a view with all films associated with that director.</li>
  <li>In this view, display the total gross box office sales for that directorâ€™s films. Hint: Use the <a href="http://guides.rubyonrails.org/active_record_querying.html#calculations">ActiveRecord Calculations Documentation</a></li>
  <li>Display the average gross box office sales for that directorâ€™s films. Use the documentation linked above.</li>
  <li>Iâ€™m not judging, but you probably wrote these calculations right in your view. Can you extract these out to a class method in film so that you can call something more beautiful like <code class="highlighter-rouge">@director.films.total_sales</code>? (Yes, <code class="highlighter-rouge">total_sales</code> will be a class method on <code class="highlighter-rouge">Film</code>. Any class methods defined in a class that inherits from <code class="highlighter-rouge">ActiveRecord::Base</code> are also available on associations.)</li>
</ul>

<h4 id="extension">Extension</h4>

<ul>
  <li>Change out the sqlite database for a postgres database.</li>
</ul>

<h3 id="2-filmfile-and-crud">2) FilmFile and CRUD</h3>

<p>Add the CRUD functionality for films. A user should be able to see all the films, create a new film, see an individual film, update a film, and delete a film.</p>

:ET