I"õ3<h2 id="promises">Promises</h2>
<blockquote>
  <p>A Promise is an object that represents the eventual completion or failure of an asynchronous operation, and its returning value.</p>
</blockquote>

<p>The three primary states of Promises are the following:</p>

<ul>
  <li>Pending</li>
  <li>Resolved</li>
  <li>Rejected</li>
</ul>

<h2 id="what-do-promises-give-us">What do Promises Give Us?</h2>

<p>By using a Promise object, a function does two things:</p>

<ol>
  <li>It automatically becomes asynchronous, allowing it to run in the background and giving the rest of our code a chance to continue execution.</li>
  <li>It gives us access to two methods - <code class="highlighter-rouge">.then</code> and <code class="highlighter-rouge">.catch</code></li>
</ol>

<h2 id="why-use-promises">Why Use Promises?</h2>
<p>Promises allow you to multi-task a bit in JavaScript. They provide a cleaner and more standardized method of dealing with tasks that need to happen in sequence. With Promises, we have more control over what happens with the outcomes of our async processes.</p>

<h2 id="when-to-use-promises">When to use Promises</h2>
<p>The short answer: whenever youâ€™re handed a promise by an API you didnâ€™t write, where the author chose to use promises. This includes many modern web APIs such as <code class="highlighter-rouge">fetch</code>.</p>

<p>When you read the documentation for a library that uses promises, one of the first sentences will likely say â€˜this is a promise-based libraryâ€™. There are some APIs that still use callbacks rather than promises (the <code class="highlighter-rouge">geolocation</code> API, for example). Youâ€™ll want to read the documentation closely to see if the library expects you to use a promise or callback. So for once, we donâ€™t really have to be in charge of making a decision here â€“ we can let the tools and technologies weâ€™re using dictate whether or not we should be using promises.</p>

<h3 id="advantages-of-promises">Advantages of Promises</h3>

<p>So besides the obvious syntactical benefits, what are some of the others advantages of promises?</p>

<ul>
  <li>You are getting an IOU that youâ€™re holding on to rather than giving your code away as you would with callbacks.</li>
  <li>Error handling is less broken. Itâ€™s not a silver bullet. Synchronous functions either <code class="highlighter-rouge">return</code> or throw an error. In a similar vein, your promises will either become <em>resolved</em> by a value or become <em>rejected</em> with an error.</li>
  <li>You can catch errors along the way and deal with them in a way that is <em>similar</em> to synchronous code.</li>
  <li>Chaining promises is easy and does not result in callback hell.</li>
</ul>

<p>But wait, thereâ€™s more.</p>

<ul>
  <li><code class="highlighter-rouge">Promise.all</code> can take an array of promises and waits until all of the promises are resolved. This solves the nastiness involved in doing this with various callbacks. You can read more about it <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">right here</a>.</li>
</ul>

<h2 id="but-you-promised-me">But you promised me</h2>
<p>Letâ€™s use this time to play around with some basic ideas and concepts with Promises.</p>

<h4 id="getting-started">Getting started</h4>

<p>Before we get started, letâ€™s pull down a super basic repo that we can use to play around with Promises. You can find that <a href="https://github.com/corywest/base_js">repo here</a>. Once you have that repo cloned down, weâ€™ll open up the <code class="highlighter-rouge">scripts.js</code> file and start writing some basic JS. Weâ€™ll go over exactly what we need to write in this file, so donâ€™t worry!</p>

<h4 id="a-basic-promise">A basic Promise</h4>

<p>Write a basic promise in JS is really simple. In our <code class="highlighter-rouge">scripts.js</code> file, letâ€™s write the following below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">()</span>
</code></pre></div></div>

<p>If we return to our terminal and type in <code class="highlighter-rouge">open index.html</code>, a browser window will open with our new JS code loaded into the DOM. The way we can see this is if we type in <code class="highlighter-rouge">command option i</code>. This will open up up your inspector tool.</p>

<p>Once you have this open, youâ€™ll probably encounter an error message like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="p">:</span> <span class="nb">Promise</span> <span class="nx">resolver</span> <span class="kc">undefined</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">a</span> <span class="kd">function</span>
<span class="nx">at</span> <span class="k">new</span> <span class="nb">Promise</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span><span class="p">)</span>
<span class="nx">at</span> <span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="mi">15</span>
<span class="p">(</span><span class="nx">anonymous</span><span class="p">)</span> <span class="p">@</span> <span class="nx">VM77</span><span class="p">:</span><span class="mi">1</span>

</code></pre></div></div>

<p>Not off to a good start. This error a bit cryptic but luckily we know whatâ€™s missing. The Promise wants to be passed a function as its first argument, so letâ€™s do that first and see what happens.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Letâ€™s reload our browser page and checkout what promise returns to us. What do we see when we type in and run <code class="highlighter-rouge">promise</code> into our inspector tool?</p>

<h4 id="using-a-promise">Using a Promise</h4>

<p>Letâ€™s go a little further and see what we can actually do with promises. Remember that Promises have a few states that a Promise can be in. What were those again?</p>

<p><code class="highlighter-rouge">Pending</code>
<code class="highlighter-rouge">Resolved</code>
<code class="highlighter-rouge">Rejected</code></p>

<p>Promise can actually take additional arguments when you create one. The first argument if often called <code class="highlighter-rouge">resolve</code> while the second argument is often called <code class="highlighter-rouge">reject</code>. If we use one of those arguments in the Promise itself, we can actually change the state of the Promise instantaneously. Letâ€™s try this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>As you can see here, we are taking the first argument and invoking it with the parenthesis. What happens when we checkout this promise in our inspector tool again?</p>

<p>Now letâ€™s do the same with the <code class="highlighter-rouge">reject</code> argument as well. What happens with that?</p>

<h4 id="then-and-catch">Then and Catch</h4>

<p>Both, <code class="highlighter-rouge">then</code> and <code class="highlighter-rouge">catch</code> are functions that come along with Promises. They let us do something when the Promise comes in. If you were create a Promise and resolve it, we could easily continue to do work with it. Letâ€™s try this bit of code below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">The promise was resolved!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>A cool thing about using <code class="highlighter-rouge">.then</code> is that we can chain more of them together.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">This ran first</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">I was also ran!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>If we want to see the <code class="highlighter-rouge">.catch</code> runs, what would we need to do? Youâ€™ll need to reject the Promise. A <code class="highlighter-rouge">.catch</code> wonâ€™t run unless the Promise has been completely rejected. We can see this happen below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">reject</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">This ran first</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">I was also ran!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">My promise was rejected!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>As you can see, the other messages in the <code class="highlighter-rouge">.then</code>â€™s never fired off. This is because of the Promise rejection.</p>

<h4 id="beyond-the-basics">Beyond the basics</h4>

<p>So how do we usually use these things? All that Promise stuff is cool, but we need a way to actually use them. This is where <code class="highlighter-rouge">fetch</code> comes into play. In the next lesson, weâ€™ll start digging into how to use <code class="highlighter-rouge">fetch</code> and why Promises play an important role in how we can make our JS code a bit more performant and dynamic.</p>
:ET