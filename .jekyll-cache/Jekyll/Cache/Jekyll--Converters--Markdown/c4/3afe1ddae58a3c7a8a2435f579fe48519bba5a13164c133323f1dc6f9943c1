I"Ã*<h2 id="learning-goals">Learning Goals</h2>

<p>Students will understand‚Ä¶</p>

<ul>
  <li>Why you probably shouldn‚Äôt write your JavaScript in the views</li>
  <li>How to structure their JavaScript code in a Rails project</li>
  <li>How the Asset Pipeline loads JavaScript and how it prepares it for production</li>
  <li>Exposing data from Rails in the DOM using <code class="highlighter-rouge">data</code> attributes</li>
</ul>

<h2 id="lecture">Lecture</h2>

<p>The following are a few of Steve‚Äôs golden rules of using JavaScript in your Rails applications:</p>

<ul>
  <li>Keep Your JavaScript Out of Your View</li>
  <li>Prefer Small Files</li>
  <li>Prefer Data Attributes for Storing Information (If You Need To)</li>
  <li>Try Not to Store Information in the DOM</li>
</ul>

<p>We‚Äôre going to cover the first three of those today.</p>

<h3 id="keep-your-javascript-out-of-your-view">Keep Your JavaScript Out of Your View</h3>

<p>It might be tempting to write your JavaScript in the view that needs it. Here is a bad example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Panic Button<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"panic"</span><span class="nt">&gt;</span>Don't press me!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.panic</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Now you have gone and done it.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Instead, it makes way more sense to refactor this out into its own JavaScript file in <code class="highlighter-rouge">app/assets/javascripts</code>. There are a few advantages to this approach:</p>

<ul>
  <li>In production, the Asset Pipeline will minify your JavaScript files, which optimizes them for faster downloading.</li>
  <li>The browser will cache JavaScript files. So, you will not need to reload this code each time a user visits the page.</li>
</ul>

<p>Instead, consider the following in your ERB file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Panic Button<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"panic"</span><span class="nt">&gt;</span>Don't press me!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>We‚Äôll move the JavaScript to <code class="highlighter-rouge">app/assets/javascripts/panic.js</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.panic</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Now you have gone and done it.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="prefer-small-files">Prefer Small Files</h3>

<p>As your application grows, it‚Äôs likely that the amount of JavaScript will grow as well. Rails pushes you to break up your code into small, manageable files.</p>

<p>If you use generators, then it will create a small file for each controller you create. These files don‚Äôt actually matter. Rails will just concatenate all of your assets together anyway. The names of the files aren‚Äôt important. Make small files that isolate what you‚Äôre doing in each file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>assets
|____images
| |____.keep
|____javascripts
| |____add-new-robot.js
| |____application.js
| |____edit-robot.js
| |____filter-robots-by-category.js
| |____robots.js
| |____search-robots.js
| |____track-users-every-move.js
|____stylesheets
| |____application.css.scss
</code></pre></div></div>

<p>The alternative is a 400 lines JavaScript file. This makes it hard to find what you‚Äôre looking for. You are also more than welcome to use subdirectories.</p>

<h3 id="prefer-data-attributes-to-storing-information-in-classes-or-content">Prefer Data Attributes to Storing Information in Classes or Content</h3>

<p>(This isn‚Äôt really one of Steve‚Äôs golden rules. There is a much better way to do this that we‚Äôll talk about in Module 4.)</p>

<p>Let‚Äôs say you have some data about your model that you need to work with in your JavaScript. Some how, some way, you‚Äôre going to need to hand this data off from your Rails application to your JavaScript.</p>

<p>For fun, we‚Äôll assume it‚Äôs the model‚Äôs <code class="highlighter-rouge">id</code> and that we want to show an alert whenever they click the panic button on a given blog post.</p>

<p>You might be tempted to put this information in the <code class="highlighter-rouge">class</code> or <code class="highlighter-rouge">id</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post post-15"</span> <span class="na">id=</span><span class="s">"15"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"panic"</span><span class="nt">&gt;</span>Panic!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>If we put it in the class, then we‚Äôd have to use some regular expression trickery to get it back you. In valid HTML, only one element can have a given <code class="highlighter-rouge">id</code>, so we might end up with duplicates.</p>

<p>You could also try to put the model‚Äôs <code class="highlighter-rouge">id</code> in the content and go traversing around the DOM looking for it, but that‚Äôs also more trouble than it ought to be.</p>

<p>In HTML5, we have a special feature called ‚Äúdata attributes‚Äù, which allow us to define custom attributes on an element. All of these custom attributes must be prefixed with <code class="highlighter-rouge">data-</code>.</p>

<p>Consider the following:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post"</span> <span class="na">data-id=</span><span class="s">"15"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"panic"</span><span class="nt">&gt;</span>Panic!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>We chose <code class="highlighter-rouge">data-id</code>, but we could also use <code class="highlighter-rouge">data-sandwich</code> if that made more sense for us (it doesn‚Äôt).</p>

<p>jQuery makes it easy to get the value of a data attribute using the <code class="highlighter-rouge">data()</code> method.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.panic</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">You clicked on </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>If you decided you really were going to go along with <code class="highlighter-rouge">data-sandwich</code>, then you would get the value for that key with <code class="highlighter-rouge">$(this).parent().data('sandwich');</code>.</p>

<h3 id="code-along">Code Along</h3>

<p>Let‚Äôs look at the <a href="https://github.com/turingschool-examples/book_of_faces">Book of Faces</a>.</p>

<p>As a group, we‚Äôll re-implement a filtering feature from Module 2 based on department following the golden rules above.</p>

<h3 id="code-along-1">Code Along</h3>

<p>Next we‚Äôll implement the ability to search for a given robot by name on every key stroke. In this example, we‚Äôll use the content in the <code class="highlighter-rouge">&lt;h3&gt;</code> tag.</p>

<p>We‚Äôll complete the following steps:</p>

<ul>
  <li>Bind an event to the search box that files a function on <code class="highlighter-rouge">keyup</code></li>
  <li>When the event fires, get the <code class="highlighter-rouge">val()</code> of the input element</li>
  <li>Iterate through all of the robots and look at its <code class="highlighter-rouge">&lt;h3&gt;</code></li>
  <li>If the <code class="highlighter-rouge">&lt;h3&gt;</code> contains part of the search term, show it</li>
  <li>Otherwise hide it</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://www.dropbox.com/s/bdnyf4o772374gz/Javascript%20in%20Rails.key?dl=0">Slides</a></li>
</ul>
:ET