I"´Å<h2 id="project-description">Project Description</h2>

<p>In this project, you will use Rails and ActiveRecord to build a JSON API which exposes the SalesEngine data schema.</p>

<p>The project requirements are listed below:</p>

<ul>
  <li><a href="#learning-goals">Learning Goals</a></li>
  <li><a href="#technical-expectations">Technical Expectations</a></li>
  <li><a href="#check-ins-and-milestones">Check-ins</a></li>
  <li><a href="#evaluation">Evaluation</a></li>
</ul>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Learn how to to build Single-Responsibility controllers to provide a well-designed and versioned API.</li>
  <li>Learn how to use controller tests to drive your design.</li>
  <li>Use Ruby and ActiveRecord to perform more complicated business intelligence.</li>
</ul>

<h2 id="technical-expectations">Technical Expectations</h2>
<ul>
  <li>All endpoints will expect to return JSON data</li>
  <li>All endpoints should be exposed under an <code class="highlighter-rouge">api</code> and version (<code class="highlighter-rouge">v1</code>)
namespace (e.g. <code class="highlighter-rouge">/api/v1/merchants</code>)</li>
  <li>JSON responses should include <code class="highlighter-rouge">ids</code> only for associated records unless otherwise indicated (that is, don‚Äôt embed the whole associated record, just the id)</li>
  <li>Prices are in cents, therefore you will need to transform them in dollars. (<code class="highlighter-rouge">12345</code> becomes <code class="highlighter-rouge">123.45</code>)
    <ul>
      <li>Remember that for a JSON string to be valid, it needs to contain a key and a value.</li>
      <li>API will be compliant to the JSON API spec. <a href="https://jsonapi.org/">Documentation</a></li>
    </ul>
  </li>
</ul>

<h3 id="data-importing">Data Importing</h3>

<ul>
  <li>You will create an ActiveRecord model for each
  entity included in the <a href="https://github.com/turingschool/sales_engine/tree/master/data">sales engine data</a>.</li>
  <li>Your application should include a rake task which imports all of the CSV‚Äôs and creates the corresponding records.</li>
</ul>

<h3 id="record-endpoints">Record Endpoints</h3>

<h4 id="index-of-record">Index of Record</h4>

<p>Each data category should include an <code class="highlighter-rouge">index</code> action which
  renders a JSON representation of all the appropriate records:</p>

<h5 id="request-url">Request URL</h5>

<p><code class="highlighter-rouge">GET /api/v1/merchants</code></p>

<h5 id="json-output">JSON Output</h5>

<p>(The following is an example of a response if only three records were saved in the database)</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mike's Awesome Store"</span><span class="p">,</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Store of Fate"</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"This is the limit of my creativity"</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="show-record">Show Record</h4>

<p>Each data category should include a <code class="highlighter-rouge">show</code> action which
renders a JSON representation of the appropriate record:</p>

<h5 id="request-url-1">Request URL</h5>

<p><code class="highlighter-rouge">GET /api/v1/merchants/1</code></p>

<h5 id="json-output-1">JSON Output</h5>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Store Name"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="single-finders">Single Finders</h4>

<p>Each data category should offer <code class="highlighter-rouge">find</code> finders to return a single object representation. The finder should work with any of the attributes defined on the data type and always be case insensitive.</p>

<h5 id="request-url-2">Request URL</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /api/v1/merchants/find?parameters
</code></pre></div></div>

<h5 id="request-parameters">Request Parameters</h5>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td>search based on the primary key</td>
    </tr>
    <tr>
      <td>name</td>
      <td>search based on the name attribute</td>
    </tr>
    <tr>
      <td>created_at</td>
      <td>search based on created_at timestamp</td>
    </tr>
    <tr>
      <td>updated_at</td>
      <td>search based on updated_at timestamp</td>
    </tr>
  </tbody>
</table>

<h5 id="json-output-2">JSON Output</h5>

<p><code class="highlighter-rouge">GET /api/v1/merchants/find?name=Schroeder-Jerde</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Schroeder-Jerde"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="multi-finders">Multi-Finders</h4>

<p>Each category should offer <code class="highlighter-rouge">find_all</code> finders which should return all matches for the given query. It should work with any of the attributes defined on the data type and always be case insensitive.</p>

<h5 id="request-url-3">Request URL</h5>

<p><code class="highlighter-rouge">GET /api/v1/merchants/find_all?parameters</code></p>

<h5 id="request-parameters-1">Request Parameters</h5>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td>search based on the primary key</td>
    </tr>
    <tr>
      <td>name</td>
      <td>search based on the name attribute</td>
    </tr>
    <tr>
      <td>created_at</td>
      <td>search based on created_at timestamp</td>
    </tr>
    <tr>
      <td>updated_at</td>
      <td>search based on updated_at timestamp</td>
    </tr>
  </tbody>
</table>

<h5 id="json-output-3">JSON Output</h5>

<p><code class="highlighter-rouge">GET /api/v1/merchants/find_all?name=Cummings-Thiel</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w">
  </span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Cummings-Thiel"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Note: Although this search returns one record, it comes back in an array.</p>

<h4 id="random">Random</h4>

<h5 id="request-url-4">Request URL</h5>

<p>Returns a random resource.</p>

<p><code class="highlighter-rouge">api/v1/merchants/random</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"23"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Thing Thingers"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="relationship-endpoints">Relationship Endpoints</h3>

<p>In addition to the direct queries against single resources, we would like to also be able to pull relationship data from the API.</p>

<p>We‚Äôll expose these relationships using nested URLs, as outlined in the sections below.</p>

<h4 id="merchants">Merchants</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/items</code> returns a collection of items associated with that merchant</li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/invoices</code> returns a collection of invoices associated with that merchant from their known orders</li>
</ul>

<h4 id="invoices">Invoices</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/invoices/:id/transactions</code> returns a collection of associated transactions</li>
  <li><code class="highlighter-rouge">GET /api/v1/invoices/:id/invoice_items</code> returns a collection of associated invoice items</li>
  <li><code class="highlighter-rouge">GET /api/v1/invoices/:id/items</code> returns a collection of associated items</li>
  <li><code class="highlighter-rouge">GET /api/v1/invoices/:id/customer</code> returns the associated customer</li>
  <li><code class="highlighter-rouge">GET /api/v1/invoices/:id/merchant</code> returns the associated merchant</li>
</ul>

<h4 id="invoice-items">Invoice Items</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/invoice_items/:id/invoice</code> returns the associated invoice</li>
  <li><code class="highlighter-rouge">GET /api/v1/invoice_items/:id/item</code> returns the associated item</li>
</ul>

<h4 id="items">Items</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/items/:id/invoice_items</code> returns a collection of associated invoice items</li>
  <li><code class="highlighter-rouge">GET /api/v1/items/:id/merchant</code> returns the associated merchant</li>
</ul>

<h4 id="transactions">Transactions</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/transactions/:id/invoice</code> returns the associated invoice</li>
</ul>

<h4 id="customers">Customers</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/customers/:id/invoices</code> returns a collection of associated invoices</li>
  <li><code class="highlighter-rouge">GET /api/v1/customers/:id/transactions</code> returns a collection of associated transactions</li>
</ul>

<h3 id="business-intelligence-endpoints">Business Intelligence Endpoints</h3>

<p>We want to maintain the original Business Intelligence functionality
of SalesEngine, but this time expose the data through our API.</p>

<p>Remember that ActiveRecord is your friend. Much of the complicated logic
from your original SalesEngine can be expressed quite succinctly
using ActiveRecord queries.</p>

<h4 id="all-merchants">All Merchants</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/most_revenue?quantity=x</code> returns the top <code class="highlighter-rouge">x</code> merchants ranked by total revenue</li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/most_items?quantity=x</code> returns the top <code class="highlighter-rouge">x</code> merchants ranked by total number of items sold</li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/revenue?date=x</code> returns the total revenue for date <code class="highlighter-rouge">x</code> across all merchants</li>
</ul>

<p>Assume the dates provided match the format of a standard ActiveRecord timestamp.</p>

<h4 id="single-merchant">Single Merchant</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/revenue</code> returns the total revenue for that merchant across successful transactions</li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/revenue?date=x</code> returns the total revenue for that merchant for a specific invoice date <code class="highlighter-rouge">x</code></li>
  <li><code class="highlighter-rouge">GET /api/v1/merchants/:id/favorite_customer</code> returns the customer who has conducted the most total number of successful transactions.</li>
  <li><strong>BOSS MODE:</strong> <code class="highlighter-rouge">GET /api/v1/merchants/:id/customers_with_pending_invoices</code> returns a collection of customers which have pending (unpaid) invoices. A pending invoice has no transactions with a result of <code class="highlighter-rouge">success</code>. This means all transactions are <code class="highlighter-rouge">failed</code>. Postgres has an <code class="highlighter-rouge">EXCEPT</code> operator that might be useful. <code class="highlighter-rouge">ActiveRecord</code> also has a <code class="highlighter-rouge">find_by_sql</code> that might help.</li>
</ul>

<p><em>NOTE</em>: Failed charges should never be counted in revenue totals or statistics.</p>

<p><em>NOTE</em>: All revenues should be reported as a float with two decimal places.</p>

<h4 id="items-1">Items</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/items/most_revenue?quantity=x</code> returns the top <code class="highlighter-rouge">x</code> items ranked by total revenue generated</li>
  <li><code class="highlighter-rouge">GET /api/v1/items/most_items?quantity=x</code> returns the top <code class="highlighter-rouge">x</code> item instances ranked by total number sold</li>
  <li><code class="highlighter-rouge">GET /api/v1/items/:id/best_day</code> returns the date with the most sales for the given item using the invoice date. If there are multiple days with equal number of sales, return the most recent day.</li>
</ul>

<h4 id="customers-1">Customers</h4>

<ul>
  <li><code class="highlighter-rouge">GET /api/v1/customers/:id/favorite_merchant</code> returns a merchant where the customer has conducted the most successful transactions</li>
</ul>

<h2 id="code-expectations">Code Expectations</h2>

<h3 id="controller-actions">Controller Actions</h3>

<p>It‚Äôs expected that you limit your controller actions to only the standard Rails actions.
For endpoints such as <code class="highlighter-rouge">GET /api/v1/merchants/find?parameters</code> the initial thought might be to do something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Api</span>
  <span class="k">module</span> <span class="nn">V1</span>
    <span class="k">class</span> <span class="nc">MerchantsController</span>
      <span class="c1"># code omitted</span>
      <span class="k">def</span> <span class="nf">find</span>
        <span class="c1"># code omitted</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This approach can lead to large controllers. For more info on the reasons why, check out this <a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/">blog post</a>.</p>

<p>Instead try something like this which adheres to the above approach of only using RESTful actions:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Api</span>
  <span class="k">module</span> <span class="nn">V1</span>
    <span class="k">module</span> <span class="nn">Merchants</span>
      <span class="k">class</span> <span class="nc">SearchController</span>
        <span class="k">def</span> <span class="nf">show</span>
        <span class="c1"># code omitted</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="milestones--feedback">Milestones &amp; Feedback</h2>

<h4 id="milestones">Milestones</h4>

<p>The organization of this project spec is by feature type. However, much of the unfamiliar or more difficult work is in the business intelligence portion of the project. To the degree possible instructors encourage you to use an agile approach to completing this assignment. Furthermore, we encourage you to review the work and develop estimated milestones before you begin. <strong>Any good set of milestones will allow for some slippage before the project is due.</strong></p>

<p>There is an Advanced ActiveRecord class scheduled for Wednesday. We <em>highly</em> encourage you to have attempted some of the business intelligence queries before that class.</p>

<h4 id="what-to-expect-from-instructors">What to expect from instructors</h4>

<p>There will not be formal check-ins for this project. Instructors will generally be available during scheduled work time to discuss issues absent other commitments. Students should also view this as an opportunity to practice discussing code on GitHub, and instructors will prefer reviewing PRs to discussing code on Slack.</p>

<p>In their reviews, instructors will go over whatever technical, planning or other challenges you‚Äôre having. They also may give you feedback, or suggest a different path than the one you‚Äôre on.</p>

<h2 id="-evaluation"><a name="evaluation"></a> Evaluation</h2>

<p>Blog Post Deliverable</p>

<p>At the end of this project, write a reflection on what you learned and implemented. This will help you review your own code and gain practice explaining/talking through the code and the process/decisions that were made along the way. Include code snippets from the project in your explanations.</p>

<p>We reccommend writing your blog on Medium, but if you have a blog site that you already use that is okay too. However, it must be publically accessible and the link should be submitted with your repo.</p>

<p>Here are some questions to think about as you write your post:</p>

<ul>
  <li>How did you approach this project? What sort of planning did you do?</li>
  <li>What was the most challenging part of the project? How did you deal with that challenge? Were you able to overcome it? If yes, how did you overcome it? If no, what do you think is the reason for not being able to and what would you do differenlty?</li>
  <li>What did you enjoy most about the project?</li>
  <li>What part of the project are you most proud of and why?</li>
  <li>If you had to do this project again, what would you want to change? (This could be your process, organization of code, particular piece of code that you would want to write differently etc.)</li>
  <li>What is one specific thing that you want to take from this project and implement in your next project? (This could be something that worked well for you or something that didn‚Äôt go well, but you learned from it.)</li>
</ul>

<h3 id="feature-delivery">Feature Delivery</h3>

<p>Feature completeness will be determined using the <a href="https://github.com/turingschool/rales_engine_spec_harness">spec harness</a></p>

<p><strong>1. Completion</strong></p>

<ul>
  <li>4: Project completes all base requirements according to the spec harness.</li>
  <li>3: Project completes most requirements but fails 4 or fewer spec harness tests.</li>
  <li>2: Project completes most requirements but fails 5-8 spec harness tests.</li>
  <li>1: Project fails more than 9 spec harness tests.</li>
</ul>

<h3 id="technical-quality">Technical Quality</h3>

<p><strong>1. Test-Driven Development</strong></p>

<ul>
  <li>4: Project demonstrates high test coverage (&gt;90%) and tests at the controller and unit levels.</li>
  <li>3: Project demonstrates high test coverage (&gt;80%) and tests at the controller and unit levels.</li>
  <li>2: Project demonstrates high test coverage (&gt;70%) but does not adequately balance controller and unit tests.</li>
  <li>1: Project does not have 70% test coverage.</li>
</ul>

<p><strong>2. Code Quality</strong></p>

<ul>
  <li>4: Project demonstrates exceptionally well factored code.</li>
  <li>3: Project demonstrates solid code quality and MVC principles.</li>
  <li>2: Project demonstrates some gaps in code quality and/or application of MVC principles.</li>
  <li>1: Project demonstrates poor factoring and/or understanding of MVC.</li>
</ul>

<p><strong>3. API Design</strong></p>

<ul>
  <li>4: Project exemplifies API design idioms, with consistent and coherent response structures, serializers to format JSON data, and effective request format handling.</li>
  <li>3: Project uses strong and consistent data formats throughout, while relying mostly on standard Rails JSON features.</li>
  <li>2: Project has inconsistencies or gaps in how its JSON data is organized or formatted.</li>
  <li>1: Project‚Äôs API is not fully functional or has significant confusion around request formats.</li>
</ul>

<p><strong>4. Queries</strong></p>

<ul>
  <li>4: Project makes great use of ActiveRecord relationships and queries, including some advanced query functionality such as <code class="highlighter-rouge">joins</code> and <code class="highlighter-rouge">select</code> to create virtual attributes.</li>
  <li>3: Project makes good use of <code class="highlighter-rouge">ActiveRecord</code>, but drops to ruby enumerables for some query methods.</li>
  <li>2: Project has some gaps in ActiveRecord usage, including numerous business methods that rely on ruby enumerables to find the appropriate data.</li>
  <li>1: Project struggles to establish a coherent ActiveRecords schema, including missing relationships or dysfunctional queries.</li>
</ul>

<h2 id="peer-review">Peer Review</h2>

<h3 id="independent-review-of-your-partners-code">Independent Review of Your Partner‚Äôs Code</h3>

<p>Clone and setup your parter‚Äôs code on your machine.</p>

<ul>
  <li>Is their README clear?</li>
  <li>Would a potential employer be able to understand the setup instructions and easily get this running on their machine?</li>
</ul>

<h4 id="scaling-back-the-number-of-queries">Scaling Back the Number of Queries</h4>

<p>When writing Ruby, we should generally prefer to work with instance methods since this tends to lead to object oriented code. However, SQL isn‚Äôt object oriented and therefore ActiveRecord isn‚Äôt truly OO. For this reason class methods tend to be more performant when writing ActiveRecord queries.</p>

<p>Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:articles</span>

  <span class="k">def</span> <span class="nf">animal_articles</span>
    <span class="n">articles</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">category: </span><span class="s2">"animals"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># makes two queries</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span> <span class="mi">1</span> <span class="c1"># first query</span>
<span class="n">animal_articles</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">animal_articles</span> <span class="c1"># second query</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">animals</span><span class="p">(</span><span class="n">filter</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="n">where</span><span class="p">(</span><span class="ss">category: </span><span class="s2">"animals"</span><span class="p">).</span><span class="nf">where</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># This example makes one query</span>
<span class="n">animal_articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">animals</span><span class="p">(</span><span class="ss">user_id: </span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Put it into Practice</strong></p>

<ul>
  <li>Using this technique, are there any places in your partner‚Äôs codebase where we can cut back on the number of queries being made?</li>
  <li>If not, are there any places you see they were able to cut back on queries that you might have missed in your own codebase?</li>
</ul>

<h4 id="making-code-more-flexible">Making Code More Flexible</h4>

<p>Possibly the most important thing to strive for when building software is for it to be maintainable and easy to expand.</p>

<p>In the <code class="highlighter-rouge">Article</code> class above‚Ä¶</p>
<ul>
  <li>what happens if we call <code class="highlighter-rouge">Article.animals</code> with no parameter? <em>Hint:</em> If you want to try this in your app, call <code class="highlighter-rouge">.where({})</code> or <code class="highlighter-rouge">.where(nil)</code> on any ActiveRecord class and look at the SQL that gets generated.</li>
  <li>does <code class="highlighter-rouge">.animals</code> limit what attributes we can filter by?</li>
  <li>how many filters can we send <code class="highlighter-rouge">.animals</code> at once?</li>
</ul>

<p><strong>Put it into Practice</strong></p>

<p>Business concepts are frequently reusable and it‚Äôs common to find variations of the same business intelligence logic in multiple places. Repeating logic leads to maintenance difficulties and sometimes inconsistent ways of accomplishing the same task.</p>

<ul>
  <li>Does the project call two separate methods in <code class="highlighter-rouge">Merchant</code> for the <code class="highlighter-rouge">GET /api/v1/merchants/:id/revenue</code> and <code class="highlighter-rouge">GET /api/v1/merchants/:id/revenue?date=x</code> endpoints?</li>
  <li>If yes, how much of the logic is the same?</li>
  <li>If no, is there a conditional statement with most of the same logic in each branch?</li>
  <li>Can you refactor this method in a way that makes use of the <code class="highlighter-rouge">.where({})</code> technique above?</li>
  <li>What else will this allow you to filter the <code class="highlighter-rouge">revenue</code> by?</li>
</ul>

<h4 id="dealing-with-random">Dealing with Random</h4>

<ul>
  <li>Why do models inherit from <code class="highlighter-rouge">ApplicationRecord</code> instead of <code class="highlighter-rouge">ActiveRecord::Base</code>?</li>
</ul>

<p><strong>Put it into Practice</strong></p>

<ul>
  <li>Does this project define a <code class="highlighter-rouge">.random</code> method in <code class="highlighter-rouge">ApplicationRecord</code>?
    <ul>
      <li>If no‚Ä¶
        <ul>
          <li>Create one.</li>
        </ul>
      </li>
      <li>If yes‚Ä¶
        <ul>
          <li>Did you do this in your project?
            <ul>
              <li>No‚Ä¶
                <ul>
                  <li>Add it to your project.</li>
                </ul>
              </li>
              <li>Yes‚Ä¶
                <ul>
                  <li>Does your definition look the same?</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Different ways to define <code class="highlighter-rouge">random</code>
    <ul>
      <li>Postgres has a <code class="highlighter-rouge">RANDOM</code> function you can use.</li>
      <li>That‚Äôs specific to this database and isn‚Äôt flexible if we ever need to switch it to MySQL.</li>
      <li>On small datasets <code class="highlighter-rouge">RANDOM</code> is usually faster. On large datasets it can be slower than <a href="https://stackoverflow.com/questions/2752231/random-record-in-activerecord">using an offset based on count</a>.</li>
      <li>What could we do if we‚Äôve defined <code class="highlighter-rouge">.random</code> in <code class="highlighter-rouge">ApplicationRecord</code> but one model is experiencing a performance issue with that definition due to a different size of dataset?</li>
    </ul>
  </li>
</ul>

<h3 id="with-your-partner">With Your Partner</h3>

<ul>
  <li>Go through each section above and discuss your findings.</li>
  <li>Did you come to the same conclusions?</li>
  <li>Is there anything that is still fuzzy?</li>
</ul>
:ET