I"^¯<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>How to define and call functions in JavaScript</li>
  <li>What <code class="highlighter-rouge">this</code> is in JavaScript and how to explicit set its value in your functions</li>
  <li>How to bind functions with explicit values for <code class="highlighter-rouge">this</code> and other arguments</li>
  <li>How to split an array of values among the arguments of a function</li>
  <li>How to use generator functions that can pause and resume execution as well as return multiple values</li>
</ul>

<h2 id="functions">Functions</h2>

<p>Functions in JavaScript are little units of code that can be executed later. If you‚Äôve worked with JavaScript in the past, you‚Äôve probably come cross functions before.</p>

<p>Here is a simple example of a function that takes a single argument and logs a message to the console:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="defining-functions">Defining Functions</h3>

<p>(Function declaration versus expressions)</p>

<h3 id="invoking-functions">Invoking Functions</h3>

<h4 id="calling-functions-referencing-functions-and-the-difference">Calling Functions, Referencing Functions, and the Difference</h4>

<p>The easiest way to call a function is to append a pair of parentheses to the end of the name assigned to the function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">sayHello</span><span class="p">();</span>
</code></pre></div></div>

<p>Functions are incredibly flexible in JavaScript. Not only can we call them like we did above, we can also pass them as arguments to other functions. We can also assign them to properties in objects as well as store them in variables. As a result, we need a way to talk about functions without accidentally calling them.</p>

<p>We can refer to a function without calling it by omitting the parentheses.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myFavoriteFunction</span> <span class="o">=</span> <span class="nx">sayHello</span><span class="p">;</span>
</code></pre></div></div>

<p>In the first section of this content kit, we passed functions to methods on <code class="highlighter-rouge">Array.prototype</code>. It was the method‚Äôs job to call this function on each member of the array. We <em>do not</em> want to call it the function as we pass it to the method on <code class="highlighter-rouge">Array.prototype</code>.</p>

<p>We omit the parentheses, because we‚Äôre talking about the function, not invoking.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">doubleNumber</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">};</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">doubleNumber</span><span class="p">);</span>
</code></pre></div></div>

<p>If we did add the parentheses to <code class="highlighter-rouge">doubleNumber</code>, JavaScript would evaluate the function and place it‚Äôs return value as the argument being passed to <code class="highlighter-rouge">c</code>. Without an argument, the function will attempt to multiply <code class="highlighter-rouge">undefined</code> by <code class="highlighter-rouge">2</code>. This will result in <code class="highlighter-rouge">NaN</code>, which stands for ‚Äúnot a number‚Äù and is also not a function that <code class="highlighter-rouge">Array.prototype.map</code> can call. An error will be thrown.</p>

<p>Consider the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">returnSomething</span><span class="p">(</span><span class="nx">something</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">something</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">returnSomething</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="kd">var</span> <span class="nx">nothing</span> <span class="o">=</span> <span class="nx">returnSomething</span><span class="p">();</span> <span class="c1">// undefined</span>
<span class="kd">var</span> <span class="nx">reference</span> <span class="o">=</span> <span class="nx">returnSomething</span><span class="p">;</span> <span class="c1">// reference points to the returnSomething function</span>

<span class="nx">reference</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 2</span>
</code></pre></div></div>

<h5 id="your-turn">Your Turn</h5>

<ul>
  <li>Write a new function called <code class="highlighter-rouge">doubleNumber</code> that takes a single argument and returns that argument multiplied by two.</li>
  <li>Pass the number two into the function and verify that it returns <code class="highlighter-rouge">2</code>.</li>
  <li>Store a reference to the <code class="highlighter-rouge">doubleNumber</code> function in a variable called <code class="highlighter-rouge">timesTwo</code>.</li>
  <li>Call the <code class="highlighter-rouge">timesTwo</code> function, passing in <code class="highlighter-rouge">2</code> as an argument</li>
  <li>Try <code class="highlighter-rouge">console.log(timesTwo.name)</code> and inspect the result</li>
</ul>

<h4 id="invoking-functions-1">Invoking Functions</h4>

<p>We‚Äôve explored on way of invoking a function‚Äîadding a pair of parentheses onto the end. In the section on Object-Oriented JavaScript, we also explored adding methods to an objects prototype. These methods‚Äîand the ones on <code class="highlighter-rouge">Array.prototype</code>‚Äîare just functions stored in object properties.</p>

<p>But, something special happens when we declare a function as property on a object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logThis</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">logThis</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">someObject</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">logThis</span><span class="p">:</span> <span class="nx">logThis</span>
<span class="p">};</span>

<span class="nx">someObject</span><span class="p">.</span><span class="nx">logThis</span><span class="p">();</span>
</code></pre></div></div>

<p>In <code class="highlighter-rouge">someObject</code>, the first time we say <code class="highlighter-rouge">logThis</code>, we‚Äôre defining a property on the object. The second time, we‚Äôre providing a reference to the <code class="highlighter-rouge">logThis</code> function in the very beginning of the code sample.</p>

<p>The first time we call <code class="highlighter-rouge">logThis</code>, we‚Äôre in the global scope. <code class="highlighter-rouge">this</code> is the <code class="highlighter-rouge">window</code> object in the browser and <code class="highlighter-rouge">global</code> in Node.</p>

<p>The second time we call <code class="highlighter-rouge">logThis</code>, it‚Äôs in a different context‚Äî<code class="highlighter-rouge">someObject</code>. As a result, it logs <code class="highlighter-rouge">someObject</code> instead of <code class="highlighter-rouge">window</code> or <code class="highlighter-rouge">global</code>.</p>

<p>When functions are called in the context of properties on an object, it adapts to its new surroundings and sets <code class="highlighter-rouge">this</code> to a reference of the object it‚Äôs being called from.</p>

<h5 id="your-turn-1">Your Turn</h5>

<p>Implement the following function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logFoo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create two objects: <code class="highlighter-rouge">bar</code> and <code class="highlighter-rouge">baz</code>.</li>
  <li>Set a <code class="highlighter-rouge">foo</code> property on each object to the value of your choice.</li>
  <li>Set a <code class="highlighter-rouge">log</code> property on each object with a reference to <code class="highlighter-rouge">logFoo</code>.</li>
  <li>Call <code class="highlighter-rouge">bar.log()</code> and <code class="highlighter-rouge">baz.log()</code> and notice the difference</li>
</ul>

<h4 id="call-and-apply">Call and Apply</h4>

<p>It‚Äôs helpful that functions will adapt to their surroundings, but sometimes we need to be explicit about what we want <code class="highlighter-rouge">this</code> to be when we invoke a function.</p>

<p>Functions in JavaScript are objects and share methods on <code class="highlighter-rouge">Function.prototype</code>‚Äîjust like all arrays share methods on <code class="highlighter-rouge">Array.prototype</code>.</p>

<p>One method all functions share is <code class="highlighter-rouge">call</code>, which uses the first argument you hand it and sets it to <code class="highlighter-rouge">this</code>, it then takes all subsequent arguments and passes them to the function you‚Äôre calling <code class="highlighter-rouge">call</code> on.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addToFoo</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">+</span> <span class="nx">n</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">2</span> <span class="p">};</span>

<span class="nx">addToFoo</span><span class="p">();</span> <span class="c1">// tries add 2 to `undefined` and returns `NaN`</span>
<span class="nx">addToFoo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">bar</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// adds 2 to the `foo` property on `bar` and returns 3</span>
<span class="nx">addToFoo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">baz</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// adds 2 to the `foo` property on `bar` and returns 4</span>
<span class="nx">addToFoo</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// adds 2 to the `foo` property on a new object</span>
                         <span class="c1">// and returns 5</span>
</code></pre></div></div>

<p>The first argument when we use the <code class="highlighter-rouge">call</code> method is used to set <code class="highlighter-rouge">this</code>. The second argument is passed to function we‚Äôre calling as the first argument. If we had a third argument, it would be passed as the second argument to the function we‚Äôre calling and so on.</p>

<p><code class="highlighter-rouge">apply</code> is another method shared by all functions and it behaves in a very similar fashion to <code class="highlighter-rouge">call</code>, but it takes the arguments you‚Äôd like to pass to the function as an array.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addThreeNumbersToFoo</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">,</span> <span class="nx">third</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">+</span> <span class="nx">first</span> <span class="o">+</span> <span class="nx">second</span> <span class="o">+</span> <span class="nx">third</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">someObject</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="nx">addThreeNumbersToFoo</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">someObject</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span> <span class="c1">// returns 10</span>
<span class="nx">addThreeNumbersToFoo</span><span class="p">.</span><span class="nx">apply</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span> <span class="c1">// returns 4</span>
</code></pre></div></div>

<p>On top of allowing you to explicitly set <code class="highlighter-rouge">this</code>, <code class="highlighter-rouge">apply</code> makes it easy to split up an array of arguments.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addThreeNumbers</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">,</span> <span class="nx">third</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">first</span> <span class="o">+</span> <span class="nx">second</span> <span class="o">+</span> <span class="nx">third</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="nx">addThreeNumbers</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span>
</code></pre></div></div>

<p>We used <code class="highlighter-rouge">null</code> in the example above because it doesn‚Äôt matter what <code class="highlighter-rouge">this</code> is since we‚Äôre not using it.</p>

<p>The following are all equivalent for the purposes of splitting up an array of values amongst a function‚Äôs arguments:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">addThreeNumbers</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span>
<span class="nx">addThreeNumbers</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span>
<span class="nx">addThreeNumbers</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="dl">'</span><span class="s1">oogieboogie</span><span class="dl">'</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="explicitly-setting-context-with-bind">Explicitly Setting Context with <code class="highlighter-rouge">bind</code></h3>

<p><code class="highlighter-rouge">call</code> and <code class="highlighter-rouge">apply</code> are great ways of explicitly setting <code class="highlighter-rouge">this</code> when we call a function. But sometimes, we want to set <code class="highlighter-rouge">this</code> when we define a function, not when we call it.</p>

<p><code class="highlighter-rouge">call</code> and <code class="highlighter-rouge">apply</code> invoke the function immediately. <code class="highlighter-rouge">bind</code> is different. It returns a copy of the function with <code class="highlighter-rouge">this</code> set explicitly that we can call later.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logFoo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">someObject</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span> <span class="p">};</span>

<span class="nx">logFoo</span><span class="p">();</span> <span class="c1">// undefined</span>
<span class="nx">logFoo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">someObject</span><span class="p">);</span> <span class="c1">// Hello</span>

<span class="kd">var</span> <span class="nx">boundLogFoo</span> <span class="o">=</span> <span class="nx">logFoo</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">someObject</span><span class="p">);</span> <span class="c1">// returns a new function with</span>
                                           <span class="c1">//`this` explicitly set</span>

<span class="nx">boundLogFoo</span><span class="p">();</span> <span class="c1">// Hello</span>
</code></pre></div></div>

<p>Let‚Äôs take one more look at this with some objects.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fido</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Fido</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">sayHello</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">My name is </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">spot</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Spot</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">sayHello</span><span class="p">:</span> <span class="nx">fido</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">,</span>
  <span class="na">boundSayHello</span><span class="p">:</span> <span class="nx">fido</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">fido</span><span class="p">),</span>
  <span class="na">anotherBoundSayHello</span><span class="p">:</span> <span class="nx">fido</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Taco</span><span class="dl">'</span> <span class="p">})</span>
<span class="p">};</span>

<span class="nx">fido</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// My name is Fido.</span>
<span class="nx">spot</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// My name is Spot.</span>
<span class="nx">spot</span><span class="p">.</span><span class="nx">boundSayHello</span><span class="p">();</span> <span class="c1">// My name is Fido.</span>
<span class="nx">spot</span><span class="p">.</span><span class="nx">anotherBoundSayHello</span><span class="p">();</span> <span class="c1">// My name is Taco.</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">bind</code> is useful when working with asynchronous JavaScript using callbacks or promises. When we make an AJAX request to a server, we typically pass a callback function that will execute when we hear back from the server. While, we‚Äôre usually writing this function in context of the object we‚Äôre working with. It will be executed in a totally different context.</p>

<p>Let‚Äôs take a look at an example without any asynchronous callbacks:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kinney</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">updateName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Wes</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">updateName</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">// Wes</span>
</code></pre></div></div>

<p>This works as we expect. When we call <code class="highlighter-rouge">updateName()</code>, <code class="highlighter-rouge">this</code> is still in the context of <code class="highlighter-rouge">person</code> object.</p>

<p>Things get a little tricker when we call an asynchronous function (like an AJAX call) and pass a callback.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Maybe we</span><span class="se">\'</span><span class="s1">re fetching the new name from the server.</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kinney</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">updateName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Wes</span><span class="dl">'</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">updateName</span><span class="p">();</span>
<span class="c1">// Wait a second‚Ä¶</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">// This is still Steve.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">// Wes. Whoops, we made a global variable.</span>
</code></pre></div></div>

<p>Although we‚Äôre writing our code in the context of the <code class="highlighter-rouge">person</code> object. That‚Äôs not where it‚Äôs getting called. It‚Äôs getting called later on and our anonymous function‚Äîcallback‚Äîdoesn‚Äôt have any context of where it came from, so <code class="highlighter-rouge">this</code> is <code class="highlighter-rouge">window</code>. The end result is that not only did we not update the property we wanted to, but we also accidentally set a property on the global object.</p>

<p>There are a few ways to handle this. While the callback loses it‚Äôs reference to <code class="highlighter-rouge">this</code>, it still has access to the scope that it came from. As a result, this will work:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Maybe we</span><span class="se">\'</span><span class="s1">re fetching the new name from the server.</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kinney</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">updateName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nb">self</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Wes</span><span class="dl">'</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">updateName</span><span class="p">();</span>
<span class="c1">// Wait a second‚Ä¶</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">// This is now Wes.</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">self</code> isn‚Äôt special. You may also see <code class="highlighter-rouge">_this</code>, <code class="highlighter-rouge">that</code>, and other variables in your travels.</p>

<p>An alternate approach is to explicitly set the value of <code class="highlighter-rouge">this</code> on the callback function using <code class="highlighter-rouge">bind()</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Maybe we</span><span class="se">\'</span><span class="s1">re fetching the new name from the server.</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kinney</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">updateName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">somethingAsynchronous</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Wes</span><span class="dl">'</span>
    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">updateName</span><span class="p">();</span>
<span class="c1">// Wait a second‚Ä¶</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">// Wes.</span>
</code></pre></div></div>

<p>The example above works because we used <code class="highlighter-rouge">bind(this)</code> to explicitly set the value of <code class="highlighter-rouge">this</code> on the anonymous function while we‚Äôre still in the scope of <code class="highlighter-rouge">person</code>. When the callback is eventually called, it remembers what <code class="highlighter-rouge">this</code> is because we bound it to the function.</p>

<h3 id="recursion">Recursion</h3>

<p>A recursive function is a function that calls itself. It‚Äôs not uncommon to use a recursive function to solve a factorial.</p>

<p>The factorial <code class="highlighter-rouge">5!</code> is equivalent to <code class="highlighter-rouge">5 * 4 * 3 * 2 * 1</code> or 120.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">};</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 120</span>
</code></pre></div></div>

<p>The function above goes through the following steps:</p>

<ul>
  <li>We pass in <code class="highlighter-rouge">5</code></li>
  <li><code class="highlighter-rouge">5</code> is not less than or equal to <code class="highlighter-rouge">1</code>; move on</li>
  <li>Return <code class="highlighter-rouge">5</code> times <code class="highlighter-rouge">factorial(n - 1)</code>, which is <code class="highlighter-rouge">factorial(4)</code></li>
  <li>Evaluate <code class="highlighter-rouge">factorial(4)</code> before returning from the function
    <ul>
      <li><code class="highlighter-rouge">4</code> is not less than or equal to <code class="highlighter-rouge">1</code>; move on</li>
      <li>Return <code class="highlighter-rouge">4</code> times <code class="highlighter-rouge">factorial(n - 1)</code>, which is <code class="highlighter-rouge">factorial(3)</code></li>
      <li>Evaluate <code class="highlighter-rouge">factorial(3)</code> before returning from the function
        <ul>
          <li><code class="highlighter-rouge">3</code> is not less than or equal to <code class="highlighter-rouge">1</code>; move on</li>
          <li>Return <code class="highlighter-rouge">3</code> times <code class="highlighter-rouge">factorial(n - 1)</code>, which is <code class="highlighter-rouge">factorial(2)</code></li>
          <li>Evaluate <code class="highlighter-rouge">factorial(2)</code> before returning from the function
            <ul>
              <li><code class="highlighter-rouge">2</code> is not less than or equal to <code class="highlighter-rouge">1</code>; move on</li>
              <li>Return <code class="highlighter-rouge">2</code> times <code class="highlighter-rouge">factorial(n - 1)</code>, which is <code class="highlighter-rouge">factorial(1)</code></li>
              <li>Evaluate <code class="highlighter-rouge">factorial(1)</code> before returning from the function
                <ul>
                  <li><code class="highlighter-rouge">1</code> is less than or equal to <code class="highlighter-rouge">1</code>; return <code class="highlighter-rouge">1</code></li>
                </ul>
              </li>
              <li>We now know that <code class="highlighter-rouge">factorial(1)</code> is <code class="highlighter-rouge">1</code>, return <code class="highlighter-rouge">2 * 1</code> or <code class="highlighter-rouge">2</code></li>
            </ul>
          </li>
          <li><code class="highlighter-rouge">factorial(2)</code> just returned <code class="highlighter-rouge">2</code>; return <code class="highlighter-rouge">3 * 2</code> or <code class="highlighter-rouge">6</code></li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">factorial(3)</code> just returned <code class="highlighter-rouge">6</code>; return <code class="highlighter-rouge">4 * 6</code> or <code class="highlighter-rouge">24</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">factorial(4)</code> just returned <code class="highlighter-rouge">24</code>; return <code class="highlighter-rouge">5 * 24</code> or <code class="highlighter-rouge">120</code></li>
</ul>

<p>It‚Äôs important to have an escape hatch for your recursive function. Otherwise, it will go on forever‚Äîactually, you‚Äôll exceed the maximum size of the call stack and be cut off by the JavaScript runtime.</p>

<p>We used recursion in the section where we drew blocks to the canvas using <code class="highlighter-rouge">requestAnimationFrame</code>. At the end of the function, we called <code class="highlighter-rouge">requestAnimationFrame</code> again with a reference to the same <code class="highlighter-rouge">gameLoop</code> function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="kd">function</span> <span class="nx">gameLoop</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
  <span class="nx">blocks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">block</span><span class="p">)</span> <span class="p">{</span> <span class="nx">block</span><span class="p">.</span><span class="nx">draw</span><span class="p">().</span><span class="nx">move</span><span class="p">();</span> <span class="p">});</span>
  <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">gameLoop</span><span class="p">);</span> <span class="c1">// Recursion!</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="your-turn-2">Your Turn</h4>

<h5 id="countdown">Countdown</h5>

<p>Write a function called <code class="highlighter-rouge">countdown</code>, which takes a number and counts down from the numer passed in to <code class="highlighter-rouge">0</code> by recursively calling itself. If you called <code class="highlighter-rouge">countdown(4)</code>, it should <code class="highlighter-rouge">console.log(4)</code>, <code class="highlighter-rouge">console.log(3)</code>, <code class="highlighter-rouge">console.log(2)</code>,  <code class="highlighter-rouge">console.log(1)</code>, and‚Äîfinally‚Äî <code class="highlighter-rouge">console.log(0)</code>.</p>

<h5 id="fibonacci-sequence">Fibonacci Sequence</h5>

<p>A Fibonacci sequence is a series of numbers where the next number is the sum of the previous two‚Äîstarting with 1, 1 to get the ball rolling. Here is a short example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55
</code></pre></div></div>

<p>Can you write a function called <code class="highlighter-rouge">fibonacci()</code>, which takes a number as an argument and returns a Fibonacci sequence of that length?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fibonacci</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// returns [1, 1, 2, 3, 5]</span>
<span class="nx">fibonacci</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// returns [1, 1, 2]</span>
<span class="nx">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// returns [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span>
</code></pre></div></div>

<h2 id="currying-and-partial-application">Currying and Partial Application</h2>

<h3 id="partial-application">Partial Application</h3>

<p>Partial application is a technique that allows us to pre-fill arguments to a function. Earlier, we discussed how you can use <code class="highlighter-rouge">bind()</code> on functions in JavaScript to explicit set the value of <code class="highlighter-rouge">this</code>. Like <code class="highlighter-rouge">call()</code>, <code class="highlighter-rouge">bind()</code> takes additional arguments and will set those arguments on the function it returns.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">addTwo</span> <span class="o">=</span> <span class="nx">add</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

<span class="nx">addTwo</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 6</span>
</code></pre></div></div>

<p>The first argument is the value of <code class="highlighter-rouge">this</code> inside the function. We‚Äôre not using <code class="highlighter-rouge">this</code>, so we‚Äôll just set it to <code class="highlighter-rouge">null</code>. The second argument, <code class="highlighter-rouge">2</code>, is applied as the first argument to <code class="highlighter-rouge">add</code>. All we have to do is supply the second argument and we‚Äôre good to go.</p>

<p>This technique allows us to remove repetition from our code and use functions as templates for other functions.</p>

<h4 id="your-turn-3">Your Turn</h4>

<p>Given the following base functions‚Ä¶</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>‚Ä¶can your use partial application to create the following:</p>

<ul>
  <li>A function that adds 1 to a number</li>
  <li>A function that subtracts 3 from a number</li>
  <li>A function that doubles a number</li>
  <li>A function that halves a number</li>
</ul>

<h2 id="generators">Generators</h2>

<p>When we call a function in JavaScript, it typically runs until it hits the end of the function or a <code class="highlighter-rouge">return</code> statement. Generators, which are new to <a href="http://es6-features.org/#GeneratorFunctionIteratorProtocol">ES6/2015</a>, are functions that can paused and restarted again. Generators are functions that can return values at multiple points in their execution.</p>

<p>Consider the <code class="highlighter-rouge">countdown</code>, <code class="highlighter-rouge">fibonacci</code>, and <code class="highlighter-rouge">factorial</code> functions from the section on calling functions. We passed either a starting or stopping point to each function. Letting them run forever would be problematic. That said, it‚Äôs conceivable to think that we might want to keep working with new factorials or numbers in a Fibonacci sequence as time goes on. This is a great use for generators.</p>

<p><strong>A note on browser support:</strong> As of this writing (July 19, 2015) generator functions are supported by most of the recent versions of Chrome and Firefox as well as <a href="https://iojs.org/en/index.html">io.js</a>. They are not supported by Safari, Internet Explorer, or Node.js.</p>

<p>Generator functions look similar to regular functions, with the addition of an <code class="highlighter-rouge">*</code> after the <code class="highlighter-rouge">function</code> keyword.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">someGeneratorFunction</span><span class="p">()</span> <span class="p">{};</span>
</code></pre></div></div>

<p>Calling a generator function returns a <em>Generator</em> object. Generator objects have a <code class="highlighter-rouge">next()</code> method that either start or resume execution of the function until it hits the next <code class="highlighter-rouge">yield</code> statement.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">addTwoThreeTimes</span><span class="p">(</span><span class="nx">addend</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">addend</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">yield</span> <span class="nx">addend</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">yield</span> <span class="nx">addend</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">addTwoThreeTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>

<p>We can now call the generator to get the next value.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value: 4, done: false }</span>
<span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value: 6, done: false }</span>
<span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value: 8, done: false }</span>
<span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value: undefined, done: true }</span>
</code></pre></div></div>

<p>Generators return an object with two properties, the <code class="highlighter-rouge">value</code> emitted by the current <code class="highlighter-rouge">yield</code> statement and a boolean signifying whether or not the generator has reached its completion. In the example above, we could continue calling <code class="highlighter-rouge">generator.next()</code> and we would keep receiving <code class="highlighter-rouge">{ value: undefined, done: true }</code>.</p>

<p>We can also iterate over all of the values in a generator:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">of</span> <span class="nx">generator</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">};</span> <span class="c1">// Logs 2, 4, 6</span>
</code></pre></div></div>

<p>We can also create a generator function that yields values indefinitely. Let‚Äôs create a simple counter generator that will always generate the next increment indefinitely.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">counter</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 0, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 1, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 2, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 3, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 4, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 5, done: false }</span>
<span class="nx">count</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value: 6, done: false }</span>
<span class="c1">// ‚Ä¶ and so on ‚Ä¶</span>
</code></pre></div></div>

<p>Normally, <code class="highlighter-rouge">while (true)</code> would create an infinite loop and lock up the main thread indefinitely‚Äîbringing our program to a screeching halt. With a generator, the execution of the function is paused each time it hits the <code class="highlighter-rouge">yield</code> statement and control and ceded back to the scope in which it was called.</p>

<p>This generator will continue generating values forever, but only when asked.</p>

<h3 id="code-along-a-fibonacci-generator">Code-Along: A Fibonacci Generator</h3>

<p>Let‚Äôs create a generator function that will build a Fibonacci sequence one number at a time.</p>

<p>Let‚Äôs start by creating a new generator function called <code class="highlighter-rouge">fibonacciGenerator</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacciGenerator</span><span class="p">()</span> <span class="p">{};</span>
</code></pre></div></div>

<p>Fibonacci sequences are best expressed as an array of numbers. Let‚Äôs instantiate an empty array. That we‚Äôll use to store our values.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacciGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We also know that we‚Äôd like to generate Fibonacci numbers indefinitely. We‚Äôll wrap our yield statement in a loop.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacciGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">sequence</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We can typically generate new numbers by adding the previous two together. In order to do that, we‚Äôll have to add <code class="highlighter-rouge">1</code> to the sequence if we have less than two numbers.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacciGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="nx">seqeunce</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
    <span class="k">yield</span> <span class="nx">sequence</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Now, it‚Äôs time for the real work. If we have at least two numbers, we want to add the last two numbers together. Additionally, we‚Äôre going to need the length of the sequence in multiple difference places, so we‚Äôll store it into a variable at the beginning of each loop.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacciGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">sequence</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">sequence</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">nextNumber</span> <span class="o">=</span> <span class="nx">sequence</span><span class="p">[</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sequence</span><span class="p">[</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
      <span class="nx">sequence</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">nextNumber</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">yield</span> <span class="nx">sequence</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We can now take our fibonacci generator for a spin and generate numbers to our heart‚Äôs content.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fibonacci</span> <span class="o">=</span> <span class="nx">fibonacciGenerator</span><span class="p">();</span>

<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8, 13 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8, 13, 21 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8, 13, 21, 34 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ], done: false }</span>
<span class="nx">fibonacci</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
<span class="c1">// { value: [ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 ], done: false }</span>
</code></pre></div></div>

<h3 id="your-turn-4">Your Turn</h3>

<p>Can you create a generator function that can generate factorials? Below is an example of how the code should work when you have it up and running.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">factorialGenerator</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Your code goes here.</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">factorial</span> <span class="o">=</span> <span class="nx">factorialGenerator</span><span class="p">();</span>

<span class="nx">factorial</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 1</span>
<span class="nx">factorial</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 3</span>
<span class="nx">factorial</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 6</span>
<span class="nx">factorial</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 24</span>
<span class="nx">factorial</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// 120</span>
</code></pre></div></div>
:ET