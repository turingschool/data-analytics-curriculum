I"ﬂC<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Generate a migration in order to create or modify a table</li>
  <li>Use rake commands to create a database/drop a database/generate migration files/and migrate the database</li>
  <li>Interpret schema.rb</li>
  <li>Utilize ActiveRecord Models in the controller to pass information to views</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>ActiveRecord</li>
  <li>Relational database</li>
  <li>Schema</li>
  <li>Object Relational Map (ORM)</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>What are the pieces of MVC? How do we use them in a Sinatra app?</li>
  <li>What do you know about ActiveRecord?</li>
  <li>Name two ActiveRecord methods you explored yesterday.</li>
</ul>

<h2 id="repository">Repository</h2>

<p>Clone <a href="https://github.com/turingschool-examples/set-list">this</a> repository and run <code class="highlighter-rouge">bundle install</code>.</p>

<h2 id="lecture">Lecture</h2>

<p>Using the Set List repository that we‚Äôve cloned down, we‚Äôre going to create an application that displays information about songs in our database.</p>

<h3 id="background">Background</h3>

<h4 id="relational-databases">Relational Databases</h4>
<p>Database systems are helpful when handling massive datasets by helping to optimize complicated queries. Relational databases make it easy to relate tables to one another.</p>

<p>For example, if we have a table of songs and artists, and a song belongs to one artist, we‚Äôll need to keep track of how these pieces of data relate to one another. We might keep that information in our app in something like a YAML file but the problem is, there‚Äôs no easy way to query a YAML file for this info.</p>

<h4 id="object-relational-mappers">Object Relational Mappers</h4>
<p>‚ÄúAn ORM framework is written in an object oriented language (like Ruby, Python, PHP etc.) and wrapped around a relational database. The object classes are mapped to the data tables in the database and the object instances are mapped to rows in those tables.‚Äù</p>

<p>(from sitepoint.com)</p>

<p><img src="http://wiki.expertiza.ncsu.edu/images/2/2c/ORM_Flowchart.jpg" alt="400% ORM Diagram" /></p>

<ul>
  <li>Someone has done the hard work of allowing us to easily interact with the relational database, through Ruby.</li>
</ul>

<h4 id="ruby-orms">Ruby ORM‚Äôs</h4>
<ul>
  <li>ActiveRecord (lots)</li>
  <li>DataMapper (a few)</li>
  <li>Sequel (pretty much none)</li>
</ul>

<h4 id="why-do-we-need-an-orm">Why do we need an ORM?</h4>

<p>We want to wrap our data in Ruby objects so we can easily manipulate them. If we didn‚Äôt wrap them in Ruby objects, we‚Äôd simply have strings in arrays and other simple data types. This wouldn‚Äôt be very easy to work with or manage.</p>

<h4 id="how-does-a-database-map-to-a-ruby-class">How does a database map to a Ruby class?</h4>

<ul>
  <li>a file represents a table</li>
  <li>the table represents the collection of instances</li>
  <li>a row represents one specific instance</li>
  <li>the columns represent the attributes of an instance</li>
</ul>

<p><strong>Partnered Practice</strong></p>

<p>With someone near you, draw out a diagram representing the above four aspects.</p>

<h2 id="tutorial">Tutorial</h2>

<p>We‚Äôre going to use ActiveRecord migrations to create a <code class="highlighter-rouge">songs</code> table, and then create a Song model that allows us to interact with that table from our app.</p>

<p>A <code class="highlighter-rouge">Song</code> will have a title (text), length in seconds (integer), and play_count (integer).</p>

<p>At a high level, we are going to follow these steps:</p>

<ol>
  <li>Create a migration file.</li>
  <li>Write code in that migration to create the <code class="highlighter-rouge">songs</code> table with the necessary fields</li>
  <li>Run the migration.</li>
  <li>Inspect <code class="highlighter-rouge">schema.rb</code> to ensure your table was created as intended.</li>
  <li>Create a <code class="highlighter-rouge">Song</code> model.</li>
  <li>Add data using <code class="highlighter-rouge">tux</code></li>
  <li>Review our controller to see that we have a route to see all songs</li>
  <li>Launch our server to see your songs!</li>
</ol>

<h3 id="creating-the-database">Creating the database</h3>

<p>(make sure you‚Äôve run <code class="highlighter-rouge">bundle install</code> before you start these instructions)</p>

<p>Before we begin, we‚Äôll need to create a database.</p>

<p>If you look in the <code class="highlighter-rouge">db</code> folder, you‚Äôll notice that we don‚Äôt have any database files. In order to create our database, we need to run <code class="highlighter-rouge">rake db:create</code>. After running this command, you‚Äôll see an empty sqlite file now inside the <code class="highlighter-rouge">db</code> folder.</p>

<h3 id="creating-a-songs-table">Creating a Songs Table</h3>

<p>Now we want to add a table to our database. In order to do that, we‚Äôll need to create a migration to hold the instructions to add this table to our database. When we <code class="highlighter-rouge">run</code> our migrations, we make those changes to our database.</p>

<p>Rake gives us some handy commands to help us generate migration files.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:create_migration</span> <span class="no">NAME</span><span class="o">=</span><span class="n">create_songs</span>
</code></pre></div></div>

<p>Inside of that file you should see an empty migration file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateSongs</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We are going to use ActiveRecord‚Äôs <code class="highlighter-rouge">create_table</code> method to specify what we want to name this table and what fields it will include.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateSongs</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">5.1</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:songs</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">text</span>    <span class="ss">:title</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:length</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:play_count</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">rake db:migrate</code> to run your migrations against the database.</p>

<p>Inspect the schema.rb file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="ss">version: </span><span class="mi">20160217022804</span><span class="p">)</span> <span class="k">do</span>

  <span class="n">create_table</span> <span class="s2">"songs"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">text</span>     <span class="s2">"title"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"length"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="s2">"play_count"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="creating-a-song-model">Creating a Song Model</h3>

<p>Now that we have a <code class="highlighter-rouge">songs</code> table, we‚Äôll want to create a Song model to interact with that table.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch app/models/song.rb
</code></pre></div></div>

<p><strong>We name our Model files in a singular name, not a plural name, like ‚Äúsongs‚Äù. Remember it this way: when you ‚Äònew‚Äô up a model class, you have one ‚Äúsong‚Äù.</strong></p>

<p>Inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Song</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</code></pre></div></div>

<p>By inheriting from <code class="highlighter-rouge">ActiveRecord::Base</code>, we‚Äôre given a bunch of class and instance methods we can use to manipulate the songs in our database. These methods will take the place of the methods that you wrote yourself in Task Manager (e.g. <code class="highlighter-rouge">::all</code>, <code class="highlighter-rouge">::find</code>, <code class="highlighter-rouge">::new</code>, <code class="highlighter-rouge">::save</code>).</p>

<p>Now that we have a model, we can use <code class="highlighter-rouge">tux</code> (an interactive console for your app) to add some songs to our database. If you get an error when running tux that looks like this:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tux
/Users/username/.rbenv/versions/2.4.3/lib/ruby/gems/2.4.0/gems/ripl-rack-0.2.1/lib/ripl/rack.rb:38:in <span class="sb">`</span><span class="nb">eval</span><span class="s1">': You have already activated rack-test 0.6.3, but your Gemfile requires rack-test 1.0.0. Prepending `bundle exec` to your command may solve this. (Gem::LoadError)
</span></code></pre></div></div>

<p>To fix this error, just run tux like this instead: <code class="highlighter-rouge">bundle exec tux</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">tux</span>
<span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Stop Believin'"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">251</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">760847</span><span class="p">)</span>
<span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Don't Worry Be Happy"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">280</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">65862</span><span class="p">)</span>
<span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Chicken Fried"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">183</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">521771</span><span class="p">)</span>
<span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Radioactive"</span><span class="p">,</span> <span class="ss">length: </span><span class="mi">10000</span><span class="p">,</span> <span class="ss">play_count: </span><span class="mi">623547</span><span class="p">)</span>
</code></pre></div></div>

<p>To quit tux, use the command <code class="highlighter-rouge">exit</code>.</p>

<h3 id="updating-the-controller">Updating the Controller</h3>

<p>Now that we have some songs, let‚Äôs update our controller so that we are doing the database prep that we need to do in order to see our songs.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetList</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">get</span> <span class="s1">'/songs'</span> <span class="k">do</span>
    <span class="vi">@songs</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">erb</span> <span class="ss">:"songs/index"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Using Active Record, we no longer need to build the <code class="highlighter-rouge">::all</code> method as we did in Task Manager; <code class="highlighter-rouge">::all</code> is one of the built in Active Record methods.</p>

<h3 id="creating-the-view">Creating the View</h3>

<p>We are going to start to have LOTS of resources as our apps get bigger so let‚Äôs start to organize our views. Let‚Äôs create a <code class="highlighter-rouge">songs</code> folder in <code class="highlighter-rouge">views</code> with an <code class="highlighter-rouge">index.erb</code> file.</p>

<p>Enter the following HTML into <code class="highlighter-rouge">/app/views/songs/index.erb</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%</span> <span class="err">@</span><span class="na">songs.each</span> <span class="na">do</span> <span class="err">|</span><span class="na">song</span><span class="err">|</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;&lt;</span><span class="err">%=</span> <span class="na">song.title</span> <span class="err">%</span><span class="nt">&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Length: <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">song.length</span> <span class="err">%</span><span class="nt">&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Play Count: <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">song.play_count</span> <span class="err">%</span><span class="nt">&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>  
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">shotgun</code> from the command line. Visit <code class="highlighter-rouge">localhost:9393/songs</code> and see your songs.</p>

<h3 id="inspecting-the-setup">Inspecting the Setup</h3>

<p>If you have additional time, review the files below.</p>

<ul>
  <li><code class="highlighter-rouge">Gemfile</code>: note that this is where we pull in ActiveRecord and Tux.</li>
  <li><code class="highlighter-rouge">Rakefile</code> (find the included rake tasks <a href="https://github.com/janko-m/sinatra-activerecord">here</a>): provides access to ActiveRecord‚Äôs Rake commands.</li>
  <li><code class="highlighter-rouge">config/environment.rb</code>: Pulls in our models/controllers, and sets some configuration values related to our database and our Sinatra app.</li>
  <li><code class="highlighter-rouge">config/database.rb</code>: Tells our app which database to use, and sets some configuration values.</li>
  <li><code class="highlighter-rouge">config/database.yml</code>: Tells our app where to look for our databases and how to access them.</li>
</ul>

<h2 id="check-for-understanding">Check for Understanding</h2>

<ul>
  <li>What does a migration do?</li>
  <li>What‚Äôs the syntax to create a migration from the command line using ActiveRecord?</li>
  <li>How do our models relate to our database?</li>
  <li>What do our models inherit from when we‚Äôre using ActiveRecord?</li>
  <li>What are some methods that we have available to us when we inherit from ActiveRecord?</li>
</ul>

<h2 id="food-for-thought">Food for thought</h2>

<ul>
  <li>What happens if you try to create an object when you have a model but not a table?</li>
  <li>What happens if you try to create an object when you have a table but not a model?</li>
</ul>
:ET