I"|<p>This lesson plan last updated to use Rails 5.2.4.3 and Ruby 2.5.3</p>

<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>create a new rails app</li>
  <li>explain the purpose of the <code class="highlighter-rouge">routes.rb</code> file</li>
  <li>interpret the output of <code class="highlighter-rouge">rails routes</code></li>
  <li>explain the connection between <code class="highlighter-rouge">routes.rb</code> and controller files</li>
  <li>create routes by hand</li>
  <li>create and migrate a database</li>
  <li>create a basic view to render some data</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>

<ul>
  <li>CRUD</li>
  <li>MVC</li>
  <li>Migration</li>
  <li>HTTP Request</li>
  <li>HTTP Response</li>
  <li>route</li>
  <li>action</li>
</ul>

<h1 id="handling-http-requests">Handling HTTP Requests</h1>

<p>Our Rails App’s responsibility is to receive HTTP Requests and send back HTTP Responses. When we start our server with <code class="highlighter-rouge">rails server</code> or <code class="highlighter-rouge">rails s</code>, we are telling our app to wait patiently for a client to send it a request. When our app receives a request, our app then needs to handle the request. This includes both what should happen in the database (CRUD), and what response (HTML) should be sent back to the client.</p>

<h3 id="verb-and-path">Verb and Path</h3>

<p>Every request needs to be able to tell a server <em>what</em> information is requested and <em>how</em> that information is being requested.  The <em>what</em> is the <strong>path</strong> (also known as a <strong>URI</strong>), indicating what resource this request is referencing.</p>

<p>Examples of a path:</p>

<ul>
  <li><code class="highlighter-rouge">/tasks</code></li>
  <li><code class="highlighter-rouge">/tasks/4</code></li>
  <li><code class="highlighter-rouge">/items/6/reviews</code></li>
</ul>

<p>The <em>how</em> is the <strong>verb</strong>, indicating what actions the server should take regarding the requested resource.  While the path can vary greatly based on the application, the verbs follow common patterns.  There are 5 common HTTP verbs:</p>

<ul>
  <li>GET - retrieve some information to be READ by the client/user</li>
  <li>POST - CREATE a new resource with information contained in the request</li>
  <li>PUT - UPDATE an entire resource with information contained in the request</li>
  <li>PATCH - UPDATE a part of a resource with information contained in the request</li>
  <li>DELETE - DESTROY a resource, typically indicating that it is removed from the database</li>
</ul>

<p>With these 5 verbs, a client can send requests that allow our app to perform all CRUD functions (create, read, update, destroy) for resources in the database.</p>

<h2 id="what-is-a-url">What is a “URL”?</h2>

<p>Users tell a client to ask for information by giving it a <strong>URL</strong>: a Universal Resource Locator.</p>

<p>A URL allows us to send data to, or retrieve, a “resource” on the Internet. A resource could be a page of HTML content, it could be an image or music file, or it could be part of a web application that will save data you send to it.</p>

<h3 id="url-vs-uripath">URL vs URI/Path</h3>

<p>You may also hear the term URI used interchangeably with “path” when talking about things on the Internet. A “URI”, or “Universal Resource Identifier” is not the same as a URL, but it’s easy to confuse them.</p>

<p>A URI is part of a URL (see below).</p>

<h4 id="parts-of-a-url">Parts of a URL</h4>

<p>For the URL</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://task-manager.herokuapp.com/task/new?title=New&amp;task=Task#new_form_anchor
</code></pre></div></div>

<p>We can split it into distinct parts:</p>

<ul>
  <li>Protocol: <code class="highlighter-rouge">http://</code> - Tells us the application protocol we will be using to interact on the web.</li>
  <li>Domain: <code class="highlighter-rouge">task-manager.herokuapp.com</code> - Tells us where the resources we are trying to access are located (tied to an IP address using DNS).</li>
  <li><strong>URI</strong> or “Path”: <code class="highlighter-rouge">/task/new</code> - The specific path for the resources that we are trying to access at that location.</li>
  <li>Query String: <code class="highlighter-rouge">?title=New&amp;task=Task</code> - Params that give our server additional information about what we would like to access.</li>
  <li>Fragment Identifier: <code class="highlighter-rouge">#new_form_anchor</code> - An indicator of a specific section of a website we would like to view (e.g. if there is an anchor tag tied to a heading half way down the page). This can be seen by visiting <a href="http://guides.rubyonrails.org/active_record_querying.html#array-conditions">this</a> link to the rails docs which references the <code class="highlighter-rouge">array-conditions</code> section of the Query Interface page.</li>
</ul>

<h1 id="setlist">SetList</h1>

<p>Now that we have some background in URLs, Paths, and HTTP Request/Responses, let’s put it all together to design a feature in a new app we will be developing together, SetList.</p>

<p>In SetList, we want Users to have the ability to manage Songs, so our first task will be to allow users to see (READ) all Songs. Here is the behavior we are looking for:</p>

<ul>
  <li>A user opens a web browser and types this URL into their address bar: <code class="highlighter-rouge">http://localhost:3000/songs</code>
    <ul>
      <li>Note that we are using the domain <code class="highlighter-rouge">localhost:3000</code> because we are developing locally. When this app is live on the internet, it will have a different domain. If we are hosting on Heroku, it will have a domain name like <code class="highlighter-rouge">set-list.herokuapp.com</code>, so the request to that site would be <code class="highlighter-rouge">http://task-manager.herokuapp.com/songs</code></li>
    </ul>
  </li>
  <li>When the user hits enter, an HTTP request will be sent. That request will have two key pieces of information
    <ul>
      <li>An HTTP Verb of <code class="highlighter-rouge">GET</code> (URLs entered into an address bar will default to GET)</li>
      <li>A Path (or URI) of <code class="highlighter-rouge">/songs</code></li>
    </ul>
  </li>
  <li>Upon receiving that request, our App should send back an HTTP response of an HTML page that shows all of the songs</li>
</ul>

<h2 id="create-your-app">Create your app</h2>

<blockquote>  
"Convention over Configuration"
</blockquote>

<p>- From <a href="https://rubyonrails.org/doctrine/#convention-over-configuration">The Rails Doctrine</a> by David Heinemeier Hansson (DHH) in January, 2016</p>

<p>Let’s create a whole new Rails app. We’re going to use this codebase for the rest of the inning in mod 2.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails _5.2.4.3_ new set_list <span class="nt">-T</span> <span class="nt">--database</span><span class="o">=</span>postgresql <span class="nt">--skip-spring</span> <span class="nt">--skip-turbolinks</span>
<span class="nv">$ </span><span class="nb">cd </span>set_list
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">_5.2.4.3_</code> Denotes that we want to use rails version 5.2.4.3.</li>
  <li><code class="highlighter-rouge">-T</code> - rails has minitest by default, when this flag is used, <code class="highlighter-rouge">gem 'minitest'</code> will not be in the Gemfile</li>
  <li><code class="highlighter-rouge">--database=postgresql</code> - by default, Rails uses <code class="highlighter-rouge">sqlite3</code>. We want to tell it to use <code class="highlighter-rouge">postgresql</code> instead because platforms we use for deploying our projects will expect to use a PostgreSQL database.</li>
  <li><code class="highlighter-rouge">--skip-spring</code> - Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don’t need to boot it every time you run a test, rake task or migration but it benefits more advanced developers the most. We are going to not include it in our Gemfile.</li>
  <li><code class="highlighter-rouge">--skip-turbolinks</code> - Enables faster page loading by using AJAX call behind the scenes but has some nasty/subtle edge cases where your app will not work as expected. For those reasons, we don’t enable it by default.</li>
</ul>

<p>Take a few minutes to explore what <code class="highlighter-rouge">rails new</code> generates.</p>

<h2 id="gems">Gems</h2>

<p>Add <code class="highlighter-rouge">pry</code> to your <code class="highlighter-rouge">group :development, :test</code> block in your Gemfile. You can also remove <code class="highlighter-rouge">byebug</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'pry'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Always run <code class="highlighter-rouge">bundle</code> or <code class="highlighter-rouge">bundle install</code> whenever you update your Gemfile.</p>

<h2 id="create-the-database">Create the Database</h2>

<p>If you try to run your server with <code class="highlighter-rouge">rails s</code> and visit <code class="highlighter-rouge">localhost:3000</code> in your browser you will see the error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FATAL: database "set_list_development" does not exist
</code></pre></div></div>

<p>Let’s create our app’s database with</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails db:create
</code></pre></div></div>

<p>Refresh the page and you should see “Yay! You’re on Rails!”</p>

<h2 id="routing-the-request">Routing the Request</h2>

<p>Our first error when we visit <code class="highlighter-rouge">localhost:3000/songs</code> is a RoutingError <code class="highlighter-rouge">No route matches [GET] "/songs"</code>.</p>

<p>Rails doesn’t know how to route a <code class="highlighter-rouge">GET</code> request to <code class="highlighter-rouge">/songs</code>, so let’s tell it how to do that:</p>

<p>In <code class="highlighter-rouge">config/routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s1">'/songs'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'songs#index'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Remember, an HTTP request includes both the verb (<code class="highlighter-rouge">GET</code> in this case) and the path (<code class="highlighter-rouge">/songs</code>).</p>

<p>The second argument, <code class="highlighter-rouge">to: 'songs#index'</code>, tells Rails what controller action should handle the request. The format is <code class="highlighter-rouge">&lt;controller&gt;#&lt;action&gt;</code>. In this format, the controller name is snaked case. Rails will interpret this snake case into a camel-cased controller name. For example, <code class="highlighter-rouge">to: snake_cased_names#index</code> would look for a <code class="highlighter-rouge">SnakeCasedNames</code> controller.</p>

<p>From the command line, we can see which routes we have available by running <code class="highlighter-rouge">$ rails routes</code>. We should see this output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Prefix Verb URI Pattern      Controller#Action
songs  GET  /songs(.:format) songs#index
</code></pre></div></div>

<p>This means whenever a <code class="highlighter-rouge">get</code> VERB is used in a request to the path <code class="highlighter-rouge">/songs</code>, the application will look at a “Songs” controller, and look for an “action method” in there called <code class="highlighter-rouge">index</code>.</p>

<p>Don’t worry about the <code class="highlighter-rouge">(.:format)</code> piece on the end of the URI pattern. You’ll use that more in mod3 and allows us to retrieve resource data in different formats than HTML, such as CSV or XML.</p>

<p><strong>Based on our rails routes - what controller do we need? do we have it?</strong></p>

<p>Let’s refresh our browser request to <code class="highlighter-rouge">localhost:3000/songs</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  uninitialized constant SongsController
</code></pre></div></div>

<p>Make a songs controller:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>app/controllers/songs_controller.rb
</code></pre></div></div>

<p>Naming is important. The <strong>name of the file should be the plural of what it is handling</strong> (in this case, songs).</p>

<p>Inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Notice that the name of the class matches the name of the file (<code class="highlighter-rouge">songs_controller.rb</code> =&gt; <code class="highlighter-rouge">class SongsController</code>), the file is “snake-cased” and the class name is “camel-cased”.</p>

<p>What is ApplicationController? Look at the controllers folder and you should see an <code class="highlighter-rouge">application_controller.rb</code> file. This file defines the <code class="highlighter-rouge">ApplicationController</code> class, which (generally) all of your other controllers will inherit from. This is very similar to how we have an <code class="highlighter-rouge">ApplicationRecord</code> which all of our models inherit from.</p>

<p>When we refresh our browser, we get this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The action <span class="s1">'index'</span> could not be found <span class="k">for </span>SongsController
</code></pre></div></div>

<p>Let’s add the index action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>An <code class="highlighter-rouge">action</code> in the context of a rails app is a <code class="highlighter-rouge">method</code> defined inside a Controller.</p>

<p>We have now successfully routed our request to a controller action.</p>

<h3 id="rendering-the-view">Rendering the View</h3>

<p>Refresh the page again and you should see this error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActionController::UnknownFormat:
    SongsController#index is missing a template <span class="k">for </span>this request format and variant.

    request.formats: <span class="o">[</span><span class="s2">"text/html"</span><span class="o">]</span>
    request.variant: <span class="o">[]</span>

    NOTE! For XHR/Ajax or API requests, this action would normally respond with 204 No Content: an empty white screen. Since you<span class="s1">'re loading it in a web browser, we assume that you expected to actually render a template, not nothing, so we'</span>re showing an error to be extra-clear. If you expect 204 No Content, carry on. That<span class="s1">'s what you'</span>ll get from an XHR or API request. Give it a shot.
</code></pre></div></div>

<p>Remember, HTTP consists of both requests and <strong>responses</strong>. At this point, we have set up our App to receive a request, but haven’t told it how to respond. By default, rails will try to respond by rendering a view. It automatically looks for a view folder with the same name as the controller (<code class="highlighter-rouge">app/views/songs</code> folder), then look for a template file with the same name as the action method (<code class="highlighter-rouge">index.html.erb</code>). We can override this behavior by using the <code class="highlighter-rouge">render</code> or <code class="highlighter-rouge">redirect</code> commands, but for now we will follow the Rails convention:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>app/views/songs
<span class="nv">$ </span><span class="nb">touch </span>app/views/songs/index.html.erb
</code></pre></div></div>

<p>Rails convention says that we should include the output format type in the filename and then the <code class="highlighter-rouge">.erb</code> extension. That’s why this file is <code class="highlighter-rouge">index.html.erb</code> rather than <code class="highlighter-rouge">index.erb</code>. The latter would work, but it would not be following convention.</p>

<p>Refresh your page and you should see a blank page. We have successfully rendered a response.</p>

<p>Before we move on. Lets pry</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="nb">binding</span><span class="p">.</span><span class="nf">pry</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Refresh the page and check the terminal where the server is running. You should see something like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Started GET <span class="s2">"/songs"</span> <span class="k">for</span> ::1 at 2020-10-06 15:58:55 <span class="nt">-0600</span>
Processing by SongsController#index as HTML

From: /Users/tim_tyrrell/staff_turing/2mod/explorations/set_list_2008/app/controllers/songs_controller.rb:3 SongsController#index:

   2: def index
<span class="o">=&gt;</span> 3:   require <span class="s2">"pry"</span><span class="p">;</span> binding.pry
   4: end

<span class="o">[</span>1] pry<span class="o">(</span>&lt;SongsController&gt;<span class="o">)&gt;</span>
</code></pre></div></div>

<p>Lets start here. Your controllers and views have access to both a <strong>request</strong> AND <strong>response</strong> object that Rails builds for you with each request.</p>

<p>Type in <code class="highlighter-rouge">request</code> in your pry session.</p>

<p>…..</p>

<p>That’s not incredibly helpful, because it’s an overload of information that we need to parse through. But, what if we scope the inspection of this request object to be more specific?</p>

<p>Type in <code class="highlighter-rouge">ls request</code> in your pry session.</p>

<p>This will list all of the methods available for the <code class="highlighter-rouge">request</code> object</p>

<p>Try these 3 methods in your pry session:
<code class="highlighter-rouge">request.get?</code>
<code class="highlighter-rouge">request.path</code>
<code class="highlighter-rouge">request.base_url?</code></p>

<p>Now we’re getting much more helpful information.</p>

<p>Lets look at the <strong>response</strong> object:</p>

<p>Type in <code class="highlighter-rouge">ls response</code> in your pry session.</p>

<p>This will list all of the methods available for the <code class="highlighter-rouge">response</code> object</p>

<p>Try these 3 methods in your pry session:
<code class="highlighter-rouge">response.status</code>
<code class="highlighter-rouge">response.body</code>
<code class="highlighter-rouge">response.sent?</code></p>

<p>Remember that each of these objects will have a plethora of relevant information about the request/response cycle at any given time.</p>

<h2 id="database-setup">Database Setup</h2>

<p>We want this page to show all the Songs from our database. Let’s set up our Songs table.</p>

<p>We are going to need a <strong>migration</strong> in order to create a table. Any time we need to alter the structure of our database, we are going to do so with a migration. Some other examples of what you might need a migration for:</p>

<ul>
  <li>Creating a Table</li>
  <li>Adding/removing a column from a table</li>
  <li>Renaming a table/column</li>
  <li>Much More</li>
</ul>

<p>Luckily, Rails gives us some built in syntax for generating migrations:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails g migration CreateSongs title:string length:integer play_count:integer
</code></pre></div></div>

<p>Look inside the <code class="highlighter-rouge">db/migrate</code> folder and you should see a file named something like <code class="highlighter-rouge">20190422213736_create_songs.rb</code>. That number at the beginning is a timestamp, so yours will be different. Inside it, you should see:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateSongs</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">5.2</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:songs</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:title</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:length</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:play_count</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’re also going to add timestamps to our Song model, so add that line to the <code class="highlighter-rouge">create_table</code> block:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_table</span> <span class="ss">:songs</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
  <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:title</span>
  <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:length</span>
  <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:play_count</span>

  <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We have written the instructions for our database but haven’t executed those instructions. Run <code class="highlighter-rouge">rails db:migrate</code>.</p>

<p>Our Database should be good to go.</p>

<h2 id="song-model">Song Model</h2>

<p>Now that we have our table set up, we will need to create a corresponding Model in order to interact with that table from our Ruby code.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>app/models/song.rb
</code></pre></div></div>

<p>Note that our model files will always be named in singular form (<code class="highlighter-rouge">song.rb</code>, not <code class="highlighter-rouge">songs.rb</code>)</p>

<p>In <code class="highlighter-rouge">song.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Song</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We want this model to inherit from <code class="highlighter-rouge">ActiveRecord</code> so why are we using <code class="highlighter-rouge">ApplicationRecord</code> instead? If we take a look around, we see a file in the <code class="highlighter-rouge">app/models</code> directory called <code class="highlighter-rouge">application_record.rb</code>. Open that and peek around:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That file inherits from <code class="highlighter-rouge">ActiveRecord</code> already, so if we inherit from <code class="highlighter-rouge">ApplicationRecord</code> then we’ll also inherit <code class="highlighter-rouge">ActiveRecord</code>. This allows us to have a parent model that could contain some shared methods/behaviors.</p>

<h2 id="creating-songs">Creating Songs</h2>

<p>In order to see Songs on our index page, we are going to need to create some Songs. We might later add in a feature where can create a new song with a form, but we don’t have the feature yet, so we are going to have to insert Songs into our database manually.</p>

<p>Let’s open up the Rails console with <code class="highlighter-rouge">rails console</code> or <code class="highlighter-rouge">rails c</code> from the command line.</p>

<p>The Rails console will give you access to your development database through your models. If you enter <code class="highlighter-rouge">Song.all</code> into the console, you should get back an empty ActiveRecord Relation. This is because we don’t have any Songs in our database yet, so let’s create some:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):015:0&gt; Song.create(title: "I Really Like You", length: 208, play_count: 23546543)
irb(main):016:0&gt; Song.create(title: "Call Me Maybe", length: 431, play_count: 8759430)
</code></pre></div></div>

<p>You should see this output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   (0.3ms)  BEGIN
  Song Create (0.5ms)  INSERT INTO "songs" ("title", "length", "play_count", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "I Really Like You"], ["length", 208], ["play_count", 23546543], ["created_at", "2020-08-10 20:45:58.643242"], ["updated_at", "2020-08-10 20:45:58.643242"]]
   (0.5ms)  COMMIT

...
   (0.4ms)  BEGIN
  Song Create (0.4ms)  INSERT INTO "songs" ("title", "length", "play_count", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "Call Me Maybe"], ["length", 431], ["play_count", 8759430], ["created_at", "2020-08-10 20:46:21.379206"], ["updated_at", "2020-08-10 20:46:21.379206"]]
   (1.7ms)  COMMIT
</code></pre></div></div>

<p>You can see in this output that our ActiveRecord commands were translated into SQL to insert new rows into the database.</p>

<p>Now if we do <code class="highlighter-rouge">Song.all</code>, we should see some Songs coming back from our Database.</p>

<h2 id="displaying-songs-in-the-view">Displaying Songs in the View</h2>

<p>Now that we have Songs in our Database, let’s retrieve them in our controller action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#controllers/songs_controller.rb</span>
<span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@songs</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Remember, any instance variables you create in the controller action will be available in the view.</p>

<p>Let’s display these songs in the view:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code># app/views/songs/index.html.erb
<span class="nt">&lt;h1&gt;</span>All Songs<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;</span><span class="err">%</span> <span class="err">@</span><span class="na">songs.each</span> <span class="na">do</span> <span class="err">|</span><span class="na">song</span><span class="err">|</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;&lt;</span><span class="err">%=</span> <span class="na">song.title</span> <span class="err">%</span><span class="nt">&gt;&lt;/h2&gt;</span>
  <span class="nt">&lt;p&gt;</span>Play Count: <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">song.play_count</span> <span class="err">%</span><span class="nt">&gt;&lt;/p&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>  
</code></pre></div></div>

<p>Start up your rails server: <code class="highlighter-rouge">rails server</code> or <code class="highlighter-rouge">rails s</code> from the command line.</p>

<p>Navigate to <code class="highlighter-rouge">localhost:3000/songs</code> to see your songs.</p>

<p>Put a pry in your views at any point to inspect your variables!</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%</span> <span class="na">binding.pry</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What setup do you need to do to start a new Rails application?</li>
  <li>What is a migration?</li>
  <li>What command do you use to create a database?</li>
  <li>What command do you use to apply migrations?</li>
  <li>Where do our routes live?</li>
  <li>What is the syntax to define a route?</li>
  <li>How is MVC implemented in Rails?</li>
  <li>Explain the four pieces of information that <code class="highlighter-rouge">rails routes</code> give us.</li>
  <li>In a Rails app, what is an “action”?</li>
  <li>Where does Rails look for a view by default?</li>
  <li>Which helpful objects can we view in pry in both our views and controllers?</li>
</ul>

<h3 id="more-reading">More Reading</h3>

<p>Read <a href="https://www.theodinproject.com/courses/ruby-on-rails/lessons/routing">this article</a>.</p>
:ET