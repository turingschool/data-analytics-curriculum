I"$è<h3 id="iterations">Iterations:</h3>

<ul>
  <li><a href="1_getting_started.markdown">1 Getting Started</a></li>
  <li><a href="2_implementing_artists.markdown">2 Implementing artists</a></li>
  <li><a href="3_implementing_songs.markdown">3 Implementing songs</a></li>
  <li><a href="3_optional_additional_song_features.markdown">3.1 Optional Additional Song Features</a></li>
  <li><a href="4_implementing_playlists.markdown">4 Implementing Playlists</a></li>
  <li><a href="5_refactoring.markdown">5 Refactoring</a></li>
  <li><a href="6_controller_tests.markdown">6 Controller Tests</a></li>
  <li><a href="7_implementing_users.markdown">7 Implementing users</a></li>
  <li><a href="wip-image-upload.markdown">7.1 Extensions</a></li>
</ul>

<p>Here‚Äôs our situation: want this app to be a multi-user platform where each user has their own collection of playlists. There are three parts to making this happen:</p>

<ul>
  <li>Authentication - Establish identity</li>
  <li>Ownership - Attach data records to user records</li>
  <li>Authorization - Control who is allowed to do what</li>
</ul>

<p>We‚Äôll start by adding in functionality for multiple users to be able to login using a Spotify account. If you‚Äôve ever logged in to a site using your Google/Facebook/Twitter login, we‚Äôll be creating a similar experience.</p>

<p>In terms of authentication, it‚Äôs possible to hand-roll your own authentication where you provide your own account sign-up interface. We‚Äôll learn about this in class.</p>

<p>One of the most popular libraries for authentication right now is Devise because it makes it very easy to get up and running quickly. The downside is that the implementation uses very aggressive Ruby and metaprogramming techniques which make it very challenging to customize.</p>

<h4 id="why-omniauth">Why OmniAuth?</h4>

<p>As we learn more about constructing web applications there is a greater emphasis on decoupling components. It makes a lot of sense to depend on an external service for our authentication, then that service can serve this application along with many others.</p>

<p>The best application of this concept is the OmniAuth. It‚Äôs popular because it allows you to use multiple third-party services to authenticate, but it is really a pattern for component-based authentication. You could let your users login with their Twitter or Facebook account, but we can also build our own OmniAuth provider that authenticates all your companies‚Äô apps.</p>

<p>OmniAuth can handle multiple concurrent strategies, so you can offer users multiple ways to authenticate. Your app is just built against the OmniAuth interface, those external components can come and go.</p>

<p>Let‚Äôs go:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -b 7_implement-users
</code></pre></div></div>

<p>Instead of writing the test first, let‚Äôs spike so that we can understand how the OmniAuth gem works and what information the third-party service will provide to us.</p>

<p>I tried using the <a href="https://github.com/icoretech/omniauth-spotify/">omniauth-spotify</a> gem but ran into some issues with an invalid redirect URI. As it turns out, there‚Äôs an issue with the callback_url when using Spotify and omniauth. If you want to go down the rabbit hole (as I did), you can check out <a href="https://github.com/icoretech/omniauth-spotify/issues/7">this issue</a> and then follow all of the links :)</p>

<p>So instead of using the gem, we‚Äôll just create our own OmniAuth Strategy.</p>

<p>First, add the <code class="highlighter-rouge">omniauth-oauth2</code> gem to your Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'omniauth-oauth2'</span>
</code></pre></div></div>

<p>Then <code class="highlighter-rouge">bundle</code>.</p>

<p>Next, create an initializer:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch config/initializers/omniauth.rb
</code></pre></div></div>

<p>The name of this file is arbitrary. Any file inside of the initializers directory will be run once upon initialization of the app. For our purposes, this would be <code class="highlighter-rouge">rails s</code> or <code class="highlighter-rouge">rails c</code> or when we push to Heroku. You can read more about initialization <a href="http://guides.rubyonrails.org/initialization.html">here</a>.</p>

<p>Inside of this <code class="highlighter-rouge">omniauth.rb</code> file, we‚Äôll define our strategy <code class="highlighter-rouge">Spotify</code> and set the site url, authorize_url, and token_url. You can read more about how to make your own strategy on the <a href="https://github.com/intridea/omniauth-oauth2">omniauth-oauth2 README</a>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'omniauth-oauth2'</span>

<span class="k">module</span> <span class="nn">OmniAuth</span>
  <span class="k">module</span> <span class="nn">Strategies</span>
    <span class="k">class</span> <span class="nc">Spotify</span> <span class="o">&lt;</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Strategies</span><span class="o">::</span><span class="no">OAuth2</span>
      <span class="n">option</span> <span class="ss">:name</span><span class="p">,</span> <span class="s1">'spotify'</span>

      <span class="n">option</span> <span class="ss">:client_options</span><span class="p">,</span> <span class="p">{</span>
        <span class="ss">site:          </span><span class="s1">'https://api.spotify.com/v1/'</span><span class="p">,</span>
        <span class="ss">authorize_url: </span><span class="s1">'https://accounts.spotify.com/authorize'</span><span class="p">,</span>
        <span class="ss">token_url:     </span><span class="s1">'https://accounts.spotify.com/api/token'</span>
      <span class="p">}</span>

      <span class="k">def</span> <span class="nf">info</span>
        <span class="vi">@raw_info</span> <span class="o">||=</span> <span class="n">access_token</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'me'</span><span class="p">).</span><span class="nf">parsed</span>
      <span class="k">end</span>

      <span class="k">def</span> <span class="nf">callback_url</span>
        <span class="n">full_host</span> <span class="o">+</span> <span class="n">script_name</span> <span class="o">+</span> <span class="n">callback_path</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">middleware</span><span class="p">.</span><span class="nf">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
  <span class="n">provider</span> <span class="ss">:spotify</span><span class="p">,</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'SPOTIFY_KEY'</span><span class="p">],</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'SPOTIFY_SECRET'</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>NOTE: Generally if you‚Äôre using OAuth, you‚Äôll use a predefined strategy that comes packaged as a gem. For example, check out <a href="https://github.com/arunagw/omniauth-twitter">omniauth-twitter</a> or <a href="https://github.com/Shopify/omniauth-shopify-oauth2">omniauth-shopify-oauth2</a>. In both of those cases, you would not need to define your own class as we have done. The only lines you‚Äôd need are the last three (<code class="highlighter-rouge">Rails.application.config.middleware.use OmniAuth::Builder do...</code>). We‚Äôre only making our own because of the <code class="highlighter-rouge">callback_url</code> problem I described above. Our method definition overriding <code class="highlighter-rouge">callback_url</code> fixes this problem for Spotify.</p>

<p>Notice that we‚Äôre using <code class="highlighter-rouge">ENV['SPOTIFY_KEY']</code> and <code class="highlighter-rouge">ENV['SPOTIFY_SECRET']</code>. These are environment variables that contain our Spotify keys. We haven‚Äôt registered our app yet, so let‚Äôs do that and get these keys.</p>

<p>Navigate to <a href="https://developer.spotify.com/">https://developer.spotify.com/</a> and click ‚ÄúMy Apps‚Äù. At this point you may have to sign in (or create an account) and accept Spotify‚Äôs terms of use. Once you‚Äôve completed that, you should be redirected to <a href="https://developer.spotify.com/my-applications/#!/applications">My Applications</a>. Click the green ‚ÄúCreate an App‚Äù button, then provide a name (‚ÄúMixMaster‚Äù) and a description (your choice). Once you click ‚ÄúCreate‚Äù, you‚Äôll see a page where you can enter more information. The only piece you need to set right now is the ‚ÄúRedirect URIs‚Äù. In that box, enter this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:3000/auth/spotify/callback
</code></pre></div></div>

<p>This is the pattern used by omniauth to redirect after authenticating. Click ‚ÄúAdd‚Äù, then scroll to the bottom of the page and click ‚ÄúSave‚Äù.</p>

<p>This page also gives us access to the Client ID and the Client Secret. Although we could hardcode these into our codebase, that‚Äôs a bad idea if you‚Äôre pushing to a public repository or sharing your code in any way. Instead, let‚Äôs use <a href="https://github.com/laserlemon/figaro">Figaro</a>, a gem that manages sensitive information and provides an easy way to push these variables to Heroku.</p>

<p>First, add Figaro to your Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"figaro"</span>
</code></pre></div></div>

<p>Then <code class="highlighter-rouge">bundle</code> and run <code class="highlighter-rouge">figaro install</code>. This command will do two things: 1) create <code class="highlighter-rouge">config/application.yml</code> which is where you‚Äôll store sensitive information, and 2) add that file to your .gitignore so that git doesn‚Äôt see it (and therefore doesn‚Äôt add and push to Github). At this point, open your <code class="highlighter-rouge">.gitignore</code> file to make sure that it includes the following line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/config/application.yml
</code></pre></div></div>

<p>Your <code class="highlighter-rouge">.gitignore</code> file should be in the root folder of your app, but may not show up in your Atom file browser depending on your preferences. If that happens to you, you should still be able to open it form the command line with <code class="highlighter-rouge">atom .gitignore</code>.</p>

<p>Next, open <code class="highlighter-rouge">config/application.yml</code> and delete any comments. Add your key (Client ID) and secret (Client Secret) like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">SPOTIFY_KEY</span><span class="pi">:</span> <span class="s">PASTEYOURCLIENTIDERE</span>
<span class="na">SPOTIFY_SECRET</span><span class="pi">:</span> <span class="s">PASTEYOURCLIENTSECRETHERE</span>
</code></pre></div></div>

<p>The key and secret do not need to be in quotation marks.</p>

<p>Let‚Äôs talk about that redirect URI we gave Spotify: <code class="highlighter-rouge">http://localhost:3000/auth/spotify/callback</code>. This is where Spotify will return a response once it‚Äôs done authenticating. We need to provide this route in our <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s1">'/auth/spotify/callback'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'sessions#create'</span>
</code></pre></div></div>

<p>Notice that we‚Äôre routing it to a controller that doesn‚Äôt exist. Before we create this controller, let‚Äôs make sure we have everything wired up correctly. In order to trigger the authentication process with Spotify, we‚Äôll need a link to sign in. For now, let‚Äôs add this to our <code class="highlighter-rouge">application.html.erb</code> layout:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span>MixMaster<span class="nt">&lt;/title&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s1">'application'</span><span class="p">,</span> <span class="ss">media: </span><span class="s1">'all'</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s1">'application'</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Sign in with Spotify"</span><span class="p">,</span> <span class="s2">"/auth/spotify"</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Again, the pattern ‚Äú/auth/provider‚Äù is used by omniauth to trigger the third-party authentication process. Let‚Äôs check to see if we get the error we‚Äôre expecting when we click on our new link. If you‚Äôre still logged in to Spotify, log out now. Start up your application with <code class="highlighter-rouge">rails s</code> and navigate to any page (for example: <code class="highlighter-rouge">http://localhost:3000/playlists</code>). Click your ‚ÄúSign in with Spotify‚Äù link. You should be redirected to a Spotify page where you can click a green ‚Äúokay‚Äù button to allow your app to authenticate you. Do that now.</p>

<p><em>If you get an <code class="highlighter-rouge">uninitialized constant SessionsController</code> error, you‚Äôre on the right track!</em></p>

<p>This means that it was able to authenticate using Spotify and redirect to our callback url: <code class="highlighter-rouge">/auth/spotify/callback</code>. Great! Let‚Äôs make a sessions controller and the create action.</p>

<p>We will use the sessions controller to create a ‚Äúsession‚Äù for the user ‚Äì an instance of the user being logged in. A session is a special type of tamper-proof cookie that we‚Äôll use to keep track of the state of our user (whether or not they are logged in). This won‚Äôt be stored in our database, so we won‚Äôt need a Session model or sessions table. You can read more about sessions in <a href="http://guides.rubyonrails.org/security.html#sessions">Rails Guides Security: Sessions</a>.</p>

<p>Ok, make the controller:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch app/controllers/sessions_controller.rb
</code></pre></div></div>

<p>Then inside of that controller, define the <code class="highlighter-rouge">create</code> action and put a <code class="highlighter-rouge">byebug</code> inside of it. We‚Äôre going to do some experimenting here so that we know what the OmniAuth response looks like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">byebug</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, start up your server again and repeat that process. This time, after you click ‚Äúokay‚Äù, go back to your server log and you should see this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 5] in /Users/rwarbelow/mix_master/app/controllers/sessions_controller.rb
   1: class SessionsController &lt; ApplicationController
   2:   def create
   3:     byebug
=&gt; 4:   end
   5: end
</code></pre></div></div>

<p>If you type <code class="highlighter-rouge">request</code> and hit enter, you‚Äôll see a large <code class="highlighter-rouge">ActionDispatch::Request</code> object. This is what is coming back from Spotify‚Äôs authentication. <code class="highlighter-rouge">request</code> has an instance variable <code class="highlighter-rouge">env</code> that returns a hash which we can access like this: <code class="highlighter-rouge">request.env</code>.</p>

<p>Note: If you don‚Äôt want to look at that giant blob of text, you can require pretty print inside of byebug <code class="highlighter-rouge">require 'pp'</code> and then <code class="highlighter-rouge">pp request</code>. It‚Äôs a little easier to look at this way.</p>

<p>This is still a lot of information. We only need to get the omniauth information which is contained in the key <code class="highlighter-rouge">"omniauth.auth"</code> (do you see it?). We‚Äôll do that like this: <code class="highlighter-rouge">request.env["omniauth.auth"]</code>. You should see an <code class="highlighter-rouge">OmniAuth::AuthHash</code> object.</p>

<p>Now, because we defined an <code class="highlighter-rouge">info</code> method when we defined our Spotify strategy (see <code class="highlighter-rouge">config/initializers/omniauth.rb</code> if you don‚Äôt remember this), we also have access to <code class="highlighter-rouge">request.env["omniauth.auth"].info</code>. So I can do something like this within my byebug session:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">auth</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">[</span><span class="s2">"omniauth.auth"</span><span class="p">]</span>
<span class="n">pp</span> <span class="n">auth</span> <span class="c1">#=&gt; If you've required pp this will give you a nicely formatted version of `auth`</span>
<span class="n">auth</span><span class="p">.</span><span class="nf">provider</span> <span class="c1">#=&gt; "spotify"</span>
<span class="n">auth</span><span class="p">.</span><span class="nf">info</span>
<span class="n">auth</span><span class="p">.</span><span class="nf">info</span><span class="p">.</span><span class="nf">display_name</span> <span class="c1">#=&gt; "Rachel Warbelow"</span>
<span class="n">auth</span><span class="p">.</span><span class="nf">info</span><span class="p">.</span><span class="nf">id</span> <span class="c1">#=&gt; "myuniqueuserid"</span>
</code></pre></div></div>

<p>Great! Now that we have this information, let‚Äôs create or find an existing user in our <code class="highlighter-rouge">SessionsController</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_or_create_from_auth</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">[</span><span class="s1">'omniauth.auth'</span><span class="p">])</span>
    <span class="k">if</span> <span class="vi">@user</span>
      <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="p">.</span><span class="nf">id</span>
      <span class="n">redirect_to</span> <span class="n">playlists_path</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Neither the <code class="highlighter-rouge">User</code> model nor <code class="highlighter-rouge">User.find_or_create_from_auth</code> exist. Let‚Äôs make the user model:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model User name provider uid
</code></pre></div></div>

<p>Remember, if we don‚Äôt put data types in from the command line, they will default to string. This will be ok for us. Remember to <code class="highlighter-rouge">rake db:migrate</code>. You should have this table in your schema:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">create_table</span> <span class="s2">"users"</span><span class="p">,</span> <span class="ss">force: :cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">string</span>   <span class="s2">"name"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">string</span>   <span class="s2">"provider"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">string</span>   <span class="s2">"uid"</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"created_at"</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">datetime</span> <span class="s2">"updated_at"</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Now, we‚Äôll implement the <code class="highlighter-rouge">User.find_or_create_from_auth</code> method in the <code class="highlighter-rouge">User</code> model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_or_create_from_auth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">find_or_create_by</span><span class="p">(</span>
      <span class="ss">provider: </span><span class="n">auth</span><span class="p">[</span><span class="s2">"provider"</span><span class="p">],</span>
      <span class="ss">uid: </span><span class="n">auth</span><span class="p">[</span><span class="s2">"info"</span><span class="p">][</span><span class="s2">"id"</span><span class="p">],</span>
      <span class="ss">name: </span><span class="n">auth</span><span class="p">[</span><span class="s2">"info"</span><span class="p">][</span><span class="s2">"display_name"</span><span class="p">]</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You can read more about the <code class="highlighter-rouge">find_or_create_by</code> ActiveRecord method <a href="http://apidock.com/rails/v4.0.2/ActiveRecord/Relation/find_or_create_by">here</a>.</p>

<p>Now start up your server <code class="highlighter-rouge">rails s</code> and try logging in. Nothing should break, but we also don‚Äôt see any confirmation that we‚Äôre signed in. The ‚ÄúSign in with Spotify‚Äù link still appears, and we don‚Äôt see our name anywhere. Let‚Äôs fix this.</p>

<p>Remember how we set <code class="highlighter-rouge">session[:user_id] = @user.id</code> in <code class="highlighter-rouge">SessionsController#create</code>? Well, we can use this value to be able to access a current user. The <code class="highlighter-rouge">session</code> object is available in all controllers and views. Let‚Äôs create a current_user method in the ApplicationController using the <code class="highlighter-rouge">session[:user_id]</code> value:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="c1"># Prevent CSRF attacks by raising an exception.</span>
  <span class="c1"># For APIs, you may want to use :null_session instead.</span>
  <span class="n">protect_from_forgery</span> <span class="ss">with: :exception</span>

  <span class="n">helper_method</span> <span class="ss">:current_user</span>

  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span> <span class="k">if</span> <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Then in the <code class="highlighter-rouge">application.html.erb</code> layout, let‚Äôs display the <code class="highlighter-rouge">current_user</code>‚Äôs name and create some logic to determine whether to show a sign in or sign out link:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span>MixMaster<span class="nt">&lt;/title&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s1">'application'</span><span class="p">,</span> <span class="ss">media: </span><span class="s1">'all'</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s1">'application'</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;h3&gt;</span>Welcome, <span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h3&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Sign out"</span><span class="p">,</span> <span class="n">logout_path</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Sign in with Spotify"</span><span class="p">,</span> <span class="s2">"/auth/spotify"</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>This won‚Äôt work yet, since we don‚Äôt have a <code class="highlighter-rouge">logout_path</code>. Let‚Äôs add that in <code class="highlighter-rouge">routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">delete</span> <span class="s1">'/logout'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'sessions#destroy'</span>
</code></pre></div></div>

<p>Now refresh the page. You should see your name and a link to sign out. If you click the link, it tells you that the action <code class="highlighter-rouge">destroy</code> doesn‚Äôt exist.</p>

<p>When we logged in, we set the <code class="highlighter-rouge">session[:user_id]</code> equal to the primary key ID of the user. Now, we‚Äôll want to clear that so that the user is no longer logged in:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_or_create_from_auth</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">[</span><span class="s1">'omniauth.auth'</span><span class="p">])</span>
    <span class="k">if</span> <span class="vi">@user</span>
      <span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="p">.</span><span class="nf">id</span>
      <span class="n">redirect_to</span> <span class="n">playlists_path</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="n">session</span><span class="p">.</span><span class="nf">clear</span>
    <span class="n">redirect_to</span> <span class="n">playlists_path</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Everything should be wired up correctly now. Try signing in and out to see if it works.</p>

<p>So, how do we test this? First, let‚Äôs write a user story:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user
When I visit the playlists index
And I click "Sign in with Spotify"
Then I should see a "Sign Out" link
And I should see my display name
And I should not see "Sign in with Spotify"
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch spec/features/user_signs_in_spec.rb
</code></pre></div></div>

<p>Inside of that file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">feature</span> <span class="s2">"User signs in with Spotify"</span> <span class="k">do</span>
  <span class="n">scenario</span> <span class="s2">"they see a link to sign out"</span> <span class="k">do</span>
    <span class="n">auth_data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">'provider'</span>  <span class="o">=&gt;</span> <span class="s1">'spotify'</span><span class="p">,</span>
        <span class="s1">'info'</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="s1">'display_name'</span> <span class="o">=&gt;</span> <span class="s1">'Fake User'</span><span class="p">,</span>
          <span class="s1">'id'</span>           <span class="o">=&gt;</span> <span class="s1">'12345'</span>
        <span class="p">}</span>
      <span class="p">}</span>

    <span class="no">OmniAuth</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">mock_auth</span><span class="p">[</span><span class="ss">:spotify</span><span class="p">]</span> <span class="o">=</span> <span class="n">auth_data</span>

    <span class="n">visit</span> <span class="n">playlists_path</span>
    <span class="n">click_link</span> <span class="s2">"Sign in with Spotify"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Sign out"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">auth_data</span><span class="p">[</span><span class="s1">'info'</span><span class="p">][</span><span class="s1">'display_name'</span><span class="p">])</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to_not</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Sign in with Spotify"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We‚Äôll also need to configure our <code class="highlighter-rouge">rails_helper.rb</code> to be able to work with OmniAuth in test mode:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">OmniAuth</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">test_mode</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div></div>

<p>What we‚Äôre doing here is telling OmniAuth that we‚Äôre using test_mode, then using the strategy <code class="highlighter-rouge">:spotify</code> to mock out the data hash that we‚Äôve defined as <code class="highlighter-rouge">auth_data</code> in the test.</p>

<p>For a challenge, erase all of your work for this section (<code class="highlighter-rouge">git reset --HARD</code>) and use the spec we wrote above to TDD this whole process. Have fun!</p>

<p>Wondering how to write a controller spec for this functionality? Check out <a href="http://www.natashatherobot.com/rails-test-omniauth-sessions-controller/">this blog post</a> or the <a href="https://github.com/intridea/omniauth/wiki/Integration-Testing">omniauth documentation</a>.</p>

<h3 id="adding-playlist-ownership">Adding Playlist Ownership</h3>

<p><strong>COMING SOON. WIP.</strong></p>

<p>Apps will evolve over time, and you may reach a point where you need to go back and modify a spec to reflect this new functionality. We now need playlists to belong to a user.</p>

<p>Make sure to commit your work! Use proper commit message manners. All tests should be passing.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
$ git commit
$ git checkout master
$ git merge 7_implement-users
</code></pre></div></div>

<p>Before pushing to Heroku, you‚Äôll want to create a new set of Spotify keys and follow the instructions for the <a href="https://github.com/laserlemon/figaro">Figaro</a> gem in order to set those keys on Heroku. In general, you want to have a set of keys, or registered application, for production and one for development. Since we specify the callback url when we register the app, one set of keys won‚Äôt work locally and in production.</p>

<h3 id="maybe-coming-soon">Maybe Coming Soon!</h3>

<ul>
  <li>Polymorphism with images</li>
  <li>Paperclip with images</li>
  <li>SASS</li>
  <li>Switch over your views to use HAML instead of ERB</li>
</ul>

<h3 id="other-resources">Other Resources</h3>

<ul>
  <li><a href="http://betterspecs.org/">BetterSpecs: rspec guidelines with ruby</a></li>
  <li><a href="http://www.gotealeaf.com/blog/understanding-polymorphic-associations-in-rails">Understanding Polymorphic Associations in Rails</a></li>
  <li><a href="http://rspec.codeschool.com/levels/1">Testing wtih RSpec - Codeschool</a></li>
  <li><a href="http://blog.teamtreehouse.com/an-introduction-to-rspec">An Introduction to RSpec - Team Treehouse</a></li>
</ul>
:ET