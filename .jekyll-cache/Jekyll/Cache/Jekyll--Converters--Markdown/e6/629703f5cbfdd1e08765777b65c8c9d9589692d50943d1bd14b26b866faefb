I",'<h2 id="overview">Overview</h2>

<h3 id="learning-goals">Learning Goals</h3>

<ul>
  <li>Student has refreshed their understanding of SELECT statements in SQL</li>
  <li>Student has deepened their understanding of foreign key relationships</li>
  <li>Student uses COUNT functions in SQL</li>
  <li>Student understands the purpose and trade-offs with SQL indices</li>
  <li>Student can create a single-column index on a table</li>
  <li>Student can explain the concept of an INNER JOIN</li>
  <li>Student can design and execute an INNER JOIN across two tables</li>
</ul>

<h2 id="class-time">Class Time</h2>

<h3 id="setup">Setup</h3>

<h4 id="checking-postgresql">Checking PostgreSQL</h4>

<p>From your terminal, let’s create a database and open it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ createdb food
$ psql food
</code></pre></div></div>

<p>Within that database let’s make a table:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE fruits(id SERIAL, name VARCHAR, seed_count int);
</code></pre></div></div>

<p>Then insert a bit of data:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INSERT INTO fruits (name, seed_count)
VALUES ('apple', 6),
       ('orange', 14),
       ('avocado', 1);
</code></pre></div></div>

<p>And finally run a SELECT:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * from fruits;
</code></pre></div></div>

<p>If you see the three fruits you inserted then you’re good to go. Go ahead and exit <code class="highlighter-rouge">psql</code> with the command <code class="highlighter-rouge">\q</code>.</p>

<h4 id="loading-the-sample-data">Loading the Sample Data</h4>

<p>For the bulk of this tutorial we want to focus on working with existing data. We’ve setup a sample database for you to use. Create a folder named <code class="highlighter-rouge">sql_deep_dive</code> in your terminal and get the DB:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir sql_deep_dive
$ cd sql_deep_dive
$ brew install wget
$ wget https://cl.ly/2k1q0J070W2S/download/imdb.pgsql
$ createdb imdb
$ psql imdb &lt; imdb.pgsql
</code></pre></div></div>

<h4 id="testing-with-the-data">Testing with the Data</h4>

<p>Then connect to the database and run a sample query:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ psql imdb
psql&gt; select * from movies where id=100 limit 1;
100|The Hobbit: An Unexpected Journey |182|303001229|http://www.imdb.com/title/tt0903624/?ref_=fn_tt_tt_1|PG-13|180000000|2012|English|1|2016-12-11 20:52:25.675416|2016-12-11 20:52:25.675416
</code></pre></div></div>

<p>If you get a movie record like that then you’re ready to go!</p>

<h3 id="part-1-practicing-with-sql">Part 1: Practicing with SQL</h3>

<p>Let’s start with a series of challenges. Work with your partner to solve the following questions. Record both the queries you used to get the answer and the answer itself.</p>

<p>Solve the <em>EASY</em> and <em>MEDIUM</em> questions of each section before trying any of the <em>HARD</em> questions.</p>

<h4 id="round-1-using-select">Round 1: Using SELECT</h4>

<ul>
  <li>Easy: Which movie in our database had the largest gross revenue?</li>
  <li>Medium: Which movie released in 2012 had the largest gross revenue?</li>
  <li>Hard: For films that we have both the budget and gross, what were the top three flops of 2012 (ie: lowest profit)?</li>
</ul>

<h4 id="round-2-using-count">Round 2: Using COUNT</h4>

<ul>
  <li>Easy: How many movies have a known budget (ie: not null or zero)?</li>
  <li>Medium: How many movies in our database were released in 2012?</li>
  <li>Hard: How many movies in 2012 had a budget over $100M?</li>
</ul>

<h4 id="round-3-connecting-data-across-tables">Round 3: Connecting Data Across Tables</h4>

<ul>
  <li>Easy: How many roles does Rosario Dawson have in our database?</li>
  <li>Medium: What movies did Justin Lin direct?</li>
  <li>Hard: What movies did Donald Glover appear in?</li>
</ul>

<h3 id="part-2-searching-with-and-without-indices">Part 2: Searching with and without Indices</h3>

<p>Let’s whiteboard and discuss the following:</p>

<ul>
  <li>Finding records by the primary key</li>
  <li>Quick recap of foreign keys</li>
  <li>Finding records by the foreign key</li>
  <li>Primary uniqueness =&gt; quick stop, foreign repeats =&gt; long search</li>
  <li>An <em>index</em> on a column makes lookups faster</li>
  <li>An index increases memory usage and makes inserts slower</li>
</ul>

<h4 id="in-psql">In <code class="highlighter-rouge">psql</code></h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imdb=# \timing
imdb=# SELECT COUNT(*) from roles WHERE actor_id=158;
</code></pre></div></div>

<ul>
  <li>Note how long it took to execute the query.</li>
  <li>Think about how many rows of the <code class="highlighter-rouge">roles</code> table had to be looked through</li>
</ul>

<h4 id="creating--testing-the-index">Creating &amp; Testing the Index</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imdb=# CREATE INDEX roles_actor_id_index on roles (actor_id);
imdb=# SELECT COUNT(*) from roles WHERE actor_id=158;
</code></pre></div></div>

<ul>
  <li>What do you observe about the difference in execution speed?</li>
  <li>Skeptical that there’s some kind of caching going on? Try the same query looking for id <code class="highlighter-rouge">534</code> which has even more roles</li>
</ul>

<h4 id="experiment-in-pairs">Experiment In Pairs</h4>

<p>Go through this process again with the movies table and it’s relationship to directors.</p>

<ul>
  <li>Find how many movies were directed by Steven Spielberg and note the query time</li>
  <li>Create an index on the relevant column</li>
  <li>Re-run your query. What percentage speed-up did you observe?</li>
</ul>

<h3 id="part-3-using-inner-joins">Part 3: Using Inner Joins</h3>

<p>Now it gets a little trickier. Preview the idea of JOINS with <a href="https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/">this article</a>.</p>

<p>Let’s whiteboard and discuss the following:</p>

<ul>
  <li>Selecting data without a join</li>
  <li>Selecting related data in a second query</li>
  <li>Joining based on a foreign key</li>
</ul>

<p>We’ll use these queries:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imdb=# select * from directors where name='Justin Lin';
imdb=# select * from movies where director_id=42;
imdb=# select * from movies INNER JOIN directors ON movies.director_id=directors.id where directors.name='Justin Lin';
imdb=# select title, year, name from movies INNER JOIN directors ON movies.director_id=directors.id where directors.name='Justin Lin';
</code></pre></div></div>

<p>Then take it a step further</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imdb=# select * from actors where name='Rosario Dawson';
imdb=# select * from roles INNER JOIN actors ON roles.actor_id=actors.id WHERE actors.name='Rosario Dawson';
imdb=# select * from movies INNER JOIN roles ON movies.id=roles.movie_id INNER JOIN actors ON roles.actor_id=actors.id WHERE actors.name='Rosario Dawson';
imdb=# select movies.title, movies.year, actors.name from movies INNER JOIN roles ON movies.id=roles.movie_id INNER JOIN actors ON roles.actor_id=actors.id WHERE actors.name='Rosario Dawson';
</code></pre></div></div>

<p>And one more degree to the search:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>imdb=# select movies.title, movies.year, actors.name from movies INNER JOIN roles ON movies.id=roles.movie_id INNER JOIN actors ON roles.actor_id=actors.id WHERE movies.title like 'Fast%';
</code></pre></div></div>

<h4 id="first-experiment-in-pairs">First Experiment in Pairs</h4>

<p>Make sure you do this iteratively, building up a little at a time.</p>

<p>Write a query that returns this data about movies and directors:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>title     | year |       name       
---------------+------+------------------
Spider-Man 3  | 2007 | Sam Raimi
Spider-Man 2  | 2004 | Sam Raimi
Spider-Man    | 2002 | Sam Raimi
Spider        | 2002 | David Cronenberg
Spider-Man 3  | 2007 | Sam Raimi
</code></pre></div></div>

<h4 id="big-finish">Big Finish</h4>

<ul>
  <li>How many films was Morgan Freeman in?</li>
  <li>What was his highest-grossing movie?</li>
  <li>How many films was he the lead (<code class="highlighter-rouge">rank</code> of <code class="highlighter-rouge">1</code> in roles)?</li>
</ul>

<h4 id="extra-challenges">Extra Challenges</h4>

<ul>
  <li>What director did Morgan Freeman work with the most?</li>
  <li>What are the titles of the dramas he appeared in?</li>
</ul>

<h3 id="part-4-grab-bag">Part 4: Grab Bag</h3>

<p>Here are some other things worth investigating:</p>

<ul>
  <li><code class="highlighter-rouge">SELECT sum(column_name) FROM table_name; </code></li>
  <li><code class="highlighter-rouge">SELECT avg(column_name) FROM table_name; </code></li>
  <li><code class="highlighter-rouge">SELECT max(column_name) FROM table_name; </code></li>
  <li><code class="highlighter-rouge">SELECT min(column_name) FROM table_name;</code></li>
  <li><code class="highlighter-rouge">SELECT count(column_name) FROM table_name; </code></li>
  <li>Subqueries</li>
  <li>Aliases with <code class="highlighter-rouge">AS</code></li>
</ul>

<h4 id="exercises">Exercises</h4>

<ul>
  <li>What’s the difference between the average profit of a Spiderman movie versus a Batman movie?</li>
  <li>Over her career, how much total profit has Meryl Streep generated?</li>
  <li>What’s the percentage chance that a movie with Adam Sandler is profitable?</li>
</ul>
:ET