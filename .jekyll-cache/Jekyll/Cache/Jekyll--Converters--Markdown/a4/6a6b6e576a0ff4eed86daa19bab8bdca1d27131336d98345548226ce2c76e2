I"Oh<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Define classes with instance variables in Ruby</li>
  <li>Explain ‘state’ and ‘behavior’ in the context of Ruby/OOP</li>
  <li>Explain Abstraction in the context of Ruby Objects</li>
  <li>Identify that you can iterate over Ruby Objects to accomplish a goal</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>Object Oriented Programming (OOP)</li>
  <li>Object</li>
  <li>Abstraction</li>
  <li>Encapsulation</li>
</ul>

<h2 id="slides">Slides</h2>

<p>Available <a href="../slides/intro_to_oop">here</a></p>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>Write down two classes of things (e.g. <code class="highlighter-rouge">Classroom</code>), and for each class write down two instances of that class (e.g. <code class="highlighter-rouge">bem1_classroom</code>)</li>
  <li>For each class of thing, write down some attributes that might distinguish one instance from another (e.g. <code class="highlighter-rouge">tables</code>, <code class="highlighter-rouge">chairs</code>, <code class="highlighter-rouge">length</code>, <code class="highlighter-rouge">width</code>, <code class="highlighter-rouge">height</code> <code class="highlighter-rouge">pairing_stations</code>)</li>
</ul>

<h2 id="lesson">Lesson</h2>

<h4 id="using-related-methods">Using Related Methods</h4>

<p>Let’s start with our <code class="highlighter-rouge">Classroom</code> class from yesterday. Remember a class is an abstract representation of a real world thing/concept.</p>

<p>Now, if we want to create a method <code class="highlighter-rouge">#volume</code>, we can use the <code class="highlighter-rouge">#area</code> method as a starting point. Let’s do that. 
In our runner file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom_runner.rb</span>
<span class="nb">require</span> <span class="s1">'./classroom'</span>

<span class="n">classroom_a</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">area</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">length</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">volume</span>
</code></pre></div></div>
<p>We get a no method error for volume, let’s build that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom.rb</span>
<span class="k">class</span> <span class="nc">Classroom</span>
  <span class="nb">attr_reader</span> <span class="ss">:length</span><span class="p">,</span>
              <span class="ss">:width</span><span class="p">,</span>
              <span class="ss">:height</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>  <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="n">area</span> <span class="o">*</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_length</span><span class="p">(</span><span class="n">feet</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">+=</span> <span class="n">feet</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">volume</code> method, <code class="highlighter-rouge">area</code> refers to the <code class="highlighter-rouge">area</code> method that is sitting in our class. We can refer to these methods much the same way we would variables.</p>

<p>Notice in the runner file we call this method just as we would any other.</p>

<h4 id="setting-default-values">Setting Default Values</h4>

<p>Let’s say that we knew that generally the ceilings in the basement were 20 feet, and that we would only want to define a height on the ceiling if we were creating a classroom that was an exception to that rule. We can set a default value for our <code class="highlighter-rouge">height</code> parameter using the syntax below:</p>

<p>Add the following lines to the bottom of your runner file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom_runner.rb</span>
<span class="n">standard_room</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">short_room</span>    <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"Standard Heights: </span><span class="si">#{</span><span class="n">standard_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"Short Height: </span><span class="si">#{</span><span class="n">short_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>
<p>We want to pass our Classroom class either two or three arguments when we initialize.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom.rb</span>
<span class="k">class</span> <span class="nc">Classroom</span>
  <span class="nb">attr_accessor</span> <span class="ss">:length</span><span class="p">,</span>
                <span class="ss">:width</span><span class="p">,</span>
                <span class="ss">:height</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>  <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="n">area</span> <span class="o">*</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_length</span><span class="p">(</span><span class="n">feet</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">+=</span> <span class="n">feet</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We should see that our standard room height is still 20, but our short room height is now the 10 that we passed to it.</p>

<h4 id="setting-initial-state-without-parameters">Setting Initial State Without Parameters</h4>

<p>One thing that’s important to note is that we’re making a decision here as programmers that we want someone to be able to pass a height, but if they don’t we want to keep moving without a hiccup. We can also define instance variables that don’t allow for user input. For example, let’s assume we wanted to allow our classrooms to store the students that are in a classroom at any one time. Let’s further assume that we want to have all of our classrooms start empty. We could indicate that in our code by updating our <code class="highlighter-rouge">Classroom</code> class as follows:
In our runner file:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom_runner.rb</span>
<span class="n">standard_room</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">short_room</span>    <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"Standard Room: </span><span class="si">#{</span><span class="n">standard_room</span><span class="p">.</span><span class="nf">students</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"Short Room: </span><span class="si">#{</span><span class="n">short_room</span><span class="p">.</span><span class="nf">students</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom.rb</span>
<span class="k">class</span> <span class="nc">Classroom</span>
  <span class="nb">attr_accessor</span> <span class="ss">:length</span><span class="p">,</span>
                <span class="ss">:width</span><span class="p">,</span>
                <span class="ss">:height</span><span class="p">,</span>
                <span class="ss">:students</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="vi">@length</span>   <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>    <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span>   <span class="o">=</span> <span class="n">height</span>
    <span class="vi">@students</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="n">area</span> <span class="o">*</span> <span class="vi">@height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_length</span><span class="p">(</span><span class="n">feet</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">+=</span> <span class="n">feet</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now each classroom we create will be created with an empty array of students.</p>

<p><strong>Turn &amp; Talk</strong>
What are the two methods of setting default values? 
How should you decide which method to use?</p>

<p>How do we get students into this array? With a method!</p>

<p>Let’s add that now.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom.rb</span>
<span class="k">class</span> <span class="nc">Classroom</span>
  <span class="nb">attr_accessor</span> <span class="ss">:length</span><span class="p">,</span>
                <span class="ss">:width</span><span class="p">,</span>
                <span class="ss">:height</span><span class="p">,</span>
                <span class="ss">:students</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="vi">@length</span>   <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>    <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span>   <span class="o">=</span> <span class="n">height</span>
    <span class="vi">@students</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="n">area</span> <span class="o">*</span> <span class="vi">@height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_length</span><span class="p">(</span><span class="n">feet</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">+=</span> <span class="n">feet</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_student</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
    <span class="vi">@students</span> <span class="o">&lt;&lt;</span> <span class="n">student</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What’s this do? We use the shovel method to add a student that someone passes us into the <code class="highlighter-rouge">@students</code> array. Great!</p>

<h4 id="passing-objects-to-other-objects">Passing Objects to Other Objects</h4>

<p>That seems great, but what can we do with it? And what is a student? Is a student just a name? ARE YOU JUST A NAME!? No!</p>

<p>Let’s make our students into objects, a more fleshed out version of this abstract idea. To do that we create a student class to represent our students. For now it’ll be pretty small since there’s not much we need our student class to do.
In our runner:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom runner</span>
<span class="nb">require</span> <span class="s1">'./classroom'</span>
<span class="nb">require</span> <span class="s1">'./student'</span>

<span class="n">classroom_a</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">area</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">length</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">volume</span>

<span class="n">standard_room</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">short_room</span>    <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"Standard Heights: </span><span class="si">#{</span><span class="n">standard_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"Short Height: </span><span class="si">#{</span><span class="n">short_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>

<span class="n">sal</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Sal"</span><span class="p">)</span>
<span class="n">ali</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Ali"</span><span class="p">)</span>
<span class="n">classroom_a</span><span class="p">.</span><span class="nf">add_student</span><span class="p">(</span><span class="n">sal</span><span class="p">)</span>
<span class="n">classroom_a</span><span class="p">.</span><span class="nf">add_student</span><span class="p">(</span><span class="n">ali</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">students</span>
</code></pre></div></div>
<p>We get an uninitialized constant for Student error, which tells us that our program can’t find the class we told it to look for. This may be because we haven’t required the student.rb file, or perhaps we haven’t build one yet. Here it’s because we haven’t built it yet.</p>

<p>Let’s go build that. <code class="highlighter-rouge">touch student.rb</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#student.rb</span>

<span class="k">class</span> <span class="nc">Student</span>
  <span class="nb">attr_reader</span> <span class="ss">:name</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Note we have explicitly decided to expose the @name instance variable by including an attr_reader. This is an example of Encapsulation at work, only exposing what needs to be accessed from the outside.</p>

<p>Run the runner file again, and we shouldn’t get any more errors.
That’s fun, but how do we use these students in our new class?</p>

<h4 id="using-objects-in-other-objects">Using Objects in Other Objects</h4>

<p>Let’s create a new method in our Classroom class that allows us to print a roster. Now we don’t want to print those full Student objects, we just want to print their names.</p>

<p>** Turn &amp; Talk **<br />
How can we use the functionality we’ve already built on Student to print a roster of student names in Classroom?</p>

<p>And update our runner:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom runner</span>
<span class="nb">require</span> <span class="s1">'./classroom'</span>
<span class="nb">require</span> <span class="s1">'./student'</span>

<span class="n">classroom_a</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">area</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">length</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">volume</span>

<span class="n">standard_room</span> <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">short_room</span>    <span class="o">=</span> <span class="no">Classroom</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="nb">puts</span> <span class="s2">"Standard Heights: </span><span class="si">#{</span><span class="n">standard_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"Short Height: </span><span class="si">#{</span><span class="n">short_room</span><span class="p">.</span><span class="nf">height</span><span class="si">}</span><span class="s2">"</span>

<span class="n">sal</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Sal"</span><span class="p">)</span>
<span class="n">ali</span> <span class="o">=</span> <span class="no">Student</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Ali"</span><span class="p">)</span>
<span class="n">classroom_a</span><span class="p">.</span><span class="nf">add_student</span><span class="p">(</span><span class="n">sal</span><span class="p">)</span>
<span class="n">classroom_a</span><span class="p">.</span><span class="nf">add_student</span><span class="p">(</span><span class="n">ali</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">classroom_a</span><span class="p">.</span><span class="nf">students</span>
<span class="n">classroom_a</span><span class="p">.</span><span class="nf">print_roster</span>
</code></pre></div></div>
<p>Let’s build a print_roster method to satisfy the no method error:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classroom.rb</span>
<span class="k">class</span> <span class="nc">Classroom</span>
  <span class="nb">attr_accessor</span> <span class="ss">:length</span><span class="p">,</span>
                <span class="ss">:width</span><span class="p">,</span>
                <span class="ss">:height</span><span class="p">,</span>
                <span class="ss">:students</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
    <span class="vi">@length</span>   <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>    <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span>   <span class="o">=</span> <span class="n">height</span>
    <span class="vi">@students</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="n">area</span> <span class="o">*</span> <span class="vi">@height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_length</span><span class="p">(</span><span class="n">feet</span><span class="p">)</span>
    <span class="vi">@length</span> <span class="o">+=</span> <span class="n">feet</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_student</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
    <span class="vi">@students</span> <span class="o">&lt;&lt;</span> <span class="n">student</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">print_roster</span>
    <span class="vi">@students</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">student</span><span class="o">|</span>
      <span class="nb">puts</span> <span class="n">student</span><span class="p">.</span><span class="nf">name</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Run our runner file, and… a list of student names!</p>

<h2 id="practice">Practice</h2>

<p>Start with your <code class="highlighter-rouge">Lunchbox</code> class from yesterday. Create an <code class="highlighter-rouge">add_snack</code> method that takes a snack as an argument and adds it to the contents of your lunchbox.</p>

<p>Create a snack class. Create a runner file that adds snacks to your lunchbox.</p>

<p>Create a method on your lunchbox class that will list its contents.</p>

<p>Feeling fancy? Update your Snack class to have a volume. Update the <code class="highlighter-rouge">add_snack</code> class of your Lunchbox class to monitor the remaining capacity of your lunchbox and reject any snack that would push the lunchbox beyond capacity.</p>

<h2 id="summary">Summary</h2>

<ul>
  <li>What are some examples of classes and instances from everyday life?</li>
  <li>How would you define a <code class="highlighter-rouge">Person</code> class that had height, weight, and age attributes in Ruby?</li>
  <li>What are the two main responsibilities of an instance of an object in Ruby?</li>
  <li>How did we apply Abstraction and Encapsulation today?</li>
</ul>
:ET