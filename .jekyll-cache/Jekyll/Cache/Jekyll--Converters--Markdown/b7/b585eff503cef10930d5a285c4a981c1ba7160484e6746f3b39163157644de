I"2G<h2 id="ruby-project-etiquette-how-to-mind-your-ps-and-qs-in-a-ruby-project">Ruby Project Etiquette: How to Mind Your P‚Äôs and Q‚Äôs in a Ruby Project</h2>

<p>In this session we‚Äôre going to go over some common best practices for organizing and managing code in our Ruby projects. By the end of the lesson, you should be comfortable with the following tasks.</p>

<ul>
  <li>File naming conventions</li>
  <li>Directory structure conventions</li>
  <li>Difference between <code class="highlighter-rouge">require</code> and <code class="highlighter-rouge">require_relative</code></li>
  <li>How to build a rakefile and <strong>why</strong> you want to</li>
</ul>

<h2 id="vocabulary">Vocabulary</h2>
<ul>
  <li>require</li>
  <li>require_relative</li>
  <li>rake task</li>
</ul>

<h2 id="warmup">Warmup</h2>

<ul>
  <li>How have you been organizing your projects so far?</li>
  <li>What are the advantages of following conventions in project organization?</li>
  <li>Do you tend to use require or require_relative? How does the pathing work?</li>
</ul>

<h3 id="directory-and-file-organization">Directory and File Organization</h3>

<h4 id="fileclass-naming-conventions">File/Class Naming Conventions</h4>

<ol>
  <li>Snake-case file names (<code class="highlighter-rouge">my_file.rb</code> rather than <code class="highlighter-rouge">myFile.rb</code> or <code class="highlighter-rouge">my-file.rb</code>)</li>
  <li>End files in <code class="highlighter-rouge">.rb</code></li>
  <li>Classes are named using PascalCase a.k.a. UpperCamelCase</li>
  <li>Match file names to the class name ‚Äì e.g. a file containing the class <code class="highlighter-rouge">RotationGenerator</code> should be <code class="highlighter-rouge">rotation_generator.rb</code></li>
</ol>

<h4 id="directory-structure">Directory Structure</h4>

<p>In a standard Ruby project, we tend to organize code into 4 subdirectories:</p>

<ol>
  <li><code class="highlighter-rouge">lib</code> for source code</li>
  <li><code class="highlighter-rouge">test</code> for test files</li>
  <li><code class="highlighter-rouge">data</code> for data-related files (.txt, .csv, etc)</li>
  <li><code class="highlighter-rouge">bin</code> for any ‚Äúexecutable‚Äù files (you may not have encountered any of these yet; if you don‚Äôt have them, leave <code class="highlighter-rouge">bin</code> out)</li>
</ol>

<p>Additionally, it‚Äôs common for test files and source files to match relatively 1-to-1. Thus a class called <code class="highlighter-rouge">RotationGenerator</code> will generally be found in the source file at <code class="highlighter-rouge">lib/rotation_generator.rb</code> and will have a corresponding test file at <code class="highlighter-rouge">test/rotation_generator_test.rb</code>.</p>

<h4 id="exercise">Exercise</h4>

<p>Take the following 2 code snippets and place them into a correct ruby project structure. Consider:</p>

<ul>
  <li>What directories and files do you create?</li>
  <li>What content goes into each file?</li>
  <li>How does the test file know about the source code?</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Hello</span>
  <span class="k">def</span> <span class="nf">greet</span>
    <span class="s2">"Hello, World!"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"minitest/autorun"</span>
<span class="c1"># _______________ &lt;--- Your Require Statement Here</span>

<span class="k">class</span> <span class="nc">HelloTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_greets</span>
    <span class="n">hello</span> <span class="o">=</span> <span class="no">Hello</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">assert_equal</span> <span class="s2">"Hello, World!"</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="nf">greet</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="require-statements">Require Statements</h3>
<p>Require statements often trip us up, but there are some straightforward guidelines we can follow that make things much more reliable:</p>

<h5 id="require-vs-require_relative"><code class="highlighter-rouge">require</code> vs. <code class="highlighter-rouge">require_relative</code></h5>

<p>Here‚Äôs a quick overview of <em>how</em> <code class="highlighter-rouge">require</code> and <code class="highlighter-rouge">require_relative</code> work.</p>

<p><code class="highlighter-rouge">require_relative</code> attempts to require a second file using a path relative to <em>the file that is requiring it</em>.</p>

<ul>
  <li>Does NOT matter where you run the test from (searches for path relative to the file the requirement is in)</li>
  <li>As directory structure gets more complex, navigating relative to the file you require come can become convoluted (<code class="highlighter-rouge">require_relative '../../../lib/enigma'</code>) üôÄ.</li>
</ul>

<p><code class="highlighter-rouge">require</code> attempts to require a second file relative to <em>the place</em> from which the first file is <strong>being run</strong> ‚Äì that is, relative to your present working directory when you type <code class="highlighter-rouge">ruby file_one.rb</code></p>

<ul>
  <li>DOES matter where you run the test from</li>
  <li>require tends to behave more consistently in complex scenarios and project structures (<code class="highlighter-rouge">require './lib/enigma'</code>)</li>
  <li>require is also what we‚Äôll use for external gems and libraries. This is because‚Ä¶
    <ul>
      <li>require is designed to cooperate with ruby‚Äôs $LOAD_PATH</li>
      <li>Rails assumes we‚Äôre running from the main project directory.</li>
    </ul>
  </li>
</ul>

<h4 id="err-on-the-side-of-require">Err on the Side of <code class="highlighter-rouge">require</code></h4>

<p>Consider a project with the following structure.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
‚îú‚îÄ‚îÄ lib
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ enigma.rb
‚îî‚îÄ‚îÄ test
    ‚îú‚îÄ‚îÄ enigma_test.rb
</code></pre></div></div>

<p>Generally within the Ruby community it is assumed that you will be running your test files from the <code class="highlighter-rouge">project/</code> directory <em>and not from within the <code class="highlighter-rouge">/test</code> directory</em>.</p>

<p><strong>Avoid the temptation to navigate into go into test or lib directories through terminal to run code (i.e. <code class="highlighter-rouge">test$ ruby enigma_test</code>). Use <code class="highlighter-rouge">enigma$ ruby test/enigma_test.rb</code> instead.</strong></p>

<h5 id="why-do-we-prefer-require">Why do we prefer <code class="highlighter-rouge">require</code>?</h5>

<p>Assuming the directory structure above, <code class="highlighter-rouge">enigma_test.rb</code> could include either of the following lines (remember you can leave <code class="highlighter-rouge">.rb</code> off when you are requiring a file):</p>

<p><code class="highlighter-rouge">require './lib/enigma'</code>
<code class="highlighter-rouge">require_relative '../lib/enigma'</code></p>

<p>If you are running your test files from within the <code class="highlighter-rouge">project</code> directory, both of these will work the same. If you move down into the <code class="highlighter-rouge">project/test</code> directory, the first would then be unable to find the <code class="highlighter-rouge">enigma.rb</code> file. So why would we use something that might break depending on where we execute our code? Well, there are tradeoffs.</p>

<p>What seems more brittle in this case is likely actually more resilient to future changes. Remember the example above: if our application and test suite grow, we may decide that we want to include subdirectories for our tests. If we use <code class="highlighter-rouge">require_relative</code> that means that we have to add a <code class="highlighter-rouge">../</code> to each and every one of our tests. If we use <code class="highlighter-rouge">require</code> we can simply move our files to a new subdirectory and continue to run our tests from the <code class="highlighter-rouge">project</code> directory as we have been doing.</p>

<p>Additionally, using require tends to be more common within the community. Programmers get worked up about weird things and sometimes it‚Äôs best to just <code class="highlighter-rouge">go with the flow</code>.</p>

<h5 id="check-for-understanding">Check for Understanding</h5>

<p>Create a <code class="highlighter-rouge">greeting</code> directory and set up the following code in <code class="highlighter-rouge">lib/hello.rb</code> and <code class="highlighter-rouge">test/hello_test.rb</code> files. Experiment with which path formats you can get working in each scenario in the table below and record the path there.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Hello</span>
  <span class="k">def</span> <span class="nf">greet</span>
    <span class="err">‚Äú</span><span class="no">Hello</span><span class="p">,</span> <span class="no">World</span><span class="o">!</span><span class="err">‚Äù</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"minitest/autorun"</span>
                  <span class="c1"># bring in the source code here</span>

<span class="k">class</span> <span class="nc">HelloTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_it_greets</span>
    <span class="n">hello</span> <span class="o">=</span> <span class="no">Hello</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">assert_equal</span> <span class="err">‚Äú</span><span class="no">Hello</span><span class="p">,</span> <span class="no">World</span><span class="o">!</span><span class="err">‚Äù</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="nf">greet</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>require type</strong></th>
      <th style="text-align: center">running file from project directory</th>
      <th style="text-align: center">running file from test directory</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code class="highlighter-rouge">require</code></td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="highlighter-rouge">require_relative</code></td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="rakefiles-and-test-runners">Rakefiles and Test Runners</h2>

<p>Rake tasks come from <a href="https://www.computerhope.com/unix/umake.htm">make</a> tasks, Unix origins. They are used for task management and building projects. For a C project, ‚Äúbuilding‚Äù means compiling and verifying that things work. Ruby projects don‚Äôt get compiled, so what does ‚Äúbuilding‚Äù mean for a Ruby project?</p>

<p>Rake tries to create a standardized solution for this problem so that you can interact with build and program prep the same no matter which application you‚Äôre running. Not only does it give you set commands, but you can also build your own tasks and run them through Rake.</p>

<p>By default, Rake will look for a file name <code class="highlighter-rouge">Rakefile</code> in the root of your project. You‚Äôll define your RakeTasks in that file.</p>

<h3 id="using-rake-to-build-a-task">Using Rake to Build a Task</h3>

<p>A task is comprised of the keyword <code class="highlighter-rouge">task</code> followed by the name you assign to the task written as a symbol (<code class="highlighter-rouge">:task_name</code>). This gets passed a block of code (<code class="highlighter-rouge"> do ...end</code> - similar to how we pass a block of code to the <code class="highlighter-rouge">.each</code> method).</p>

<p>Let‚Äôs build your first Rake task!</p>

<p><strong>Independent Practice</strong><br />
For your <code class="highlighter-rouge">greeting</code> project, include a Rakefile. Reminder: it should be at the root of a project, and does not have a file extension.</p>

<p><strong>Whole Group</strong></p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Rakefile</span>

<span class="n">desc</span> <span class="s2">"a rake welcome message"</span>
<span class="n">task</span> <span class="ss">:welcome</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"Welcome to Rake tasks!"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This task would then be run from the command line using <code class="highlighter-rouge">rake welcome</code> (from the <strong>project root</strong> ‚Äì noticing a pattern?) We can also run <code class="highlighter-rouge">rake -T</code> to see which Rake commands we‚Äôve defined and what they do.</p>

<h3 id="building-a-test-task">Building a Test Task</h3>

<p>Let‚Äôs build a task that will run all our tests. Our objective is to be able to go into the root directory of your project, type <code class="highlighter-rouge">rake test</code>, and run our test suite (all of your tests) with that one command. You‚Äôll need to use <code class="highlighter-rouge">*</code> to pull in files of various names but still end in <code class="highlighter-rouge">_test.rb</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">desc</span> <span class="s2">"run all tests"</span>
<span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">ruby</span> <span class="s2">"test/*_test.rb"</span>   <span class="c1"># what is this line doing?</span>
<span class="k">end</span>
</code></pre></div></div>

<p>So here‚Äôs the thing, that code up there only runs one thing. It‚Äôs hard to see right now - let‚Äôs add in a <code class="highlighter-rouge">goodbye</code> class that does something similar (but opposite) to hello. Now run <code class="highlighter-rouge">rake test</code> and notice - it only runs one of the tests.</p>

<p>What do we have to do to get all of it to run? Pop this inside of the <code class="highlighter-rouge">do ... end</code> block:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> my_files = FileList['test/**/*.rb']
  my_files.each do |file|
    ruby file
  end
</code></pre></div></div>

<p>Look at that! We are getting a list of all of the files in our test directory, and we are enumerating over the list of files and then we are just going to run each one.</p>

<p>This is great, but we are missing something. Each runs individually, and once we have multiple classes tested we have to scroll up a lot. This is what we would call less than ideal. How do we get everything to run altogether - as if it was one big test file?</p>

<p>Have your Rakefile look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'rake/testtask'

Rake::TestTask.new do |t|
    t.pattern = "test/**/*_test.rb"
end

</code></pre></div></div>

<p><code class="highlighter-rouge">testtask</code> is a thing built into Rake that will do that for us, we just need to follow the format above.</p>

<h3 id="default">Default</h3>

<p>If you run the command <code class="highlighter-rouge">rake</code> without any further arguments, Rake will automatically look for a task named <code class="highlighter-rouge">default</code>. We can also set up a Rake task to have prerequisites - that is other tasks that must be run before the current task is run. If you set a prerequisite, Rake will automatically run those other tasks first, you don‚Äôt even have to worry about it. Using this knowledge, we can add the following to our Rakefile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">task</span> <span class="ss">default: </span><span class="p">[</span><span class="s2">"test"</span><span class="p">,</span> <span class="s2">"welcome"</span><span class="p">]</span>
</code></pre></div></div>

<p>This will run both our <code class="highlighter-rouge">test</code> and <code class="highlighter-rouge">welcome</code> tasks when we run <code class="highlighter-rouge">rake</code>, but only those two, as those two are the two that appear in the default array.</p>

<h4 id="exercise-1">Exercise</h4>
<p>Update your current project to follow these conventions!</p>

<h2 id="wrap-up">Wrap Up</h2>
<ul>
  <li>How does require_relative work?</li>
  <li>How does require work?</li>
  <li>Which does Ruby convention prefer?</li>
  <li>What is a Rake Task? Why would you use one?</li>
  <li>What are the components of a Rake Task?</li>
</ul>

<h3 id="recommended-homework">Recommended Homework</h3>

<p>Tonight:</p>
<ul>
  <li>Update at least one previous project (Credit Check, Date Night, Enigma, Complete Me) to also follow these conventions.</li>
</ul>

<h3 id="additional-resources">Additional Resources</h3>

<ul>
  <li><a href="http://www.stuartellis.name/articles/rake/">Using Rake to Automate Tasks</a></li>
  <li>You may see alternate patterns in older Ruby Versions <a href="https://docs.ruby-lang.org/en/2.1.0/Rake/TestTask.html">Testing Rake Task</a></li>
</ul>
:ET