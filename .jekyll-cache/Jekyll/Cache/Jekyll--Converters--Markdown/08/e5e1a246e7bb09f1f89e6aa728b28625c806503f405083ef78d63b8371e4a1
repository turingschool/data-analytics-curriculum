I"ò3<h2 id="warm-up">Warm Up</h2>

<ul>
  <li>In SetList, what does a User do to visit the Songs index?
    <ul>
      <li>What actions do they take?</li>
      <li>What do they click on?</li>
      <li>What do they type?</li>
    </ul>
  </li>
  <li>What does a user expect when visiting the Songs index?</li>
</ul>

<h2 id="setup">Setup</h2>

<p>This lesson builds off of the <a href="./active_record_associations">ActiveRecord Associations Lesson</a>. You can find the completed code from this lesson on the <code class="highlighter-rouge">ar_associations</code> branch of <a href="https://github.com/turingschool-examples/set_list/tree/ar_associations">this repo</a></p>

<h2 id="gems">Gems</h2>

<p>Add the following Gems to your Gemfile. Since these are all testing/debugging tools, we will add them inside the existing <code class="highlighter-rouge">group :development, :test</code> block:</p>

<ul>
  <li><code class="highlighter-rouge">rspec-rails</code> = our test suite</li>
  <li><code class="highlighter-rouge">capybara</code> = gives us tools for feature testing</li>
  <li><code class="highlighter-rouge">launchy</code> = allows us to save_and_open_page to see a live version on the browser</li>
  <li><code class="highlighter-rouge">simplecov</code> = track test coverage</li>
</ul>

<p>Your Gemfile should now have:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'rspec-rails'</span>
  <span class="n">gem</span> <span class="s1">'capybara'</span>
  <span class="n">gem</span> <span class="s1">'launchy'</span>
  <span class="n">gem</span> <span class="s1">'simplecov'</span>
  <span class="n">gem</span> <span class="s1">'pry'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Always run <code class="highlighter-rouge">bundle install</code> whenever you update your Gemfile.</p>

<h2 id="install-and-set-up-rspec">Install and set up RSpec</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails g rspec:install
</code></pre></div></div>

<p>What new files did this generate?</p>

<ul>
  <li><code class="highlighter-rouge">./.rspec</code> file</li>
  <li>a whole <code class="highlighter-rouge">./spec/</code> directory</li>
  <li><code class="highlighter-rouge">./spec/rails_helper.rb</code> is the new <code class="highlighter-rouge">spec_helper</code>, holds Rails-specific configurations</li>
  <li><code class="highlighter-rouge">./spec/spec_helper.rb</code> - where we keep all specs that don‚Äôt depend on rails</li>
</ul>

<h2 id="configure-simplecov">Configure SimpleCov</h2>

<p>At the top of your <code class="highlighter-rouge">rails_helper.rb</code>, add these lines:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'simplecov'</span>
<span class="no">SimpleCov</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<h1 id="feature-testing">Feature Testing</h1>

<h2 id="what-are-feature-tests">What are Feature Tests?</h2>

<ul>
  <li>Feature tests mimic the behavior of the user: In the case of web apps, this behavior will be clicking, filling in forms, visiting new pages, etc.</li>
  <li>Just like a user, the feature test should not need to know about underlying code</li>
  <li>Based on user stories</li>
</ul>

<h2 id="what-are-user-stories">What are User Stories?</h2>

<ul>
  <li>A tool used to communicate user needs to software developers.</li>
  <li>They are used in Agile Development, and it was first introduced in 1998 by proponents of Extreme Programming.</li>
  <li>They describe what a user needs to do in order to fulfill a function.</li>
  <li>They are part of our ‚Äútop-down‚Äù design.</li>
</ul>

<pre><code class="language-txt">As a user
When I visit the home page
And I click on the link New Task
Then I see a form to create a task

And I fill in title
And I fill in description
And I click submit
Then my task is saved
</code></pre>

<p>We can generalize this pattern as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a [user/user-type]
When I [action]
And I [action]
And I [action]
...
Then [expected result]
</code></pre></div></div>

<p>Depending on how encompassing a user story is, you may want to break a single user story into multiple, smaller user stories.</p>

<h2 id="capybara-feature-testing-tools">Capybara: Feature Testing Tools</h2>

<p><a href="https://github.com/teamcapybara/capybara#using-capybara-with-rspec">Capybara</a></p>

<p>Capybara is a Ruby test framework that allows you to feature test any RACK-based app.</p>

<p>It provides a DSL (domain specific language) to help you query and interact with the DOM.</p>

<p>For example, the following methods are included in the Capybara DSL:</p>

<ul>
  <li><code class="highlighter-rouge">visit '/path'</code></li>
  <li><code class="highlighter-rouge">expect(current_path).to eq('/')</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_content("Content")</code></li>
  <li><code class="highlighter-rouge">within ".css-class"  { Assertions here }</code></li>
  <li><code class="highlighter-rouge">within "#css-id"  { Assertions here }</code></li>
  <li><code class="highlighter-rouge">fill_in "identifier", with: "Content"</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_link("Click here")</code></li>
  <li><code class="highlighter-rouge">click_link "Click Here"</code></li>
  <li><code class="highlighter-rouge">expect(page).to have_button("Submit")</code></li>
  <li><code class="highlighter-rouge">click_button "Submit"</code></li>
  <li><code class="highlighter-rouge">click_on "identifier"</code></li>
</ul>

<h2 id="always-always-always-write-tests-first">Always, Always, Always, Write Tests First</h2>

<p>As usual, we are going to TDD our applications. There are two approaches we could take here:</p>

<ol>
  <li>Bottom Up: Start with the smallest thing you can build and work your way up. In the context of a web app, this means you start at the database level (model tests).</li>
  <li>Top Down: Start at the end goal and work your way down. In the context of a web app, this means you start by thinking about how a user interacts with the application (feature tests).</li>
</ol>

<p>Both are valid approaches. We are going to work Top Down.</p>

<h2 id="testing-the-songs-index">Testing the Songs Index</h2>

<p>Thinking back to the warmup, let‚Äôs write a user story for our Songs index:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a user,
when I visit '/songs'
I see each song's title and play count
</code></pre></div></div>

<p>First, let‚Äôs make a directory for our feature tests:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>spec/features
</code></pre></div></div>

<p>And a directory for all features related to <code class="highlighter-rouge">songs</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>spec/features/songs
</code></pre></div></div>

<p>Finally, create your test file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>spec/features/songs/index_spec.rb
</code></pre></div></div>

<p>The names of the files you create for feature testing MUST end in <code class="highlighter-rouge">_spec.rb</code>. Without that ‚Äòspec‚Äô part of the filename, RSpec will completely ignore the file.</p>

<p>How many tests should go in one file? It‚Äôs totally up to you, but having multiple tests in a file is marginally faster than putting a single test in a single file. Also, grouping lots of tests into one file allows you to share the setup across your tests.</p>

<p>You can group your test files into subfolders to organize them in a similar format to your <code class="highlighter-rouge">/app/views</code> folder, and can help with strong organization. Every team you work on, every job you have, could have a completely different organizational method for test files, so keep that ‚Äògrowth mindset‚Äô and be flexible!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/spec
/spec/features
/spec/features/songs
/spec/features/songs/index_spec.rb
/spec/features/songs/user_can_see_all_songs_spec.rb
/spec/features/songs/user_can_see_one_song_spec.rb
etc
</code></pre></div></div>

<p>Inside our <code class="highlighter-rouge">index_spec.rb </code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"songs index page"</span><span class="p">,</span> <span class="ss">type: :feature</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"can see all songs titles and play count"</span> <span class="k">do</span>
    <span class="n">song_1</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title:       </span><span class="s2">"I Really Like You"</span><span class="p">,</span>
                         <span class="ss">length:      </span><span class="mi">208</span><span class="p">,</span>
                         <span class="ss">play_count:  </span><span class="mi">243810867</span><span class="p">)</span>
    <span class="n">song_2</span> <span class="o">=</span> <span class="no">Song</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title:       </span><span class="s2">"Call Me Maybe"</span><span class="p">,</span>
                         <span class="ss">length:      </span><span class="mi">199</span><span class="p">,</span>
                         <span class="ss">play_count:  </span><span class="mi">1214722172</span><span class="p">)</span>

    <span class="n">visit</span> <span class="s2">"/songs"</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_1</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Play Count: </span><span class="si">#{</span><span class="n">song_1</span><span class="p">.</span><span class="nf">play_count</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">song_2</span><span class="p">.</span><span class="nf">title</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Play Count: </span><span class="si">#{</span><span class="n">song_2</span><span class="p">.</span><span class="nf">play_count</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="practice">Practice</h2>

<p>Write a test for the following user stories. Then, use TDD to implement the feature.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Practice User Story 1

As a user
When I visit a Song show page
Then I see the song's title, length, and play count
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Practice User Story 2

As a user
When I visit a Song show page
I see a link back to the songs index page
When I click this link
Then I am taken to the songs index
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Practice User Story 3

As a user
When I visit an Artist's show page
Then I see the Artist's name
And I see the Artist's average song lenth
And I see the Artist's total song count
</code></pre></div></div>

<h2 id="checks-for-understanding">Checks for Understanding</h2>

<ul>
  <li>What is a Feature Test?</li>
  <li>What is Capybara?</li>
  <li>What are User Stories?</li>
</ul>
:ET