I"V<h2 id="learning-goals">Learning Goals</h2>

<ul>
  <li>Understand the cost/benefit trade-offs of using arrays via linked lists</li>
  <li>Understand and speak to several optimizations for linked lists</li>
  <li>Utilize problem solving process to solve linked-list problems</li>
</ul>

<h2 id="warm-up-7-mins">Warm Up (7 mins)</h2>

<p><em>Part I:</em>  Prework Review (3 mins)</p>
<ul>
  <li>Talk about the Stack Overflow thread from the <a href="https://stackoverflow.com/questions/393556/when-to-use-a-linked-list-over-an-array-array-list">prep work</a> with the person next to you (3 mins)</li>
  <li>Describe a linked list</li>
  <li>Compare and contrast linked lists with arrays</li>
  <li>What criteria would you use to assess whether to use a linked list or an array?</li>
</ul>

<p><em>Part II:</em> Group Synthesis (4 mins)</p>

<h2 id="memory-management-5-mins">Memory management (5 mins)</h2>

<h3 id="random-access-memory">Random Access Memory</h3>
<ul>
  <li>Memory =&gt; storage shelfs</li>
  <li>Memory controller does read/write</li>
  <li>Processor connected directly to a memory controller</li>
  <li>Nearby addresses are cached</li>
  <li>Processor saves time when pulling from nearby memory addresses/cache
    <ul>
      <li>Linked Lists =&gt; non-contiguous storage
        <ul>
          <li>better insertion/deletion</li>
        </ul>
      </li>
      <li>arrays =&gt; contiguous storage
        <ul>
          <li>better search</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="optimizations-5-mins">Optimizations (5 mins)</h2>

<h3 id="doubly-linked-lists">Doubly Linked Lists</h3>

<h5 id="advantages">Advantages</h5>

<ul>
  <li>traverse forward and backward (better for searching)</li>
  <li>can be used to implement queues</li>
</ul>

<h5 id="disadvantages">Disadvantages</h5>

<ul>
  <li>extra memory -&gt; previous pointer</li>
</ul>

<h3 id="circular-linked-lists">Circular Linked Lists</h3>

<h5 id="advantages-1">Advantages</h5>

<ul>
  <li>Solving circular problems =&gt; Round Robin</li>
  <li>List can be traversed starting at any node</li>
</ul>

<h5 id="disadvantages-1">Disadvantages</h5>

<ul>
  <li>Finding end/beginning of list is harder with no null</li>
</ul>

<h3 id="runner-technique">Runner Technique</h3>

<ul>
  <li>AKA Floyd’s Cycle Algorithm or Tortoise &amp; Hare</li>
  <li>Iterate through LL with 2 pointers simultaneously</li>
</ul>

<h5 id="the-algorithim">The algorithim</h5>

<ol>
  <li>Initialize two pointers (tortoise and hare) that both point to the head of the linked list</li>
  <li>Loop as long as the hare does not reach null</li>
  <li>Set tortoise to next node</li>
  <li>Set hare to next, next node</li>
  <li>If they are at the same node, a loop is confirmed.</li>
</ol>

<h2 id="paired-challenge-25-mins">Paired Challenge (25 mins)</h2>

<h4 id="-1-reverse-a-singly-linked-list-without-recursion"># 1 Reverse a singly linked list (without recursion)</h4>

<p><a href="https://repl.it/@thatpamiam/Reverse-linked-list">Repl.it - Reverse linked list</a><br />
<em>Example:</em><br />
<em>Input:</em> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br />
<em>Output:</em> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>

<p><strong><em>Extension:</em></strong> <em>How would you reverse a doubly linked list?</em></p>

<h4 id="-2-detecting-a-loop-in-a-singly-linked-list"># 2 Detecting a loop in a singly linked list</h4>

<p><a href="https://repl.it/@thatpamiam/Detecting-a-loop">Repl.it - Detecting a loop</a><br />
<em>Example:</em><br />
<em>Input:</em> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;1…<br />
<em>Output:</em> TRUE</p>

<p><strong><em>Extension:</em></strong> <em>How would you determine what node is the “start” of the loop?</em></p>

<h2 id="closing-reflection-8-mins">Closing Reflection (8 mins)</h2>

<ul>
  <li>Why use a linked list over an array? Or an array over a linked list?</li>
  <li>What went well with your process during the paired challenge? What didn’t go well? What can you change for next time?</li>
</ul>

<p><a href="https://github.com/turingschool/front-end-keys/blob/master/module-4/berlin/cs_2_linked_list_solutions.md">Instructor Resources</a></p>
:ET