{
	"info": {
		"_postman_id": "1cc49aa0-2dfe-477a-980d-572ee4dcd2ba",
		"name": "Rails Engine",
		"description": "Turing School of Software & Design, Backend Module 3 Solo Project\n\n\"Rails Engine\" is a Rails-based API which mimics an e-commerce platform reporting tool as an API. Users can query and store merchants and items, and retrieve information about an item's merchant, or a list of a merchant's items. Users can also run one of several \"business intelligence\" endpoints to do rich reporting using ActiveRecord queries.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. RESTful CRUD endpoints",
			"item": [
				{
					"name": "1a. Merchants",
					"item": [
						{
							"name": "Get All Merchants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch monthly revenue\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const merchant_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_merchant = data[0];",
											"",
											"    // now check that the whole schema matches and has 2483 items",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(20);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 1 attribute",
											"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(1);",
											"",
											"    pm.expect(first_merchant.attributes.name).to.eq(pm.globals.get('first_merchant_name'));",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?page=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetching page 1 is the same list of first 20 in db', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('first_merchant_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?page=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, fetching page 1 if page is 0 or lower', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('first_merchant_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?page=2', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch second page of 20 merchants', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('twenty_first_merchant_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?per_page=50', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch first page of 50 merchants', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(50);",
											"        pm.expect(payload.data[20].attributes.name).to.eq(pm.globals.get('twenty_first_merchant_name'));",
											"        pm.expect(payload.data[49].attributes.name).to.eq(pm.globals.get('fiftieth_merchant_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?page=200', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch a page of merchants which would contain no data', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(0);",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants?per_page=200', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch all merchants if per page is really big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(100);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('first_merchant_name', 'Schroeder-Jerde');",
											"pm.globals.set('twenty_first_merchant_name', 'Leffler, Rice and Leuschke');",
											"pm.globals.set('fiftieth_merchant_name', 'Paucek Inc');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/merchants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"merchants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Merchant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('merchant_id', 42);",
											"",
											"pm.globals.set('merchant_name', 'Glover Inc');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch one merchant by id\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": { \"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": { \"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 1 attribute",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(String(pm.globals.get('merchant_id')));",
											"    pm.expect(data.type).to.eq('merchant');",
											"    pm.expect(data.attributes.name).to.eq(pm.globals.get('merchant_name'));",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297', (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/string-instead-of-integer', (error, response) => {",
											"    pm.test('edge case, string id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"merchants",
										"{{merchant_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Merchant's Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('merchant_id', 99);",
											"",
											"pm.globals.set('expected_item_ids', [",
											"    2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,",
											"    2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,",
											"    2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426,",
											"    2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436,",
											"    2437, 2438",
											"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch all items\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const item_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\"},",
											"                    \"description\": { \"type\": \"string\"},",
											"                    \"unit_price\": { \"type\": \"number\"},",
											"                    \"merchant_id\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_item = data[0];",
											"",
											"    // now check that the whole schema matches and has the right number of items",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(pm.globals.get('expected_item_ids').length);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_item).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 4 attributes",
											"    pm.expect(Object.keys(first_item.attributes).length).to.eq(4);",
											"",
											"    // double check that every ID in our list of expected IDs is in the actual data",
											"    // we've already matched that the count of elements matched above",
											"    var ids_in_payload = data.map(data => Number(data.id))",
											"    ids_in_payload.sort();",
											"    var expected_ids = pm.globals.get('expected_item_ids');",
											"    expected_ids.sort();",
											"    expected_ids.forEach((num,idx) => {",
											"        pm.expect(expected_ids[idx]).to.eq(ids_in_payload[idx]);",
											"    })",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/8923987297/items', (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/string-instead-of-integer/items', (error, response) => {",
											"    pm.test('edge case, string id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/merchants/{{merchant_id}}/items",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"merchants",
										"{{merchant_id}}",
										"items"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1b. Items",
					"item": [
						{
							"name": "Get All Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch all items\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const item_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\"},",
											"                    \"description\": { \"type\": \"string\"},",
											"                    \"unit_price\": { \"type\": \"number\"},",
											"                    \"merchant_id\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_item = data[0];",
											"",
											"    // now check that the whole schema matches and has 2483 items",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(20);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_item).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 4 attributes",
											"    pm.expect(Object.keys(first_item.attributes).length).to.eq(4);",
											"",
											"    pm.expect(first_item.attributes.name).to.eq(pm.globals.get('first_item_name'));",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?page=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetching page 1 is the same list of first 20 in db', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('first_item_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?page=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, fetching page 1 if page is 0 or lower', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('first_item_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?page=2', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch second page of 20 items', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(20);",
											"        pm.expect(payload.data[0].attributes.name).to.eq(pm.globals.get('twenty_first_item_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?per_page=50', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch first page of 50 items', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(50);",
											"        pm.expect(payload.data[20].attributes.name).to.eq(pm.globals.get('twenty_first_item_name'));",
											"        pm.expect(payload.data[49].attributes.name).to.eq(pm.globals.get('fiftieth_item_name'));",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?page=20000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch a page of items which would contain no data', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(0);",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items?per_page=250000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, fetch all items if per page is really big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(pm.globals.get('total_item_count'));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('first_item_name', 'Item Nemo Facere' );",
											"pm.globals.set('twenty_first_item_name', 'Item Rerum Ab');",
											"pm.globals.set('fiftieth_item_name', 'Item Sunt Nesciunt');",
											"",
											"pm.globals.set('total_item_count', 2483);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/items",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('item_id', 179);",
											"",
											"pm.globals.set('item_name', 'Item Qui Veritatis');",
											"pm.globals.set('item_description', 'Totam labore quia harum dicta eum consequatur qui. Corporis inventore consequatur. Illum facilis tempora nihil placeat rerum sint est. Placeat ut aut. Eligendi perspiciatis unde eum sapiente velit.');",
											"pm.globals.set('item_price', 906.17);",
											"pm.globals.set('item_merchant_id', 9);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch one item by id\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": { \"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": { \"type\": \"string\"},",
											"                            \"description\": { \"type\": \"string\"},",
											"                            \"unit_price\": { \"type\": \"number\"},",
											"                            \"merchant_id\": { \"type\": \"number\"},",
											"                        },",
											"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 4 attributes",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(String(pm.globals.get('item_id')));",
											"    pm.expect(data.type).to.eq('item');",
											"    pm.expect(data.attributes.name).to.eq(pm.globals.get('item_name'));",
											"    pm.expect(data.attributes.description).to.eq(pm.globals.get('item_description'));",
											"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('item_price'));",
											"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('item_merchant_id'));",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items/8923987297', (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items/string-instead-of-integer', (error, response) => {",
											"    pm.test('edge case, string id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/items/{{item_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"items",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create (then Delete) One Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should be okay to process\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(201);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": { \"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": { \"type\": \"string\"},",
											"                            \"description\": { \"type\": \"string\"},",
											"                            \"unit_price\": { \"type\": \"number\"},",
											"                            \"merchant_id\": { \"type\": \"number\"},",
											"                        },",
											"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var id_to_delete = Number(data.id);",
											"    var url = `http://localhost:3000/api/v1/items/${id_to_delete}`",
											"    console.log('calling DELETE for', url)",
											"    pm.sendRequest({url: url, method: 'DELETE'}, function (err, response) {",
											"        if (err) {",
											"            console.log(err);",
											"        }",
											"    });",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 4 attributes",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.type).to.eq('item');",
											"    pm.expect(data.id).to.eq(String(id_to_delete));",
											"    pm.expect(data.attributes.name).to.eq(pm.globals.get('item_name'));",
											"    pm.expect(data.attributes.description).to.eq(pm.globals.get('item_description'));",
											"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('item_price'));",
											"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('item_merchant_id'));",
											"});",
											"",
											"// TODO: sad path where attribute types are not correct",
											"// TODO: edge case where all attributes are missing",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('item_name', 'Shiny Itemy Item');",
											"pm.globals.set('item_description', 'It does a lot of things real good.');",
											"pm.globals.set('item_price', 123.45);",
											"pm.globals.set('item_merchant_id', 43);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{item_name}}\",\n  \"description\": \"{{item_description}}\",\n  \"unit_price\": {{item_price}},\n  \"merchant_id\": {{item_merchant_id}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/items",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update One Item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('item_id', 179);",
											"",
											"pm.sendRequest(`http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    } else {",
											"        var data = response.json().data;",
											"console.log(data);",
											"        pm.globals.set('old_item_name', data.attributes.name);",
											"        pm.globals.set('old_item_description', data.attributes.description);",
											"        pm.globals.set('old_item_price', data.attributes.unit_price);",
											"        pm.globals.set('old_item_merchant_id', data.attributes.merchant_id);",
											"    }",
											"});",
											"",
											"pm.globals.set('new_item_name', 'Shiny Itemy Item, New and Improved');",
											"pm.globals.set('new_item_description', 'It does a lot of things even more good than before!');",
											"pm.globals.set('new_item_price', 65.23);",
											"pm.globals.set('new_item_merchant_id', 56);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch one item by id\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": { \"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": { \"type\": \"string\"},",
											"                            \"description\": { \"type\": \"string\"},",
											"                            \"unit_price\": { \"type\": \"number\"},",
											"                            \"merchant_id\": { \"type\": \"number\"},",
											"                        },",
											"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // restore item to what it used to be",
											"    if (pm.globals.get('old_item_name') !== null) {",
											"        const postRequest = {",
											"            url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
											"            method: 'PUT',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: JSON.stringify({",
											"                name: pm.globals.get('old_item_name'),",
											"                description: pm.globals.get('old_item_description'),",
											"                unit_price: pm.globals.get('old_item_price'),",
											"                merchant_id: pm.globals.get('old_item_merchant_id')",
											"            })",
											"        };",
											"        pm.sendRequest(postRequest, (error, response) => {",
											"            console.log(error ? error : response.json());",
											"        });",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 4 attributes",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(String(pm.globals.get('item_id')));",
											"    pm.expect(data.type).to.eq('item');",
											"    pm.expect(data.attributes.name).to.eq(pm.globals.get('new_item_name'));",
											"    pm.expect(data.attributes.description).to.eq(pm.globals.get('new_item_description'));",
											"    pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('new_item_price'));",
											"    pm.expect(data.attributes.merchant_id).to.eq(pm.globals.get('new_item_merchant_id'));",
											"});",
											"",
											"",
											"var item_url = `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`;",
											"console.log('happy path with partial data', item_url);",
											"pm.sendRequest({",
											"    url: item_url,",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: JSON.stringify({",
											"        unit_price: pm.globals.get('new_item_price'),",
											"    })",
											"}, (error, response) => {",
											"    pm.test('happy path, works with only partial data, too', () => {",
											"        pm.expect(response.code).to.be.oneOf([200,201,202]);",
											"",
											"        // restore the old price immediately",
											"        if (pm.globals.get('old_item_name') !== null) {",
											"            const postRequest = {",
											"                url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
											"                method: 'PUT',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: JSON.stringify({",
											"                    unit_price: pm.globals.get('old_item_price'),",
											"                })",
											"            };",
											"            pm.sendRequest(postRequest, (error, response) => {",
											"                console.log(error ? error : response.json());",
											"            });",
											"        }",
											"",
											"        // expect a \"data\" attribute",
											"        pm.response.to.have.jsonBody('data');",
											"        var jsonData = pm.response.json();",
											"        var data = jsonData.data;",
											"    ",
											"        pm.expect(data.attributes.unit_price).to.eq(pm.globals.get('new_item_price'));",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"    url: `http://localhost:3000/api/v1/items/12435678912354`,",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: JSON.stringify({",
											"        name: pm.globals.get('old_item_name'),",
											"        description: pm.globals.get('old_item_description'),",
											"        unit_price: pm.globals.get('old_item_price'),",
											"        merchant_id: pm.globals.get('old_item_merchant_id')",
											"    })",
											"}, (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"    url: `http://localhost:3000/api/v1/items/${pm.globals.get('item_id')}`,",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: JSON.stringify({",
											"        merchant_id: 999999999999",
											"    })",
											"}, (error, response) => {",
											"    pm.test('edge case, bad merchant id returns 400 or 404', () => {",
											"        pm.expect(response.code).to.be.oneOf([400, 404]);",
											"    });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `http://localhost:3000/api/v1/items/string-instead-of-integer`,",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: JSON.stringify({",
											"        name: pm.globals.get('old_item_name'),",
											"        description: pm.globals.get('old_item_description'),",
											"        unit_price: pm.globals.get('old_item_price'),",
											"        merchant_id: pm.globals.get('old_item_merchant_id')",
											"    })",
											"}, (error, response) => {",
											"    pm.test('edge case, string id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"// TODO: edge case where all attributes are missing",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{new_item_name}}\",\n    \"description\": \"{{new_item_description}}\",\n    \"unit_price\": {{new_item_price}},\n    \"merchant_id\": {{new_item_merchant_id}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/items/{{item_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"items",
										"{{item_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an Item's Merchant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('item_id', 209);",
											"",
											"pm.globals.set('merchant_name', 'Pollich and Sons');",
											"pm.globals.set('merchant_id', 11);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch one merchant by id\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": { \"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": { \"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 1 attribute",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(String(pm.globals.get('merchant_id')));",
											"    pm.expect(data.type).to.eq('merchant');",
											"    pm.expect(data.attributes.name).to.eq(pm.globals.get('merchant_name'));",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items/8923987297/merchants', (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/items/string-instead-of-integer/merchants', (error, response) => {",
											"    pm.test('edge case, string id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/items/{{item_id}}/merchant",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"items",
										"{{item_id}}",
										"merchant"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2. Non-RESTful endpoints",
			"item": [
				{
					"name": "2a. Search Items/Merchants by name (choose 1 set)",
					"item": [
						{
							"name": "Set One: Find one merchant, Find all items",
							"item": [
								{
									"name": "Find One Merchant by Fragment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set('merchants', [",
													"    'Schiller, Barrows and Parker',",
													"    'Tillman Group',",
													"    'Williamson Group',",
													"    'Willms and Sons'",
													"]);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"happy path, fetch one merchant by fragment\", function () {",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.have.status(200);",
													"",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"data\": {",
													"                \"type\": \"object\",",
													"                \"properties\": {",
													"                    \"id\": { \"type\": \"string\" },",
													"                    \"type\": { \"type\": \"string\" },",
													"                    \"attributes\": { ",
													"                        \"type\": \"object\",",
													"                        \"properties\": {",
													"                            \"name\": { \"type\": \"string\"},",
													"                        },",
													"                        \"required\": [\"name\"]",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"type\", \"attributes\"]",
													"            }",
													"        },",
													"        \"required\": ['data']",
													"    }",
													"",
													"    // expect a \"data\" attribute",
													"    pm.response.to.have.jsonBody('data');",
													"    var jsonData = pm.response.json();",
													"    var data = jsonData.data;",
													"",
													"    // now check that the whole schema matches by name and data type",
													"    pm.response.to.have.jsonSchema(schema);",
													"",
													"    // expect data has exactly 3 attributes",
													"    pm.expect(Object.keys(data).length).to.eq(3);",
													"",
													"    // expect that our \"attributes\" portion has exactly 1 attribute",
													"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
													"",
													"    // expect to find our merchant name in our expected list",
													"    pm.expect(pm.globals.get('merchants')).to.include(data.attributes.name)",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/merchants/find?name=NOMATCH', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment matched', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('object');",
													"        pm.expect(payload.data.keys).to.eq(undefined);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/merchants/find?name=', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment given', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('object');",
													"        pm.expect(payload.data.keys).to.eq(undefined);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/v1/merchants/find?name=iLl",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"merchants",
												"find"
											],
											"query": [
												{
													"key": "name",
													"value": "iLl"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find All Items by Fragment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set('items', [",
													"    'Item At Harum',",
													"    'Item Aut Harum',",
													"    'Item Cum Harum',",
													"    'Item Distinctio Harum',",
													"    'Item Dolores Harum',",
													"    'Item Explicabo Harum',",
													"    'Item Harum Cupiditate',",
													"    'Item Harum Dolorem',",
													"    'Item Harum Illo',",
													"    'Item Harum Ipsam',",
													"    'Item Harum Molestiae',",
													"    'Item Harum Omnis',",
													"    'Item Harum Repellat',",
													"    'Item Harum Voluptas',",
													"    'Item Harum Voluptatem',",
													"    'Item Illum Harum',",
													"    'Item Praesentium Harum',",
													"    'Item Repellendus Harum',",
													"]);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"happy path, fetch all items matching a pattern\", function () {",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.have.status(200);",
													"",
													"    const item_schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"string\" },",
													"            \"type\": { \"type\": \"string\" },",
													"            \"attributes\": { ",
													"                \"type\": \"object\",",
													"                \"properties\": {",
													"                    \"name\": { \"type\": \"string\"},",
													"                    \"description\":  { \"type\": \"string\"},",
													"                    \"unit_price\":  { \"type\": \"number\"},",
													"                    \"merchant_id\":  { \"type\": \"number\"},",
													"                },",
													"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"type\", \"attributes\"]",
													"    }",
													"",
													"    const base_schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"data\": {",
													"                \"type\": \"array\",",
													"            }",
													"        },",
													"        \"required\": ['data']",
													"    }",
													"",
													"    // expect a \"data\" attribute",
													"    pm.response.to.have.jsonBody('data');",
													"    var jsonData = pm.response.json();",
													"    var data = jsonData.data;",
													"    var first_item = data[0];",
													"",
													"    // now check that the whole schema matches and has 2483 items",
													"    pm.response.to.have.jsonSchema(base_schema);",
													"    pm.expect(data.length).to.eq(pm.globals.get('items').length);",
													"",
													"    // now inspect the first item's schema to ensure it also matches",
													"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
													"",
													"    // expect item data has exactly 3 attributes",
													"    pm.expect(Object.keys(first_item).length).to.eq(3);",
													"",
													"    // expect that our item \"attributes\" portion has exactly 4 attributes",
													"    pm.expect(Object.keys(first_item.attributes).length).to.eq(4);",
													"",
													"    var returnedNames = data.map(itemData => itemData.attributes.name);",
													"",
													"    returnedNames.sort();",
													"    returnedNames.forEach((name,idx) => {",
													"        pm.expect(returnedNames[idx]).to.eq(pm.globals.get('items')[idx]);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/items/find_all?name=NOMATCH', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment matched', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('array');",
													"        pm.expect(payload.data.length).to.eq(0);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/items/find_all?name=', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment given', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('array');",
													"        pm.expect(payload.data.length).to.eq(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/v1/items/find_all?name=hArU",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"items",
												"find_all"
											],
											"query": [
												{
													"key": "name",
													"value": "hArU"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Set Two: Find all merchants, Find one item",
							"item": [
								{
									"name": "Find All Merchants by Fragment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set('merchants', [",
													"    'Schiller, Barrows and Parker',",
													"    'Tillman Group',",
													"    'Williamson Group',",
													"    'Williamson Group',",
													"    'Willms and Sons'",
													"]);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"happy path, fetch all merchants matching a pattern\", function () {",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.have.status(200);",
													"",
													"    const merchant_schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"string\" },",
													"            \"type\": { \"type\": \"string\" },",
													"            \"attributes\": { ",
													"                \"type\": \"object\",",
													"                \"properties\": {",
													"                    \"name\": { \"type\": \"string\"},",
													"                },",
													"                \"required\": [\"name\"]",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"type\", \"attributes\"]",
													"    }",
													"",
													"    const base_schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"data\": {",
													"                \"type\": \"array\",",
													"            }",
													"        },",
													"        \"required\": ['data']",
													"    }",
													"",
													"    // expect a \"data\" attribute",
													"    pm.response.to.have.jsonBody('data');",
													"    var jsonData = pm.response.json();",
													"    var data = jsonData.data;",
													"    var first_merchant = data[0];",
													"",
													"    // now check that the whole schema matches and has 2483 items",
													"    pm.response.to.have.jsonSchema(base_schema);",
													"    pm.expect(data.length).to.eq(5);",
													"",
													"    // now inspect the first item's schema to ensure it also matches",
													"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
													"",
													"    // expect item data has exactly 3 attributes",
													"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
													"",
													"    // expect that our item \"attributes\" portion has exactly 1 attribute",
													"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(1);",
													"",
													"    var returnedNames = data.map(merchantData => merchantData.attributes.name);",
													"",
													"    returnedNames.sort();",
													"    returnedNames.forEach((name,idx) => {",
													"        pm.expect(returnedNames[idx]).to.eq(pm.globals.get('merchants')[idx]);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/merchants/find_all?name=NOMATCH', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment matched', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('array');",
													"        pm.expect(payload.data.length).to.eq(0);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/merchants/find_all?name=', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment given', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('array');",
													"        pm.expect(payload.data.length).to.eq(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/v1/merchants/find_all?name=ILL",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"merchants",
												"find_all"
											],
											"query": [
												{
													"key": "name",
													"value": "ILL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find One Item by Fragment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set('items', [",
													"    'Item At Harum',",
													"    'Item Aut Harum',",
													"    'Item Cum Harum',",
													"    'Item Distinctio Harum',",
													"    'Item Dolores Harum',",
													"    'Item Explicabo Harum',",
													"    'Item Harum Cupiditate',",
													"    'Item Harum Dolorem',",
													"    'Item Harum Illo',",
													"    'Item Harum Ipsam',",
													"    'Item Harum Molestiae',",
													"    'Item Harum Omnis',",
													"    'Item Harum Repellat',",
													"    'Item Harum Voluptas',",
													"    'Item Harum Voluptatem',",
													"    'Item Illum Harum',",
													"    'Item Praesentium Harum',",
													"    'Item Repellendus Harum',",
													"]);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"happy path, fetch one item by fragment\", function () {",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.have.status(200);",
													"",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"data\": {",
													"                \"type\": \"object\",",
													"                \"properties\": {",
													"                    \"id\": { \"type\": \"string\" },",
													"                    \"type\": { \"type\": \"string\" },",
													"                    \"attributes\": { ",
													"                        \"type\": \"object\",",
													"                        \"properties\": {",
													"                            \"name\": { \"type\": \"string\"},",
													"                            \"description\":  { \"type\": \"string\"},",
													"                            \"unit_price\":  { \"type\": \"number\"},",
													"                            \"merchant_id\":  { \"type\": \"number\"},                        },",
													"                        \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\"]",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"type\", \"attributes\"]",
													"            }",
													"        },",
													"        \"required\": ['data']",
													"    }",
													"",
													"    // expect a \"data\" attribute",
													"    pm.response.to.have.jsonBody('data');",
													"    var jsonData = pm.response.json();",
													"    var data = jsonData.data;",
													"",
													"    // now check that the whole schema matches by name and data type",
													"    pm.response.to.have.jsonSchema(schema);",
													"",
													"    // expect data has exactly 3 attributes",
													"    pm.expect(Object.keys(data).length).to.eq(3);",
													"",
													"    // expect that our \"attributes\" portion has exactly 4 attributes",
													"    pm.expect(Object.keys(data.attributes).length).to.eq(4);",
													"",
													"    // expect to find our merchant name in our expected list",
													"    pm.expect(pm.globals.get('items')).to.include(data.attributes.name)",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/items/find?name=NOMATCH', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment matched', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('object');",
													"        pm.expect(payload.data.keys).to.eq(undefined);",
													"    });",
													"});",
													"",
													"pm.sendRequest('http://localhost:3000/api/v1/items/find?name=', (error, response) => {",
													"    if (error) {",
													"        console.log(error);",
													"    }",
													"    pm.test('sad path, no fragment given', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.response.to.have.status(200);",
													"        var payload = response.json();",
													"        pm.expect(payload).to.have.property('data');",
													"        pm.expect(payload.data).to.be.an('object');",
													"        pm.expect(payload.data.keys).to.eq(undefined);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/v1/items/find?name=hArU",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"items",
												"find"
											],
											"query": [
												{
													"key": "name",
													"value": "hArU"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2b. Business Intelligence (choose any 4)",
					"item": [
						{
							"name": "Get Merchants with Most Revenue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('merchants', {",
											"    'Dicki-Bednar': 1148393.74,",
											"    \"Kassulke, O'Hara and Quitzon\": 1015275.15,",
											"    'Okuneva, Prohaska and Rolfson': 917424.86,",
											"    'Bechtelar, Jones and Stokes': 831493.84,",
											"    'Auer, Crooks and Shanahan': 829597.18,",
											"    'Pacocha-Mayer': 790702.25,",
											"    'Rath, Gleason and Spencer': 772778.60,",
											"    'Friesen, Hackett and Runte': 756151.37,",
											"    'Bernhard, Stanton and Funk': 748715.21,",
											"    'Terry-Moore': 741000.27,",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch top 10 merchants by revenue\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const merchant_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\"},",
											"                    \"revenue\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"name\", \"revenue\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_merchant = data[0];",
											"",
											"    // now check that the whole schema matches and has 10 merchants",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(10);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 2 attributes",
											"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(2);",
											"",
											"    pm.expect(first_merchant.type).to.eq('merchant_name_revenue');",
											"",
											"    var merchantNames = Object.keys(pm.globals.get('merchants'));",
											"    var merchantRevenues = Object.values(pm.globals.get('merchants'));",
											"    var returnedNames = data.map(merchantData => merchantData.attributes.name);",
											"    var roundedRevenues = data.map(merchantData => Math.round(merchantData.attributes.revenue*100)/100);",
											"",
											"    returnedNames.forEach((name,idx) => {",
											"        pm.expect(returnedNames[idx]).to.eq(merchantNames[idx]);",
											"        pm.expect(roundedRevenues[idx]).to.eq(merchantRevenues[idx]);",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, top one merchant by revenue', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(1);",
											"    ",
											"        var merchantNames = Object.keys(pm.globals.get('merchants'));",
											"        var merchantRevenues = Object.values(pm.globals.get('merchants'));",
											"        var roundedRevenues = payload.data.map(merchantData => Math.round(merchantData.attributes.revenue*100)/100);",
											"    ",
											"        pm.expect(payload.data[0].attributes.name).to.eq(merchantNames[0])",
											"        pm.expect(roundedRevenues[0]).to.eq(merchantRevenues[0])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=1000000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, all 100 merchants if quantity is too big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(100);",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, returns an error of some sort if quantity value is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=asdasd', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, returns an error of some sort if quantity is a string', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, quantity param is missing', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue/merchants?quantity=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue",
										"merchants"
									],
									"query": [
										{
											"key": "quantity",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Merchants who Sold Most Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('merchants', {",
											"    \"Kassulke, O'Hara and Quitzon\": 1653,",
											"    'Kozey Group': 1585,",
											"    'Thiel Inc': 1529,",
											"    'Okuneva, Prohaska and Rolfson': 1507,",
											"    'Daugherty Group': 1470,",
											"    'Marvin, Renner and Bauch': 1422,",
											"    'Rogahn LLC': 1407,",
											"    'Terry-Moore': 1397",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch top 8 merchants by items sold\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const merchant_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\" },",
											"                    \"count\": { \"type\": \"number\" }",
											"                },",
											"                \"required\": [\"name\",  \"count\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_merchant = data[0];",
											"",
											"    // now check that the whole schema matches and has all merchants from our pre-request script",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"",
											"    var merchantNames = Object.keys(pm.globals.get('merchants'));",
											"    var merchantCounts = Object.values(pm.globals.get('merchants'));",
											"    pm.expect(data.length).to.eq(merchantNames.length);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 2 attributes",
											"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(2);",
											"",
											"    var returnedNames = data.map(merchantData => merchantData.attributes.name);",
											"    var returnedCounts = data.map(merchantData => merchantData.attributes.count);",
											"",
											"    returnedNames.forEach((name,idx) => {",
											"        pm.expect(returnedNames[idx]).to.eq(merchantNames[idx]);",
											"        pm.expect(returnedCounts[idx]).to.eq(merchantCounts[idx]);",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, top one merchant by items sold', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(1);",
											"",
											"        var merchantNames = Object.keys(pm.globals.get('merchants'));",
											"        var merchantCounts = Object.values(pm.globals.get('merchants'));",
											"        var returnedNames = payload.data.map(merchantData => merchantData.attributes.name);",
											"        var returnedCounts = payload.data.map(merchantData => merchantData.attributes.count);",
											"",
											"        pm.expect(returnedNames[0]).to.eq(merchantNames[0])",
											"        pm.expect(returnedCounts[0]).to.eq(merchantCounts[0])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=1000000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, all 100 merchants if quantity is too big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(100);",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, returns an error of some sort if quantity value is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=asdasd', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, returns an error of some sort if quantity is a string', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, quantity param is missing', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/merchants/most_items?quantity=8",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"merchants",
										"most_items"
									],
									"query": [
										{
											"key": "quantity",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Revenue between Date Range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('start_date', '2012-03-09');",
											"pm.globals.set('end_date', '2012-03-24');",
											"",
											"pm.globals.set('revenue', 43201227.80);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch revenue between two dates\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"null\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"revenue\": { \"type\": \"number\"},",
											"                        },",
											"                        \"required\": [\"revenue\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 1 attribute",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(null);",
											"    pm.expect(data.type).to.eq('revenue');",
											"",
											"    var rounded_revenue = Math.round(data.attributes.revenue * 100) / 100 ;",
											"",
											"    pm.expect(rounded_revenue).to.eq(pm.globals.get('revenue'));",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=1970-01-01&end=2100-01-01', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, all revenue if date range is really big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        console.log('code', response.code)",
											"        pm.expect(response.code).to.eq(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.have.property('attributes');",
											"        pm.expect(payload.data.attributes).to.have.property('revenue');",
											"",
											"        var rounded_revenue = Math.round(payload.data.attributes.revenue * 100) / 100 ;",
											"        pm.expect(rounded_revenue).to.eq(57493574.87)",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, start date and end date are not provided', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=2012-03-01', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, start date is provided, but end date is not provided', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?end=2012-03-24', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, end date is provided, but start date is not provided', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=&end=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, start date and end date are both blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=2012-03-01&end=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, start date is set correctly, but end date is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=&end=2012-03-24', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, end date is set correctly, but start date is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue?start_date=2100-01-01&end_date=2000-01-01', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, end date is earlier than start_date', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.eq(400);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('error');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue?start={{start_date}}&end={{end_date}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue"
									],
									"query": [
										{
											"key": "start",
											"value": "{{start_date}}"
										},
										{
											"key": "end",
											"value": "{{end_date}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Revenue of a Single Merchant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('merchant_id', '42')",
											"pm.globals.set('revenue', 532613.98);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch revenue for merchant id\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"string\" },",
											"                    \"type\": { \"type\": \"string\" },",
											"                    \"attributes\": { ",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"revenue\": { \"type\": \"number\"},",
											"                        },",
											"                        \"required\": [\"revenue\"]",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"type\", \"attributes\"]",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"",
											"    // now check that the whole schema matches by name and data type",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    // expect data has exactly 3 attributes",
											"    pm.expect(Object.keys(data).length).to.eq(3);",
											"",
											"    // expect that our \"attributes\" portion has exactly 1 attribute",
											"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
											"",
											"    // expect our values to match",
											"    pm.expect(data.id).to.eq(pm.globals.get('merchant_id'));",
											"    pm.expect(data.type).to.eq('merchant_revenue');",
											"    var rounded_revenue = Math.round(data.attributes.revenue * 100) / 100 ;",
											"",
											"    pm.expect(rounded_revenue).to.eq(pm.globals.get('revenue'));",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants/8923987297', (error, response) => {",
											"    pm.test('sad path, bad integer id returns 404', () => {",
											"        pm.expect(response).to.have.property('code', 404);",
											"        pm.expect(response).to.have.property('status', 'Not Found');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue/merchants/{{merchant_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue",
										"merchants",
										"{{merchant_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Items with Most Revenue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('total_item_count', 2470); // with revenue",
											"",
											"pm.globals.set('items', [",
											"    {",
											"                \"name\": \"Item Dicta Autem\",",
											"                \"description\": \"Fugiat est ut eum impedit vel et. Deleniti quia debitis similique. Sint atque explicabo similique est. Iste fugit quis voluptas. Rerum ut harum sed fugiat eveniet ullam ut.\",",
											"                \"unit_price\": 853.19,",
											"                \"merchant_id\": 14,",
											"                \"revenue\": 6667679.85",
											"        },",
											"        {",
											"                \"name\": \"Item Nam Magnam\",",
											"                \"description\": \"Eligendi quibusdam eveniet temporibus sed ratione ut magnam. Sit alias et. Laborum dignissimos quos impedit excepturi molestiae.\",",
											"                \"unit_price\": 788.08,",
											"                \"merchant_id\": 89,",
											"                \"revenue\": 4161850.48",
											"        },",
											"        {",
											"                \"name\": \"Item Aut Vero\",",
											"                \"description\": \"Et molestiae commodi facilis maxime alias ut. Iusto possimus et earum et. Ipsum et iure laudantium eum est ratione et. Est iste soluta. Rerum iste quas.\",",
											"                \"unit_price\": 943.78,",
											"                \"merchant_id\": 51,",
											"                \"revenue\": 3019152.22",
											"        },",
											"        {",
											"                \"name\": \"Item Ut Voluptatem\",",
											"                \"description\": \"Sunt omnis explicabo labore corrupti dolores deleniti. Perferendis et doloribus fugit illum et doloremque hic. Consequuntur ex voluptatibus maxime dolorem perferendis veritatis ea.\",",
											"                \"unit_price\": 987.71,",
											"                \"merchant_id\": 82,",
											"                \"revenue\": 2470262.71",
											"        },",
											"        {",
											"                \"name\": \"Item Amet Accusamus\",",
											"                \"description\": \"Nam sit quam voluptas suscipit molestiae et. Modi aliquid praesentium eligendi sed quas nesciunt. Aperiam et saepe quaerat voluptate.\",",
											"                \"unit_price\": 96.38,",
											"                \"merchant_id\": 49,",
											"                \"revenue\": 1913143.00",
											"        },",
											"        {",
											"                \"name\": \"Item Delectus Saepe\",",
											"                \"description\": \"Pariatur voluptatum at qui. Quisquam illo aspernatur. Repellat provident nemo vero quis ut enim. Voluptates et sint laborum. Magnam ut deleniti aliquam.\",",
											"                \"unit_price\": 415.29,",
											"                \"merchant_id\": 89,",
											"                \"revenue\": 1889154.21",
											"        },",
											"        {",
											"                \"name\": \"Item Ipsam Ea\",",
											"                \"description\": \"Sed sit possimus iusto et dolore ut rerum. Aut asperiores assumenda dolores quasi. Eos sit voluptatem repudiandae et modi aspernatur.\",",
											"                \"unit_price\": 91.79,",
											"                \"merchant_id\": 61,",
											"                \"revenue\": 1753189.00",
											"        },",
											"        {",
											"                \"name\": \"Item Totam Distinctio\",",
											"                \"description\": \"Voluptatem voluptate deleniti esse voluptas sit ut. Quia asperiores velit pariatur expedita eligendi deserunt. Debitis dignissimos alias et vitae et suscipit. Culpa sit corrupti explicabo. Distinctio occaecati et itaque quos.\",",
											"                \"unit_price\": 537.42,",
											"                \"merchant_id\": 95,",
											"                \"revenue\": 1703083.98",
											"        },",
											"        {",
											"                \"name\": \"Item Ut Totam\",",
											"                \"description\": \"Occaecati aut reiciendis. Dicta et eaque est fugit animi veritatis. Aliquam repudiandae voluptatem in minima natus. Veniam consequatur ipsam ut.\",",
											"                \"unit_price\": 707.83,",
											"                \"merchant_id\": 38,",
											"                \"revenue\": 1652783.05",
											"        },",
											"        {",
											"                \"name\": \"Item Aut Dolore\",",
											"                \"description\": \"Asperiores aut quas. Consequatur ut aut dolorum quis dignissimos asperiores sed. Eius maiores ipsam enim et.\",",
											"                \"unit_price\": 991.88,",
											"                \"merchant_id\": 61,",
											"                \"revenue\": 1507657.60",
											"        }",
											"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch top 5 items by revenue\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const item_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": { \"type\": \"string\"},",
											"                    \"description\": { \"type\": \"string\"},",
											"                    \"unit_price\": { \"type\": \"number\"},",
											"                    \"merchant_id\": { \"type\": \"number\"},",
											"                    \"revenue\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\", \"revenue\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_item = data[0];",
											"",
											"    // now check that the whole schema matches and has 10 items",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(10);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_item).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 5 attributes",
											"    pm.expect(Object.keys(first_item.attributes).length).to.eq(5);",
											"",
											"    pm.expect(first_item.type).to.eq('item_revenue');",
											"",
											"    var items = pm.globals.get('items');",
											"    var itemNames = items.map(item => item.name);",
											"    var itemRevenues = items.map(item => item.revenue);",
											"    var returnedNames = data.map(itemData => itemData.attributes.name);",
											"    var roundedRevenues = data.map(itemData => Math.round(itemData.attributes.revenue*100)/100);",
											"    console.log(itemNames)",
											"    console.log(returnedNames)",
											"",
											"    returnedNames.forEach((name,idx) => {",
											"        pm.expect(returnedNames[idx]).to.eq(itemNames[idx]);",
											"        pm.expect(roundedRevenues[idx]).to.eq(itemRevenues[idx]);",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, top one merchant by revenue', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(1);",
											"",
											"        var items = pm.globals.get('items');",
											"        var itemsNames = items.map(item => item.name);",
											"        var itemsRevenues = items.map(item => item.revenue);",
											"        var returnedNames = payload.data.map(itemData => itemData.attributes.name);",
											"        var roundedRevenues = payload.data.map(itemData => Math.round(itemData.attributes.revenue*100)/100);",
											"",
											"        returnedNames.forEach((name,idx) => {",
											"            pm.expect(returnedNames[idx]).to.eq(itemsNames[idx]);",
											"            pm.expect(roundedRevenues[idx]).to.eq(itemsRevenues[idx]);",
											"        });",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=1000000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, all items if quantity is too big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(pm.globals.get('total_item_count'));",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=-5', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('sad path, returns an error of some sort if quantity value is less than 0', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, returns an error of some sort if quantity value is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=asdasd', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, returns an error of some sort if quantity is a string', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue/items",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Potential Revenue of Unshipped Orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('total_invoice_count', 1);",
											"",
											"pm.globals.set('revenue', 1504.08);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch top invoices which are not shipped\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const merchant_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"string\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"potential_revenue\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"potential_revenue\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_invoice = data[0];",
											"",
											"    // now check that the whole schema matches and has only 1 invoice in the data set",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(1);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_invoice).to.have.jsonSchema(merchant_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_invoice).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 1 attributes",
											"    pm.expect(Object.keys(first_invoice.attributes).length).to.eq(1);",
											"console.log(first_invoice)",
											"    pm.expect(first_invoice.attributes.potential_revenue).to.eq(pm.globals.get('revenue'))",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=1', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, top one invoice by potential revenue', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(1);",
											"        pm.expect(payload.data[0].attributes.potential_revenue).to.eq(pm.globals.get('revenue'))",
											"",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=1000000', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('happy path, all invoices if quantity is too big', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.response.to.have.status(200);",
											"        var payload = response.json();",
											"        pm.expect(payload).to.have.property('data');",
											"        pm.expect(payload.data).to.be.an('array');",
											"        pm.expect(payload.data.length).to.eq(1);",
											"    });",
											"});",
											"",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, returns an error of some sort if quantity value is blank', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											"",
											"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=asdasd', (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test('edge case sad path, returns an error of some sort if quantity is a string', () => {",
											"        pm.expect(error).to.equal(null);",
											"        pm.expect(response.code).to.be.oneOf([400,500])",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue/unshipped",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue",
										"unshipped"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revenue Report by Month is Ascending Date Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('total_item_count', 2483);",
											"",
											"pm.globals.set('weekly_data', [",
											"    {",
											"        \"week\": \"2012-03-05\",",
											"        \"revenue\": 14981117.17",
											"    },",
											"    {",
											"        \"week\": \"2012-03-12\",",
											"        \"revenue\": 18778641.38",
											"    },",
											"    {",
											"        \"week\": \"2012-03-19\",",
											"        \"revenue\": 19106531.88",
											"    },",
											"    {",
											"        \"week\": \"2012-03-26\",",
											"        \"revenue\": 4627284.44",
											"    }",
											"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"happy path, fetch monthly revenue\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.have.status(200);",
											"",
											"    const revenue_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"null\" },",
											"            \"type\": { \"type\": \"string\" },",
											"            \"attributes\": { ",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"week\": { \"type\": \"string\" },",
											"                    \"revenue\": { \"type\": \"number\"},",
											"                },",
											"                \"required\": [\"week\", \"revenue\"]",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"type\", \"attributes\"]",
											"    }",
											"",
											"    const base_schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"data\": {",
											"                \"type\": \"array\",",
											"            }",
											"        },",
											"        \"required\": ['data']",
											"    }",
											"",
											"    // expect a \"data\" attribute",
											"    pm.response.to.have.jsonBody('data');",
											"    var jsonData = pm.response.json();",
											"    var data = jsonData.data;",
											"    var first_week = data[0];",
											"",
											"    // now check that the whole schema matches and has 4 weeks of data",
											"    pm.response.to.have.jsonSchema(base_schema);",
											"    pm.expect(data.length).to.eq(4);",
											"",
											"    // now inspect the first item's schema to ensure it also matches",
											"    pm.expect(first_week).to.have.jsonSchema(revenue_schema);",
											"",
											"    // expect item data has exactly 3 attributes",
											"    pm.expect(Object.keys(first_week).length).to.eq(3);",
											"",
											"    // expect that our item \"attributes\" portion has exactly 2 attributes",
											"    pm.expect(Object.keys(first_week.attributes).length).to.eq(2);",
											"",
											"    var weeks = pm.globals.get('weekly_data');",
											"    var weekDates = weeks.map(week => week.week);",
											"    var weekRevenues = weeks.map(week => week.revenue);",
											"",
											"    var returnedWeeks = data.map(weekData => weekData.attributes.week);",
											"    var returnedRevenue = data.map(weekData => Math.round(weekData.attributes.revenue*100)/100);",
											"",
											"    returnedWeeks.forEach((name,idx) => {",
											"        pm.expect(returnedWeeks[idx]).to.eq(weekDates[idx]);",
											"        pm.expect(returnedRevenue[idx]).to.eq(weekRevenues[idx]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/revenue/weekly",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"revenue",
										"weekly"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}